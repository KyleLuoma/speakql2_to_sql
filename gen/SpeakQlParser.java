// Generated from C:/antlr_projects/speakql2\SpeakQlParser.g4 by ANTLR 4.9.2
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class SpeakQlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.9.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, RETRIEVE=5, 
		SHOW_ME=6, DISPLAY=7, PRESENT=8, FIND=9, IN_TABLE=10, FROM_TABLE=11, JOIN_TABLE=12, 
		BY_JOINING=13, BY_JOINING_TABLE=14, JOIN_WITH=15, JOIN_WITH_TABLE=16, 
		JOINED_WITH=17, JOINED_WITH_TABLE=18, ADD=19, ALL=20, ALTER=21, ALWAYS=22, 
		ANALYZE=23, AND=24, ARRAY=25, AS=26, ASC=27, BEFORE=28, BETWEEN=29, BOTH=30, 
		BUCKETS=31, BY=32, CALL=33, CASCADE=34, CASE=35, CAST=36, CHANGE=37, CHARACTER=38, 
		CHECK=39, COLLATE=40, COLUMN=41, CONDITION=42, CONSTRAINT=43, CONTINUE=44, 
		CONVERT=45, CREATE=46, CROSS=47, CURRENT=48, CURRENT_USER=49, CURSOR=50, 
		DATABASE=51, DATABASES=52, DECLARE=53, DEFAULT=54, DELAYED=55, DELETE=56, 
		DESC=57, DESCRIBE=58, DETERMINISTIC=59, DIAGNOSTICS=60, DISTINCT=61, DISTINCTROW=62, 
		DROP=63, EACH=64, ELSE=65, ELSEIF=66, EMPTY=67, ENCLOSED=68, ESCAPED=69, 
		EXCEPT=70, EXISTS=71, EXIT=72, EXPLAIN=73, FALSE=74, FETCH=75, FOR=76, 
		FORCE=77, FOREIGN=78, FROM=79, FULLTEXT=80, GENERATED=81, GET=82, GRANT=83, 
		GROUP=84, HAVING=85, HIGH_PRIORITY=86, HISTOGRAM=87, IF=88, IGNORE=89, 
		IN=90, INDEX=91, INFILE=92, INNER=93, INOUT=94, INSERT=95, INTERVAL=96, 
		INTO=97, IS=98, ITERATE=99, JOIN=100, KEY=101, KEYS=102, KILL=103, LEADING=104, 
		LEAVE=105, LEFT=106, LIKE=107, LIMIT=108, LINEAR=109, LINES=110, LOAD=111, 
		LOCK=112, LOOP=113, LOW_PRIORITY=114, MASTER_BIND=115, MASTER_SSL_VERIFY_SERVER_CERT=116, 
		MATCH=117, MAXVALUE=118, MODIFIES=119, NATURAL=120, NOT=121, NO_WRITE_TO_BINLOG=122, 
		NULL_LITERAL=123, NUMBER=124, ON=125, OPTIMIZE=126, OPTION=127, OPTIONALLY=128, 
		OR=129, ORDER=130, OUT=131, OVER=132, OUTER=133, OUTFILE=134, PARTITION=135, 
		PRIMARY=136, PROCEDURE=137, PURGE=138, RANGE=139, READ=140, READS=141, 
		REFERENCES=142, REGEXP=143, RELEASE=144, RENAME=145, REPEAT=146, REPLACE=147, 
		REQUIRE=148, RESIGNAL=149, RESTRICT=150, RETAIN=151, RETURN=152, REVOKE=153, 
		RIGHT=154, RLIKE=155, SCHEMA=156, SCHEMAS=157, SELECT=158, SET=159, SEPARATOR=160, 
		SHOW=161, SIGNAL=162, SPATIAL=163, SQL=164, SQLEXCEPTION=165, SQLSTATE=166, 
		SQLWARNING=167, SQL_BIG_RESULT=168, SQL_CALC_FOUND_ROWS=169, SQL_SMALL_RESULT=170, 
		SSL=171, STACKED=172, STARTING=173, STRAIGHT_JOIN=174, TABLE=175, TERMINATED=176, 
		THEN=177, TO=178, TRAILING=179, TRIGGER=180, TRUE=181, UNDO=182, UNION=183, 
		UNIQUE=184, UNLOCK=185, UNSIGNED=186, UPDATE=187, USAGE=188, USE=189, 
		USING=190, VALUES=191, WHEN=192, WHERE=193, WHILE=194, WITH=195, WRITE=196, 
		XOR=197, ZEROFILL=198, TINYINT=199, SMALLINT=200, MEDIUMINT=201, MIDDLEINT=202, 
		INT=203, INT1=204, INT2=205, INT3=206, INT4=207, INT8=208, INTEGER=209, 
		BIGINT=210, REAL=211, DOUBLE=212, PRECISION=213, FLOAT=214, FLOAT4=215, 
		FLOAT8=216, DECIMAL=217, DEC=218, NUMERIC=219, DATE=220, TIME=221, TIMESTAMP=222, 
		DATETIME=223, YEAR=224, CHAR=225, VARCHAR=226, NVARCHAR=227, NATIONAL=228, 
		BINARY=229, VARBINARY=230, TINYBLOB=231, BLOB=232, MEDIUMBLOB=233, LONG=234, 
		LONGBLOB=235, TINYTEXT=236, TEXT=237, MEDIUMTEXT=238, LONGTEXT=239, ENUM=240, 
		VARYING=241, SERIAL=242, YEAR_MONTH=243, DAY_HOUR=244, DAY_MINUTE=245, 
		DAY_SECOND=246, HOUR_MINUTE=247, HOUR_SECOND=248, MINUTE_SECOND=249, SECOND_MICROSECOND=250, 
		MINUTE_MICROSECOND=251, HOUR_MICROSECOND=252, DAY_MICROSECOND=253, JSON_ARRAY=254, 
		JSON_OBJECT=255, JSON_QUOTE=256, JSON_CONTAINS=257, JSON_CONTAINS_PATH=258, 
		JSON_EXTRACT=259, JSON_KEYS=260, JSON_OVERLAPS=261, JSON_SEARCH=262, JSON_VALUE=263, 
		JSON_ARRAY_APPEND=264, JSON_ARRAY_INSERT=265, JSON_INSERT=266, JSON_MERGE=267, 
		JSON_MERGE_PATCH=268, JSON_MERGE_PRESERVE=269, JSON_REMOVE=270, JSON_REPLACE=271, 
		JSON_SET=272, JSON_UNQUOTE=273, JSON_DEPTH=274, JSON_LENGTH=275, JSON_TYPE=276, 
		JSON_VALID=277, JSON_TABLE=278, JSON_SCHEMA_VALID=279, JSON_SCHEMA_VALIDATION_REPORT=280, 
		JSON_PRETTY=281, JSON_STORAGE_FREE=282, JSON_STORAGE_SIZE=283, JSON_ARRAYAGG=284, 
		JSON_OBJECTAGG=285, AVG=286, BIT_AND=287, BIT_OR=288, BIT_XOR=289, COUNT=290, 
		CUME_DIST=291, DENSE_RANK=292, FIRST_VALUE=293, GROUP_CONCAT=294, LAG=295, 
		LAST_VALUE=296, LEAD=297, MAX=298, MIN=299, NTILE=300, NTH_VALUE=301, 
		PERCENT_RANK=302, RANK=303, ROW_NUMBER=304, STD=305, STDDEV=306, STDDEV_POP=307, 
		STDDEV_SAMP=308, SUM=309, VAR_POP=310, VAR_SAMP=311, VARIANCE=312, CURRENT_DATE=313, 
		CURRENT_TIME=314, CURRENT_TIMESTAMP=315, LOCALTIME=316, CURDATE=317, CURTIME=318, 
		DATE_ADD=319, DATE_SUB=320, EXTRACT=321, LOCALTIMESTAMP=322, NOW=323, 
		POSITION=324, SUBSTR=325, SUBSTRING=326, SYSDATE=327, TRIM=328, UTC_DATE=329, 
		UTC_TIME=330, UTC_TIMESTAMP=331, ACCOUNT=332, ACTION=333, AFTER=334, AGGREGATE=335, 
		ALGORITHM=336, ANY=337, AT=338, AUTHORS=339, AUTOCOMMIT=340, AUTOEXTEND_SIZE=341, 
		AUTO_INCREMENT=342, AVG_ROW_LENGTH=343, BEGIN=344, BINLOG=345, BIT=346, 
		BLOCK=347, BOOL=348, BOOLEAN=349, BTREE=350, CACHE=351, CASCADED=352, 
		CHAIN=353, CHANGED=354, CHANNEL=355, CHECKSUM=356, PAGE_CHECKSUM=357, 
		CIPHER=358, CLASS_ORIGIN=359, CLIENT=360, CLOSE=361, COALESCE=362, CODE=363, 
		COLUMNS=364, COLUMN_FORMAT=365, COLUMN_NAME=366, COMMENT=367, COMMIT=368, 
		COMPACT=369, COMPLETION=370, COMPRESSED=371, COMPRESSION=372, CONCURRENT=373, 
		CONNECT=374, CONNECTION=375, CONSISTENT=376, CONSTRAINT_CATALOG=377, CONSTRAINT_SCHEMA=378, 
		CONSTRAINT_NAME=379, CONTAINS=380, CONTEXT=381, CONTRIBUTORS=382, COPY=383, 
		CPU=384, CURSOR_NAME=385, DATA=386, DATAFILE=387, DEALLOCATE=388, DEFAULT_AUTH=389, 
		DEFINER=390, DELAY_KEY_WRITE=391, DES_KEY_FILE=392, DIRECTORY=393, DISABLE=394, 
		DISCARD=395, DISK=396, DO=397, DUMPFILE=398, DUPLICATE=399, DYNAMIC=400, 
		ENABLE=401, ENCRYPTION=402, END=403, ENDS=404, ENGINE=405, ENGINES=406, 
		ERROR=407, ERRORS=408, ESCAPE=409, EVEN=410, EVENT=411, EVENTS=412, EVERY=413, 
		EXCHANGE=414, EXCLUSIVE=415, EXPIRE=416, EXPORT=417, EXTENDED=418, EXTENT_SIZE=419, 
		FAST=420, FAULTS=421, FIELDS=422, FILE_BLOCK_SIZE=423, FILTER=424, FIRST=425, 
		FIXED=426, FLUSH=427, FOLLOWING=428, FOLLOWS=429, FOUND=430, FULL=431, 
		FUNCTION=432, GENERAL=433, GLOBAL=434, GRANTS=435, GROUP_REPLICATION=436, 
		HANDLER=437, HASH=438, HELP=439, HOST=440, HOSTS=441, IDENTIFIED=442, 
		IGNORE_SERVER_IDS=443, IMPORT=444, INDEXES=445, INITIAL_SIZE=446, INPLACE=447, 
		INSERT_METHOD=448, INSTALL=449, INSTANCE=450, INVISIBLE=451, INVOKER=452, 
		IO=453, IO_THREAD=454, IPC=455, ISOLATION=456, ISSUER=457, JSON=458, KEY_BLOCK_SIZE=459, 
		LANGUAGE=460, LAST=461, LEAVES=462, LESS=463, LEVEL=464, LIST=465, LOCAL=466, 
		LOGFILE=467, LOGS=468, MASTER=469, MASTER_AUTO_POSITION=470, MASTER_CONNECT_RETRY=471, 
		MASTER_DELAY=472, MASTER_HEARTBEAT_PERIOD=473, MASTER_HOST=474, MASTER_LOG_FILE=475, 
		MASTER_LOG_POS=476, MASTER_PASSWORD=477, MASTER_PORT=478, MASTER_RETRY_COUNT=479, 
		MASTER_SSL=480, MASTER_SSL_CA=481, MASTER_SSL_CAPATH=482, MASTER_SSL_CERT=483, 
		MASTER_SSL_CIPHER=484, MASTER_SSL_CRL=485, MASTER_SSL_CRLPATH=486, MASTER_SSL_KEY=487, 
		MASTER_TLS_VERSION=488, MASTER_USER=489, MAX_CONNECTIONS_PER_HOUR=490, 
		MAX_QUERIES_PER_HOUR=491, MAX_ROWS=492, MAX_SIZE=493, MAX_UPDATES_PER_HOUR=494, 
		MAX_USER_CONNECTIONS=495, MEDIUM=496, MEMBER=497, MERGE=498, MESSAGE_TEXT=499, 
		MID=500, MIGRATE=501, MIN_ROWS=502, MODE=503, MODIFY=504, MUTEX=505, MYSQL=506, 
		MYSQL_ERRNO=507, NAME=508, NAMES=509, NCHAR=510, NEVER=511, NEXT=512, 
		NO=513, NODEGROUP=514, NONE=515, ODBC=516, OFFLINE=517, OFFSET=518, OF=519, 
		OJ=520, OLD_PASSWORD=521, ONE=522, ONLINE=523, ONLY=524, OPEN=525, OPTIMIZER_COSTS=526, 
		OPTIONS=527, OWNER=528, PACK_KEYS=529, PAGE=530, PARSER=531, PARTIAL=532, 
		PARTITIONING=533, PARTITIONS=534, PASSWORD=535, PHASE=536, PLUGIN=537, 
		PLUGIN_DIR=538, PLUGINS=539, PORT=540, PRECEDES=541, PRECEDING=542, PREPARE=543, 
		PRESERVE=544, PREV=545, PROCESSLIST=546, PROFILE=547, PROFILES=548, PROXY=549, 
		QUERY=550, QUICK=551, REBUILD=552, RECOVER=553, REDO_BUFFER_SIZE=554, 
		REDUNDANT=555, RELAY=556, RELAY_LOG_FILE=557, RELAY_LOG_POS=558, RELAYLOG=559, 
		REMOVE=560, REORGANIZE=561, REPAIR=562, REPLICATE_DO_DB=563, REPLICATE_DO_TABLE=564, 
		REPLICATE_IGNORE_DB=565, REPLICATE_IGNORE_TABLE=566, REPLICATE_REWRITE_DB=567, 
		REPLICATE_WILD_DO_TABLE=568, REPLICATE_WILD_IGNORE_TABLE=569, REPLICATION=570, 
		RESET=571, RESUME=572, RETURNED_SQLSTATE=573, RETURNING=574, RETURNS=575, 
		ROLE=576, ROLLBACK=577, ROLLUP=578, ROTATE=579, ROW=580, ROWS=581, ROW_FORMAT=582, 
		SAVEPOINT=583, SCHEDULE=584, SECURITY=585, SERVER=586, SESSION=587, SHARE=588, 
		SHARED=589, SIGNED=590, SIMPLE=591, SLAVE=592, SLOW=593, SNAPSHOT=594, 
		SOCKET=595, SOME=596, SONAME=597, SOUNDS=598, SOURCE=599, SQL_AFTER_GTIDS=600, 
		SQL_AFTER_MTS_GAPS=601, SQL_BEFORE_GTIDS=602, SQL_BUFFER_RESULT=603, SQL_CACHE=604, 
		SQL_NO_CACHE=605, SQL_THREAD=606, START=607, STARTS=608, STATS_AUTO_RECALC=609, 
		STATS_PERSISTENT=610, STATS_SAMPLE_PAGES=611, STATUS=612, STOP=613, STORAGE=614, 
		STORED=615, STRING=616, SUBCLASS_ORIGIN=617, SUBJECT=618, SUBPARTITION=619, 
		SUBPARTITIONS=620, SUSPEND=621, SWAPS=622, SWITCHES=623, TABLE_NAME=624, 
		TABLESPACE=625, TABLE_TYPE=626, TEMPORARY=627, TEMPTABLE=628, THAN=629, 
		TRADITIONAL=630, TRANSACTION=631, TRANSACTIONAL=632, TRIGGERS=633, TRUNCATE=634, 
		UNBOUNDED=635, UNDEFINED=636, UNDOFILE=637, UNDO_BUFFER_SIZE=638, UNINSTALL=639, 
		UNKNOWN=640, UNTIL=641, UPGRADE=642, USER=643, USE_FRM=644, USER_RESOURCES=645, 
		VALIDATION=646, VALUE=647, VARIABLES=648, VIEW=649, VIRTUAL=650, VISIBLE=651, 
		WAIT=652, WARNINGS=653, WINDOW=654, WITHOUT=655, WORK=656, WRAPPER=657, 
		X509=658, XA=659, XML=660, EUR=661, USA=662, JIS=663, ISO=664, INTERNAL=665, 
		QUARTER=666, MONTH=667, DAY=668, HOUR=669, MINUTE=670, WEEK=671, SECOND=672, 
		MICROSECOND=673, TABLES=674, ROUTINE=675, EXECUTE=676, FILE=677, PROCESS=678, 
		RELOAD=679, SHUTDOWN=680, SUPER=681, PRIVILEGES=682, APPLICATION_PASSWORD_ADMIN=683, 
		AUDIT_ADMIN=684, BACKUP_ADMIN=685, BINLOG_ADMIN=686, BINLOG_ENCRYPTION_ADMIN=687, 
		CLONE_ADMIN=688, CONNECTION_ADMIN=689, ENCRYPTION_KEY_ADMIN=690, FIREWALL_ADMIN=691, 
		FIREWALL_USER=692, FLUSH_OPTIMIZER_COSTS=693, FLUSH_STATUS=694, FLUSH_TABLES=695, 
		FLUSH_USER_RESOURCES=696, GROUP_REPLICATION_ADMIN=697, INNODB_REDO_LOG_ARCHIVE=698, 
		INNODB_REDO_LOG_ENABLE=699, NDB_STORED_USER=700, PERSIST_RO_VARIABLES_ADMIN=701, 
		REPLICATION_APPLIER=702, REPLICATION_SLAVE_ADMIN=703, RESOURCE_GROUP_ADMIN=704, 
		RESOURCE_GROUP_USER=705, ROLE_ADMIN=706, SERVICE_CONNECTION_ADMIN=707, 
		SESSION_VARIABLES_ADMIN=708, SET_USER_ID=709, SHOW_ROUTINE=710, SYSTEM_VARIABLES_ADMIN=711, 
		TABLE_ENCRYPTION_ADMIN=712, VERSION_TOKEN_ADMIN=713, XA_RECOVER_ADMIN=714, 
		ARMSCII8=715, ASCII=716, BIG5=717, CP1250=718, CP1251=719, CP1256=720, 
		CP1257=721, CP850=722, CP852=723, CP866=724, CP932=725, DEC8=726, EUCJPMS=727, 
		EUCKR=728, GB18030=729, GB2312=730, GBK=731, GEOSTD8=732, GREEK=733, HEBREW=734, 
		HP8=735, KEYBCS2=736, KOI8R=737, KOI8U=738, LATIN1=739, LATIN2=740, LATIN5=741, 
		LATIN7=742, MACCE=743, MACROMAN=744, SJIS=745, SWE7=746, TIS620=747, UCS2=748, 
		UJIS=749, UTF16=750, UTF16LE=751, UTF32=752, UTF8=753, UTF8MB3=754, UTF8MB4=755, 
		ARCHIVE=756, BLACKHOLE=757, CSV=758, FEDERATED=759, INNODB=760, MEMORY=761, 
		MRG_MYISAM=762, MYISAM=763, NDB=764, NDBCLUSTER=765, PERFORMANCE_SCHEMA=766, 
		TOKUDB=767, REPEATABLE=768, COMMITTED=769, UNCOMMITTED=770, SERIALIZABLE=771, 
		GEOMETRYCOLLECTION=772, GEOMCOLLECTION=773, GEOMETRY=774, LINESTRING=775, 
		MULTILINESTRING=776, MULTIPOINT=777, MULTIPOLYGON=778, POINT=779, POLYGON=780, 
		ABS=781, ACOS=782, ADDDATE=783, ADDTIME=784, AES_DECRYPT=785, AES_ENCRYPT=786, 
		AREA=787, ASBINARY=788, ASIN=789, ASTEXT=790, ASWKB=791, ASWKT=792, ASYMMETRIC_DECRYPT=793, 
		ASYMMETRIC_DERIVE=794, ASYMMETRIC_ENCRYPT=795, ASYMMETRIC_SIGN=796, ASYMMETRIC_VERIFY=797, 
		ATAN=798, ATAN2=799, BENCHMARK=800, BIN=801, BIT_COUNT=802, BIT_LENGTH=803, 
		BUFFER=804, CATALOG_NAME=805, CEIL=806, CEILING=807, CENTROID=808, CHARACTER_LENGTH=809, 
		CHARSET=810, CHAR_LENGTH=811, COERCIBILITY=812, COLLATION=813, COMPRESS=814, 
		CONCAT=815, CONCAT_WS=816, CONNECTION_ID=817, CONV=818, CONVERT_TZ=819, 
		COS=820, COT=821, CRC32=822, CREATE_ASYMMETRIC_PRIV_KEY=823, CREATE_ASYMMETRIC_PUB_KEY=824, 
		CREATE_DH_PARAMETERS=825, CREATE_DIGEST=826, CROSSES=827, DATEDIFF=828, 
		DATE_FORMAT=829, DAYNAME=830, DAYOFMONTH=831, DAYOFWEEK=832, DAYOFYEAR=833, 
		DECODE=834, DEGREES=835, DES_DECRYPT=836, DES_ENCRYPT=837, DIMENSION=838, 
		DISJOINT=839, ELT=840, ENCODE=841, ENCRYPT=842, ENDPOINT=843, ENVELOPE=844, 
		EQUALS=845, EXP=846, EXPORT_SET=847, EXTERIORRING=848, EXTRACTVALUE=849, 
		FIELD=850, FIND_IN_SET=851, FLOOR=852, FORMAT=853, FOUND_ROWS=854, FROM_BASE64=855, 
		FROM_DAYS=856, FROM_UNIXTIME=857, GEOMCOLLFROMTEXT=858, GEOMCOLLFROMWKB=859, 
		GEOMETRYCOLLECTIONFROMTEXT=860, GEOMETRYCOLLECTIONFROMWKB=861, GEOMETRYFROMTEXT=862, 
		GEOMETRYFROMWKB=863, GEOMETRYN=864, GEOMETRYTYPE=865, GEOMFROMTEXT=866, 
		GEOMFROMWKB=867, GET_FORMAT=868, GET_LOCK=869, GLENGTH=870, GREATEST=871, 
		GTID_SUBSET=872, GTID_SUBTRACT=873, HEX=874, IFNULL=875, INET6_ATON=876, 
		INET6_NTOA=877, INET_ATON=878, INET_NTOA=879, INSTR=880, INTERIORRINGN=881, 
		INTERSECTS=882, ISCLOSED=883, ISEMPTY=884, ISNULL=885, ISSIMPLE=886, IS_FREE_LOCK=887, 
		IS_IPV4=888, IS_IPV4_COMPAT=889, IS_IPV4_MAPPED=890, IS_IPV6=891, IS_USED_LOCK=892, 
		LAST_INSERT_ID=893, LCASE=894, LEAST=895, LENGTH=896, LINEFROMTEXT=897, 
		LINEFROMWKB=898, LINESTRINGFROMTEXT=899, LINESTRINGFROMWKB=900, LN=901, 
		LOAD_FILE=902, LOCATE=903, LOG=904, LOG10=905, LOG2=906, LOWER=907, LPAD=908, 
		LTRIM=909, MAKEDATE=910, MAKETIME=911, MAKE_SET=912, MASTER_POS_WAIT=913, 
		MBRCONTAINS=914, MBRDISJOINT=915, MBREQUAL=916, MBRINTERSECTS=917, MBROVERLAPS=918, 
		MBRTOUCHES=919, MBRWITHIN=920, MD5=921, MLINEFROMTEXT=922, MLINEFROMWKB=923, 
		MONTHNAME=924, MPOINTFROMTEXT=925, MPOINTFROMWKB=926, MPOLYFROMTEXT=927, 
		MPOLYFROMWKB=928, MULTILINESTRINGFROMTEXT=929, MULTILINESTRINGFROMWKB=930, 
		MULTIPOINTFROMTEXT=931, MULTIPOINTFROMWKB=932, MULTIPOLYGONFROMTEXT=933, 
		MULTIPOLYGONFROMWKB=934, NAME_CONST=935, NULLIF=936, NUMGEOMETRIES=937, 
		NUMINTERIORRINGS=938, NUMPOINTS=939, OCT=940, OCTET_LENGTH=941, ORD=942, 
		OVERLAPS=943, PERIOD_ADD=944, PERIOD_DIFF=945, PI=946, POINTFROMTEXT=947, 
		POINTFROMWKB=948, POINTN=949, POLYFROMTEXT=950, POLYFROMWKB=951, POLYGONFROMTEXT=952, 
		POLYGONFROMWKB=953, POW=954, POWER=955, QUOTE=956, RADIANS=957, RAND=958, 
		RANDOM_BYTES=959, RELEASE_LOCK=960, REVERSE=961, ROUND=962, ROW_COUNT=963, 
		RPAD=964, RTRIM=965, SEC_TO_TIME=966, SESSION_USER=967, SHA=968, SHA1=969, 
		SHA2=970, SCHEMA_NAME=971, SIGN=972, SIN=973, SLEEP=974, SOUNDEX=975, 
		SQL_THREAD_WAIT_AFTER_GTIDS=976, SQRT=977, SRID=978, STARTPOINT=979, STRCMP=980, 
		STR_TO_DATE=981, ST_AREA=982, ST_ASBINARY=983, ST_ASTEXT=984, ST_ASWKB=985, 
		ST_ASWKT=986, ST_BUFFER=987, ST_CENTROID=988, ST_CONTAINS=989, ST_CROSSES=990, 
		ST_DIFFERENCE=991, ST_DIMENSION=992, ST_DISJOINT=993, ST_DISTANCE=994, 
		ST_ENDPOINT=995, ST_ENVELOPE=996, ST_EQUALS=997, ST_EXTERIORRING=998, 
		ST_GEOMCOLLFROMTEXT=999, ST_GEOMCOLLFROMTXT=1000, ST_GEOMCOLLFROMWKB=1001, 
		ST_GEOMETRYCOLLECTIONFROMTEXT=1002, ST_GEOMETRYCOLLECTIONFROMWKB=1003, 
		ST_GEOMETRYFROMTEXT=1004, ST_GEOMETRYFROMWKB=1005, ST_GEOMETRYN=1006, 
		ST_GEOMETRYTYPE=1007, ST_GEOMFROMTEXT=1008, ST_GEOMFROMWKB=1009, ST_INTERIORRINGN=1010, 
		ST_INTERSECTION=1011, ST_INTERSECTS=1012, ST_ISCLOSED=1013, ST_ISEMPTY=1014, 
		ST_ISSIMPLE=1015, ST_LINEFROMTEXT=1016, ST_LINEFROMWKB=1017, ST_LINESTRINGFROMTEXT=1018, 
		ST_LINESTRINGFROMWKB=1019, ST_NUMGEOMETRIES=1020, ST_NUMINTERIORRING=1021, 
		ST_NUMINTERIORRINGS=1022, ST_NUMPOINTS=1023, ST_OVERLAPS=1024, ST_POINTFROMTEXT=1025, 
		ST_POINTFROMWKB=1026, ST_POINTN=1027, ST_POLYFROMTEXT=1028, ST_POLYFROMWKB=1029, 
		ST_POLYGONFROMTEXT=1030, ST_POLYGONFROMWKB=1031, ST_SRID=1032, ST_STARTPOINT=1033, 
		ST_SYMDIFFERENCE=1034, ST_TOUCHES=1035, ST_UNION=1036, ST_WITHIN=1037, 
		ST_X=1038, ST_Y=1039, SUBDATE=1040, SUBSTRING_INDEX=1041, SUBTIME=1042, 
		SYSTEM_USER=1043, TAN=1044, TIMEDIFF=1045, TIMESTAMPADD=1046, TIMESTAMPDIFF=1047, 
		TIME_FORMAT=1048, TIME_TO_SEC=1049, TOUCHES=1050, TO_BASE64=1051, TO_DAYS=1052, 
		TO_SECONDS=1053, UCASE=1054, UNCOMPRESS=1055, UNCOMPRESSED_LENGTH=1056, 
		UNHEX=1057, UNIX_TIMESTAMP=1058, UPDATEXML=1059, UPPER=1060, UUID=1061, 
		UUID_SHORT=1062, VALIDATE_PASSWORD_STRENGTH=1063, VERSION=1064, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1065, 
		WEEKDAY=1066, WEEKOFYEAR=1067, WEIGHT_STRING=1068, WITHIN=1069, YEARWEEK=1070, 
		Y_FUNCTION=1071, X_FUNCTION=1072, VAR_ASSIGN=1073, PLUS_ASSIGN=1074, MINUS_ASSIGN=1075, 
		MULT_ASSIGN=1076, DIV_ASSIGN=1077, MOD_ASSIGN=1078, AND_ASSIGN=1079, XOR_ASSIGN=1080, 
		OR_ASSIGN=1081, STAR=1082, DIVIDE=1083, MODULE=1084, PLUS=1085, MINUS=1086, 
		DIV=1087, MOD=1088, EQUAL_SYMBOL=1089, GREATER_SYMBOL=1090, LESS_SYMBOL=1091, 
		EXCLAMATION_SYMBOL=1092, BIT_NOT_OP=1093, BIT_OR_OP=1094, BIT_AND_OP=1095, 
		BIT_XOR_OP=1096, DOT=1097, LR_BRACKET=1098, RR_BRACKET=1099, COMMA=1100, 
		SEMI=1101, AT_SIGN=1102, ZERO_DECIMAL=1103, ONE_DECIMAL=1104, TWO_DECIMAL=1105, 
		SINGLE_QUOTE_SYMB=1106, DOUBLE_QUOTE_SYMB=1107, REVERSE_QUOTE_SYMB=1108, 
		COLON_SYMB=1109, CHARSET_REVERSE_QOUTE_STRING=1110, FILESIZE_LITERAL=1111, 
		START_NATIONAL_STRING_LITERAL=1112, STRING_LITERAL=1113, DECIMAL_LITERAL=1114, 
		HEXADECIMAL_LITERAL=1115, REAL_LITERAL=1116, NULL_SPEC_LITERAL=1117, BIT_STRING=1118, 
		STRING_CHARSET_NAME=1119, DOT_ID=1120, ID=1121, REVERSE_QUOTE_ID=1122, 
		STRING_USER_NAME=1123, IP_ADDRESS=1124, LOCAL_ID=1125, GLOBAL_ID=1126, 
		ERROR_RECONGNIGION=1127, ADMIN=1128, OPTIONAL=1129;
	public static final int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement = 3, 
		RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_transactionStatement = 6, 
		RULE_replicationStatement = 7, RULE_preparedStatement = 8, RULE_compoundStatement = 9, 
		RULE_administrationStatement = 10, RULE_utilityStatement = 11, RULE_createDatabase = 12, 
		RULE_createEvent = 13, RULE_createIndex = 14, RULE_createLogfileGroup = 15, 
		RULE_createProcedure = 16, RULE_createFunction = 17, RULE_createServer = 18, 
		RULE_createTable = 19, RULE_createTablespaceInnodb = 20, RULE_createTablespaceNdb = 21, 
		RULE_createTrigger = 22, RULE_createView = 23, RULE_createDatabaseOption = 24, 
		RULE_ownerStatement = 25, RULE_scheduleExpression = 26, RULE_timestampValue = 27, 
		RULE_intervalExpr = 28, RULE_intervalType = 29, RULE_enableType = 30, 
		RULE_indexType = 31, RULE_indexOption = 32, RULE_procedureParameter = 33, 
		RULE_functionParameter = 34, RULE_routineOption = 35, RULE_serverOption = 36, 
		RULE_createDefinitions = 37, RULE_createDefinition = 38, RULE_columnDefinition = 39, 
		RULE_columnConstraint = 40, RULE_tableConstraint = 41, RULE_referenceDefinition = 42, 
		RULE_referenceAction = 43, RULE_referenceControlType = 44, RULE_indexColumnDefinition = 45, 
		RULE_tableOption = 46, RULE_tableType = 47, RULE_tablespaceStorage = 48, 
		RULE_partitionDefinitions = 49, RULE_partitionFunctionDefinition = 50, 
		RULE_subpartitionFunctionDefinition = 51, RULE_partitionDefinition = 52, 
		RULE_partitionDefinerAtom = 53, RULE_partitionDefinerVector = 54, RULE_subpartitionDefinition = 55, 
		RULE_partitionOption = 56, RULE_alterDatabase = 57, RULE_alterEvent = 58, 
		RULE_alterFunction = 59, RULE_alterInstance = 60, RULE_alterLogfileGroup = 61, 
		RULE_alterProcedure = 62, RULE_alterServer = 63, RULE_alterTable = 64, 
		RULE_alterTablespace = 65, RULE_alterView = 66, RULE_alterSpecification = 67, 
		RULE_dropDatabase = 68, RULE_dropEvent = 69, RULE_dropIndex = 70, RULE_dropLogfileGroup = 71, 
		RULE_dropProcedure = 72, RULE_dropFunction = 73, RULE_dropServer = 74, 
		RULE_dropTable = 75, RULE_dropTablespace = 76, RULE_dropTrigger = 77, 
		RULE_dropView = 78, RULE_renameTable = 79, RULE_renameTableClause = 80, 
		RULE_truncateTable = 81, RULE_callStatement = 82, RULE_deleteStatement = 83, 
		RULE_doStatement = 84, RULE_handlerStatement = 85, RULE_insertStatement = 86, 
		RULE_loadDataStatement = 87, RULE_loadXmlStatement = 88, RULE_replaceStatement = 89, 
		RULE_selectStatement = 90, RULE_updateStatement = 91, RULE_insertStatementValue = 92, 
		RULE_updatedElement = 93, RULE_assignmentField = 94, RULE_lockClause = 95, 
		RULE_singleDeleteStatement = 96, RULE_multipleDeleteStatement = 97, RULE_handlerOpenStatement = 98, 
		RULE_handlerReadIndexStatement = 99, RULE_handlerReadStatement = 100, 
		RULE_handlerCloseStatement = 101, RULE_singleUpdateStatement = 102, RULE_multipleUpdateStatement = 103, 
		RULE_orderByClause = 104, RULE_orderByExpression = 105, RULE_tableSources = 106, 
		RULE_tableSource = 107, RULE_tableSourceItem = 108, RULE_indexHint = 109, 
		RULE_indexHintType = 110, RULE_joinPart = 111, RULE_joinKeyword = 112, 
		RULE_queryExpression = 113, RULE_queryExpressionNointo = 114, RULE_querySpecification = 115, 
		RULE_selectModifierExpression = 116, RULE_selectExpression = 117, RULE_tableExpression = 118, 
		RULE_selectClause = 119, RULE_selectKeyword = 120, RULE_querySpecificationNointo = 121, 
		RULE_unionParenthesis = 122, RULE_unionStatement = 123, RULE_selectSpec = 124, 
		RULE_selectElements = 125, RULE_selectElementDelimiter = 126, RULE_selectElement = 127, 
		RULE_selectIntoExpression = 128, RULE_selectFieldsInto = 129, RULE_selectLinesInto = 130, 
		RULE_fromClause = 131, RULE_fromKeyword = 132, RULE_groupByClause = 133, 
		RULE_havingClause = 134, RULE_windowClause = 135, RULE_groupByItem = 136, 
		RULE_limitClause = 137, RULE_limitClauseAtom = 138, RULE_startTransaction = 139, 
		RULE_beginWork = 140, RULE_commitWork = 141, RULE_rollbackWork = 142, 
		RULE_savepointStatement = 143, RULE_rollbackStatement = 144, RULE_releaseStatement = 145, 
		RULE_lockTables = 146, RULE_unlockTables = 147, RULE_setAutocommitStatement = 148, 
		RULE_setTransactionStatement = 149, RULE_transactionMode = 150, RULE_lockTableElement = 151, 
		RULE_lockAction = 152, RULE_transactionOption = 153, RULE_transactionLevel = 154, 
		RULE_changeMaster = 155, RULE_changeReplicationFilter = 156, RULE_purgeBinaryLogs = 157, 
		RULE_resetMaster = 158, RULE_resetSlave = 159, RULE_startSlave = 160, 
		RULE_stopSlave = 161, RULE_startGroupReplication = 162, RULE_stopGroupReplication = 163, 
		RULE_masterOption = 164, RULE_stringMasterOption = 165, RULE_decimalMasterOption = 166, 
		RULE_boolMasterOption = 167, RULE_channelOption = 168, RULE_replicationFilter = 169, 
		RULE_tablePair = 170, RULE_threadType = 171, RULE_untilOption = 172, RULE_connectionOption = 173, 
		RULE_gtuidSet = 174, RULE_xaStartTransaction = 175, RULE_xaEndTransaction = 176, 
		RULE_xaPrepareStatement = 177, RULE_xaCommitWork = 178, RULE_xaRollbackWork = 179, 
		RULE_xaRecoverWork = 180, RULE_prepareStatement = 181, RULE_executeStatement = 182, 
		RULE_deallocatePrepare = 183, RULE_routineBody = 184, RULE_blockStatement = 185, 
		RULE_caseStatement = 186, RULE_ifStatement = 187, RULE_iterateStatement = 188, 
		RULE_leaveStatement = 189, RULE_loopStatement = 190, RULE_repeatStatement = 191, 
		RULE_returnStatement = 192, RULE_whileStatement = 193, RULE_cursorStatement = 194, 
		RULE_declareVariable = 195, RULE_declareCondition = 196, RULE_declareCursor = 197, 
		RULE_declareHandler = 198, RULE_handlerConditionValue = 199, RULE_procedureSqlStatement = 200, 
		RULE_caseAlternative = 201, RULE_elifAlternative = 202, RULE_alterUser = 203, 
		RULE_createUser = 204, RULE_dropUser = 205, RULE_grantStatement = 206, 
		RULE_roleOption = 207, RULE_grantProxy = 208, RULE_renameUser = 209, RULE_revokeStatement = 210, 
		RULE_revokeProxy = 211, RULE_setPasswordStatement = 212, RULE_userSpecification = 213, 
		RULE_userAuthOption = 214, RULE_tlsOption = 215, RULE_userResourceOption = 216, 
		RULE_userPasswordOption = 217, RULE_userLockOption = 218, RULE_privelegeClause = 219, 
		RULE_privilege = 220, RULE_privilegeLevel = 221, RULE_renameUserClause = 222, 
		RULE_analyzeTable = 223, RULE_checkTable = 224, RULE_checksumTable = 225, 
		RULE_optimizeTable = 226, RULE_repairTable = 227, RULE_checkTableOption = 228, 
		RULE_createUdfunction = 229, RULE_installPlugin = 230, RULE_uninstallPlugin = 231, 
		RULE_setStatement = 232, RULE_showStatement = 233, RULE_variableClause = 234, 
		RULE_showCommonEntity = 235, RULE_showFilter = 236, RULE_showGlobalInfoClause = 237, 
		RULE_showSchemaEntity = 238, RULE_showProfileType = 239, RULE_binlogStatement = 240, 
		RULE_cacheIndexStatement = 241, RULE_flushStatement = 242, RULE_killStatement = 243, 
		RULE_loadIndexIntoCache = 244, RULE_resetStatement = 245, RULE_shutdownStatement = 246, 
		RULE_tableIndexes = 247, RULE_flushOption = 248, RULE_flushTableOption = 249, 
		RULE_loadedTableIndexes = 250, RULE_simpleDescribeStatement = 251, RULE_fullDescribeStatement = 252, 
		RULE_helpStatement = 253, RULE_useStatement = 254, RULE_signalStatement = 255, 
		RULE_resignalStatement = 256, RULE_signalConditionInformation = 257, RULE_diagnosticsStatement = 258, 
		RULE_diagnosticsConditionInformationName = 259, RULE_describeObjectClause = 260, 
		RULE_fullId = 261, RULE_tableName = 262, RULE_fullColumnName = 263, RULE_indexColumnName = 264, 
		RULE_userName = 265, RULE_mysqlVariable = 266, RULE_charsetName = 267, 
		RULE_collationName = 268, RULE_engineName = 269, RULE_uuidSet = 270, RULE_xid = 271, 
		RULE_xuidStringId = 272, RULE_authPlugin = 273, RULE_uid = 274, RULE_simpleId = 275, 
		RULE_dottedId = 276, RULE_decimalLiteral = 277, RULE_fileSizeLiteral = 278, 
		RULE_stringLiteral = 279, RULE_booleanLiteral = 280, RULE_hexadecimalLiteral = 281, 
		RULE_nullNotnull = 282, RULE_constant = 283, RULE_dataType = 284, RULE_collectionOptions = 285, 
		RULE_convertedDataType = 286, RULE_lengthOneDimension = 287, RULE_lengthTwoDimension = 288, 
		RULE_lengthTwoOptionalDimension = 289, RULE_uidList = 290, RULE_tables = 291, 
		RULE_indexColumnNames = 292, RULE_expressions = 293, RULE_expressionsWithDefaults = 294, 
		RULE_constants = 295, RULE_simpleStrings = 296, RULE_userVariables = 297, 
		RULE_defaultValue = 298, RULE_currentTimestamp = 299, RULE_expressionOrDefault = 300, 
		RULE_ifExists = 301, RULE_ifNotExists = 302, RULE_functionCall = 303, 
		RULE_specificFunction = 304, RULE_caseFuncAlternative = 305, RULE_levelsInWeightString = 306, 
		RULE_levelInWeightListElement = 307, RULE_aggregateWindowedFunction = 308, 
		RULE_nonAggregateWindowedFunction = 309, RULE_overClause = 310, RULE_windowSpec = 311, 
		RULE_windowName = 312, RULE_frameClause = 313, RULE_frameUnits = 314, 
		RULE_frameExtent = 315, RULE_frameBetween = 316, RULE_frameRange = 317, 
		RULE_partitionClause = 318, RULE_scalarFunctionName = 319, RULE_passwordFunctionClause = 320, 
		RULE_functionArgs = 321, RULE_functionArg = 322, RULE_expression = 323, 
		RULE_predicate = 324, RULE_expressionAtom = 325, RULE_unaryOperator = 326, 
		RULE_comparisonOperator = 327, RULE_logicalOperator = 328, RULE_bitOperator = 329, 
		RULE_mathOperator = 330, RULE_jsonOperator = 331, RULE_charsetNameBase = 332, 
		RULE_transactionLevelBase = 333, RULE_privilegesBase = 334, RULE_intervalTypeBase = 335, 
		RULE_dataTypeBase = 336, RULE_keywordsCanBeId = 337, RULE_functionNameBase = 338;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "sqlStatements", "sqlStatement", "emptyStatement", "ddlStatement", 
			"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
			"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
			"createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
			"createFunction", "createServer", "createTable", "createTablespaceInnodb", 
			"createTablespaceNdb", "createTrigger", "createView", "createDatabaseOption", 
			"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
			"intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
			"functionParameter", "routineOption", "serverOption", "createDefinitions", 
			"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
			"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
			"tableOption", "tableType", "tablespaceStorage", "partitionDefinitions", 
			"partitionFunctionDefinition", "subpartitionFunctionDefinition", "partitionDefinition", 
			"partitionDefinerAtom", "partitionDefinerVector", "subpartitionDefinition", 
			"partitionOption", "alterDatabase", "alterEvent", "alterFunction", "alterInstance", 
			"alterLogfileGroup", "alterProcedure", "alterServer", "alterTable", "alterTablespace", 
			"alterView", "alterSpecification", "dropDatabase", "dropEvent", "dropIndex", 
			"dropLogfileGroup", "dropProcedure", "dropFunction", "dropServer", "dropTable", 
			"dropTablespace", "dropTrigger", "dropView", "renameTable", "renameTableClause", 
			"truncateTable", "callStatement", "deleteStatement", "doStatement", "handlerStatement", 
			"insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement", 
			"selectStatement", "updateStatement", "insertStatementValue", "updatedElement", 
			"assignmentField", "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
			"handlerOpenStatement", "handlerReadIndexStatement", "handlerReadStatement", 
			"handlerCloseStatement", "singleUpdateStatement", "multipleUpdateStatement", 
			"orderByClause", "orderByExpression", "tableSources", "tableSource", 
			"tableSourceItem", "indexHint", "indexHintType", "joinPart", "joinKeyword", 
			"queryExpression", "queryExpressionNointo", "querySpecification", "selectModifierExpression", 
			"selectExpression", "tableExpression", "selectClause", "selectKeyword", 
			"querySpecificationNointo", "unionParenthesis", "unionStatement", "selectSpec", 
			"selectElements", "selectElementDelimiter", "selectElement", "selectIntoExpression", 
			"selectFieldsInto", "selectLinesInto", "fromClause", "fromKeyword", "groupByClause", 
			"havingClause", "windowClause", "groupByItem", "limitClause", "limitClauseAtom", 
			"startTransaction", "beginWork", "commitWork", "rollbackWork", "savepointStatement", 
			"rollbackStatement", "releaseStatement", "lockTables", "unlockTables", 
			"setAutocommitStatement", "setTransactionStatement", "transactionMode", 
			"lockTableElement", "lockAction", "transactionOption", "transactionLevel", 
			"changeMaster", "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
			"resetSlave", "startSlave", "stopSlave", "startGroupReplication", "stopGroupReplication", 
			"masterOption", "stringMasterOption", "decimalMasterOption", "boolMasterOption", 
			"channelOption", "replicationFilter", "tablePair", "threadType", "untilOption", 
			"connectionOption", "gtuidSet", "xaStartTransaction", "xaEndTransaction", 
			"xaPrepareStatement", "xaCommitWork", "xaRollbackWork", "xaRecoverWork", 
			"prepareStatement", "executeStatement", "deallocatePrepare", "routineBody", 
			"blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
			"leaveStatement", "loopStatement", "repeatStatement", "returnStatement", 
			"whileStatement", "cursorStatement", "declareVariable", "declareCondition", 
			"declareCursor", "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
			"caseAlternative", "elifAlternative", "alterUser", "createUser", "dropUser", 
			"grantStatement", "roleOption", "grantProxy", "renameUser", "revokeStatement", 
			"revokeProxy", "setPasswordStatement", "userSpecification", "userAuthOption", 
			"tlsOption", "userResourceOption", "userPasswordOption", "userLockOption", 
			"privelegeClause", "privilege", "privilegeLevel", "renameUserClause", 
			"analyzeTable", "checkTable", "checksumTable", "optimizeTable", "repairTable", 
			"checkTableOption", "createUdfunction", "installPlugin", "uninstallPlugin", 
			"setStatement", "showStatement", "variableClause", "showCommonEntity", 
			"showFilter", "showGlobalInfoClause", "showSchemaEntity", "showProfileType", 
			"binlogStatement", "cacheIndexStatement", "flushStatement", "killStatement", 
			"loadIndexIntoCache", "resetStatement", "shutdownStatement", "tableIndexes", 
			"flushOption", "flushTableOption", "loadedTableIndexes", "simpleDescribeStatement", 
			"fullDescribeStatement", "helpStatement", "useStatement", "signalStatement", 
			"resignalStatement", "signalConditionInformation", "diagnosticsStatement", 
			"diagnosticsConditionInformationName", "describeObjectClause", "fullId", 
			"tableName", "fullColumnName", "indexColumnName", "userName", "mysqlVariable", 
			"charsetName", "collationName", "engineName", "uuidSet", "xid", "xuidStringId", 
			"authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", "fileSizeLiteral", 
			"stringLiteral", "booleanLiteral", "hexadecimalLiteral", "nullNotnull", 
			"constant", "dataType", "collectionOptions", "convertedDataType", "lengthOneDimension", 
			"lengthTwoDimension", "lengthTwoOptionalDimension", "uidList", "tables", 
			"indexColumnNames", "expressions", "expressionsWithDefaults", "constants", 
			"simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
			"expressionOrDefault", "ifExists", "ifNotExists", "functionCall", "specificFunction", 
			"caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
			"aggregateWindowedFunction", "nonAggregateWindowedFunction", "overClause", 
			"windowSpec", "windowName", "frameClause", "frameUnits", "frameExtent", 
			"frameBetween", "frameRange", "partitionClause", "scalarFunctionName", 
			"passwordFunctionClause", "functionArgs", "functionArg", "expression", 
			"predicate", "expressionAtom", "unaryOperator", "comparisonOperator", 
			"logicalOperator", "bitOperator", "mathOperator", "jsonOperator", "charsetNameBase", 
			"transactionLevelBase", "privilegesBase", "intervalTypeBase", "dataTypeBase", 
			"keywordsCanBeId", "functionNameBase"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, "'RETRIEVE'", "'SHOW ME'", "'DISPLAY'", 
			"'PRESENT'", "'FIND'", "'IN TABLE'", "'FROM TABLE'", "'JOIN TABLE'", 
			"'BY JOINING'", "'BY JOINING TABLE'", "'JOIN WITH'", "'JOIN WITH TABLE'", 
			"'JOINED WITH'", "'JOINED WITH TABLE'", "'ADD'", "'ALL'", "'ALTER'", 
			"'ALWAYS'", "'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'BEFORE'", 
			"'BETWEEN'", "'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", 
			"'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", 
			"'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", 
			"'CROSS'", "'CURRENT'", "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DATABASES'", 
			"'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", 
			"'DETERMINISTIC'", "'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", 
			"'EACH'", "'ELSE'", "'ELSEIF'", "'EMPTY'", "'ENCLOSED'", "'ESCAPED'", 
			"'EXCEPT'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", 
			"'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", "'GENERATED'", 
			"'GET'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", "'HISTOGRAM'", 
			"'IF'", "'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", 
			"'INSERT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", 
			"'KEYS'", "'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", 
			"'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", 
			"'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", 
			"'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", 
			"'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", 
			"'ORDER'", "'OUT'", "'OVER'", "'OUTER'", "'OUTFILE'", "'PARTITION'", 
			"'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", "'READS'", 
			"'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'", 
			"'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", "'RETAIN'", "'RETURN'", "'REVOKE'", 
			"'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", 
			"'SHOW'", "'SIGNAL'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", 
			"'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", 
			"'SSL'", "'STACKED'", "'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", 
			"'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", 
			"'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", "'USE'", 
			"'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", 
			"'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", "'MIDDLEINT'", 
			"'INT'", "'INT1'", "'INT2'", "'INT3'", "'INT4'", "'INT8'", "'INTEGER'", 
			"'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", "'FLOAT'", "'FLOAT4'", 
			"'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", 
			"'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", 
			"'BINARY'", "'VARBINARY'", "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'", 
			"'LONGBLOB'", "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", 
			"'VARYING'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", 
			"'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
			"'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
			"'DAY_MICROSECOND'", "'JSON_ARRAY'", "'JSON_OBJECT'", "'JSON_QUOTE'", 
			"'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", "'JSON_EXTRACT'", "'JSON_KEYS'", 
			"'JSON_OVERLAPS'", "'JSON_SEARCH'", "'JSON_VALUE'", "'JSON_ARRAY_APPEND'", 
			"'JSON_ARRAY_INSERT'", "'JSON_INSERT'", "'JSON_MERGE'", "'JSON_MERGE_PATCH'", 
			"'JSON_MERGE_PRESERVE'", "'JSON_REMOVE'", "'JSON_REPLACE'", "'JSON_SET'", 
			"'JSON_UNQUOTE'", "'JSON_DEPTH'", "'JSON_LENGTH'", "'JSON_TYPE'", "'JSON_VALID'", 
			"'JSON_TABLE'", "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'", 
			"'JSON_PRETTY'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", "'JSON_ARRAYAGG'", 
			"'JSON_OBJECTAGG'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
			"'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", "'LAG'", 
			"'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", "'NTILE'", "'NTH_VALUE'", 
			"'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
			"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
			"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", 
			"'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", 
			"'NOW'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", 
			"'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", 
			"'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", 
			"'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", 
			"'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", 
			"'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", 
			"'PAGE_CHECKSUM'", "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", 
			"'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", 
			"'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", 
			"'COMPRESSION'", "'CONCURRENT'", "'CONNECT'", "'CONNECTION'", "'CONSISTENT'", 
			"'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", "'CONTAINS'", 
			"'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CURSOR_NAME'", "'DATA'", 
			"'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", 
			"'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", 
			"'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'", 
			"'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", 
			"'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", 
			"'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAST'", "'FAULTS'", 
			"'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", 
			"'FOLLOWING'", "'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", 
			"'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", 
			"'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", 
			"'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", 
			"'INSTALL'", "'INSTANCE'", "'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'", 
			"'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", 
			"'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", 
			"'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
			"'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
			"'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
			"'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
			"'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", 
			"'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
			"'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
			"'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", 
			"'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", 
			"'MYSQL'", "'MYSQL_ERRNO'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", 
			"'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", "'OFFSET'", 
			"'OF'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", 
			"'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", 
			"'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", 
			"'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", 
			"'PRECEDING'", "'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", 
			"'PROFILE'", "'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", 
			"'RECOVER'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", 
			"'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", "'REPAIR'", 
			"'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", 
			"'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", 
			"'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", "'RESUME'", 
			"'RETURNED_SQLSTATE'", "'RETURNING'", "'RETURNS'", "'ROLE'", "'ROLLBACK'", 
			"'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", "'SAVEPOINT'", 
			"'SCHEDULE'", "'SECURITY'", "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", 
			"'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", 
			"'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", 
			"'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", 
			"'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", 
			"'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", 
			"'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", 
			"'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", 
			"'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", 
			"'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", "'UNBOUNDED'", 
			"'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", 
			"'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", 
			"'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", 
			"'WARNINGS'", "'WINDOW'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", 
			"'XA'", "'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", 
			"'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
			"'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", 
			"'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", 
			"'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", 
			"'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", 
			"'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", 
			"'FLUSH_USER_RESOURCES'", "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", 
			"'INNODB_REDO_LOG_ENABLE'", "'NDB_STORED_USER'", "'PERSIST_RO_VARIABLES_ADMIN'", 
			"'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", 
			"'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'SERVICE_CONNECTION_ADMIN'", 
			null, "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", 
			"'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", 
			"'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
			"'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
			"'EUCKR'", "'GB18030'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", 
			"'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", 
			"'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", 
			"'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", 
			"'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", 
			"'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", 
			"'PERFORMANCE_SCHEMA'", "'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", 
			"'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", 
			"'LINESTRING'", "'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", 
			"'POINT'", "'POLYGON'", "'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", 
			"'AES_DECRYPT'", "'AES_ENCRYPT'", "'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", 
			"'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", "'ASYMMETRIC_DERIVE'", 
			"'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", "'ATAN'", 
			"'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", 
			"'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
			"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
			"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
			"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
			"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
			"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
			"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
			"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
			"'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
			"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
			"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
			"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
			"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
			"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
			"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
			"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
			"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", 
			"'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", 
			"'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
			"'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
			"'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", 
			"'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", 
			"'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
			"'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", 
			"'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
			"'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
			"'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", 
			"'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
			"'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", 
			"'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
			"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
			"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
			"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
			"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
			"'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", 
			"'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", "'STARTPOINT'", 
			"'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", 
			"'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", 
			"'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", 
			"'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", 
			"'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
			"'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
			"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
			"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
			"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", 
			"'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
			"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
			"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
			"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
			"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
			"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
			"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
			"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
			"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
			"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
			"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
			"'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", 
			"'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", 
			"'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", 
			"'%'", "'+'", "'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", 
			"'|'", "'&'", "'^'", "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", 
			"'1'", "'2'", "'''", "'\"'", "'`'", "':'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
			"RETRIEVE", "SHOW_ME", "DISPLAY", "PRESENT", "FIND", "IN_TABLE", "FROM_TABLE", 
			"JOIN_TABLE", "BY_JOINING", "BY_JOINING_TABLE", "JOIN_WITH", "JOIN_WITH_TABLE", 
			"JOINED_WITH", "JOINED_WITH_TABLE", "ADD", "ALL", "ALTER", "ALWAYS", 
			"ANALYZE", "AND", "ARRAY", "AS", "ASC", "BEFORE", "BETWEEN", "BOTH", 
			"BUCKETS", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", 
			"CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", 
			"CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", "CURSOR", "DATABASE", 
			"DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", 
			"DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", "DROP", "EACH", 
			"ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", "EXCEPT", "EXISTS", 
			"EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", "FROM", 
			"FULLTEXT", "GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
			"HISTOGRAM", "IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", 
			"INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", 
			"KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", 
			"LOAD", "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
			"MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
			"NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", 
			"ORDER", "OUT", "OVER", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", 
			"PURGE", "RANGE", "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", 
			"RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", "RETAIN", 
			"RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", 
			"SET", "SEPARATOR", "SHOW", "SIGNAL", "SPATIAL", "SQL", "SQLEXCEPTION", 
			"SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
			"SSL", "STACKED", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
			"THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
			"UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
			"WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", 
			"MEDIUMINT", "MIDDLEINT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", 
			"INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", 
			"FLOAT8", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", 
			"YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
			"TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", "TEXT", 
			"MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", 
			"DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", 
			"MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
			"DAY_MICROSECOND", "JSON_ARRAY", "JSON_OBJECT", "JSON_QUOTE", "JSON_CONTAINS", 
			"JSON_CONTAINS_PATH", "JSON_EXTRACT", "JSON_KEYS", "JSON_OVERLAPS", "JSON_SEARCH", 
			"JSON_VALUE", "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_INSERT", 
			"JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", "JSON_REMOVE", 
			"JSON_REPLACE", "JSON_SET", "JSON_UNQUOTE", "JSON_DEPTH", "JSON_LENGTH", 
			"JSON_TYPE", "JSON_VALID", "JSON_TABLE", "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", 
			"JSON_PRETTY", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", "JSON_ARRAYAGG", 
			"JSON_OBJECTAGG", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", 
			"DENSE_RANK", "FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", "LEAD", 
			"MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", "RANK", "ROW_NUMBER", 
			"STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", 
			"VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", 
			"CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", 
			"NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", 
			"UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", 
			"ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", 
			"AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", 
			"BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", 
			"CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", 
			"CLOSE", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", 
			"COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", 
			"CONCURRENT", "CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", 
			"CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", 
			"COPY", "CPU", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
			"DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", 
			"DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", 
			"ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", 
			"ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", 
			"EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", 
			"FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWING", 
			"FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", 
			"GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", 
			"IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE", "INPLACE", 
			"INSERT_METHOD", "INSTALL", "INSTANCE", "INVISIBLE", "INVOKER", "IO", 
			"IO_THREAD", "IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", 
			"LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", 
			"LOGS", "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", 
			"MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", 
			"MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", 
			"MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", 
			"MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", 
			"MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS", 
			"MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", 
			"MEMBER", "MERGE", "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", "MODE", 
			"MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR", 
			"NEVER", "NEXT", "NO", "NODEGROUP", "NONE", "ODBC", "OFFLINE", "OFFSET", 
			"OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", 
			"OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", 
			"PARTITIONS", "PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", 
			"PORT", "PRECEDES", "PRECEDING", "PREPARE", "PRESERVE", "PREV", "PROCESSLIST", 
			"PROFILE", "PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", "RECOVER", 
			"REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", 
			"RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", 
			"REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", 
			"REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", 
			"RESET", "RESUME", "RETURNED_SQLSTATE", "RETURNING", "RETURNS", "ROLE", 
			"ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", 
			"SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", 
			"SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
			"SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
			"SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
			"STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
			"STATUS", "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT", 
			"SUBPARTITION", "SUBPARTITIONS", "SUSPEND", "SWAPS", "SWITCHES", "TABLE_NAME", 
			"TABLESPACE", "TABLE_TYPE", "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", 
			"TRANSACTION", "TRANSACTIONAL", "TRIGGERS", "TRUNCATE", "UNBOUNDED", 
			"UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", 
			"UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", 
			"VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", 
			"WINDOW", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", "EUR", "USA", 
			"JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", 
			"WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE", "EXECUTE", "FILE", 
			"PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", "APPLICATION_PASSWORD_ADMIN", 
			"AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", 
			"CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", "FIREWALL_ADMIN", 
			"FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", "FLUSH_TABLES", 
			"FLUSH_USER_RESOURCES", "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", 
			"INNODB_REDO_LOG_ENABLE", "NDB_STORED_USER", "PERSIST_RO_VARIABLES_ADMIN", 
			"REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", 
			"RESOURCE_GROUP_USER", "ROLE_ADMIN", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", 
			"SET_USER_ID", "SHOW_ROUTINE", "SYSTEM_VARIABLES_ADMIN", "TABLE_ENCRYPTION_ADMIN", 
			"VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", "ARMSCII8", "ASCII", "BIG5", 
			"CP1250", "CP1251", "CP1256", "CP1257", "CP850", "CP852", "CP866", "CP932", 
			"DEC8", "EUCJPMS", "EUCKR", "GB18030", "GB2312", "GBK", "GEOSTD8", "GREEK", 
			"HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", "LATIN2", "LATIN5", 
			"LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", 
			"UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", 
			"BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", 
			"NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE", "COMMITTED", 
			"UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "GEOMCOLLECTION", 
			"GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", 
			"POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
			"AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", "ASWKT", 
			"ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", 
			"ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", 
			"BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", "CENTROID", 
			"CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", 
			"COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
			"COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
			"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
			"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
			"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
			"ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", 
			"EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
			"FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
			"GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
			"GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", 
			"GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
			"HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
			"INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
			"ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
			"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
			"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
			"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
			"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
			"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
			"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
			"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
			"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", 
			"MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", 
			"NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", "OCT", "OCTET_LENGTH", 
			"ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", "PI", "POINTFROMTEXT", 
			"POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
			"POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", "RAND", "RANDOM_BYTES", 
			"RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", 
			"SESSION_USER", "SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", 
			"SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", 
			"STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", 
			"ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", 
			"ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", 
			"ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
			"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
			"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
			"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
			"ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
			"ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
			"ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
			"ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
			"ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
			"ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", 
			"ST_TOUCHES", "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
			"SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
			"TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
			"UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
			"UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
			"VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
			"WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
			"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
			"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", 
			"PLUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", 
			"EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
			"DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", 
			"ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
			"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
			"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
			"HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
			"STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
			"IP_ADDRESS", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION", "ADMIN", 
			"OPTIONAL"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "SpeakQlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public SpeakQlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class RootContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(SpeakQlParser.EOF, 0); }
		public SqlStatementsContext sqlStatements() {
			return getRuleContext(SqlStatementsContext.class,0);
		}
		public List<TerminalNode> MINUS() { return getTokens(SpeakQlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(SpeakQlParser.MINUS, i);
		}
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(679);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RETRIEVE) | (1L << SHOW_ME) | (1L << DISPLAY) | (1L << PRESENT) | (1L << FIND) | (1L << IN_TABLE) | (1L << FROM_TABLE) | (1L << ALTER) | (1L << ANALYZE) | (1L << CALL) | (1L << CHANGE) | (1L << CHECK) | (1L << CREATE) | (1L << DELETE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DROP))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (EXPLAIN - 73)) | (1L << (FROM - 73)) | (1L << (GET - 73)) | (1L << (GRANT - 73)) | (1L << (INSERT - 73)) | (1L << (KILL - 73)) | (1L << (LOAD - 73)) | (1L << (LOCK - 73)) | (1L << (OPTIMIZE - 73)))) != 0) || ((((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & ((1L << (PURGE - 138)) | (1L << (RELEASE - 138)) | (1L << (RENAME - 138)) | (1L << (REPLACE - 138)) | (1L << (RESIGNAL - 138)) | (1L << (REVOKE - 138)) | (1L << (SELECT - 138)) | (1L << (SET - 138)) | (1L << (SHOW - 138)) | (1L << (SIGNAL - 138)) | (1L << (UNLOCK - 138)) | (1L << (UPDATE - 138)) | (1L << (USE - 138)) | (1L << (WHERE - 138)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (BEGIN - 344)) | (1L << (BINLOG - 344)) | (1L << (CACHE - 344)) | (1L << (CHECKSUM - 344)) | (1L << (COMMIT - 344)) | (1L << (DEALLOCATE - 344)) | (1L << (DO - 344)))) != 0) || ((((_la - 427)) & ~0x3f) == 0 && ((1L << (_la - 427)) & ((1L << (FLUSH - 427)) | (1L << (HANDLER - 427)) | (1L << (HELP - 427)) | (1L << (INSTALL - 427)))) != 0) || ((((_la - 543)) & ~0x3f) == 0 && ((1L << (_la - 543)) & ((1L << (PREPARE - 543)) | (1L << (REPAIR - 543)) | (1L << (RESET - 543)) | (1L << (ROLLBACK - 543)) | (1L << (SAVEPOINT - 543)))) != 0) || ((((_la - 607)) & ~0x3f) == 0 && ((1L << (_la - 607)) & ((1L << (START - 607)) | (1L << (STOP - 607)) | (1L << (TRUNCATE - 607)) | (1L << (UNINSTALL - 607)) | (1L << (XA - 607)))) != 0) || _la==EXECUTE || _la==SHUTDOWN || _la==LR_BRACKET || _la==SEMI) {
				{
				setState(678);
				sqlStatements();
				}
			}

			setState(683);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS) {
				{
				setState(681);
				match(MINUS);
				setState(682);
				match(MINUS);
				}
			}

			setState(685);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementsContext extends ParserRuleContext {
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public List<EmptyStatementContext> emptyStatement() {
			return getRuleContexts(EmptyStatementContext.class);
		}
		public EmptyStatementContext emptyStatement(int i) {
			return getRuleContext(EmptyStatementContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(SpeakQlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(SpeakQlParser.SEMI, i);
		}
		public List<TerminalNode> MINUS() { return getTokens(SpeakQlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(SpeakQlParser.MINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSqlStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSqlStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSqlStatements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementsContext sqlStatements() throws RecognitionException {
		SqlStatementsContext _localctx = new SqlStatementsContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(698);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(696);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case RETRIEVE:
					case SHOW_ME:
					case DISPLAY:
					case PRESENT:
					case FIND:
					case IN_TABLE:
					case FROM_TABLE:
					case ALTER:
					case ANALYZE:
					case CALL:
					case CHANGE:
					case CHECK:
					case CREATE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DROP:
					case EXPLAIN:
					case FROM:
					case GET:
					case GRANT:
					case INSERT:
					case KILL:
					case LOAD:
					case LOCK:
					case OPTIMIZE:
					case PURGE:
					case RELEASE:
					case RENAME:
					case REPLACE:
					case RESIGNAL:
					case REVOKE:
					case SELECT:
					case SET:
					case SHOW:
					case SIGNAL:
					case UNLOCK:
					case UPDATE:
					case USE:
					case WHERE:
					case BEGIN:
					case BINLOG:
					case CACHE:
					case CHECKSUM:
					case COMMIT:
					case DEALLOCATE:
					case DO:
					case FLUSH:
					case HANDLER:
					case HELP:
					case INSTALL:
					case PREPARE:
					case REPAIR:
					case RESET:
					case ROLLBACK:
					case SAVEPOINT:
					case START:
					case STOP:
					case TRUNCATE:
					case UNINSTALL:
					case XA:
					case EXECUTE:
					case SHUTDOWN:
					case LR_BRACKET:
						{
						setState(687);
						sqlStatement();
						setState(690);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==MINUS) {
							{
							setState(688);
							match(MINUS);
							setState(689);
							match(MINUS);
							}
						}

						setState(693);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
						case 1:
							{
							setState(692);
							match(SEMI);
							}
							break;
						}
						}
						break;
					case SEMI:
						{
						setState(695);
						emptyStatement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(700);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			setState(710);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETRIEVE:
			case SHOW_ME:
			case DISPLAY:
			case PRESENT:
			case FIND:
			case IN_TABLE:
			case FROM_TABLE:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case FROM:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case WHERE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case LR_BRACKET:
				{
				setState(701);
				sqlStatement();
				setState(707);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(704);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MINUS) {
						{
						setState(702);
						match(MINUS);
						setState(703);
						match(MINUS);
						}
					}

					setState(706);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				setState(709);
				emptyStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementContext extends ParserRuleContext {
		public DdlStatementContext ddlStatement() {
			return getRuleContext(DdlStatementContext.class,0);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public ReplicationStatementContext replicationStatement() {
			return getRuleContext(ReplicationStatementContext.class,0);
		}
		public PreparedStatementContext preparedStatement() {
			return getRuleContext(PreparedStatementContext.class,0);
		}
		public AdministrationStatementContext administrationStatement() {
			return getRuleContext(AdministrationStatementContext.class,0);
		}
		public UtilityStatementContext utilityStatement() {
			return getRuleContext(UtilityStatementContext.class,0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sqlStatement);
		try {
			setState(719);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(712);
				ddlStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(713);
				dmlStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(714);
				transactionStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(715);
				replicationStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(716);
				preparedStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(717);
				administrationStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(718);
				utilityStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmptyStatementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(SpeakQlParser.SEMI, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterEmptyStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitEmptyStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitEmptyStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EmptyStatementContext emptyStatement() throws RecognitionException {
		EmptyStatementContext _localctx = new EmptyStatementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_emptyStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(721);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DdlStatementContext extends ParserRuleContext {
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateEventContext createEvent() {
			return getRuleContext(CreateEventContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return getRuleContext(CreateLogfileGroupContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateServerContext createServer() {
			return getRuleContext(CreateServerContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return getRuleContext(CreateTablespaceInnodbContext.class,0);
		}
		public CreateTablespaceNdbContext createTablespaceNdb() {
			return getRuleContext(CreateTablespaceNdbContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public AlterEventContext alterEvent() {
			return getRuleContext(AlterEventContext.class,0);
		}
		public AlterFunctionContext alterFunction() {
			return getRuleContext(AlterFunctionContext.class,0);
		}
		public AlterInstanceContext alterInstance() {
			return getRuleContext(AlterInstanceContext.class,0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return getRuleContext(AlterLogfileGroupContext.class,0);
		}
		public AlterProcedureContext alterProcedure() {
			return getRuleContext(AlterProcedureContext.class,0);
		}
		public AlterServerContext alterServer() {
			return getRuleContext(AlterServerContext.class,0);
		}
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public AlterTablespaceContext alterTablespace() {
			return getRuleContext(AlterTablespaceContext.class,0);
		}
		public AlterViewContext alterView() {
			return getRuleContext(AlterViewContext.class,0);
		}
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropEventContext dropEvent() {
			return getRuleContext(DropEventContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return getRuleContext(DropLogfileGroupContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public DropServerContext dropServer() {
			return getRuleContext(DropServerContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public DropTablespaceContext dropTablespace() {
			return getRuleContext(DropTablespaceContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public RenameTableContext renameTable() {
			return getRuleContext(RenameTableContext.class,0);
		}
		public TruncateTableContext truncateTable() {
			return getRuleContext(TruncateTableContext.class,0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDdlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDdlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDdlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DdlStatementContext ddlStatement() throws RecognitionException {
		DdlStatementContext _localctx = new DdlStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_ddlStatement);
		try {
			setState(758);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(723);
				createDatabase();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(724);
				createEvent();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(725);
				createIndex();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(726);
				createLogfileGroup();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(727);
				createProcedure();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(728);
				createFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(729);
				createServer();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(730);
				createTable();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(731);
				createTablespaceInnodb();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(732);
				createTablespaceNdb();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(733);
				createTrigger();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(734);
				createView();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(735);
				alterDatabase();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(736);
				alterEvent();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(737);
				alterFunction();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(738);
				alterInstance();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(739);
				alterLogfileGroup();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(740);
				alterProcedure();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(741);
				alterServer();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(742);
				alterTable();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(743);
				alterTablespace();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(744);
				alterView();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(745);
				dropDatabase();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(746);
				dropEvent();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(747);
				dropIndex();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(748);
				dropLogfileGroup();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(749);
				dropProcedure();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(750);
				dropFunction();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(751);
				dropServer();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(752);
				dropTable();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(753);
				dropTablespace();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(754);
				dropTrigger();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(755);
				dropView();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(756);
				renameTable();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(757);
				truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DmlStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public LoadDataStatementContext loadDataStatement() {
			return getRuleContext(LoadDataStatementContext.class,0);
		}
		public LoadXmlStatementContext loadXmlStatement() {
			return getRuleContext(LoadXmlStatementContext.class,0);
		}
		public DoStatementContext doStatement() {
			return getRuleContext(DoStatementContext.class,0);
		}
		public HandlerStatementContext handlerStatement() {
			return getRuleContext(HandlerStatementContext.class,0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DmlStatementContext dmlStatement() throws RecognitionException {
		DmlStatementContext _localctx = new DmlStatementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_dmlStatement);
		try {
			setState(770);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(760);
				selectStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(761);
				insertStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(762);
				updateStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(763);
				deleteStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(764);
				replaceStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(765);
				callStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(766);
				loadDataStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(767);
				loadXmlStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(768);
				doStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(769);
				handlerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStatementContext extends ParserRuleContext {
		public StartTransactionContext startTransaction() {
			return getRuleContext(StartTransactionContext.class,0);
		}
		public BeginWorkContext beginWork() {
			return getRuleContext(BeginWorkContext.class,0);
		}
		public CommitWorkContext commitWork() {
			return getRuleContext(CommitWorkContext.class,0);
		}
		public RollbackWorkContext rollbackWork() {
			return getRuleContext(RollbackWorkContext.class,0);
		}
		public SavepointStatementContext savepointStatement() {
			return getRuleContext(SavepointStatementContext.class,0);
		}
		public RollbackStatementContext rollbackStatement() {
			return getRuleContext(RollbackStatementContext.class,0);
		}
		public ReleaseStatementContext releaseStatement() {
			return getRuleContext(ReleaseStatementContext.class,0);
		}
		public LockTablesContext lockTables() {
			return getRuleContext(LockTablesContext.class,0);
		}
		public UnlockTablesContext unlockTables() {
			return getRuleContext(UnlockTablesContext.class,0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_transactionStatement);
		try {
			setState(781);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(772);
				startTransaction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(773);
				beginWork();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(774);
				commitWork();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(775);
				rollbackWork();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(776);
				savepointStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(777);
				rollbackStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(778);
				releaseStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(779);
				lockTables();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(780);
				unlockTables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationStatementContext extends ParserRuleContext {
		public ChangeMasterContext changeMaster() {
			return getRuleContext(ChangeMasterContext.class,0);
		}
		public ChangeReplicationFilterContext changeReplicationFilter() {
			return getRuleContext(ChangeReplicationFilterContext.class,0);
		}
		public PurgeBinaryLogsContext purgeBinaryLogs() {
			return getRuleContext(PurgeBinaryLogsContext.class,0);
		}
		public ResetMasterContext resetMaster() {
			return getRuleContext(ResetMasterContext.class,0);
		}
		public ResetSlaveContext resetSlave() {
			return getRuleContext(ResetSlaveContext.class,0);
		}
		public StartSlaveContext startSlave() {
			return getRuleContext(StartSlaveContext.class,0);
		}
		public StopSlaveContext stopSlave() {
			return getRuleContext(StopSlaveContext.class,0);
		}
		public StartGroupReplicationContext startGroupReplication() {
			return getRuleContext(StartGroupReplicationContext.class,0);
		}
		public StopGroupReplicationContext stopGroupReplication() {
			return getRuleContext(StopGroupReplicationContext.class,0);
		}
		public XaStartTransactionContext xaStartTransaction() {
			return getRuleContext(XaStartTransactionContext.class,0);
		}
		public XaEndTransactionContext xaEndTransaction() {
			return getRuleContext(XaEndTransactionContext.class,0);
		}
		public XaPrepareStatementContext xaPrepareStatement() {
			return getRuleContext(XaPrepareStatementContext.class,0);
		}
		public XaCommitWorkContext xaCommitWork() {
			return getRuleContext(XaCommitWorkContext.class,0);
		}
		public XaRollbackWorkContext xaRollbackWork() {
			return getRuleContext(XaRollbackWorkContext.class,0);
		}
		public XaRecoverWorkContext xaRecoverWork() {
			return getRuleContext(XaRecoverWorkContext.class,0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterReplicationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitReplicationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitReplicationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationStatementContext replicationStatement() throws RecognitionException {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_replicationStatement);
		try {
			setState(798);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(783);
				changeMaster();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(784);
				changeReplicationFilter();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(785);
				purgeBinaryLogs();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(786);
				resetMaster();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(787);
				resetSlave();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(788);
				startSlave();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(789);
				stopSlave();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(790);
				startGroupReplication();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(791);
				stopGroupReplication();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(792);
				xaStartTransaction();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(793);
				xaEndTransaction();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(794);
				xaPrepareStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(795);
				xaCommitWork();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(796);
				xaRollbackWork();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(797);
				xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparedStatementContext extends ParserRuleContext {
		public PrepareStatementContext prepareStatement() {
			return getRuleContext(PrepareStatementContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public DeallocatePrepareContext deallocatePrepare() {
			return getRuleContext(DeallocatePrepareContext.class,0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparedStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPreparedStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPreparedStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPreparedStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparedStatementContext preparedStatement() throws RecognitionException {
		PreparedStatementContext _localctx = new PreparedStatementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_preparedStatement);
		try {
			setState(803);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE:
				enterOuterAlt(_localctx, 1);
				{
				setState(800);
				prepareStatement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(801);
				executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(802);
				deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public LoopStatementContext loopStatement() {
			return getRuleContext(LoopStatementContext.class,0);
		}
		public RepeatStatementContext repeatStatement() {
			return getRuleContext(RepeatStatementContext.class,0);
		}
		public WhileStatementContext whileStatement() {
			return getRuleContext(WhileStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public CursorStatementContext cursorStatement() {
			return getRuleContext(CursorStatementContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCompoundStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCompoundStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCompoundStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_compoundStatement);
		try {
			setState(815);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(805);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(806);
				caseStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(807);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(808);
				leaveStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(809);
				loopStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(810);
				repeatStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(811);
				whileStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(812);
				iterateStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(813);
				returnStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(814);
				cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdministrationStatementContext extends ParserRuleContext {
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public GrantStatementContext grantStatement() {
			return getRuleContext(GrantStatementContext.class,0);
		}
		public GrantProxyContext grantProxy() {
			return getRuleContext(GrantProxyContext.class,0);
		}
		public RenameUserContext renameUser() {
			return getRuleContext(RenameUserContext.class,0);
		}
		public RevokeStatementContext revokeStatement() {
			return getRuleContext(RevokeStatementContext.class,0);
		}
		public RevokeProxyContext revokeProxy() {
			return getRuleContext(RevokeProxyContext.class,0);
		}
		public AnalyzeTableContext analyzeTable() {
			return getRuleContext(AnalyzeTableContext.class,0);
		}
		public CheckTableContext checkTable() {
			return getRuleContext(CheckTableContext.class,0);
		}
		public ChecksumTableContext checksumTable() {
			return getRuleContext(ChecksumTableContext.class,0);
		}
		public OptimizeTableContext optimizeTable() {
			return getRuleContext(OptimizeTableContext.class,0);
		}
		public RepairTableContext repairTable() {
			return getRuleContext(RepairTableContext.class,0);
		}
		public CreateUdfunctionContext createUdfunction() {
			return getRuleContext(CreateUdfunctionContext.class,0);
		}
		public InstallPluginContext installPlugin() {
			return getRuleContext(InstallPluginContext.class,0);
		}
		public UninstallPluginContext uninstallPlugin() {
			return getRuleContext(UninstallPluginContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public BinlogStatementContext binlogStatement() {
			return getRuleContext(BinlogStatementContext.class,0);
		}
		public CacheIndexStatementContext cacheIndexStatement() {
			return getRuleContext(CacheIndexStatementContext.class,0);
		}
		public FlushStatementContext flushStatement() {
			return getRuleContext(FlushStatementContext.class,0);
		}
		public KillStatementContext killStatement() {
			return getRuleContext(KillStatementContext.class,0);
		}
		public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return getRuleContext(LoadIndexIntoCacheContext.class,0);
		}
		public ResetStatementContext resetStatement() {
			return getRuleContext(ResetStatementContext.class,0);
		}
		public ShutdownStatementContext shutdownStatement() {
			return getRuleContext(ShutdownStatementContext.class,0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_administrationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAdministrationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAdministrationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAdministrationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdministrationStatementContext administrationStatement() throws RecognitionException {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_administrationStatement);
		try {
			setState(842);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(817);
				alterUser();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(818);
				createUser();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(819);
				dropUser();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(820);
				grantStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(821);
				grantProxy();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(822);
				renameUser();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(823);
				revokeStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(824);
				revokeProxy();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(825);
				analyzeTable();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(826);
				checkTable();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(827);
				checksumTable();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(828);
				optimizeTable();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(829);
				repairTable();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(830);
				createUdfunction();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(831);
				installPlugin();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(832);
				uninstallPlugin();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(833);
				setStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(834);
				showStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(835);
				binlogStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(836);
				cacheIndexStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(837);
				flushStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(838);
				killStatement();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(839);
				loadIndexIntoCache();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(840);
				resetStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(841);
				shutdownStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilityStatementContext extends ParserRuleContext {
		public SimpleDescribeStatementContext simpleDescribeStatement() {
			return getRuleContext(SimpleDescribeStatementContext.class,0);
		}
		public FullDescribeStatementContext fullDescribeStatement() {
			return getRuleContext(FullDescribeStatementContext.class,0);
		}
		public HelpStatementContext helpStatement() {
			return getRuleContext(HelpStatementContext.class,0);
		}
		public UseStatementContext useStatement() {
			return getRuleContext(UseStatementContext.class,0);
		}
		public SignalStatementContext signalStatement() {
			return getRuleContext(SignalStatementContext.class,0);
		}
		public ResignalStatementContext resignalStatement() {
			return getRuleContext(ResignalStatementContext.class,0);
		}
		public DiagnosticsStatementContext diagnosticsStatement() {
			return getRuleContext(DiagnosticsStatementContext.class,0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUtilityStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUtilityStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUtilityStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UtilityStatementContext utilityStatement() throws RecognitionException {
		UtilityStatementContext _localctx = new UtilityStatementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_utilityStatement);
		try {
			setState(851);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(844);
				simpleDescribeStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(845);
				fullDescribeStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(846);
				helpStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(847);
				useStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(848);
				signalStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(849);
				resignalStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(850);
				diagnosticsStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(SpeakQlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SpeakQlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCreateDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(853);
			match(CREATE);
			setState(854);
			((CreateDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((CreateDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(856);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(855);
				ifNotExists();
				}
			}

			setState(858);
			uid();
			setState(862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHARSET) {
				{
				{
				setState(859);
				createDatabaseOption();
				}
				}
				setState(864);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(SpeakQlParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(SpeakQlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(SpeakQlParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(SpeakQlParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(SpeakQlParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(SpeakQlParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(SpeakQlParser.PRESERVE, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(SpeakQlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(SpeakQlParser.NOT, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCreateEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCreateEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCreateEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateEventContext createEvent() throws RecognitionException {
		CreateEventContext _localctx = new CreateEventContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_createEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(865);
			match(CREATE);
			setState(867);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(866);
				ownerStatement();
				}
			}

			setState(869);
			match(EVENT);
			setState(871);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(870);
				ifNotExists();
				}
			}

			setState(873);
			fullId();
			setState(874);
			match(ON);
			setState(875);
			match(SCHEDULE);
			setState(876);
			scheduleExpression();
			setState(883);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(877);
				match(ON);
				setState(878);
				match(COMPLETION);
				setState(880);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(879);
					match(NOT);
					}
				}

				setState(882);
				match(PRESERVE);
				}
			}

			setState(886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(885);
				enableType();
				}
			}

			setState(890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(888);
				match(COMMENT);
				setState(889);
				match(STRING_LITERAL);
				}
			}

			setState(892);
			match(DO);
			setState(893);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token indexCategory;
		public Token algType;
		public Token lockType;
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(SpeakQlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(SpeakQlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(SpeakQlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(SpeakQlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(SpeakQlParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(SpeakQlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(SpeakQlParser.OFFLINE, 0); }
		public TerminalNode UNIQUE() { return getToken(SpeakQlParser.UNIQUE, 0); }
		public TerminalNode FULLTEXT() { return getToken(SpeakQlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(SpeakQlParser.SPATIAL, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(SpeakQlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(SpeakQlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(SpeakQlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(SpeakQlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(SpeakQlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(SpeakQlParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(SpeakQlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(SpeakQlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(SpeakQlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(SpeakQlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(SpeakQlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(SpeakQlParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(SpeakQlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(SpeakQlParser.EQUAL_SYMBOL, i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_createIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(895);
			match(CREATE);
			setState(897);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(896);
				((CreateIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((CreateIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(900);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				setState(899);
				((CreateIndexContext)_localctx).indexCategory = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					((CreateIndexContext)_localctx).indexCategory = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(902);
			match(INDEX);
			setState(903);
			uid();
			setState(905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(904);
				indexType();
				}
			}

			setState(907);
			match(ON);
			setState(908);
			tableName();
			setState(909);
			indexColumnNames();
			setState(913);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
				{
				{
				setState(910);
				indexOption();
				}
				}
				setState(915);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(928);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(926);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(916);
						match(ALGORITHM);
						setState(918);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(917);
							match(EQUAL_SYMBOL);
							}
						}

						setState(920);
						((CreateIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							((CreateIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(921);
						match(LOCK);
						setState(923);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(922);
							match(EQUAL_SYMBOL);
							}
						}

						setState(925);
						((CreateIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((CreateIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(930);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLogfileGroupContext extends ParserRuleContext {
		public Token undoFile;
		public FileSizeLiteralContext initSize;
		public FileSizeLiteralContext undoSize;
		public FileSizeLiteralContext redoSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public TerminalNode LOGFILE() { return getToken(SpeakQlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(SpeakQlParser.GROUP, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(SpeakQlParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(SpeakQlParser.UNDOFILE, 0); }
		public TerminalNode ENGINE() { return getToken(SpeakQlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(SpeakQlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(SpeakQlParser.STRING_LITERAL, i);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(SpeakQlParser.INITIAL_SIZE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(SpeakQlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(SpeakQlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(SpeakQlParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(SpeakQlParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(SpeakQlParser.COMMENT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(SpeakQlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(SpeakQlParser.EQUAL_SYMBOL, i);
		}
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCreateLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCreateLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCreateLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLogfileGroupContext createLogfileGroup() throws RecognitionException {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_createLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(931);
			match(CREATE);
			setState(932);
			match(LOGFILE);
			setState(933);
			match(GROUP);
			setState(934);
			uid();
			setState(935);
			match(ADD);
			setState(936);
			match(UNDOFILE);
			setState(937);
			((CreateLogfileGroupContext)_localctx).undoFile = match(STRING_LITERAL);
			setState(943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(938);
				match(INITIAL_SIZE);
				setState(940);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(939);
					match(EQUAL_SYMBOL);
					}
				}

				setState(942);
				((CreateLogfileGroupContext)_localctx).initSize = fileSizeLiteral();
				}
			}

			setState(950);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				setState(945);
				match(UNDO_BUFFER_SIZE);
				setState(947);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(946);
					match(EQUAL_SYMBOL);
					}
				}

				setState(949);
				((CreateLogfileGroupContext)_localctx).undoSize = fileSizeLiteral();
				}
			}

			setState(957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				setState(952);
				match(REDO_BUFFER_SIZE);
				setState(954);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(953);
					match(EQUAL_SYMBOL);
					}
				}

				setState(956);
				((CreateLogfileGroupContext)_localctx).redoSize = fileSizeLiteral();
				}
			}

			setState(964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(959);
				match(NODEGROUP);
				setState(961);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(960);
					match(EQUAL_SYMBOL);
					}
				}

				setState(963);
				uid();
				}
			}

			setState(967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(966);
				match(WAIT);
				}
			}

			setState(974);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(969);
				match(COMMENT);
				setState(971);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(970);
					match(EQUAL_SYMBOL);
					}
				}

				setState(973);
				((CreateLogfileGroupContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(976);
			match(ENGINE);
			setState(978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(977);
				match(EQUAL_SYMBOL);
				}
			}

			setState(980);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(SpeakQlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<ProcedureParameterContext> procedureParameter() {
			return getRuleContexts(ProcedureParameterContext.class);
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return getRuleContext(ProcedureParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCreateProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCreateProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(982);
			match(CREATE);
			setState(984);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(983);
				ownerStatement();
				}
			}

			setState(986);
			match(PROCEDURE);
			setState(987);
			fullId();
			setState(988);
			match(LR_BRACKET);
			setState(990);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (IN - 48)) | (1L << (INOUT - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (OUT - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
				{
				setState(989);
				procedureParameter();
				}
			}

			setState(996);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(992);
				match(COMMA);
				setState(993);
				procedureParameter();
				}
				}
				setState(998);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(999);
			match(RR_BRACKET);
			setState(1003);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,49,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1000);
					routineOption();
					}
					} 
				}
				setState(1005);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,49,_ctx);
			}
			setState(1006);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(SpeakQlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode RETURNS() { return getToken(SpeakQlParser.RETURNS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<FunctionParameterContext> functionParameter() {
			return getRuleContexts(FunctionParameterContext.class);
		}
		public FunctionParameterContext functionParameter(int i) {
			return getRuleContext(FunctionParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCreateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCreateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_createFunction);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1008);
			match(CREATE);
			setState(1010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1009);
				ownerStatement();
				}
			}

			setState(1012);
			match(FUNCTION);
			setState(1013);
			fullId();
			setState(1014);
			match(LR_BRACKET);
			setState(1016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
				{
				setState(1015);
				functionParameter();
				}
			}

			setState(1022);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1018);
				match(COMMA);
				setState(1019);
				functionParameter();
				}
				}
				setState(1024);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1025);
			match(RR_BRACKET);
			setState(1026);
			match(RETURNS);
			setState(1027);
			dataType();
			setState(1031);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,53,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1028);
					routineOption();
					}
					} 
				}
				setState(1033);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,53,_ctx);
			}
			setState(1036);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETRIEVE:
			case SHOW_ME:
			case DISPLAY:
			case PRESENT:
			case FIND:
			case IN_TABLE:
			case FROM_TABLE:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case CURRENT:
			case DATABASE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DIAGNOSTICS:
			case DROP:
			case EXCEPT:
			case EXPLAIN:
			case FROM:
			case GET:
			case GRANT:
			case GROUP:
			case INSERT:
			case KILL:
			case LEFT:
			case LOAD:
			case LOCK:
			case NUMBER:
			case OPTIMIZE:
			case ORDER:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case RIGHT:
			case SCHEMA:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case STACKED:
			case UNLOCK:
			case UPDATE:
			case USE:
			case WHERE:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case LR_BRACKET:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case OPTIONAL:
				{
				setState(1034);
				routineBody();
				}
				break;
			case RETURN:
				{
				setState(1035);
				returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerContext extends ParserRuleContext {
		public Token wrapperName;
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(SpeakQlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(SpeakQlParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(SpeakQlParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(SpeakQlParser.WRAPPER, 0); }
		public TerminalNode OPTIONS() { return getToken(SpeakQlParser.OPTIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode MYSQL() { return getToken(SpeakQlParser.MYSQL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCreateServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCreateServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCreateServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_createServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1038);
			match(CREATE);
			setState(1039);
			match(SERVER);
			setState(1040);
			uid();
			setState(1041);
			match(FOREIGN);
			setState(1042);
			match(DATA);
			setState(1043);
			match(WRAPPER);
			setState(1044);
			((CreateServerContext)_localctx).wrapperName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==STRING_LITERAL) ) {
				((CreateServerContext)_localctx).wrapperName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1045);
			match(OPTIONS);
			setState(1046);
			match(LR_BRACKET);
			setState(1047);
			serverOption();
			setState(1052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1048);
				match(COMMA);
				setState(1049);
				serverOption();
				}
				}
				setState(1054);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1055);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
	 
		public CreateTableContext() { }
		public void copyFrom(CreateTableContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CopyCreateTableContext extends CreateTableContext {
		public TableNameContext parenthesisTable;
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(SpeakQlParser.LIKE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode TEMPORARY() { return getToken(SpeakQlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CopyCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCopyCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCopyCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCopyCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColumnCreateTableContext extends CreateTableContext {
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(SpeakQlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public ColumnCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterColumnCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitColumnCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitColumnCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QueryCreateTableContext extends CreateTableContext {
		public Token keyViolate;
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(SpeakQlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode AS() { return getToken(SpeakQlParser.AS, 0); }
		public TerminalNode IGNORE() { return getToken(SpeakQlParser.IGNORE, 0); }
		public TerminalNode REPLACE() { return getToken(SpeakQlParser.REPLACE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public QueryCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterQueryCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitQueryCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitQueryCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_createTable);
		int _la;
		try {
			int _alt;
			setState(1135);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1057);
				match(CREATE);
				setState(1059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1058);
					match(TEMPORARY);
					}
				}

				setState(1061);
				match(TABLE);
				setState(1063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1062);
					ifNotExists();
					}
				}

				setState(1065);
				tableName();
				setState(1073);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIKE:
					{
					setState(1066);
					match(LIKE);
					setState(1067);
					tableName();
					}
					break;
				case LR_BRACKET:
					{
					setState(1068);
					match(LR_BRACKET);
					setState(1069);
					match(LIKE);
					setState(1070);
					((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
					setState(1071);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1075);
				match(CREATE);
				setState(1077);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1076);
					match(TEMPORARY);
					}
				}

				setState(1079);
				match(TABLE);
				setState(1081);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1080);
					ifNotExists();
					}
				}

				setState(1083);
				tableName();
				setState(1085);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					setState(1084);
					createDefinitions();
					}
					break;
				}
				setState(1097);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (CHARACTER - 38)) | (1L << (COLLATE - 38)) | (1L << (DEFAULT - 38)) | (1L << (INDEX - 38)))) != 0) || _la==UNION || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (AUTO_INCREMENT - 342)) | (1L << (AVG_ROW_LENGTH - 342)) | (1L << (CHECKSUM - 342)) | (1L << (PAGE_CHECKSUM - 342)) | (1L << (COMMENT - 342)) | (1L << (COMPRESSION - 342)) | (1L << (CONNECTION - 342)) | (1L << (DATA - 342)) | (1L << (DELAY_KEY_WRITE - 342)) | (1L << (ENCRYPTION - 342)) | (1L << (ENGINE - 342)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (INSERT_METHOD - 448)) | (1L << (KEY_BLOCK_SIZE - 448)) | (1L << (MAX_ROWS - 448)) | (1L << (MIN_ROWS - 448)))) != 0) || ((((_la - 529)) & ~0x3f) == 0 && ((1L << (_la - 529)) & ((1L << (PACK_KEYS - 529)) | (1L << (PASSWORD - 529)) | (1L << (ROW_FORMAT - 529)))) != 0) || ((((_la - 609)) & ~0x3f) == 0 && ((1L << (_la - 609)) & ((1L << (STATS_AUTO_RECALC - 609)) | (1L << (STATS_PERSISTENT - 609)) | (1L << (STATS_SAMPLE_PAGES - 609)) | (1L << (STORAGE - 609)) | (1L << (TABLESPACE - 609)) | (1L << (TABLE_TYPE - 609)))) != 0) || _la==CHARSET) {
					{
					setState(1087);
					tableOption();
					setState(1094);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (CHARACTER - 38)) | (1L << (COLLATE - 38)) | (1L << (DEFAULT - 38)) | (1L << (INDEX - 38)))) != 0) || _la==UNION || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (AUTO_INCREMENT - 342)) | (1L << (AVG_ROW_LENGTH - 342)) | (1L << (CHECKSUM - 342)) | (1L << (PAGE_CHECKSUM - 342)) | (1L << (COMMENT - 342)) | (1L << (COMPRESSION - 342)) | (1L << (CONNECTION - 342)) | (1L << (DATA - 342)) | (1L << (DELAY_KEY_WRITE - 342)) | (1L << (ENCRYPTION - 342)) | (1L << (ENGINE - 342)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (INSERT_METHOD - 448)) | (1L << (KEY_BLOCK_SIZE - 448)) | (1L << (MAX_ROWS - 448)) | (1L << (MIN_ROWS - 448)))) != 0) || ((((_la - 529)) & ~0x3f) == 0 && ((1L << (_la - 529)) & ((1L << (PACK_KEYS - 529)) | (1L << (PASSWORD - 529)) | (1L << (ROW_FORMAT - 529)))) != 0) || ((((_la - 609)) & ~0x3f) == 0 && ((1L << (_la - 609)) & ((1L << (STATS_AUTO_RECALC - 609)) | (1L << (STATS_PERSISTENT - 609)) | (1L << (STATS_SAMPLE_PAGES - 609)) | (1L << (STORAGE - 609)) | (1L << (TABLESPACE - 609)) | (1L << (TABLE_TYPE - 609)))) != 0) || _la==CHARSET || _la==COMMA) {
						{
						{
						setState(1089);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1088);
							match(COMMA);
							}
						}

						setState(1091);
						tableOption();
						}
						}
						setState(1096);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1100);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1099);
					partitionDefinitions();
					}
				}

				setState(1103);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					setState(1102);
					((QueryCreateTableContext)_localctx).keyViolate = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
						((QueryCreateTableContext)_localctx).keyViolate = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1106);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1105);
					match(AS);
					}
				}

				setState(1108);
				selectStatement();
				}
				break;
			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1110);
				match(CREATE);
				setState(1112);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1111);
					match(TEMPORARY);
					}
				}

				setState(1114);
				match(TABLE);
				setState(1116);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1115);
					ifNotExists();
					}
				}

				setState(1118);
				tableName();
				setState(1119);
				createDefinitions();
				setState(1130);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
				case 1:
					{
					setState(1120);
					tableOption();
					setState(1127);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1122);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1121);
								match(COMMA);
								}
							}

							setState(1124);
							tableOption();
							}
							} 
						}
						setState(1129);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
					}
					}
					break;
				}
				setState(1133);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1132);
					partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceInnodbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext fileBlockSize;
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(SpeakQlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SpeakQlParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(SpeakQlParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(SpeakQlParser.FILE_BLOCK_SIZE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(SpeakQlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(SpeakQlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode ENGINE() { return getToken(SpeakQlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceInnodb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCreateTablespaceInnodb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCreateTablespaceInnodb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCreateTablespaceInnodb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceInnodbContext createTablespaceInnodb() throws RecognitionException {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_createTablespaceInnodb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1137);
			match(CREATE);
			setState(1138);
			match(TABLESPACE);
			setState(1139);
			uid();
			setState(1140);
			match(ADD);
			setState(1141);
			match(DATAFILE);
			setState(1142);
			((CreateTablespaceInnodbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1146);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				setState(1143);
				match(FILE_BLOCK_SIZE);
				setState(1144);
				match(EQUAL_SYMBOL);
				setState(1145);
				((CreateTablespaceInnodbContext)_localctx).fileBlockSize = fileSizeLiteral();
				}
			}

			setState(1153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(1148);
				match(ENGINE);
				setState(1150);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1149);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1152);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceNdbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext extentSize;
		public FileSizeLiteralContext initialSize;
		public FileSizeLiteralContext autoextendSize;
		public FileSizeLiteralContext maxSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(SpeakQlParser.TABLESPACE, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(SpeakQlParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(SpeakQlParser.DATAFILE, 0); }
		public TerminalNode USE() { return getToken(SpeakQlParser.USE, 0); }
		public TerminalNode LOGFILE() { return getToken(SpeakQlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(SpeakQlParser.GROUP, 0); }
		public TerminalNode ENGINE() { return getToken(SpeakQlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(SpeakQlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(SpeakQlParser.STRING_LITERAL, i);
		}
		public TerminalNode EXTENT_SIZE() { return getToken(SpeakQlParser.EXTENT_SIZE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(SpeakQlParser.INITIAL_SIZE, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(SpeakQlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(SpeakQlParser.MAX_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(SpeakQlParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(SpeakQlParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(SpeakQlParser.COMMENT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(SpeakQlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(SpeakQlParser.EQUAL_SYMBOL, i);
		}
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceNdb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCreateTablespaceNdb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCreateTablespaceNdb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCreateTablespaceNdb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceNdbContext createTablespaceNdb() throws RecognitionException {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createTablespaceNdb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1155);
			match(CREATE);
			setState(1156);
			match(TABLESPACE);
			setState(1157);
			uid();
			setState(1158);
			match(ADD);
			setState(1159);
			match(DATAFILE);
			setState(1160);
			((CreateTablespaceNdbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1161);
			match(USE);
			setState(1162);
			match(LOGFILE);
			setState(1163);
			match(GROUP);
			setState(1164);
			uid();
			setState(1170);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				setState(1165);
				match(EXTENT_SIZE);
				setState(1167);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1166);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1169);
				((CreateTablespaceNdbContext)_localctx).extentSize = fileSizeLiteral();
				}
			}

			setState(1177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(1172);
				match(INITIAL_SIZE);
				setState(1174);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1173);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1176);
				((CreateTablespaceNdbContext)_localctx).initialSize = fileSizeLiteral();
				}
			}

			setState(1184);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				setState(1179);
				match(AUTOEXTEND_SIZE);
				setState(1181);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1180);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1183);
				((CreateTablespaceNdbContext)_localctx).autoextendSize = fileSizeLiteral();
				}
			}

			setState(1191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_SIZE) {
				{
				setState(1186);
				match(MAX_SIZE);
				setState(1188);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1187);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1190);
				((CreateTablespaceNdbContext)_localctx).maxSize = fileSizeLiteral();
				}
			}

			setState(1198);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(1193);
				match(NODEGROUP);
				setState(1195);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1194);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1197);
				uid();
				}
			}

			setState(1201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(1200);
				match(WAIT);
				}
			}

			setState(1208);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1203);
				match(COMMENT);
				setState(1205);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1204);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1207);
				((CreateTablespaceNdbContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(1210);
			match(ENGINE);
			setState(1212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(1211);
				match(EQUAL_SYMBOL);
				}
			}

			setState(1214);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerContext extends ParserRuleContext {
		public FullIdContext thisTrigger;
		public Token triggerTime;
		public Token triggerEvent;
		public Token triggerPlace;
		public FullIdContext otherTrigger;
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(SpeakQlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(SpeakQlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SpeakQlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(SpeakQlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(SpeakQlParser.ROW, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(SpeakQlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(SpeakQlParser.AFTER, 0); }
		public TerminalNode INSERT() { return getToken(SpeakQlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(SpeakQlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(SpeakQlParser.DELETE, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode FOLLOWS() { return getToken(SpeakQlParser.FOLLOWS, 0); }
		public TerminalNode PRECEDES() { return getToken(SpeakQlParser.PRECEDES, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCreateTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCreateTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCreateTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_createTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1216);
			match(CREATE);
			setState(1218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1217);
				ownerStatement();
				}
			}

			setState(1220);
			match(TRIGGER);
			setState(1221);
			((CreateTriggerContext)_localctx).thisTrigger = fullId();
			setState(1222);
			((CreateTriggerContext)_localctx).triggerTime = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				((CreateTriggerContext)_localctx).triggerTime = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1223);
			((CreateTriggerContext)_localctx).triggerEvent = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				((CreateTriggerContext)_localctx).triggerEvent = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1224);
			match(ON);
			setState(1225);
			tableName();
			setState(1226);
			match(FOR);
			setState(1227);
			match(EACH);
			setState(1228);
			match(ROW);
			setState(1231);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				setState(1229);
				((CreateTriggerContext)_localctx).triggerPlace = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
					((CreateTriggerContext)_localctx).triggerPlace = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1230);
				((CreateTriggerContext)_localctx).otherTrigger = fullId();
				}
				break;
			}
			setState(1233);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOption;
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(SpeakQlParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(SpeakQlParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode OR() { return getToken(SpeakQlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SpeakQlParser.REPLACE, 0); }
		public TerminalNode ALGORITHM() { return getToken(SpeakQlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(SpeakQlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(SpeakQlParser.SECURITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(SpeakQlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(SpeakQlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(SpeakQlParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(SpeakQlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(SpeakQlParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(SpeakQlParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(SpeakQlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(SpeakQlParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(SpeakQlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(SpeakQlParser.LOCAL, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1235);
			match(CREATE);
			setState(1238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1236);
				match(OR);
				setState(1237);
				match(REPLACE);
				}
			}

			setState(1243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(1240);
				match(ALGORITHM);
				setState(1241);
				match(EQUAL_SYMBOL);
				setState(1242);
				((CreateViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((CreateViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1246);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1245);
				ownerStatement();
				}
			}

			setState(1251);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(1248);
				match(SQL);
				setState(1249);
				match(SECURITY);
				setState(1250);
				((CreateViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((CreateViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1253);
			match(VIEW);
			setState(1254);
			fullId();
			setState(1259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1255);
				match(LR_BRACKET);
				setState(1256);
				uidList();
				setState(1257);
				match(RR_BRACKET);
				}
			}

			setState(1261);
			match(AS);
			setState(1262);
			selectStatement();
			setState(1269);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1263);
				match(WITH);
				setState(1265);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(1264);
					((CreateViewContext)_localctx).checkOption = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((CreateViewContext)_localctx).checkOption = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1267);
				match(CHECK);
				setState(1268);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseOptionContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(SpeakQlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(SpeakQlParser.CHARSET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(SpeakQlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(SpeakQlParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode COLLATE() { return getToken(SpeakQlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCreateDatabaseOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCreateDatabaseOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCreateDatabaseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_createDatabaseOption);
		int _la;
		try {
			setState(1294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1272);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1271);
					match(DEFAULT);
					}
				}

				setState(1277);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(1274);
					match(CHARACTER);
					setState(1275);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(1276);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1280);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1279);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1284);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(1282);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(1283);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1287);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1286);
					match(DEFAULT);
					}
				}

				setState(1289);
				match(COLLATE);
				setState(1291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1290);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1293);
				collationName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerStatementContext extends ParserRuleContext {
		public TerminalNode DEFINER() { return getToken(SpeakQlParser.DEFINER, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(SpeakQlParser.CURRENT_USER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public OwnerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ownerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterOwnerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitOwnerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitOwnerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerStatementContext ownerStatement() throws RecognitionException {
		OwnerStatementContext _localctx = new OwnerStatementContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_ownerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1296);
			match(DEFINER);
			setState(1297);
			match(EQUAL_SYMBOL);
			setState(1304);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
			case ID:
			case STRING_USER_NAME:
				{
				setState(1298);
				userName();
				}
				break;
			case CURRENT_USER:
				{
				setState(1299);
				match(CURRENT_USER);
				setState(1302);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1300);
					match(LR_BRACKET);
					setState(1301);
					match(RR_BRACKET);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScheduleExpressionContext extends ParserRuleContext {
		public ScheduleExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scheduleExpression; }
	 
		public ScheduleExpressionContext() { }
		public void copyFrom(ScheduleExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PreciseScheduleContext extends ScheduleExpressionContext {
		public TerminalNode AT() { return getToken(SpeakQlParser.AT, 0); }
		public TimestampValueContext timestampValue() {
			return getRuleContext(TimestampValueContext.class,0);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public PreciseScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPreciseSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPreciseSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPreciseSchedule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalScheduleContext extends ScheduleExpressionContext {
		public TimestampValueContext startTimestamp;
		public IntervalExprContext intervalExpr;
		public List<IntervalExprContext> startIntervals = new ArrayList<IntervalExprContext>();
		public TimestampValueContext endTimestamp;
		public List<IntervalExprContext> endIntervals = new ArrayList<IntervalExprContext>();
		public TerminalNode EVERY() { return getToken(SpeakQlParser.EVERY, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode STARTS() { return getToken(SpeakQlParser.STARTS, 0); }
		public TerminalNode ENDS() { return getToken(SpeakQlParser.ENDS, 0); }
		public List<TimestampValueContext> timestampValue() {
			return getRuleContexts(TimestampValueContext.class);
		}
		public TimestampValueContext timestampValue(int i) {
			return getRuleContext(TimestampValueContext.class,i);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public IntervalScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIntervalSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIntervalSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIntervalSchedule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScheduleExpressionContext scheduleExpression() throws RecognitionException {
		ScheduleExpressionContext _localctx = new ScheduleExpressionContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_scheduleExpression);
		int _la;
		try {
			setState(1340);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1306);
				match(AT);
				setState(1307);
				timestampValue();
				setState(1311);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(1308);
					intervalExpr();
					}
					}
					setState(1313);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1314);
				match(EVERY);
				setState(1317);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					setState(1315);
					decimalLiteral();
					}
					break;
				case 2:
					{
					setState(1316);
					expression(0);
					}
					break;
				}
				setState(1319);
				intervalType();
				setState(1328);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTS) {
					{
					setState(1320);
					match(STARTS);
					setState(1321);
					((IntervalScheduleContext)_localctx).startTimestamp = timestampValue();
					setState(1325);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1322);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).startIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1327);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDS) {
					{
					setState(1330);
					match(ENDS);
					setState(1331);
					((IntervalScheduleContext)_localctx).endTimestamp = timestampValue();
					setState(1335);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1332);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).endIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1337);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimestampValueContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SpeakQlParser.CURRENT_TIMESTAMP, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestampValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTimestampValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTimestampValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTimestampValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimestampValueContext timestampValue() throws RecognitionException {
		TimestampValueContext _localctx = new TimestampValueContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_timestampValue);
		try {
			setState(1346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1342);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1343);
				stringLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1344);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1345);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalExprContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(SpeakQlParser.PLUS, 0); }
		public TerminalNode INTERVAL() { return getToken(SpeakQlParser.INTERVAL, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIntervalExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIntervalExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIntervalExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalExprContext intervalExpr() throws RecognitionException {
		IntervalExprContext _localctx = new IntervalExprContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_intervalExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1348);
			match(PLUS);
			setState(1349);
			match(INTERVAL);
			setState(1352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				setState(1350);
				decimalLiteral();
				}
				break;
			case 2:
				{
				setState(1351);
				expression(0);
				}
				break;
			}
			setState(1354);
			intervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeContext extends ParserRuleContext {
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public TerminalNode YEAR() { return getToken(SpeakQlParser.YEAR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(SpeakQlParser.YEAR_MONTH, 0); }
		public TerminalNode DAY_HOUR() { return getToken(SpeakQlParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(SpeakQlParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(SpeakQlParser.DAY_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(SpeakQlParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(SpeakQlParser.HOUR_SECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(SpeakQlParser.MINUTE_SECOND, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(SpeakQlParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(SpeakQlParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(SpeakQlParser.HOUR_MICROSECOND, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(SpeakQlParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIntervalType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIntervalType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIntervalType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeContext intervalType() throws RecognitionException {
		IntervalTypeContext _localctx = new IntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_intervalType);
		try {
			setState(1369);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				enterOuterAlt(_localctx, 1);
				{
				setState(1356);
				intervalTypeBase();
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1357);
				match(YEAR);
				}
				break;
			case YEAR_MONTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1358);
				match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				enterOuterAlt(_localctx, 4);
				{
				setState(1359);
				match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1360);
				match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				enterOuterAlt(_localctx, 6);
				{
				setState(1361);
				match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1362);
				match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				enterOuterAlt(_localctx, 8);
				{
				setState(1363);
				match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				enterOuterAlt(_localctx, 9);
				{
				setState(1364);
				match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				enterOuterAlt(_localctx, 10);
				{
				setState(1365);
				match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				enterOuterAlt(_localctx, 11);
				{
				setState(1366);
				match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				enterOuterAlt(_localctx, 12);
				{
				setState(1367);
				match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				enterOuterAlt(_localctx, 13);
				{
				setState(1368);
				match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnableTypeContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(SpeakQlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(SpeakQlParser.DISABLE, 0); }
		public TerminalNode ON() { return getToken(SpeakQlParser.ON, 0); }
		public TerminalNode SLAVE() { return getToken(SpeakQlParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterEnableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitEnableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitEnableType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableTypeContext enableType() throws RecognitionException {
		EnableTypeContext _localctx = new EnableTypeContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_enableType);
		try {
			setState(1376);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1371);
				match(ENABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1372);
				match(DISABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1373);
				match(DISABLE);
				setState(1374);
				match(ON);
				setState(1375);
				match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(SpeakQlParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(SpeakQlParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(SpeakQlParser.HASH, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIndexType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIndexType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIndexType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1378);
			match(USING);
			setState(1379);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(SpeakQlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SpeakQlParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(SpeakQlParser.PARSER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(SpeakQlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode INVISIBLE() { return getToken(SpeakQlParser.INVISIBLE, 0); }
		public TerminalNode VISIBLE() { return getToken(SpeakQlParser.VISIBLE, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_indexOption);
		int _la;
		try {
			setState(1394);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1381);
				match(KEY_BLOCK_SIZE);
				setState(1383);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1382);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1385);
				fileSizeLiteral();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1386);
				indexType();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1387);
				match(WITH);
				setState(1388);
				match(PARSER);
				setState(1389);
				uid();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1390);
				match(COMMENT);
				setState(1391);
				match(STRING_LITERAL);
				}
				break;
			case INVISIBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1392);
				match(INVISIBLE);
				}
				break;
			case VISIBLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1393);
				match(VISIBLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureParameterContext extends ParserRuleContext {
		public Token direction;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode IN() { return getToken(SpeakQlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(SpeakQlParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(SpeakQlParser.INOUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterProcedureParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitProcedureParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitProcedureParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureParameterContext procedureParameter() throws RecognitionException {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_procedureParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (IN - 90)) | (1L << (INOUT - 90)) | (1L << (OUT - 90)))) != 0)) {
				{
				setState(1396);
				((ProcedureParameterContext)_localctx).direction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (IN - 90)) | (1L << (INOUT - 90)) | (1L << (OUT - 90)))) != 0)) ) {
					((ProcedureParameterContext)_localctx).direction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1399);
			uid();
			setState(1400);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFunctionParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFunctionParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFunctionParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_functionParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1402);
			uid();
			setState(1403);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineOptionContext extends ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
	 
		public RoutineOptionContext() { }
		public void copyFrom(RoutineOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RoutineBehaviorContext extends RoutineOptionContext {
		public TerminalNode DETERMINISTIC() { return getToken(SpeakQlParser.DETERMINISTIC, 0); }
		public TerminalNode NOT() { return getToken(SpeakQlParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRoutineBehavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRoutineBehavior(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRoutineBehavior(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineLanguageContext extends RoutineOptionContext {
		public TerminalNode LANGUAGE() { return getToken(SpeakQlParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(SpeakQlParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRoutineLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRoutineLanguage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRoutineLanguage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineCommentContext extends RoutineOptionContext {
		public TerminalNode COMMENT() { return getToken(SpeakQlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public RoutineCommentContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRoutineComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRoutineComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRoutineComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineSecurityContext extends RoutineOptionContext {
		public Token context;
		public TerminalNode SQL() { return getToken(SpeakQlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(SpeakQlParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(SpeakQlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(SpeakQlParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRoutineSecurity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRoutineSecurity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRoutineSecurity(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineDataContext extends RoutineOptionContext {
		public TerminalNode CONTAINS() { return getToken(SpeakQlParser.CONTAINS, 0); }
		public TerminalNode SQL() { return getToken(SpeakQlParser.SQL, 0); }
		public TerminalNode NO() { return getToken(SpeakQlParser.NO, 0); }
		public TerminalNode READS() { return getToken(SpeakQlParser.READS, 0); }
		public TerminalNode DATA() { return getToken(SpeakQlParser.DATA, 0); }
		public TerminalNode MODIFIES() { return getToken(SpeakQlParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRoutineData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRoutineData(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRoutineData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_routineOption);
		int _la;
		try {
			setState(1428);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1405);
				match(COMMENT);
				setState(1406);
				match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1407);
				match(LANGUAGE);
				setState(1408);
				match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1410);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1409);
					match(NOT);
					}
				}

				setState(1412);
				match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1423);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONTAINS:
					{
					setState(1413);
					match(CONTAINS);
					setState(1414);
					match(SQL);
					}
					break;
				case NO:
					{
					setState(1415);
					match(NO);
					setState(1416);
					match(SQL);
					}
					break;
				case READS:
					{
					setState(1417);
					match(READS);
					setState(1418);
					match(SQL);
					setState(1419);
					match(DATA);
					}
					break;
				case MODIFIES:
					{
					setState(1420);
					match(MODIFIES);
					setState(1421);
					match(SQL);
					setState(1422);
					match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1425);
				match(SQL);
				setState(1426);
				match(SECURITY);
				setState(1427);
				((RoutineSecurityContext)_localctx).context = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionContext extends ParserRuleContext {
		public TerminalNode HOST() { return getToken(SpeakQlParser.HOST, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode DATABASE() { return getToken(SpeakQlParser.DATABASE, 0); }
		public TerminalNode USER() { return getToken(SpeakQlParser.USER, 0); }
		public TerminalNode PASSWORD() { return getToken(SpeakQlParser.PASSWORD, 0); }
		public TerminalNode SOCKET() { return getToken(SpeakQlParser.SOCKET, 0); }
		public TerminalNode OWNER() { return getToken(SpeakQlParser.OWNER, 0); }
		public TerminalNode PORT() { return getToken(SpeakQlParser.PORT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterServerOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitServerOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitServerOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_serverOption);
		try {
			setState(1444);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST:
				enterOuterAlt(_localctx, 1);
				{
				setState(1430);
				match(HOST);
				setState(1431);
				match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1432);
				match(DATABASE);
				setState(1433);
				match(STRING_LITERAL);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1434);
				match(USER);
				setState(1435);
				match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(1436);
				match(PASSWORD);
				setState(1437);
				match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				enterOuterAlt(_localctx, 5);
				{
				setState(1438);
				match(SOCKET);
				setState(1439);
				match(STRING_LITERAL);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 6);
				{
				setState(1440);
				match(OWNER);
				setState(1441);
				match(STRING_LITERAL);
				}
				break;
			case PORT:
				enterOuterAlt(_localctx, 7);
				{
				setState(1442);
				match(PORT);
				setState(1443);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCreateDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCreateDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCreateDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionsContext createDefinitions() throws RecognitionException {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_createDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1446);
			match(LR_BRACKET);
			setState(1447);
			createDefinition();
			setState(1452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1448);
				match(COMMA);
				setState(1449);
				createDefinition();
				}
				}
				setState(1454);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1455);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionContext extends ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
	 
		public CreateDefinitionContext() { }
		public void copyFrom(CreateDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ColumnDeclarationContext extends CreateDefinitionContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterColumnDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitColumnDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitColumnDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstraintDeclarationContext extends CreateDefinitionContext {
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterConstraintDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitConstraintDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitConstraintDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IndexDeclarationContext extends CreateDefinitionContext {
		public IndexColumnDefinitionContext indexColumnDefinition() {
			return getRuleContext(IndexColumnDefinitionContext.class,0);
		}
		public IndexDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_createDefinition);
		try {
			setState(1462);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case OPTIONAL:
				_localctx = new ColumnDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1457);
				uid();
				setState(1458);
				columnDefinition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				_localctx = new ConstraintDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1460);
				tableConstraint();
				}
				break;
			case FULLTEXT:
			case INDEX:
			case KEY:
			case SPATIAL:
				_localctx = new IndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1461);
				indexColumnDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_columnDefinition);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1464);
			dataType();
			setState(1468);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,130,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1465);
					columnConstraint();
					}
					} 
				}
				setState(1470);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,130,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
	 
		public ColumnConstraintContext() { }
		public void copyFrom(ColumnConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StorageColumnConstraintContext extends ColumnConstraintContext {
		public Token storageval;
		public TerminalNode STORAGE() { return getToken(SpeakQlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(SpeakQlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(SpeakQlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterStorageColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitStorageColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitStorageColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class VisibilityColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode VISIBLE() { return getToken(SpeakQlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(SpeakQlParser.INVISIBLE, 0); }
		public VisibilityColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterVisibilityColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitVisibilityColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitVisibilityColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(SpeakQlParser.AUTO_INCREMENT, 0); }
		public TerminalNode ON() { return getToken(SpeakQlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(SpeakQlParser.UPDATE, 0); }
		public CurrentTimestampContext currentTimestamp() {
			return getRuleContext(CurrentTimestampContext.class,0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAutoIncrementColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAutoIncrementColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAutoIncrementColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommentColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COMMENT() { return getToken(SpeakQlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCommentColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCommentColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCommentColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode UNIQUE() { return getToken(SpeakQlParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUniqueKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUniqueKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUniqueKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode SERIAL() { return getToken(SpeakQlParser.SERIAL, 0); }
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public TerminalNode VALUE() { return getToken(SpeakQlParser.VALUE, 0); }
		public SerialDefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSerialDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSerialDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSerialDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GeneratedColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AS() { return getToken(SpeakQlParser.AS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode GENERATED() { return getToken(SpeakQlParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(SpeakQlParser.ALWAYS, 0); }
		public TerminalNode VIRTUAL() { return getToken(SpeakQlParser.VIRTUAL, 0); }
		public TerminalNode STORED() { return getToken(SpeakQlParser.STORED, 0); }
		public GeneratedColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterGeneratedColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitGeneratedColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitGeneratedColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FormatColumnConstraintContext extends ColumnConstraintContext {
		public Token colformat;
		public TerminalNode COLUMN_FORMAT() { return getToken(SpeakQlParser.COLUMN_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(SpeakQlParser.FIXED, 0); }
		public TerminalNode DYNAMIC() { return getToken(SpeakQlParser.DYNAMIC, 0); }
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFormatColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFormatColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFormatColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COLLATE() { return getToken(SpeakQlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCollateColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCollateColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCollateColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(SpeakQlParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPrimaryKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPrimaryKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPrimaryKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckColumnConstraintContext extends ColumnConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(SpeakQlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SpeakQlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCheckColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCheckColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCheckColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NullColumnConstraintContext extends ColumnConstraintContext {
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterNullColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitNullColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitNullColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReferenceColumnConstraintContext extends ColumnConstraintContext {
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterReferenceColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitReferenceColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitReferenceColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_columnConstraint);
		int _la;
		try {
			setState(1524);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1471);
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1472);
				match(DEFAULT);
				setState(1473);
				defaultValue();
				}
				break;
			case VISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1474);
				match(VISIBLE);
				}
				break;
			case INVISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1475);
				match(INVISIBLE);
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1480);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO_INCREMENT:
					{
					setState(1476);
					match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					setState(1477);
					match(ON);
					setState(1478);
					match(UPDATE);
					setState(1479);
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1483);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(1482);
					match(PRIMARY);
					}
				}

				setState(1485);
				match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1486);
				match(UNIQUE);
				setState(1488);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
				case 1:
					{
					setState(1487);
					match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1490);
				match(COMMENT);
				setState(1491);
				match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1492);
				match(COLUMN_FORMAT);
				setState(1493);
				((FormatColumnConstraintContext)_localctx).colformat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1494);
				match(STORAGE);
				setState(1495);
				((StorageColumnConstraintContext)_localctx).storageval = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1496);
				referenceDefinition();
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1497);
				match(COLLATE);
				setState(1498);
				collationName();
				}
				break;
			case AS:
			case GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1501);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED) {
					{
					setState(1499);
					match(GENERATED);
					setState(1500);
					match(ALWAYS);
					}
				}

				setState(1503);
				match(AS);
				setState(1504);
				match(LR_BRACKET);
				setState(1505);
				expression(0);
				setState(1506);
				match(RR_BRACKET);
				setState(1508);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORED || _la==VIRTUAL) {
					{
					setState(1507);
					_la = _input.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1510);
				match(SERIAL);
				setState(1511);
				match(DEFAULT);
				setState(1512);
				match(VALUE);
				}
				break;
			case CHECK:
			case CONSTRAINT:
				_localctx = new CheckColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1517);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1513);
					match(CONSTRAINT);
					setState(1515);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
						{
						setState(1514);
						((CheckColumnConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1519);
				match(CHECK);
				setState(1520);
				match(LR_BRACKET);
				setState(1521);
				expression(0);
				setState(1522);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
	 
		public TableConstraintContext() { }
		public void copyFrom(TableConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UniqueKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext index;
		public TerminalNode UNIQUE() { return getToken(SpeakQlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SpeakQlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUniqueKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUniqueKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUniqueKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(SpeakQlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SpeakQlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCheckTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode PRIMARY() { return getToken(SpeakQlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SpeakQlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPrimaryKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPrimaryKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPrimaryKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ForeignKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode FOREIGN() { return getToken(SpeakQlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SpeakQlParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterForeignKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitForeignKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitForeignKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_tableConstraint);
		int _la;
		try {
			setState(1595);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1526);
					match(CONSTRAINT);
					setState(1528);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
						{
						setState(1527);
						((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1532);
				match(PRIMARY);
				setState(1533);
				match(KEY);
				setState(1535);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
					{
					setState(1534);
					((PrimaryKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1537);
					indexType();
					}
				}

				setState(1540);
				indexColumnNames();
				setState(1544);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1541);
					indexOption();
					}
					}
					setState(1546);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1551);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1547);
					match(CONSTRAINT);
					setState(1549);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
						{
						setState(1548);
						((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1553);
				match(UNIQUE);
				setState(1555);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1554);
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1558);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
					{
					setState(1557);
					((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1561);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1560);
					indexType();
					}
				}

				setState(1563);
				indexColumnNames();
				setState(1567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1564);
					indexOption();
					}
					}
					setState(1569);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1570);
					match(CONSTRAINT);
					setState(1572);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
						{
						setState(1571);
						((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1576);
				match(FOREIGN);
				setState(1577);
				match(KEY);
				setState(1579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
					{
					setState(1578);
					((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1581);
				indexColumnNames();
				setState(1582);
				referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1588);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1584);
					match(CONSTRAINT);
					setState(1586);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
						{
						setState(1585);
						((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1590);
				match(CHECK);
				setState(1591);
				match(LR_BRACKET);
				setState(1592);
				expression(0);
				setState(1593);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceDefinitionContext extends ParserRuleContext {
		public Token matchType;
		public TerminalNode REFERENCES() { return getToken(SpeakQlParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(SpeakQlParser.MATCH, 0); }
		public ReferenceActionContext referenceAction() {
			return getRuleContext(ReferenceActionContext.class,0);
		}
		public TerminalNode FULL() { return getToken(SpeakQlParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(SpeakQlParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(SpeakQlParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterReferenceDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitReferenceDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitReferenceDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceDefinitionContext referenceDefinition() throws RecognitionException {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_referenceDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1597);
			match(REFERENCES);
			setState(1598);
			tableName();
			setState(1600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				setState(1599);
				indexColumnNames();
				}
				break;
			}
			setState(1604);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH) {
				{
				setState(1602);
				match(MATCH);
				setState(1603);
				((ReferenceDefinitionContext)_localctx).matchType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					((ReferenceDefinitionContext)_localctx).matchType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1607);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				{
				setState(1606);
				referenceAction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceActionContext extends ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		public List<TerminalNode> ON() { return getTokens(SpeakQlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(SpeakQlParser.ON, i);
		}
		public TerminalNode DELETE() { return getToken(SpeakQlParser.DELETE, 0); }
		public List<ReferenceControlTypeContext> referenceControlType() {
			return getRuleContexts(ReferenceControlTypeContext.class);
		}
		public ReferenceControlTypeContext referenceControlType(int i) {
			return getRuleContext(ReferenceControlTypeContext.class,i);
		}
		public TerminalNode UPDATE() { return getToken(SpeakQlParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterReferenceAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitReferenceAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitReferenceAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceActionContext referenceAction() throws RecognitionException {
		ReferenceActionContext _localctx = new ReferenceActionContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_referenceAction);
		try {
			setState(1625);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1609);
				match(ON);
				setState(1610);
				match(DELETE);
				setState(1611);
				((ReferenceActionContext)_localctx).onDelete = referenceControlType();
				setState(1615);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
				case 1:
					{
					setState(1612);
					match(ON);
					setState(1613);
					match(UPDATE);
					setState(1614);
					((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1617);
				match(ON);
				setState(1618);
				match(UPDATE);
				setState(1619);
				((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
				setState(1623);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
				case 1:
					{
					setState(1620);
					match(ON);
					setState(1621);
					match(DELETE);
					setState(1622);
					((ReferenceActionContext)_localctx).onDelete = referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceControlTypeContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(SpeakQlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(SpeakQlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(SpeakQlParser.NULL_LITERAL, 0); }
		public TerminalNode NO() { return getToken(SpeakQlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(SpeakQlParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceControlType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterReferenceControlType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitReferenceControlType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitReferenceControlType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_referenceControlType);
		try {
			setState(1633);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1627);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1628);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(1629);
				match(SET);
				setState(1630);
				match(NULL_LITERAL);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(1631);
				match(NO);
				setState(1632);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnDefinitionContext extends ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnDefinition; }
	 
		public IndexColumnDefinitionContext() { }
		public void copyFrom(IndexColumnDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(SpeakQlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(SpeakQlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSpecialIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSpecialIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSpecialIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSimpleIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSimpleIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSimpleIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnDefinitionContext indexColumnDefinition() throws RecognitionException {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_indexColumnDefinition);
		int _la;
		try {
			setState(1663);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1635);
				((SimpleIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
					{
					setState(1636);
					uid();
					}
				}

				setState(1640);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1639);
					indexType();
					}
				}

				setState(1642);
				indexColumnNames();
				setState(1646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1643);
					indexOption();
					}
					}
					setState(1648);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1649);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1650);
					((SpecialIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
					{
					setState(1653);
					uid();
					}
				}

				setState(1656);
				indexColumnNames();
				setState(1660);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1657);
					indexOption();
					}
					}
					setState(1662);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptionContext extends ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOption; }
	 
		public TableOptionContext() { }
		public void copyFrom(TableOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableOptionEngineContext extends TableOptionContext {
		public TerminalNode ENGINE() { return getToken(SpeakQlParser.ENGINE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TableOptionEngineContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionMaxRowsContext extends TableOptionContext {
		public TerminalNode MAX_ROWS() { return getToken(SpeakQlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMaxRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCollateContext extends TableOptionContext {
		public TerminalNode COLLATE() { return getToken(SpeakQlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCollateContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionCollate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPersistentContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_PERSISTENT() { return getToken(SpeakQlParser.STATS_PERSISTENT, 0); }
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(SpeakQlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(SpeakQlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPersistentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionPersistent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionPersistent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionPersistent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionTablespaceContext extends TableOptionContext {
		public TerminalNode TABLESPACE() { return getToken(SpeakQlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TablespaceStorageContext tablespaceStorage() {
			return getRuleContext(TablespaceStorageContext.class,0);
		}
		public TableOptionTablespaceContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPackKeysContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode PACK_KEYS() { return getToken(SpeakQlParser.PACK_KEYS, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(SpeakQlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(SpeakQlParser.ONE_DECIMAL, 0); }
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPackKeysContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionPackKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionPackKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionPackKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPasswordContext extends TableOptionContext {
		public TerminalNode PASSWORD() { return getToken(SpeakQlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPasswordContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionUnionContext extends TableOptionContext {
		public TerminalNode UNION() { return getToken(SpeakQlParser.UNION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionUnionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionUnion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionUnion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionSamplePageContext extends TableOptionContext {
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(SpeakQlParser.STATS_SAMPLE_PAGES, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionSamplePageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionSamplePage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionSamplePage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionSamplePage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCharsetContext extends TableOptionContext {
		public TerminalNode CHARACTER() { return getToken(SpeakQlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(SpeakQlParser.CHARSET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(SpeakQlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(SpeakQlParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCharsetContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionIndexDirectoryContext extends TableOptionContext {
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(SpeakQlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionIndexDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionTableTypeContext extends TableOptionContext {
		public TerminalNode TABLE_TYPE() { return getToken(SpeakQlParser.TABLE_TYPE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableTypeContext tableType() {
			return getRuleContext(TableTypeContext.class,0);
		}
		public TableOptionTableTypeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionTableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionTableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionTableType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionKeyBlockSizeContext extends TableOptionContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(SpeakQlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionKeyBlockSizeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionKeyBlockSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionKeyBlockSize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionKeyBlockSize(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionEncryptionContext extends TableOptionContext {
		public TerminalNode ENCRYPTION() { return getToken(SpeakQlParser.ENCRYPTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionEncryption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionEncryption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionEncryption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionDataDirectoryContext extends TableOptionContext {
		public TerminalNode DATA() { return getToken(SpeakQlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(SpeakQlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionDataDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionRecalculationContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_AUTO_RECALC() { return getToken(SpeakQlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(SpeakQlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(SpeakQlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRecalculationContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionRecalculation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionRecalculation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionRecalculation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAutoIncrementContext extends TableOptionContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(SpeakQlParser.AUTO_INCREMENT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoIncrementContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionAutoIncrement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionAutoIncrement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionAutoIncrement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionChecksumContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode CHECKSUM() { return getToken(SpeakQlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(SpeakQlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(SpeakQlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(SpeakQlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionChecksumContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionChecksum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionChecksum(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionChecksum(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionDelayContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode DELAY_KEY_WRITE() { return getToken(SpeakQlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(SpeakQlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(SpeakQlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDelayContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionDelay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionDelay(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionDelay(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionConnectionContext extends TableOptionContext {
		public TerminalNode CONNECTION() { return getToken(SpeakQlParser.CONNECTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionConnectionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionConnection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionConnection(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCommentContext extends TableOptionContext {
		public TerminalNode COMMENT() { return getToken(SpeakQlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCommentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAverageContext extends TableOptionContext {
		public TerminalNode AVG_ROW_LENGTH() { return getToken(SpeakQlParser.AVG_ROW_LENGTH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAverageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionAverage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionAverage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionAverage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionRowFormatContext extends TableOptionContext {
		public Token rowFormat;
		public TerminalNode ROW_FORMAT() { return getToken(SpeakQlParser.ROW_FORMAT, 0); }
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public TerminalNode DYNAMIC() { return getToken(SpeakQlParser.DYNAMIC, 0); }
		public TerminalNode FIXED() { return getToken(SpeakQlParser.FIXED, 0); }
		public TerminalNode COMPRESSED() { return getToken(SpeakQlParser.COMPRESSED, 0); }
		public TerminalNode REDUNDANT() { return getToken(SpeakQlParser.REDUNDANT, 0); }
		public TerminalNode COMPACT() { return getToken(SpeakQlParser.COMPACT, 0); }
		public TerminalNode ID() { return getToken(SpeakQlParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRowFormatContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionRowFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionRowFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionRowFormat(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCompressionContext extends TableOptionContext {
		public TerminalNode COMPRESSION() { return getToken(SpeakQlParser.COMPRESSION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode ID() { return getToken(SpeakQlParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCompressionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionCompression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionCompression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionCompression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionInsertMethodContext extends TableOptionContext {
		public Token insertMethod;
		public TerminalNode INSERT_METHOD() { return getToken(SpeakQlParser.INSERT_METHOD, 0); }
		public TerminalNode NO() { return getToken(SpeakQlParser.NO, 0); }
		public TerminalNode FIRST() { return getToken(SpeakQlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(SpeakQlParser.LAST, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionInsertMethodContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionInsertMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionInsertMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionInsertMethod(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionMinRowsContext extends TableOptionContext {
		public TerminalNode MIN_ROWS() { return getToken(SpeakQlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMinRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableOptionMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptionContext tableOption() throws RecognitionException {
		TableOptionContext _localctx = new TableOptionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_tableOption);
		int _la;
		try {
			setState(1814);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1665);
				match(ENGINE);
				setState(1667);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1666);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1670);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONNECT || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (ARCHIVE - 756)) | (1L << (BLACKHOLE - 756)) | (1L << (CSV - 756)) | (1L << (FEDERATED - 756)) | (1L << (INNODB - 756)) | (1L << (MEMORY - 756)) | (1L << (MRG_MYISAM - 756)) | (1L << (MYISAM - 756)) | (1L << (NDB - 756)) | (1L << (NDBCLUSTER - 756)) | (1L << (PERFORMANCE_SCHEMA - 756)) | (1L << (TOKUDB - 756)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)))) != 0)) {
					{
					setState(1669);
					engineName();
					}
				}

				}
				break;
			case 2:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1672);
				match(AUTO_INCREMENT);
				setState(1674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1673);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1676);
				decimalLiteral();
				}
				break;
			case 3:
				_localctx = new TableOptionAverageContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1677);
				match(AVG_ROW_LENGTH);
				setState(1679);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1678);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1681);
				decimalLiteral();
				}
				break;
			case 4:
				_localctx = new TableOptionCharsetContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1683);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1682);
					match(DEFAULT);
					}
				}

				setState(1688);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(1685);
					match(CHARACTER);
					setState(1686);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(1687);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1691);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1690);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1695);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(1693);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(1694);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				_localctx = new TableOptionChecksumContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1697);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM || _la==PAGE_CHECKSUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1699);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1698);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1701);
				((TableOptionChecksumContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 6:
				_localctx = new TableOptionCollateContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1703);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1702);
					match(DEFAULT);
					}
				}

				setState(1705);
				match(COLLATE);
				setState(1707);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1706);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1709);
				collationName();
				}
				break;
			case 7:
				_localctx = new TableOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1710);
				match(COMMENT);
				setState(1712);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1711);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1714);
				match(STRING_LITERAL);
				}
				break;
			case 8:
				_localctx = new TableOptionCompressionContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1715);
				match(COMPRESSION);
				setState(1717);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1716);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1719);
				_la = _input.LA(1);
				if ( !(_la==STRING_LITERAL || _la==ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new TableOptionConnectionContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1720);
				match(CONNECTION);
				setState(1722);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1721);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1724);
				match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1725);
				match(DATA);
				setState(1726);
				match(DIRECTORY);
				setState(1728);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1727);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1730);
				match(STRING_LITERAL);
				}
				break;
			case 11:
				_localctx = new TableOptionDelayContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1731);
				match(DELAY_KEY_WRITE);
				setState(1733);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1732);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1735);
				((TableOptionDelayContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new TableOptionEncryptionContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1736);
				match(ENCRYPTION);
				setState(1738);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1737);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1740);
				match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1741);
				match(INDEX);
				setState(1742);
				match(DIRECTORY);
				setState(1744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1743);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1746);
				match(STRING_LITERAL);
				}
				break;
			case 14:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1747);
				match(INSERT_METHOD);
				setState(1749);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1748);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1751);
				((TableOptionInsertMethodContext)_localctx).insertMethod = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1752);
				match(KEY_BLOCK_SIZE);
				setState(1754);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1753);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1756);
				fileSizeLiteral();
				}
				break;
			case 16:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1757);
				match(MAX_ROWS);
				setState(1759);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1758);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1761);
				decimalLiteral();
				}
				break;
			case 17:
				_localctx = new TableOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1762);
				match(MIN_ROWS);
				setState(1764);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1763);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1766);
				decimalLiteral();
				}
				break;
			case 18:
				_localctx = new TableOptionPackKeysContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1767);
				match(PACK_KEYS);
				setState(1769);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1768);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1771);
				((TableOptionPackKeysContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 19:
				_localctx = new TableOptionPasswordContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(1772);
				match(PASSWORD);
				setState(1774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1773);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1776);
				match(STRING_LITERAL);
				}
				break;
			case 20:
				_localctx = new TableOptionRowFormatContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(1777);
				match(ROW_FORMAT);
				setState(1779);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1778);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1781);
				((TableOptionRowFormatContext)_localctx).rowFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & ((1L << (COMPACT - 369)) | (1L << (COMPRESSED - 369)) | (1L << (DYNAMIC - 369)) | (1L << (FIXED - 369)))) != 0) || _la==REDUNDANT || _la==ID) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 21:
				_localctx = new TableOptionRecalculationContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(1782);
				match(STATS_AUTO_RECALC);
				setState(1784);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1783);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1786);
				((TableOptionRecalculationContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 22:
				_localctx = new TableOptionPersistentContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(1787);
				match(STATS_PERSISTENT);
				setState(1789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1788);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1791);
				((TableOptionPersistentContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 23:
				_localctx = new TableOptionSamplePageContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(1792);
				match(STATS_SAMPLE_PAGES);
				setState(1794);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1793);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1796);
				decimalLiteral();
				}
				break;
			case 24:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(1797);
				match(TABLESPACE);
				setState(1798);
				uid();
				setState(1800);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
				case 1:
					{
					setState(1799);
					tablespaceStorage();
					}
					break;
				}
				}
				break;
			case 25:
				_localctx = new TableOptionTableTypeContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(1802);
				match(TABLE_TYPE);
				setState(1803);
				match(EQUAL_SYMBOL);
				setState(1804);
				tableType();
				}
				break;
			case 26:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(1805);
				tablespaceStorage();
				}
				break;
			case 27:
				_localctx = new TableOptionUnionContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(1806);
				match(UNION);
				setState(1808);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1807);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1810);
				match(LR_BRACKET);
				setState(1811);
				tables();
				setState(1812);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableTypeContext extends ParserRuleContext {
		public TerminalNode MYSQL() { return getToken(SpeakQlParser.MYSQL, 0); }
		public TerminalNode ODBC() { return getToken(SpeakQlParser.ODBC, 0); }
		public TableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableTypeContext tableType() throws RecognitionException {
		TableTypeContext _localctx = new TableTypeContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_tableType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1816);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==ODBC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceStorageContext extends ParserRuleContext {
		public TerminalNode STORAGE() { return getToken(SpeakQlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(SpeakQlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(SpeakQlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceStorage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTablespaceStorage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTablespaceStorage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTablespaceStorage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceStorageContext tablespaceStorage() throws RecognitionException {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_tablespaceStorage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1818);
			match(STORAGE);
			setState(1819);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionsContext extends ParserRuleContext {
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(SpeakQlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SpeakQlParser.BY, i);
		}
		public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return getRuleContext(PartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(SpeakQlParser.PARTITIONS, 0); }
		public TerminalNode SUBPARTITION() { return getToken(SpeakQlParser.SUBPARTITION, 0); }
		public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return getRuleContext(SubpartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(SpeakQlParser.SUBPARTITIONS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_partitionDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1821);
			match(PARTITION);
			setState(1822);
			match(BY);
			setState(1823);
			partitionFunctionDefinition();
			setState(1826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITIONS) {
				{
				setState(1824);
				match(PARTITIONS);
				setState(1825);
				((PartitionDefinitionsContext)_localctx).count = decimalLiteral();
				}
			}

			setState(1835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(1828);
				match(SUBPARTITION);
				setState(1829);
				match(BY);
				setState(1830);
				subpartitionFunctionDefinition();
				setState(1833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					setState(1831);
					match(SUBPARTITIONS);
					setState(1832);
					((PartitionDefinitionsContext)_localctx).subCount = decimalLiteral();
					}
				}

				}
			}

			setState(1848);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				setState(1837);
				match(LR_BRACKET);
				setState(1838);
				partitionDefinition();
				setState(1843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1839);
					match(COMMA);
					setState(1840);
					partitionDefinition();
					}
					}
					setState(1845);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1846);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionFunctionDefinitionContext extends ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionFunctionDefinition; }
	 
		public PartitionFunctionDefinitionContext() { }
		public void copyFrom(PartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(SpeakQlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(SpeakQlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(SpeakQlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(SpeakQlParser.TWO_DECIMAL, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionFunctionKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(SpeakQlParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(SpeakQlParser.LINEAR, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionFunctionHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
		public TerminalNode LIST() { return getToken(SpeakQlParser.LIST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(SpeakQlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionFunctionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionFunctionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionFunctionList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
		public TerminalNode RANGE() { return getToken(SpeakQlParser.RANGE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(SpeakQlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionFunctionRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionFunctionRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionFunctionRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionFunctionDefinitionContext partitionFunctionDefinition() throws RecognitionException {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_partitionFunctionDefinition);
		int _la;
		try {
			setState(1895);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1850);
					match(LINEAR);
					}
				}

				setState(1853);
				match(HASH);
				setState(1854);
				match(LR_BRACKET);
				setState(1855);
				expression(0);
				setState(1856);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1859);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1858);
					match(LINEAR);
					}
				}

				setState(1861);
				match(KEY);
				setState(1865);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1862);
					match(ALGORITHM);
					setState(1863);
					match(EQUAL_SYMBOL);
					setState(1864);
					((PartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1867);
				match(LR_BRACKET);
				setState(1868);
				uidList();
				setState(1869);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1871);
				match(RANGE);
				setState(1881);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(1872);
					match(LR_BRACKET);
					setState(1873);
					expression(0);
					setState(1874);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1876);
					match(COLUMNS);
					setState(1877);
					match(LR_BRACKET);
					setState(1878);
					uidList();
					setState(1879);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1883);
				match(LIST);
				setState(1893);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(1884);
					match(LR_BRACKET);
					setState(1885);
					expression(0);
					setState(1886);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1888);
					match(COLUMNS);
					setState(1889);
					match(LR_BRACKET);
					setState(1890);
					uidList();
					setState(1891);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionFunctionDefinitionContext extends ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionFunctionDefinition; }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public void copyFrom(SubpartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(SpeakQlParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(SpeakQlParser.LINEAR, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSubPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSubPartitionFunctionHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSubPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(SpeakQlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(SpeakQlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(SpeakQlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(SpeakQlParser.TWO_DECIMAL, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSubPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSubPartitionFunctionKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSubPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() throws RecognitionException {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			setState(1918);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1897);
					match(LINEAR);
					}
				}

				setState(1900);
				match(HASH);
				setState(1901);
				match(LR_BRACKET);
				setState(1902);
				expression(0);
				setState(1903);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1905);
					match(LINEAR);
					}
				}

				setState(1908);
				match(KEY);
				setState(1912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1909);
					match(ALGORITHM);
					setState(1910);
					match(EQUAL_SYMBOL);
					setState(1911);
					((SubPartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1914);
				match(LR_BRACKET);
				setState(1915);
				uidList();
				setState(1916);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionContext extends ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
	 
		public PartitionDefinitionContext() { }
		public void copyFrom(PartitionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionComparisonContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(SpeakQlParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(SpeakQlParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(SpeakQlParser.THAN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SpeakQlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SpeakQlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SpeakQlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SpeakQlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionComparisonContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionComparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionComparison(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionComparison(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionListAtomContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(SpeakQlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(SpeakQlParser.IN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SpeakQlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SpeakQlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SpeakQlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SpeakQlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListAtomContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionListAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionListAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionListAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionListVectorContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(SpeakQlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(SpeakQlParser.IN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SpeakQlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SpeakQlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerVectorContext> partitionDefinerVector() {
			return getRuleContexts(PartitionDefinerVectorContext.class);
		}
		public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return getRuleContext(PartitionDefinerVectorContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SpeakQlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SpeakQlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionListVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionListVector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionListVector(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionSimpleContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionSimple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionSimple(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionSimple(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_partitionDefinition);
		int _la;
		try {
			setState(2066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				_localctx = new PartitionComparisonContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1920);
				match(PARTITION);
				setState(1921);
				uid();
				setState(1922);
				match(VALUES);
				setState(1923);
				match(LESS);
				setState(1924);
				match(THAN);
				setState(1925);
				match(LR_BRACKET);
				setState(1926);
				partitionDefinerAtom();
				setState(1931);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1927);
					match(COMMA);
					setState(1928);
					partitionDefinerAtom();
					}
					}
					setState(1933);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1934);
				match(RR_BRACKET);
				setState(1938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 367)) & ~0x3f) == 0 && ((1L << (_la - 367)) & ((1L << (COMMENT - 367)) | (1L << (DATA - 367)) | (1L << (ENGINE - 367)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (MAX_ROWS - 492)) | (1L << (MIN_ROWS - 492)) | (1L << (NODEGROUP - 492)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1935);
					partitionOption();
					}
					}
					setState(1940);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1952);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1941);
					match(LR_BRACKET);
					setState(1942);
					subpartitionDefinition();
					setState(1947);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1943);
						match(COMMA);
						setState(1944);
						subpartitionDefinition();
						}
						}
						setState(1949);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1950);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				_localctx = new PartitionComparisonContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1954);
				match(PARTITION);
				setState(1955);
				uid();
				setState(1956);
				match(VALUES);
				setState(1957);
				match(LESS);
				setState(1958);
				match(THAN);
				setState(1959);
				partitionDefinerAtom();
				setState(1963);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 367)) & ~0x3f) == 0 && ((1L << (_la - 367)) & ((1L << (COMMENT - 367)) | (1L << (DATA - 367)) | (1L << (ENGINE - 367)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (MAX_ROWS - 492)) | (1L << (MIN_ROWS - 492)) | (1L << (NODEGROUP - 492)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1960);
					partitionOption();
					}
					}
					setState(1965);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1977);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1966);
					match(LR_BRACKET);
					setState(1967);
					subpartitionDefinition();
					setState(1972);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1968);
						match(COMMA);
						setState(1969);
						subpartitionDefinition();
						}
						}
						setState(1974);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1975);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1979);
				match(PARTITION);
				setState(1980);
				uid();
				setState(1981);
				match(VALUES);
				setState(1982);
				match(IN);
				setState(1983);
				match(LR_BRACKET);
				setState(1984);
				partitionDefinerAtom();
				setState(1989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1985);
					match(COMMA);
					setState(1986);
					partitionDefinerAtom();
					}
					}
					setState(1991);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1992);
				match(RR_BRACKET);
				setState(1996);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 367)) & ~0x3f) == 0 && ((1L << (_la - 367)) & ((1L << (COMMENT - 367)) | (1L << (DATA - 367)) | (1L << (ENGINE - 367)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (MAX_ROWS - 492)) | (1L << (MIN_ROWS - 492)) | (1L << (NODEGROUP - 492)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1993);
					partitionOption();
					}
					}
					setState(1998);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2010);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1999);
					match(LR_BRACKET);
					setState(2000);
					subpartitionDefinition();
					setState(2005);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2001);
						match(COMMA);
						setState(2002);
						subpartitionDefinition();
						}
						}
						setState(2007);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2008);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2012);
				match(PARTITION);
				setState(2013);
				uid();
				setState(2014);
				match(VALUES);
				setState(2015);
				match(IN);
				setState(2016);
				match(LR_BRACKET);
				setState(2017);
				partitionDefinerVector();
				setState(2022);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2018);
					match(COMMA);
					setState(2019);
					partitionDefinerVector();
					}
					}
					setState(2024);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2025);
				match(RR_BRACKET);
				setState(2029);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 367)) & ~0x3f) == 0 && ((1L << (_la - 367)) & ((1L << (COMMENT - 367)) | (1L << (DATA - 367)) | (1L << (ENGINE - 367)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (MAX_ROWS - 492)) | (1L << (MIN_ROWS - 492)) | (1L << (NODEGROUP - 492)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2026);
					partitionOption();
					}
					}
					setState(2031);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2043);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2032);
					match(LR_BRACKET);
					setState(2033);
					subpartitionDefinition();
					setState(2038);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2034);
						match(COMMA);
						setState(2035);
						subpartitionDefinition();
						}
						}
						setState(2040);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2041);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2045);
				match(PARTITION);
				setState(2046);
				uid();
				setState(2050);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 367)) & ~0x3f) == 0 && ((1L << (_la - 367)) & ((1L << (COMMENT - 367)) | (1L << (DATA - 367)) | (1L << (ENGINE - 367)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (MAX_ROWS - 492)) | (1L << (MIN_ROWS - 492)) | (1L << (NODEGROUP - 492)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2047);
					partitionOption();
					}
					}
					setState(2052);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2064);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2053);
					match(LR_BRACKET);
					setState(2054);
					subpartitionDefinition();
					setState(2059);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2055);
						match(COMMA);
						setState(2056);
						subpartitionDefinition();
						}
						}
						setState(2061);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2062);
					match(RR_BRACKET);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerAtomContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(SpeakQlParser.MAXVALUE, 0); }
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionDefinerAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionDefinerAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionDefinerAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerAtomContext partitionDefinerAtom() throws RecognitionException {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_partitionDefinerAtom);
		try {
			setState(2071);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2068);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2069);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2070);
				match(MAXVALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerVectorContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerVector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionDefinerVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionDefinerVector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionDefinerVector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerVectorContext partitionDefinerVector() throws RecognitionException {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_partitionDefinerVector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2073);
			match(LR_BRACKET);
			setState(2074);
			partitionDefinerAtom();
			setState(2077); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2075);
				match(COMMA);
				setState(2076);
				partitionDefinerAtom();
				}
				}
				setState(2079); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMMA );
			setState(2081);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(SpeakQlParser.SUBPARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSubpartitionDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSubpartitionDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSubpartitionDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_subpartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2083);
			match(SUBPARTITION);
			setState(2084);
			uid();
			setState(2088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT || _la==INDEX || ((((_la - 367)) & ~0x3f) == 0 && ((1L << (_la - 367)) & ((1L << (COMMENT - 367)) | (1L << (DATA - 367)) | (1L << (ENGINE - 367)))) != 0) || ((((_la - 492)) & ~0x3f) == 0 && ((1L << (_la - 492)) & ((1L << (MAX_ROWS - 492)) | (1L << (MIN_ROWS - 492)) | (1L << (NODEGROUP - 492)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				setState(2085);
				partitionOption();
				}
				}
				setState(2090);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionOptionContext extends ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
	 
		public PartitionOptionContext() { }
		public void copyFrom(PartitionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionOptionCommentContext extends PartitionOptionContext {
		public Token comment;
		public TerminalNode COMMENT() { return getToken(SpeakQlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionNodeGroupContext extends PartitionOptionContext {
		public UidContext nodegroup;
		public TerminalNode NODEGROUP() { return getToken(SpeakQlParser.NODEGROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionNodeGroupContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionOptionNodeGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionOptionNodeGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionOptionNodeGroup(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
		public Token indexDirectory;
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(SpeakQlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionOptionIndexDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMaxRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		public TerminalNode MAX_ROWS() { return getToken(SpeakQlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMaxRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionOptionMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionTablespaceContext extends PartitionOptionContext {
		public UidContext tablespace;
		public TerminalNode TABLESPACE() { return getToken(SpeakQlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionTablespaceContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionOptionTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionEngineContext extends PartitionOptionContext {
		public TerminalNode ENGINE() { return getToken(SpeakQlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public TerminalNode STORAGE() { return getToken(SpeakQlParser.STORAGE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMinRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext minRows;
		public TerminalNode MIN_ROWS() { return getToken(SpeakQlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMinRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionOptionMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
		public Token dataDirectory;
		public TerminalNode DATA() { return getToken(SpeakQlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(SpeakQlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionOptionDataDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_partitionOption);
		int _la;
		try {
			setState(2139);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2092);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2091);
					match(DEFAULT);
					}
				}

				setState(2095);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(2094);
					match(STORAGE);
					}
				}

				setState(2097);
				match(ENGINE);
				setState(2099);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2098);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2101);
				engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2102);
				match(COMMENT);
				setState(2104);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2103);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2106);
				((PartitionOptionCommentContext)_localctx).comment = match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2107);
				match(DATA);
				setState(2108);
				match(DIRECTORY);
				setState(2110);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2109);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2112);
				((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2113);
				match(INDEX);
				setState(2114);
				match(DIRECTORY);
				setState(2116);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2115);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2118);
				((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2119);
				match(MAX_ROWS);
				setState(2121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2120);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2123);
				((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2124);
				match(MIN_ROWS);
				setState(2126);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2125);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2128);
				((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2129);
				match(TABLESPACE);
				setState(2131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2130);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2133);
				((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2134);
				match(NODEGROUP);
				setState(2136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2135);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2138);
				((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseContext extends ParserRuleContext {
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
	 
		public AlterDatabaseContext() { }
		public void copyFrom(AlterDatabaseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUpgradeNameContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(SpeakQlParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode UPGRADE() { return getToken(SpeakQlParser.UPGRADE, 0); }
		public TerminalNode DATA() { return getToken(SpeakQlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(SpeakQlParser.DIRECTORY, 0); }
		public TerminalNode NAME() { return getToken(SpeakQlParser.NAME, 0); }
		public TerminalNode DATABASE() { return getToken(SpeakQlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SpeakQlParser.SCHEMA, 0); }
		public AlterUpgradeNameContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterUpgradeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterUpgradeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterUpgradeName(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterSimpleDatabaseContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(SpeakQlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(SpeakQlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SpeakQlParser.SCHEMA, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterSimpleDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterSimpleDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterSimpleDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_alterDatabase);
		int _la;
		try {
			setState(2159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2141);
				match(ALTER);
				setState(2142);
				((AlterSimpleDatabaseContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterSimpleDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2144);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					setState(2143);
					uid();
					}
					break;
				}
				setState(2147); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2146);
					createDatabaseOption();
					}
					}
					setState(2149); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHARSET );
				}
				break;
			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2151);
				match(ALTER);
				setState(2152);
				((AlterUpgradeNameContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterUpgradeNameContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2153);
				uid();
				setState(2154);
				match(UPGRADE);
				setState(2155);
				match(DATA);
				setState(2156);
				match(DIRECTORY);
				setState(2157);
				match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SpeakQlParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(SpeakQlParser.EVENT, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(SpeakQlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(SpeakQlParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(SpeakQlParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(SpeakQlParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(SpeakQlParser.PRESERVE, 0); }
		public TerminalNode RENAME() { return getToken(SpeakQlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SpeakQlParser.TO, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(SpeakQlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode DO() { return getToken(SpeakQlParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SpeakQlParser.NOT, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventContext alterEvent() throws RecognitionException {
		AlterEventContext _localctx = new AlterEventContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alterEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2161);
			match(ALTER);
			setState(2163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2162);
				ownerStatement();
				}
			}

			setState(2165);
			match(EVENT);
			setState(2166);
			fullId();
			setState(2170);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				{
				setState(2167);
				match(ON);
				setState(2168);
				match(SCHEDULE);
				setState(2169);
				scheduleExpression();
				}
				break;
			}
			setState(2178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2172);
				match(ON);
				setState(2173);
				match(COMPLETION);
				setState(2175);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2174);
					match(NOT);
					}
				}

				setState(2177);
				match(PRESERVE);
				}
			}

			setState(2183);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				{
				setState(2180);
				match(RENAME);
				setState(2181);
				match(TO);
				setState(2182);
				fullId();
				}
				break;
			}
			setState(2186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(2185);
				enableType();
				}
			}

			setState(2190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(2188);
				match(COMMENT);
				setState(2189);
				match(STRING_LITERAL);
				}
			}

			setState(2194);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
			case 1:
				{
				setState(2192);
				match(DO);
				setState(2193);
				routineBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SpeakQlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(SpeakQlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionContext alterFunction() throws RecognitionException {
		AlterFunctionContext _localctx = new AlterFunctionContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_alterFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2196);
			match(ALTER);
			setState(2197);
			match(FUNCTION);
			setState(2198);
			fullId();
			setState(2202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (MODIFIES - 119)) | (1L << (NOT - 119)) | (1L << (READS - 119)) | (1L << (SQL - 119)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2199);
				routineOption();
				}
				}
				setState(2204);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterInstanceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SpeakQlParser.ALTER, 0); }
		public TerminalNode INSTANCE() { return getToken(SpeakQlParser.INSTANCE, 0); }
		public TerminalNode ROTATE() { return getToken(SpeakQlParser.ROTATE, 0); }
		public TerminalNode INNODB() { return getToken(SpeakQlParser.INNODB, 0); }
		public TerminalNode MASTER() { return getToken(SpeakQlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public AlterInstanceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterInstance; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterInstance(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterInstance(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterInstance(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterInstanceContext alterInstance() throws RecognitionException {
		AlterInstanceContext _localctx = new AlterInstanceContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_alterInstance);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2205);
			match(ALTER);
			setState(2206);
			match(INSTANCE);
			setState(2207);
			match(ROTATE);
			setState(2208);
			match(INNODB);
			setState(2209);
			match(MASTER);
			setState(2210);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SpeakQlParser.ALTER, 0); }
		public TerminalNode LOGFILE() { return getToken(SpeakQlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(SpeakQlParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SpeakQlParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(SpeakQlParser.UNDOFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(SpeakQlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(SpeakQlParser.INITIAL_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(SpeakQlParser.WAIT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(SpeakQlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(SpeakQlParser.EQUAL_SYMBOL, i);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLogfileGroupContext alterLogfileGroup() throws RecognitionException {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_alterLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2212);
			match(ALTER);
			setState(2213);
			match(LOGFILE);
			setState(2214);
			match(GROUP);
			setState(2215);
			uid();
			setState(2216);
			match(ADD);
			setState(2217);
			match(UNDOFILE);
			setState(2218);
			match(STRING_LITERAL);
			setState(2224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2219);
				match(INITIAL_SIZE);
				setState(2221);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2220);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2223);
				fileSizeLiteral();
				}
			}

			setState(2227);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2226);
				match(WAIT);
				}
			}

			setState(2229);
			match(ENGINE);
			setState(2231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2230);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2233);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SpeakQlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(SpeakQlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureContext alterProcedure() throws RecognitionException {
		AlterProcedureContext _localctx = new AlterProcedureContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_alterProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2235);
			match(ALTER);
			setState(2236);
			match(PROCEDURE);
			setState(2237);
			fullId();
			setState(2241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (MODIFIES - 119)) | (1L << (NOT - 119)) | (1L << (READS - 119)) | (1L << (SQL - 119)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2238);
				routineOption();
				}
				}
				setState(2243);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SpeakQlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(SpeakQlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(SpeakQlParser.OPTIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alterServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2244);
			match(ALTER);
			setState(2245);
			match(SERVER);
			setState(2246);
			uid();
			setState(2247);
			match(OPTIONS);
			setState(2248);
			match(LR_BRACKET);
			setState(2249);
			serverOption();
			setState(2254);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2250);
				match(COMMA);
				setState(2251);
				serverOption();
				}
				}
				setState(2256);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2257);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public Token intimeAction;
		public TerminalNode ALTER() { return getToken(SpeakQlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(SpeakQlParser.IGNORE, 0); }
		public List<AlterSpecificationContext> alterSpecification() {
			return getRuleContexts(AlterSpecificationContext.class);
		}
		public AlterSpecificationContext alterSpecification(int i) {
			return getRuleContext(AlterSpecificationContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode ONLINE() { return getToken(SpeakQlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(SpeakQlParser.OFFLINE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2259);
			match(ALTER);
			setState(2261);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(2260);
				((AlterTableContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((AlterTableContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2263);
				match(IGNORE);
				}
			}

			setState(2266);
			match(TABLE);
			setState(2267);
			tableName();
			setState(2276);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				{
				setState(2268);
				alterSpecification();
				setState(2273);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2269);
					match(COMMA);
					setState(2270);
					alterSpecification();
					}
					}
					setState(2275);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2278);
				partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public Token objectAction;
		public TerminalNode ALTER() { return getToken(SpeakQlParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(SpeakQlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATAFILE() { return getToken(SpeakQlParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(SpeakQlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SpeakQlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(SpeakQlParser.INITIAL_SIZE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(SpeakQlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(SpeakQlParser.EQUAL_SYMBOL, i);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(SpeakQlParser.WAIT, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alterTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2281);
			match(ALTER);
			setState(2282);
			match(TABLESPACE);
			setState(2283);
			uid();
			setState(2284);
			((AlterTablespaceContext)_localctx).objectAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				((AlterTablespaceContext)_localctx).objectAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2285);
			match(DATAFILE);
			setState(2286);
			match(STRING_LITERAL);
			setState(2290);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2287);
				match(INITIAL_SIZE);
				setState(2288);
				match(EQUAL_SYMBOL);
				setState(2289);
				fileSizeLiteral();
				}
			}

			setState(2293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2292);
				match(WAIT);
				}
			}

			setState(2295);
			match(ENGINE);
			setState(2297);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2296);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2299);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOpt;
		public TerminalNode ALTER() { return getToken(SpeakQlParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(SpeakQlParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(SpeakQlParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(SpeakQlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(SpeakQlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(SpeakQlParser.SECURITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(SpeakQlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(SpeakQlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(SpeakQlParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(SpeakQlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(SpeakQlParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(SpeakQlParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(SpeakQlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(SpeakQlParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(SpeakQlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(SpeakQlParser.LOCAL, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alterView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2301);
			match(ALTER);
			setState(2305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(2302);
				match(ALGORITHM);
				setState(2303);
				match(EQUAL_SYMBOL);
				setState(2304);
				((AlterViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((AlterViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2308);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2307);
				ownerStatement();
				}
			}

			setState(2313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(2310);
				match(SQL);
				setState(2311);
				match(SECURITY);
				setState(2312);
				((AlterViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((AlterViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2315);
			match(VIEW);
			setState(2316);
			fullId();
			setState(2321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2317);
				match(LR_BRACKET);
				setState(2318);
				uidList();
				setState(2319);
				match(RR_BRACKET);
				}
			}

			setState(2323);
			match(AS);
			setState(2324);
			selectStatement();
			setState(2331);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2325);
				match(WITH);
				setState(2327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(2326);
					((AlterViewContext)_localctx).checkOpt = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((AlterViewContext)_localctx).checkOpt = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2329);
				match(CHECK);
				setState(2330);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSpecificationContext extends ParserRuleContext {
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSpecification; }
	 
		public AlterSpecificationContext() { }
		public void copyFrom(AlterSpecificationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterByDisableKeysContext extends AlterSpecificationContext {
		public TerminalNode DISABLE() { return getToken(SpeakQlParser.DISABLE, 0); }
		public TerminalNode KEYS() { return getToken(SpeakQlParser.KEYS, 0); }
		public AlterByDisableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByDisableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByDisableKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByDisableKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDefaultCharsetContext extends AlterSpecificationContext {
		public TerminalNode CHARACTER() { return getToken(SpeakQlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(SpeakQlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(SpeakQlParser.EQUAL_SYMBOL, i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(SpeakQlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByDefaultCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByDefaultCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByDefaultCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByDefaultCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public TerminalNode RENAME() { return getToken(SpeakQlParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(SpeakQlParser.COLUMN, 0); }
		public TerminalNode TO() { return getToken(SpeakQlParser.TO, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByRenameColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByRenameColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByRenameColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByRenameColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByConvertCharsetContext extends AlterSpecificationContext {
		public TerminalNode CONVERT() { return getToken(SpeakQlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(SpeakQlParser.TO, 0); }
		public TerminalNode CHARACTER() { return getToken(SpeakQlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(SpeakQlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByConvertCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByConvertCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByConvertCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByConvertCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddPartitionContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(SpeakQlParser.ADD, 0); }
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public AlterByAddPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByAddPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByAddPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByAddPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddForeignKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(SpeakQlParser.ADD, 0); }
		public TerminalNode FOREIGN() { return getToken(SpeakQlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SpeakQlParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByAddForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByAddForeignKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByAddForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode RENAME() { return getToken(SpeakQlParser.RENAME, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode TO() { return getToken(SpeakQlParser.TO, 0); }
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public AlterByRenameIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByRenameIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByRenameIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByRenameIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRemovePartitioningContext extends AlterSpecificationContext {
		public TerminalNode REMOVE() { return getToken(SpeakQlParser.REMOVE, 0); }
		public TerminalNode PARTITIONING() { return getToken(SpeakQlParser.PARTITIONING, 0); }
		public AlterByRemovePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByRemovePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByRemovePartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByRemovePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameContext extends AlterSpecificationContext {
		public Token renameFormat;
		public TerminalNode RENAME() { return getToken(SpeakQlParser.RENAME, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode TO() { return getToken(SpeakQlParser.TO, 0); }
		public TerminalNode AS() { return getToken(SpeakQlParser.AS, 0); }
		public AlterByRenameContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByRename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByRename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByRename(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByOptimizePartitionContext extends AlterSpecificationContext {
		public TerminalNode OPTIMIZE() { return getToken(SpeakQlParser.OPTIMIZE, 0); }
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public AlterByOptimizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByOptimizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByOptimizePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByOptimizePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByImportTablespaceContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(SpeakQlParser.IMPORT, 0); }
		public TerminalNode TABLESPACE() { return getToken(SpeakQlParser.TABLESPACE, 0); }
		public AlterByImportTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByImportTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByImportTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByImportTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByCoalescePartitionContext extends AlterSpecificationContext {
		public TerminalNode COALESCE() { return getToken(SpeakQlParser.COALESCE, 0); }
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public AlterByCoalescePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByCoalescePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByCoalescePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByCoalescePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropConstraintCheckContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SpeakQlParser.CONSTRAINT, 0); }
		public TerminalNode CHECK() { return getToken(SpeakQlParser.CHECK, 0); }
		public AlterByDropConstraintCheckContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByDropConstraintCheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByDropConstraintCheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByDropConstraintCheck(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddColumnsContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(SpeakQlParser.ADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<ColumnDefinitionContext> columnDefinition() {
			return getRuleContexts(ColumnDefinitionContext.class);
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return getRuleContext(ColumnDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMN() { return getToken(SpeakQlParser.COLUMN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public AlterByAddColumnsContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByAddColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByAddColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByAddColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAlterIndexVisibilityContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(SpeakQlParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VISIBLE() { return getToken(SpeakQlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(SpeakQlParser.INVISIBLE, 0); }
		public AlterByAlterIndexVisibilityContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByAlterIndexVisibility(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByAlterIndexVisibility(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByAlterIndexVisibility(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropForeignKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(SpeakQlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByDropForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByDropForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByDropForeignKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByDropForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {
		public UidContext name;
		public TerminalNode ADD() { return getToken(SpeakQlParser.ADD, 0); }
		public TerminalNode CHECK() { return getToken(SpeakQlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SpeakQlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByAddCheckTableConstraintContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByAddCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByAddCheckTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByAddCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRebuildPartitionContext extends AlterSpecificationContext {
		public TerminalNode REBUILD() { return getToken(SpeakQlParser.REBUILD, 0); }
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public AlterByRebuildPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByRebuildPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByRebuildPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByRebuildPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByUpgradePartitioningContext extends AlterSpecificationContext {
		public TerminalNode UPGRADE() { return getToken(SpeakQlParser.UPGRADE, 0); }
		public TerminalNode PARTITIONING() { return getToken(SpeakQlParser.PARTITIONING, 0); }
		public AlterByUpgradePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByUpgradePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByUpgradePartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByUpgradePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRepairPartitionContext extends AlterSpecificationContext {
		public TerminalNode REPAIR() { return getToken(SpeakQlParser.REPAIR, 0); }
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public AlterByRepairPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByRepairPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByRepairPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByRepairPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByExchangePartitionContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode EXCHANGE() { return getToken(SpeakQlParser.EXCHANGE, 0); }
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(SpeakQlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(SpeakQlParser.WITH, i);
		}
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode VALIDATION() { return getToken(SpeakQlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(SpeakQlParser.WITHOUT, 0); }
		public AlterByExchangePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByExchangePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByExchangePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByExchangePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(SpeakQlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public AlterByAddIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByAddIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByAddIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByAddIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropColumnContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(SpeakQlParser.COLUMN, 0); }
		public TerminalNode RESTRICT() { return getToken(SpeakQlParser.RESTRICT, 0); }
		public AlterByDropColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByDropColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByDropColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByDropColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByImportPartitionContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(SpeakQlParser.IMPORT, 0); }
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(SpeakQlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public AlterByImportPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByImportPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByImportPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByImportPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByChangeDefaultContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(SpeakQlParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(SpeakQlParser.COLUMN, 0); }
		public AlterByChangeDefaultContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByChangeDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByChangeDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByChangeDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByForceContext extends AlterSpecificationContext {
		public TerminalNode FORCE() { return getToken(SpeakQlParser.FORCE, 0); }
		public AlterByForceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByForce(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByForce(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByForce(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropPartitionContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByDropPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByDropPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByDropPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByDropPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddSpecialIndexContext extends AlterSpecificationContext {
		public Token keyType;
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(SpeakQlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(SpeakQlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(SpeakQlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public AlterByAddSpecialIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByAddSpecialIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByAddSpecialIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByAddSpecialIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByModifyColumnContext extends AlterSpecificationContext {
		public TerminalNode MODIFY() { return getToken(SpeakQlParser.MODIFY, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(SpeakQlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(SpeakQlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(SpeakQlParser.AFTER, 0); }
		public AlterByModifyColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByModifyColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByModifyColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByModifyColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByTableOptionContext extends AlterSpecificationContext {
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public AlterByTableOptionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByTableOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public TerminalNode PRIMARY() { return getToken(SpeakQlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public AlterByDropPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByDropPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByDropPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByDropPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByLockContext extends AlterSpecificationContext {
		public Token lockType;
		public TerminalNode LOCK() { return getToken(SpeakQlParser.LOCK, 0); }
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(SpeakQlParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(SpeakQlParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(SpeakQlParser.EXCLUSIVE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public AlterByLockContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByLock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByLock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByLock(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDiscardPartitionContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(SpeakQlParser.DISCARD, 0); }
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(SpeakQlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public AlterByDiscardPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByDiscardPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByDiscardPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByDiscardPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDiscardTablespaceContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(SpeakQlParser.DISCARD, 0); }
		public TerminalNode TABLESPACE() { return getToken(SpeakQlParser.TABLESPACE, 0); }
		public AlterByDiscardTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByDiscardTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByDiscardTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByDiscardTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByValidateContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode VALIDATION() { return getToken(SpeakQlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(SpeakQlParser.WITHOUT, 0); }
		public TerminalNode WITH() { return getToken(SpeakQlParser.WITH, 0); }
		public AlterByValidateContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByValidate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByValidate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByValidate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode ADD() { return getToken(SpeakQlParser.ADD, 0); }
		public TerminalNode PRIMARY() { return getToken(SpeakQlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SpeakQlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByAddPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByAddPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByAddPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByCheckPartitionContext extends AlterSpecificationContext {
		public TerminalNode CHECK() { return getToken(SpeakQlParser.CHECK, 0); }
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public AlterByCheckPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByCheckPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByCheckPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByCheckPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByEnableKeysContext extends AlterSpecificationContext {
		public TerminalNode ENABLE() { return getToken(SpeakQlParser.ENABLE, 0); }
		public TerminalNode KEYS() { return getToken(SpeakQlParser.KEYS, 0); }
		public AlterByEnableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByEnableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByEnableKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByEnableKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByReorganizePartitionContext extends AlterSpecificationContext {
		public TerminalNode REORGANIZE() { return getToken(SpeakQlParser.REORGANIZE, 0); }
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode INTO() { return getToken(SpeakQlParser.INTO, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public AlterByReorganizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByReorganizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByReorganizePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByReorganizePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterBySetAlgorithmContext extends AlterSpecificationContext {
		public Token algType;
		public TerminalNode ALGORITHM() { return getToken(SpeakQlParser.ALGORITHM, 0); }
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public TerminalNode INPLACE() { return getToken(SpeakQlParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(SpeakQlParser.COPY, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public AlterBySetAlgorithmContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterBySetAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterBySetAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterBySetAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAnalyzePartitionContext extends AlterSpecificationContext {
		public TerminalNode ANALYZE() { return getToken(SpeakQlParser.ANALYZE, 0); }
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public AlterByAnalyzePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByAnalyzePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByAnalyzePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByAnalyzePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByChangeColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public UidContext afterColumn;
		public TerminalNode CHANGE() { return getToken(SpeakQlParser.CHANGE, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(SpeakQlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(SpeakQlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(SpeakQlParser.AFTER, 0); }
		public AlterByChangeColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByChangeColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByChangeColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByChangeColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddUniqueKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(SpeakQlParser.ADD, 0); }
		public TerminalNode UNIQUE() { return getToken(SpeakQlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SpeakQlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public AlterByAddUniqueKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByAddUniqueKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByAddUniqueKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByAddUniqueKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByTruncatePartitionContext extends AlterSpecificationContext {
		public TerminalNode TRUNCATE() { return getToken(SpeakQlParser.TRUNCATE, 0); }
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public AlterByTruncatePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByTruncatePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByTruncatePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByTruncatePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public AlterByDropIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddColumnContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(SpeakQlParser.ADD, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(SpeakQlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(SpeakQlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(SpeakQlParser.AFTER, 0); }
		public AlterByAddColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByAddColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByAddColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByAddColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByOrderContext extends AlterSpecificationContext {
		public TerminalNode ORDER() { return getToken(SpeakQlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SpeakQlParser.BY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByOrderContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterByOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterByOrder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterByOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSpecificationContext alterSpecification() throws RecognitionException {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_alterSpecification);
		int _la;
		try {
			int _alt;
			setState(2699);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2333);
				tableOption();
				setState(2340);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,282,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2335);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2334);
							match(COMMA);
							}
						}

						setState(2337);
						tableOption();
						}
						} 
					}
					setState(2342);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,282,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2343);
				match(ADD);
				setState(2345);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2344);
					match(COLUMN);
					}
				}

				setState(2347);
				uid();
				setState(2348);
				columnDefinition();
				setState(2352);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2349);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2350);
					match(AFTER);
					setState(2351);
					uid();
					}
					break;
				case EOF:
				case RETRIEVE:
				case SHOW_ME:
				case DISPLAY:
				case PRESENT:
				case FIND:
				case IN_TABLE:
				case FROM_TABLE:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case FROM:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case WHERE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2354);
				match(ADD);
				setState(2356);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2355);
					match(COLUMN);
					}
				}

				setState(2358);
				match(LR_BRACKET);
				setState(2359);
				uid();
				setState(2360);
				columnDefinition();
				setState(2367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2361);
					match(COMMA);
					setState(2362);
					uid();
					setState(2363);
					columnDefinition();
					}
					}
					setState(2369);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2370);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2372);
				match(ADD);
				setState(2373);
				((AlterByAddIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByAddIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2375);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
					{
					setState(2374);
					uid();
					}
				}

				setState(2378);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2377);
					indexType();
					}
				}

				setState(2380);
				indexColumnNames();
				setState(2384);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2381);
					indexOption();
					}
					}
					setState(2386);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2387);
				match(ADD);
				setState(2392);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2388);
					match(CONSTRAINT);
					setState(2390);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
						{
						setState(2389);
						((AlterByAddPrimaryKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2394);
				match(PRIMARY);
				setState(2395);
				match(KEY);
				setState(2397);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
					{
					setState(2396);
					((AlterByAddPrimaryKeyContext)_localctx).index = uid();
					}
				}

				setState(2400);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2399);
					indexType();
					}
				}

				setState(2402);
				indexColumnNames();
				setState(2406);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2403);
					indexOption();
					}
					}
					setState(2408);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2409);
				match(ADD);
				setState(2414);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2410);
					match(CONSTRAINT);
					setState(2412);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
						{
						setState(2411);
						((AlterByAddUniqueKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2416);
				match(UNIQUE);
				setState(2418);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2417);
					((AlterByAddUniqueKeyContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddUniqueKeyContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
					{
					setState(2420);
					((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2423);
					indexType();
					}
				}

				setState(2426);
				indexColumnNames();
				setState(2430);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2427);
					indexOption();
					}
					}
					setState(2432);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2433);
				match(ADD);
				setState(2434);
				((AlterByAddSpecialIndexContext)_localctx).keyType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
					((AlterByAddSpecialIndexContext)_localctx).keyType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2435);
					((AlterByAddSpecialIndexContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddSpecialIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2439);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
					{
					setState(2438);
					uid();
					}
				}

				setState(2441);
				indexColumnNames();
				setState(2445);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2442);
					indexOption();
					}
					}
					setState(2447);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2448);
				match(ADD);
				setState(2453);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2449);
					match(CONSTRAINT);
					setState(2451);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
						{
						setState(2450);
						((AlterByAddForeignKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2455);
				match(FOREIGN);
				setState(2456);
				match(KEY);
				setState(2458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
					{
					setState(2457);
					((AlterByAddForeignKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2460);
				indexColumnNames();
				setState(2461);
				referenceDefinition();
				}
				break;
			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2463);
				match(ADD);
				setState(2468);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2464);
					match(CONSTRAINT);
					setState(2466);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
						{
						setState(2465);
						((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2470);
				match(CHECK);
				setState(2471);
				match(LR_BRACKET);
				setState(2472);
				expression(0);
				setState(2473);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2475);
				match(ALGORITHM);
				setState(2477);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2476);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2479);
				((AlterBySetAlgorithmContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
					((AlterBySetAlgorithmContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2480);
				match(ALTER);
				setState(2482);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2481);
					match(COLUMN);
					}
				}

				setState(2484);
				uid();
				setState(2490);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(2485);
					match(SET);
					setState(2486);
					match(DEFAULT);
					setState(2487);
					defaultValue();
					}
					break;
				case DROP:
					{
					setState(2488);
					match(DROP);
					setState(2489);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2492);
				match(CHANGE);
				setState(2494);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2493);
					match(COLUMN);
					}
				}

				setState(2496);
				((AlterByChangeColumnContext)_localctx).oldColumn = uid();
				setState(2497);
				((AlterByChangeColumnContext)_localctx).newColumn = uid();
				setState(2498);
				columnDefinition();
				setState(2502);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2499);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2500);
					match(AFTER);
					setState(2501);
					((AlterByChangeColumnContext)_localctx).afterColumn = uid();
					}
					break;
				case EOF:
				case RETRIEVE:
				case SHOW_ME:
				case DISPLAY:
				case PRESENT:
				case FIND:
				case IN_TABLE:
				case FROM_TABLE:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case FROM:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case WHERE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 13:
				_localctx = new AlterByRenameColumnContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2504);
				match(RENAME);
				setState(2505);
				match(COLUMN);
				setState(2506);
				((AlterByRenameColumnContext)_localctx).oldColumn = uid();
				setState(2507);
				match(TO);
				setState(2508);
				((AlterByRenameColumnContext)_localctx).newColumn = uid();
				}
				break;
			case 14:
				_localctx = new AlterByLockContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2510);
				match(LOCK);
				setState(2512);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2511);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2514);
				((AlterByLockContext)_localctx).lockType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterByLockContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new AlterByModifyColumnContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2515);
				match(MODIFY);
				setState(2517);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2516);
					match(COLUMN);
					}
				}

				setState(2519);
				uid();
				setState(2520);
				columnDefinition();
				setState(2524);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2521);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2522);
					match(AFTER);
					setState(2523);
					uid();
					}
					break;
				case EOF:
				case RETRIEVE:
				case SHOW_ME:
				case DISPLAY:
				case PRESENT:
				case FIND:
				case IN_TABLE:
				case FROM_TABLE:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case FROM:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case WHERE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 16:
				_localctx = new AlterByDropColumnContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2526);
				match(DROP);
				setState(2528);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2527);
					match(COLUMN);
					}
				}

				setState(2530);
				uid();
				setState(2532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(2531);
					match(RESTRICT);
					}
				}

				}
				break;
			case 17:
				_localctx = new AlterByDropConstraintCheckContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2534);
				match(DROP);
				setState(2535);
				_la = _input.LA(1);
				if ( !(_la==CHECK || _la==CONSTRAINT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2536);
				uid();
				}
				break;
			case 18:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2537);
				match(DROP);
				setState(2538);
				match(PRIMARY);
				setState(2539);
				match(KEY);
				}
				break;
			case 19:
				_localctx = new AlterByRenameIndexContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2540);
				match(RENAME);
				setState(2541);
				((AlterByRenameIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByRenameIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2542);
				uid();
				setState(2543);
				match(TO);
				setState(2544);
				uid();
				}
				break;
			case 20:
				_localctx = new AlterByAlterIndexVisibilityContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2546);
				match(ALTER);
				setState(2547);
				match(INDEX);
				setState(2548);
				uid();
				setState(2549);
				_la = _input.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 21:
				_localctx = new AlterByDropIndexContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2551);
				match(DROP);
				setState(2552);
				((AlterByDropIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByDropIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2553);
				uid();
				}
				break;
			case 22:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2554);
				match(DROP);
				setState(2555);
				match(FOREIGN);
				setState(2556);
				match(KEY);
				setState(2557);
				uid();
				}
				break;
			case 23:
				_localctx = new AlterByDisableKeysContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2558);
				match(DISABLE);
				setState(2559);
				match(KEYS);
				}
				break;
			case 24:
				_localctx = new AlterByEnableKeysContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2560);
				match(ENABLE);
				setState(2561);
				match(KEYS);
				}
				break;
			case 25:
				_localctx = new AlterByRenameContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2562);
				match(RENAME);
				setState(2564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || _la==TO) {
					{
					setState(2563);
					((AlterByRenameContext)_localctx).renameFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterByRenameContext)_localctx).renameFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2568);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
				case 1:
					{
					setState(2566);
					uid();
					}
					break;
				case 2:
					{
					setState(2567);
					fullId();
					}
					break;
				}
				}
				break;
			case 26:
				_localctx = new AlterByOrderContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2570);
				match(ORDER);
				setState(2571);
				match(BY);
				setState(2572);
				uidList();
				}
				break;
			case 27:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2573);
				match(CONVERT);
				setState(2574);
				match(TO);
				setState(2575);
				match(CHARACTER);
				setState(2576);
				match(SET);
				setState(2577);
				charsetName();
				setState(2580);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2578);
					match(COLLATE);
					setState(2579);
					collationName();
					}
				}

				}
				break;
			case 28:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2583);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2582);
					match(DEFAULT);
					}
				}

				setState(2585);
				match(CHARACTER);
				setState(2586);
				match(SET);
				setState(2587);
				match(EQUAL_SYMBOL);
				setState(2588);
				charsetName();
				setState(2592);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2589);
					match(COLLATE);
					setState(2590);
					match(EQUAL_SYMBOL);
					setState(2591);
					collationName();
					}
				}

				}
				break;
			case 29:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2594);
				match(DISCARD);
				setState(2595);
				match(TABLESPACE);
				}
				break;
			case 30:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2596);
				match(IMPORT);
				setState(2597);
				match(TABLESPACE);
				}
				break;
			case 31:
				_localctx = new AlterByForceContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2598);
				match(FORCE);
				}
				break;
			case 32:
				_localctx = new AlterByValidateContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(2599);
				((AlterByValidateContext)_localctx).validationFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
					((AlterByValidateContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2600);
				match(VALIDATION);
				}
				break;
			case 33:
				_localctx = new AlterByAddPartitionContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(2601);
				match(ADD);
				setState(2602);
				match(PARTITION);
				setState(2603);
				match(LR_BRACKET);
				setState(2604);
				partitionDefinition();
				setState(2609);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2605);
					match(COMMA);
					setState(2606);
					partitionDefinition();
					}
					}
					setState(2611);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2612);
				match(RR_BRACKET);
				}
				break;
			case 34:
				_localctx = new AlterByDropPartitionContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(2614);
				match(DROP);
				setState(2615);
				match(PARTITION);
				setState(2616);
				uidList();
				}
				break;
			case 35:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(2617);
				match(DISCARD);
				setState(2618);
				match(PARTITION);
				setState(2621);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					setState(2619);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2620);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2623);
				match(TABLESPACE);
				}
				break;
			case 36:
				_localctx = new AlterByImportPartitionContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(2624);
				match(IMPORT);
				setState(2625);
				match(PARTITION);
				setState(2628);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					setState(2626);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2627);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2630);
				match(TABLESPACE);
				}
				break;
			case 37:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(2631);
				match(TRUNCATE);
				setState(2632);
				match(PARTITION);
				setState(2635);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					setState(2633);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2634);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 38:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(2637);
				match(COALESCE);
				setState(2638);
				match(PARTITION);
				setState(2639);
				decimalLiteral();
				}
				break;
			case 39:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(2640);
				match(REORGANIZE);
				setState(2641);
				match(PARTITION);
				setState(2642);
				uidList();
				setState(2643);
				match(INTO);
				setState(2644);
				match(LR_BRACKET);
				setState(2645);
				partitionDefinition();
				setState(2650);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2646);
					match(COMMA);
					setState(2647);
					partitionDefinition();
					}
					}
					setState(2652);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2653);
				match(RR_BRACKET);
				}
				break;
			case 40:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(2655);
				match(EXCHANGE);
				setState(2656);
				match(PARTITION);
				setState(2657);
				uid();
				setState(2658);
				match(WITH);
				setState(2659);
				match(TABLE);
				setState(2660);
				tableName();
				setState(2663);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(2661);
					((AlterByExchangePartitionContext)_localctx).validationFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
						((AlterByExchangePartitionContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2662);
					match(VALIDATION);
					}
				}

				}
				break;
			case 41:
				_localctx = new AlterByAnalyzePartitionContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(2665);
				match(ANALYZE);
				setState(2666);
				match(PARTITION);
				setState(2669);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					setState(2667);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2668);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 42:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(2671);
				match(CHECK);
				setState(2672);
				match(PARTITION);
				setState(2675);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					setState(2673);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2674);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 43:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(2677);
				match(OPTIMIZE);
				setState(2678);
				match(PARTITION);
				setState(2681);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					setState(2679);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2680);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 44:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(2683);
				match(REBUILD);
				setState(2684);
				match(PARTITION);
				setState(2687);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					setState(2685);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2686);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 45:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				enterOuterAlt(_localctx, 45);
				{
				setState(2689);
				match(REPAIR);
				setState(2690);
				match(PARTITION);
				setState(2693);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					setState(2691);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2692);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 46:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 46);
				{
				setState(2695);
				match(REMOVE);
				setState(2696);
				match(PARTITIONING);
				}
				break;
			case 47:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 47);
				{
				setState(2697);
				match(UPGRADE);
				setState(2698);
				match(PARTITIONING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(SpeakQlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SpeakQlParser.SCHEMA, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDropDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDropDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_dropDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2701);
			match(DROP);
			setState(2702);
			((DropDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((DropDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2703);
				ifExists();
				}
			}

			setState(2706);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(SpeakQlParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDropEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDropEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDropEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropEventContext dropEvent() throws RecognitionException {
		DropEventContext _localctx = new DropEventContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_dropEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2708);
			match(DROP);
			setState(2709);
			match(EVENT);
			setState(2711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2710);
				ifExists();
				}
			}

			setState(2713);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token algType;
		public Token lockType;
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(SpeakQlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(SpeakQlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(SpeakQlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(SpeakQlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(SpeakQlParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(SpeakQlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(SpeakQlParser.OFFLINE, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(SpeakQlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(SpeakQlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(SpeakQlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(SpeakQlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(SpeakQlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(SpeakQlParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(SpeakQlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(SpeakQlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(SpeakQlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(SpeakQlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(SpeakQlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(SpeakQlParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(SpeakQlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(SpeakQlParser.EQUAL_SYMBOL, i);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_dropIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2715);
			match(DROP);
			setState(2716);
			match(INDEX);
			setState(2718);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				{
				setState(2717);
				((DropIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((DropIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2720);
			uid();
			setState(2721);
			match(ON);
			setState(2722);
			tableName();
			setState(2735);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,342,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2733);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(2723);
						match(ALGORITHM);
						setState(2725);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2724);
							match(EQUAL_SYMBOL);
							}
						}

						setState(2727);
						((DropIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							((DropIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(2728);
						match(LOCK);
						setState(2730);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2729);
							match(EQUAL_SYMBOL);
							}
						}

						setState(2732);
						((DropIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((DropIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2737);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,342,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public TerminalNode LOGFILE() { return getToken(SpeakQlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(SpeakQlParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(SpeakQlParser.ENGINE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDropLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDropLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDropLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLogfileGroupContext dropLogfileGroup() throws RecognitionException {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_dropLogfileGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2738);
			match(DROP);
			setState(2739);
			match(LOGFILE);
			setState(2740);
			match(GROUP);
			setState(2741);
			uid();
			setState(2742);
			match(ENGINE);
			setState(2743);
			match(EQUAL_SYMBOL);
			setState(2744);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(SpeakQlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDropProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDropProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDropProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_dropProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2746);
			match(DROP);
			setState(2747);
			match(PROCEDURE);
			setState(2749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2748);
				ifExists();
				}
			}

			setState(2751);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(SpeakQlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDropFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDropFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDropFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_dropFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2753);
			match(DROP);
			setState(2754);
			match(FUNCTION);
			setState(2756);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2755);
				ifExists();
				}
			}

			setState(2758);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(SpeakQlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDropServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDropServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDropServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_dropServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2760);
			match(DROP);
			setState(2761);
			match(SERVER);
			setState(2763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2762);
				ifExists();
				}
			}

			setState(2765);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(SpeakQlParser.TEMPORARY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(SpeakQlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(SpeakQlParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2767);
			match(DROP);
			setState(2769);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(2768);
				match(TEMPORARY);
				}
			}

			setState(2771);
			match(TABLE);
			setState(2773);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2772);
				ifExists();
				}
			}

			setState(2775);
			tables();
			setState(2777);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2776);
				((DropTableContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropTableContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTablespaceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(SpeakQlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(SpeakQlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public DropTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDropTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDropTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDropTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTablespaceContext dropTablespace() throws RecognitionException {
		DropTablespaceContext _localctx = new DropTablespaceContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_dropTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2779);
			match(DROP);
			setState(2780);
			match(TABLESPACE);
			setState(2781);
			uid();
			setState(2787);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(2782);
				match(ENGINE);
				setState(2784);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2783);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2786);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(SpeakQlParser.TRIGGER, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDropTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDropTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDropTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_dropTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2789);
			match(DROP);
			setState(2790);
			match(TRIGGER);
			setState(2792);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2791);
				ifExists();
				}
			}

			setState(2794);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(SpeakQlParser.VIEW, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TerminalNode RESTRICT() { return getToken(SpeakQlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(SpeakQlParser.CASCADE, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDropView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2796);
			match(DROP);
			setState(2797);
			match(VIEW);
			setState(2799);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2798);
				ifExists();
				}
			}

			setState(2801);
			fullId();
			setState(2806);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2802);
				match(COMMA);
				setState(2803);
				fullId();
				}
				}
				setState(2808);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2809);
				((DropViewContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropViewContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(SpeakQlParser.RENAME, 0); }
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public List<RenameTableClauseContext> renameTableClause() {
			return getRuleContexts(RenameTableClauseContext.class);
		}
		public RenameTableClauseContext renameTableClause(int i) {
			return getRuleContext(RenameTableClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRenameTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRenameTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRenameTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableContext renameTable() throws RecognitionException {
		RenameTableContext _localctx = new RenameTableContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_renameTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2812);
			match(RENAME);
			setState(2813);
			match(TABLE);
			setState(2814);
			renameTableClause();
			setState(2819);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2815);
				match(COMMA);
				setState(2816);
				renameTableClause();
				}
				}
				setState(2821);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableClauseContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(SpeakQlParser.TO, 0); }
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRenameTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRenameTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRenameTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableClauseContext renameTableClause() throws RecognitionException {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_renameTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2822);
			tableName();
			setState(2823);
			match(TO);
			setState(2824);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(SpeakQlParser.TRUNCATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTruncateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_truncateTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2826);
			match(TRUNCATE);
			setState(2828);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(2827);
				match(TABLE);
				}
			}

			setState(2830);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(SpeakQlParser.CALL, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCallStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCallStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCallStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_callStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2832);
			match(CALL);
			setState(2833);
			fullId();
			setState(2840);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				setState(2834);
				match(LR_BRACKET);
				setState(2837);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
				case 1:
					{
					setState(2835);
					constants();
					}
					break;
				case 2:
					{
					setState(2836);
					expressions();
					}
					break;
				}
				setState(2839);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public SingleDeleteStatementContext singleDeleteStatement() {
			return getRuleContext(SingleDeleteStatementContext.class,0);
		}
		public MultipleDeleteStatementContext multipleDeleteStatement() {
			return getRuleContext(MultipleDeleteStatementContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_deleteStatement);
		try {
			setState(2844);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2842);
				singleDeleteStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2843);
				multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(SpeakQlParser.DO, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2846);
			match(DO);
			setState(2847);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public HandlerOpenStatementContext handlerOpenStatement() {
			return getRuleContext(HandlerOpenStatementContext.class,0);
		}
		public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return getRuleContext(HandlerReadIndexStatementContext.class,0);
		}
		public HandlerReadStatementContext handlerReadStatement() {
			return getRuleContext(HandlerReadStatementContext.class,0);
		}
		public HandlerCloseStatementContext handlerCloseStatement() {
			return getRuleContext(HandlerCloseStatementContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterHandlerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitHandlerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitHandlerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_handlerStatement);
		try {
			setState(2853);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2849);
				handlerOpenStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2850);
				handlerReadIndexStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2851);
				handlerReadStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2852);
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public List<UpdatedElementContext> duplicatedElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode INSERT() { return getToken(SpeakQlParser.INSERT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public TerminalNode IGNORE() { return getToken(SpeakQlParser.IGNORE, 0); }
		public TerminalNode INTO() { return getToken(SpeakQlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SpeakQlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SpeakQlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SpeakQlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SpeakQlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode ON() { return getToken(SpeakQlParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(SpeakQlParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(SpeakQlParser.UPDATE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(SpeakQlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(SpeakQlParser.DELAYED, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(SpeakQlParser.HIGH_PRIORITY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitInsertStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2855);
			match(INSERT);
			setState(2857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (DELAYED - 55)) | (1L << (HIGH_PRIORITY - 55)) | (1L << (LOW_PRIORITY - 55)))) != 0)) {
				{
				setState(2856);
				((InsertStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (DELAYED - 55)) | (1L << (HIGH_PRIORITY - 55)) | (1L << (LOW_PRIORITY - 55)))) != 0)) ) {
					((InsertStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2860);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2859);
				match(IGNORE);
				}
			}

			setState(2863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2862);
				match(INTO);
				}
			}

			setState(2865);
			tableName();
			setState(2872);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2866);
				match(PARTITION);
				setState(2867);
				match(LR_BRACKET);
				setState(2869);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
					{
					setState(2868);
					((InsertStatementContext)_localctx).partitions = uidList();
					}
				}

				setState(2871);
				match(RR_BRACKET);
				}
			}

			setState(2890);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETRIEVE:
			case SHOW_ME:
			case DISPLAY:
			case PRESENT:
			case FIND:
			case IN_TABLE:
			case FROM_TABLE:
			case FROM:
			case SELECT:
			case VALUES:
			case WHERE:
			case VALUE:
			case LR_BRACKET:
				{
				setState(2878);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
				case 1:
					{
					setState(2874);
					match(LR_BRACKET);
					setState(2875);
					((InsertStatementContext)_localctx).columns = uidList();
					setState(2876);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2880);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(2881);
				match(SET);
				setState(2882);
				((InsertStatementContext)_localctx).setFirst = updatedElement();
				setState(2887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2883);
					match(COMMA);
					setState(2884);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).setElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(2889);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2904);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2892);
				match(ON);
				setState(2893);
				match(DUPLICATE);
				setState(2894);
				match(KEY);
				setState(2895);
				match(UPDATE);
				setState(2896);
				((InsertStatementContext)_localctx).duplicatedFirst = updatedElement();
				setState(2901);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2897);
					match(COMMA);
					setState(2898);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).duplicatedElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(2903);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(SpeakQlParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(SpeakQlParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(SpeakQlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(SpeakQlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL() { return getToken(SpeakQlParser.LOCAL, 0); }
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SpeakQlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SpeakQlParser.LR_BRACKET, i);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SpeakQlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SpeakQlParser.RR_BRACKET, i);
		}
		public TerminalNode CHARACTER() { return getToken(SpeakQlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(SpeakQlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(SpeakQlParser.SET, i);
		}
		public List<TerminalNode> LINES() { return getTokens(SpeakQlParser.LINES); }
		public TerminalNode LINES(int i) {
			return getToken(SpeakQlParser.LINES, i);
		}
		public List<TerminalNode> IGNORE() { return getTokens(SpeakQlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(SpeakQlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(SpeakQlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(SpeakQlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(SpeakQlParser.REPLACE, 0); }
		public TerminalNode FIELDS() { return getToken(SpeakQlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(SpeakQlParser.COLUMNS, 0); }
		public TerminalNode ROWS() { return getToken(SpeakQlParser.ROWS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLoadDataStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLoadDataStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLoadDataStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadDataStatementContext loadDataStatement() throws RecognitionException {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_loadDataStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2906);
			match(LOAD);
			setState(2907);
			match(DATA);
			setState(2909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(2908);
				((LoadDataStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadDataStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2912);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2911);
				match(LOCAL);
				}
			}

			setState(2914);
			match(INFILE);
			setState(2915);
			((LoadDataStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(2917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(2916);
				((LoadDataStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadDataStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2919);
			match(INTO);
			setState(2920);
			match(TABLE);
			setState(2921);
			tableName();
			setState(2927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2922);
				match(PARTITION);
				setState(2923);
				match(LR_BRACKET);
				setState(2924);
				uidList();
				setState(2925);
				match(RR_BRACKET);
				}
			}

			setState(2932);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(2929);
				match(CHARACTER);
				setState(2930);
				match(SET);
				setState(2931);
				((LoadDataStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(2940);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				setState(2934);
				((LoadDataStatementContext)_localctx).fieldsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((LoadDataStatementContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2936); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2935);
					selectFieldsInto();
					}
					}
					setState(2938); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ENCLOSED - 68)) | (1L << (ESCAPED - 68)) | (1L << (OPTIONALLY - 68)))) != 0) || _la==TERMINATED );
				}
			}

			setState(2948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES) {
				{
				setState(2942);
				match(LINES);
				setState(2944); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2943);
					selectLinesInto();
					}
					}
					setState(2946); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			setState(2954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2950);
				match(IGNORE);
				setState(2951);
				decimalLiteral();
				setState(2952);
				((LoadDataStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadDataStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2967);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				setState(2956);
				match(LR_BRACKET);
				setState(2957);
				assignmentField();
				setState(2962);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2958);
					match(COMMA);
					setState(2959);
					assignmentField();
					}
					}
					setState(2964);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2965);
				match(RR_BRACKET);
				}
				break;
			}
			setState(2978);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
			case 1:
				{
				setState(2969);
				match(SET);
				setState(2970);
				updatedElement();
				setState(2975);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2971);
					match(COMMA);
					setState(2972);
					updatedElement();
					}
					}
					setState(2977);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadXmlStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token tag;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(SpeakQlParser.LOAD, 0); }
		public TerminalNode XML() { return getToken(SpeakQlParser.XML, 0); }
		public TerminalNode INFILE() { return getToken(SpeakQlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(SpeakQlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(SpeakQlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(SpeakQlParser.STRING_LITERAL, i);
		}
		public TerminalNode LOCAL() { return getToken(SpeakQlParser.LOCAL, 0); }
		public TerminalNode CHARACTER() { return getToken(SpeakQlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(SpeakQlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(SpeakQlParser.SET, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(SpeakQlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(SpeakQlParser.ROWS, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(SpeakQlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(SpeakQlParser.BY, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(SpeakQlParser.LESS_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(SpeakQlParser.GREATER_SYMBOL, 0); }
		public List<TerminalNode> IGNORE() { return getTokens(SpeakQlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(SpeakQlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(SpeakQlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(SpeakQlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(SpeakQlParser.REPLACE, 0); }
		public TerminalNode LINES() { return getToken(SpeakQlParser.LINES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadXmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLoadXmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLoadXmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLoadXmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadXmlStatementContext loadXmlStatement() throws RecognitionException {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_loadXmlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2980);
			match(LOAD);
			setState(2981);
			match(XML);
			setState(2983);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(2982);
				((LoadXmlStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadXmlStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2985);
				match(LOCAL);
				}
			}

			setState(2988);
			match(INFILE);
			setState(2989);
			((LoadXmlStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(2991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(2990);
				((LoadXmlStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadXmlStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2993);
			match(INTO);
			setState(2994);
			match(TABLE);
			setState(2995);
			tableName();
			setState(2999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(2996);
				match(CHARACTER);
				setState(2997);
				match(SET);
				setState(2998);
				((LoadXmlStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(3007);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS) {
				{
				setState(3001);
				match(ROWS);
				setState(3002);
				match(IDENTIFIED);
				setState(3003);
				match(BY);
				setState(3004);
				match(LESS_SYMBOL);
				setState(3005);
				((LoadXmlStatementContext)_localctx).tag = match(STRING_LITERAL);
				setState(3006);
				match(GREATER_SYMBOL);
				}
			}

			setState(3013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3009);
				match(IGNORE);
				setState(3010);
				decimalLiteral();
				setState(3011);
				((LoadXmlStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadXmlStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3026);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				{
				setState(3015);
				match(LR_BRACKET);
				setState(3016);
				assignmentField();
				setState(3021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3017);
					match(COMMA);
					setState(3018);
					assignmentField();
					}
					}
					setState(3023);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3024);
				match(RR_BRACKET);
				}
				break;
			}
			setState(3037);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				setState(3028);
				match(SET);
				setState(3029);
				updatedElement();
				setState(3034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3030);
					match(COMMA);
					setState(3031);
					updatedElement();
					}
					}
					setState(3036);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode REPLACE() { return getToken(SpeakQlParser.REPLACE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public TerminalNode INTO() { return getToken(SpeakQlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SpeakQlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SpeakQlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SpeakQlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SpeakQlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(SpeakQlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(SpeakQlParser.DELAYED, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterReplaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitReplaceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitReplaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3039);
			match(REPLACE);
			setState(3041);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				setState(3040);
				((ReplaceStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					((ReplaceStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3044);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3043);
				match(INTO);
				}
			}

			setState(3046);
			tableName();
			setState(3052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3047);
				match(PARTITION);
				setState(3048);
				match(LR_BRACKET);
				setState(3049);
				((ReplaceStatementContext)_localctx).partitions = uidList();
				setState(3050);
				match(RR_BRACKET);
				}
			}

			setState(3070);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETRIEVE:
			case SHOW_ME:
			case DISPLAY:
			case PRESENT:
			case FIND:
			case IN_TABLE:
			case FROM_TABLE:
			case FROM:
			case SELECT:
			case VALUES:
			case WHERE:
			case VALUE:
			case LR_BRACKET:
				{
				setState(3058);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
				case 1:
					{
					setState(3054);
					match(LR_BRACKET);
					setState(3055);
					((ReplaceStatementContext)_localctx).columns = uidList();
					setState(3056);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3060);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(3061);
				match(SET);
				setState(3062);
				((ReplaceStatementContext)_localctx).setFirst = updatedElement();
				setState(3067);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3063);
					match(COMMA);
					setState(3064);
					((ReplaceStatementContext)_localctx).updatedElement = updatedElement();
					((ReplaceStatementContext)_localctx).setElements.add(((ReplaceStatementContext)_localctx).updatedElement);
					}
					}
					setState(3069);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
	 
		public SelectStatementContext() { }
		public void copyFrom(SelectStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnionSelectContext extends SelectStatementContext {
		public Token unionType;
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public List<UnionStatementContext> unionStatement() {
			return getRuleContexts(UnionStatementContext.class);
		}
		public UnionStatementContext unionStatement(int i) {
			return getRuleContext(UnionStatementContext.class,i);
		}
		public TerminalNode UNION() { return getToken(SpeakQlParser.UNION, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SpeakQlParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUnionSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUnionSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUnionSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnionParenthesisSelectContext extends SelectStatementContext {
		public Token unionType;
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public List<UnionParenthesisContext> unionParenthesis() {
			return getRuleContexts(UnionParenthesisContext.class);
		}
		public UnionParenthesisContext unionParenthesis(int i) {
			return getRuleContext(UnionParenthesisContext.class,i);
		}
		public TerminalNode UNION() { return getToken(SpeakQlParser.UNION, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SpeakQlParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUnionParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUnionParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUnionParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleSelectContext extends SelectStatementContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public SimpleSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSimpleSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenthesisSelectContext extends SelectStatementContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public ParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			setState(3127);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3072);
				querySpecification();
				setState(3074);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
				case 1:
					{
					setState(3073);
					lockClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3076);
				queryExpression();
				setState(3078);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
				case 1:
					{
					setState(3077);
					lockClause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3080);
				querySpecificationNointo();
				setState(3082); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3081);
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3084); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,403,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3094);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(3086);
					match(UNION);
					setState(3088);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(3087);
						((UnionSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3092);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case RETRIEVE:
					case SHOW_ME:
					case DISPLAY:
					case PRESENT:
					case FIND:
					case IN_TABLE:
					case FROM_TABLE:
					case FROM:
					case SELECT:
					case WHERE:
						{
						setState(3090);
						querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						setState(3091);
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(3097);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
				case 1:
					{
					setState(3096);
					orderByClause();
					}
					break;
				}
				setState(3100);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3099);
					limitClause();
					}
				}

				setState(3103);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
				case 1:
					{
					setState(3102);
					lockClause();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3105);
				queryExpressionNointo();
				setState(3107); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3106);
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3109); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,410,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3116);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(3111);
					match(UNION);
					setState(3113);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(3112);
						((UnionParenthesisSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3115);
					queryExpression();
					}
				}

				setState(3119);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
				case 1:
					{
					setState(3118);
					orderByClause();
					}
					break;
				}
				setState(3122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3121);
					limitClause();
					}
				}

				setState(3125);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
				case 1:
					{
					setState(3124);
					lockClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public SingleUpdateStatementContext singleUpdateStatement() {
			return getRuleContext(SingleUpdateStatementContext.class,0);
		}
		public MultipleUpdateStatementContext multipleUpdateStatement() {
			return getRuleContext(MultipleUpdateStatementContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_updateStatement);
		try {
			setState(3131);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3129);
				singleUpdateStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3130);
				multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementValueContext extends ParserRuleContext {
		public Token insertFormat;
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(SpeakQlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SpeakQlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SpeakQlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SpeakQlParser.RR_BRACKET, i);
		}
		public TerminalNode VALUES() { return getToken(SpeakQlParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(SpeakQlParser.VALUE, 0); }
		public List<ExpressionsWithDefaultsContext> expressionsWithDefaults() {
			return getRuleContexts(ExpressionsWithDefaultsContext.class);
		}
		public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return getRuleContext(ExpressionsWithDefaultsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatementValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterInsertStatementValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitInsertStatementValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitInsertStatementValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementValueContext insertStatementValue() throws RecognitionException {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_insertStatementValue);
		int _la;
		try {
			setState(3151);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETRIEVE:
			case SHOW_ME:
			case DISPLAY:
			case PRESENT:
			case FIND:
			case IN_TABLE:
			case FROM_TABLE:
			case FROM:
			case SELECT:
			case WHERE:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(3133);
				selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3134);
				((InsertStatementValueContext)_localctx).insertFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					((InsertStatementValueContext)_localctx).insertFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3135);
				match(LR_BRACKET);
				setState(3137);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					setState(3136);
					expressionsWithDefaults();
					}
					break;
				}
				setState(3139);
				match(RR_BRACKET);
				setState(3148);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3140);
					match(COMMA);
					setState(3141);
					match(LR_BRACKET);
					setState(3143);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
					case 1:
						{
						setState(3142);
						expressionsWithDefaults();
						}
						break;
					}
					setState(3145);
					match(RR_BRACKET);
					}
					}
					setState(3150);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdatedElementContext extends ParserRuleContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatedElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUpdatedElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUpdatedElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUpdatedElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdatedElementContext updatedElement() throws RecognitionException {
		UpdatedElementContext _localctx = new UpdatedElementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_updatedElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3153);
			fullColumnName();
			setState(3154);
			match(EQUAL_SYMBOL);
			setState(3157);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				setState(3155);
				expression(0);
				}
				break;
			case 2:
				{
				setState(3156);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentFieldContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(SpeakQlParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAssignmentField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAssignmentField(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAssignmentField(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentFieldContext assignmentField() throws RecognitionException {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_assignmentField);
		try {
			setState(3161);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case OPTIONAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3159);
				uid();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3160);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(SpeakQlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(SpeakQlParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(SpeakQlParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(SpeakQlParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(SpeakQlParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(SpeakQlParser.MODE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLockClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLockClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLockClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_lockClause);
		try {
			setState(3169);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3163);
				match(FOR);
				setState(3164);
				match(UPDATE);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(3165);
				match(LOCK);
				setState(3166);
				match(IN);
				setState(3167);
				match(SHARE);
				setState(3168);
				match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(SpeakQlParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(SpeakQlParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(SpeakQlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(SpeakQlParser.IGNORE, 0); }
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(SpeakQlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(SpeakQlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(SpeakQlParser.LOW_PRIORITY, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSingleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSingleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSingleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleDeleteStatementContext singleDeleteStatement() throws RecognitionException {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_singleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3171);
			match(DELETE);
			setState(3173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3172);
				((SingleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3176);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(3175);
				match(QUICK);
				}
			}

			setState(3179);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3178);
				match(IGNORE);
				}
			}

			setState(3181);
			match(FROM);
			setState(3182);
			tableName();
			setState(3188);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3183);
				match(PARTITION);
				setState(3184);
				match(LR_BRACKET);
				setState(3185);
				uidList();
				setState(3186);
				match(RR_BRACKET);
				}
			}

			setState(3192);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				{
				setState(3190);
				match(WHERE);
				setState(3191);
				expression(0);
				}
				break;
			}
			setState(3195);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3194);
				orderByClause();
				}
			}

			setState(3199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3197);
				match(LIMIT);
				setState(3198);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(SpeakQlParser.DELETE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(SpeakQlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode USING() { return getToken(SpeakQlParser.USING, 0); }
		public TerminalNode QUICK() { return getToken(SpeakQlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(SpeakQlParser.IGNORE, 0); }
		public TerminalNode WHERE() { return getToken(SpeakQlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(SpeakQlParser.LOW_PRIORITY, 0); }
		public List<TerminalNode> DOT() { return getTokens(SpeakQlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SpeakQlParser.DOT, i);
		}
		public List<TerminalNode> STAR() { return getTokens(SpeakQlParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(SpeakQlParser.STAR, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterMultipleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitMultipleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitMultipleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleDeleteStatementContext multipleDeleteStatement() throws RecognitionException {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_multipleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3201);
			match(DELETE);
			setState(3203);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3202);
				((MultipleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				{
				setState(3205);
				match(QUICK);
				}
				break;
			}
			setState(3209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3208);
				match(IGNORE);
				}
			}

			setState(3250);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case OPTIONAL:
				{
				setState(3211);
				tableName();
				setState(3214);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3212);
					match(DOT);
					setState(3213);
					match(STAR);
					}
				}

				setState(3224);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3216);
					match(COMMA);
					setState(3217);
					tableName();
					setState(3220);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3218);
						match(DOT);
						setState(3219);
						match(STAR);
						}
					}

					}
					}
					setState(3226);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3227);
				match(FROM);
				setState(3228);
				tableSources();
				}
				break;
			case FROM:
				{
				setState(3230);
				match(FROM);
				setState(3231);
				tableName();
				setState(3234);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3232);
					match(DOT);
					setState(3233);
					match(STAR);
					}
				}

				setState(3244);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3236);
					match(COMMA);
					setState(3237);
					tableName();
					setState(3240);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3238);
						match(DOT);
						setState(3239);
						match(STAR);
						}
					}

					}
					}
					setState(3246);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3247);
				match(USING);
				setState(3248);
				tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3254);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
			case 1:
				{
				setState(3252);
				match(WHERE);
				setState(3253);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerOpenStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(SpeakQlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(SpeakQlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(SpeakQlParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerOpenStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterHandlerOpenStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitHandlerOpenStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitHandlerOpenStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerOpenStatementContext handlerOpenStatement() throws RecognitionException {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_handlerOpenStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3256);
			match(HANDLER);
			setState(3257);
			tableName();
			setState(3258);
			match(OPEN);
			setState(3263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
			case 1:
				{
				setState(3260);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3259);
					match(AS);
					}
				}

				setState(3262);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadIndexStatementContext extends ParserRuleContext {
		public UidContext index;
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(SpeakQlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(SpeakQlParser.READ, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(SpeakQlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(SpeakQlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(SpeakQlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(SpeakQlParser.NEXT, 0); }
		public TerminalNode PREV() { return getToken(SpeakQlParser.PREV, 0); }
		public TerminalNode LAST() { return getToken(SpeakQlParser.LAST, 0); }
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterHandlerReadIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitHandlerReadIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitHandlerReadIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadIndexStatementContext handlerReadIndexStatement() throws RecognitionException {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_handlerReadIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3265);
			match(HANDLER);
			setState(3266);
			tableName();
			setState(3267);
			match(READ);
			setState(3268);
			((HandlerReadIndexStatementContext)_localctx).index = uid();
			setState(3275);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				setState(3269);
				comparisonOperator();
				setState(3270);
				match(LR_BRACKET);
				setState(3271);
				constants();
				setState(3272);
				match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				setState(3274);
				((HandlerReadIndexStatementContext)_localctx).moveOrder = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					((HandlerReadIndexStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3279);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				{
				setState(3277);
				match(WHERE);
				setState(3278);
				expression(0);
				}
				break;
			}
			setState(3283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3281);
				match(LIMIT);
				setState(3282);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadStatementContext extends ParserRuleContext {
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(SpeakQlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(SpeakQlParser.READ, 0); }
		public TerminalNode FIRST() { return getToken(SpeakQlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(SpeakQlParser.NEXT, 0); }
		public TerminalNode WHERE() { return getToken(SpeakQlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(SpeakQlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterHandlerReadStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitHandlerReadStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitHandlerReadStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadStatementContext handlerReadStatement() throws RecognitionException {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_handlerReadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3285);
			match(HANDLER);
			setState(3286);
			tableName();
			setState(3287);
			match(READ);
			setState(3288);
			((HandlerReadStatementContext)_localctx).moveOrder = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
				((HandlerReadStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3291);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				setState(3289);
				match(WHERE);
				setState(3290);
				expression(0);
				}
				break;
			}
			setState(3295);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3293);
				match(LIMIT);
				setState(3294);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerCloseStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(SpeakQlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(SpeakQlParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCloseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterHandlerCloseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitHandlerCloseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitHandlerCloseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerCloseStatementContext handlerCloseStatement() throws RecognitionException {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_handlerCloseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3297);
			match(HANDLER);
			setState(3298);
			tableName();
			setState(3299);
			match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(SpeakQlParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(SpeakQlParser.IGNORE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(SpeakQlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(SpeakQlParser.LOW_PRIORITY, 0); }
		public TerminalNode AS() { return getToken(SpeakQlParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSingleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSingleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSingleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleUpdateStatementContext singleUpdateStatement() throws RecognitionException {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_singleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3301);
			match(UPDATE);
			setState(3303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3302);
				((SingleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3305);
				match(IGNORE);
				}
			}

			setState(3308);
			tableName();
			setState(3313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & ((1L << (AS - 26)) | (1L << (CURRENT - 26)) | (1L << (DATABASE - 26)) | (1L << (DIAGNOSTICS - 26)) | (1L << (EXCEPT - 26)) | (1L << (GROUP - 26)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (LEFT - 106)) | (1L << (NUMBER - 106)) | (1L << (ORDER - 106)) | (1L << (RIGHT - 106)) | (1L << (SCHEMA - 106)))) != 0) || ((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (STACKED - 172)) | (1L << (DATE - 172)) | (1L << (TIME - 172)) | (1L << (TIMESTAMP - 172)) | (1L << (DATETIME - 172)) | (1L << (YEAR - 172)) | (1L << (BINARY - 172)))) != 0) || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (TEXT - 237)) | (1L << (ENUM - 237)) | (1L << (SERIAL - 237)) | (1L << (JSON_ARRAY - 237)) | (1L << (JSON_OBJECT - 237)) | (1L << (JSON_QUOTE - 237)) | (1L << (JSON_CONTAINS - 237)) | (1L << (JSON_CONTAINS_PATH - 237)) | (1L << (JSON_EXTRACT - 237)) | (1L << (JSON_KEYS - 237)) | (1L << (JSON_OVERLAPS - 237)) | (1L << (JSON_SEARCH - 237)) | (1L << (JSON_VALUE - 237)) | (1L << (JSON_ARRAY_APPEND - 237)) | (1L << (JSON_ARRAY_INSERT - 237)) | (1L << (JSON_INSERT - 237)) | (1L << (JSON_MERGE - 237)) | (1L << (JSON_MERGE_PATCH - 237)) | (1L << (JSON_MERGE_PRESERVE - 237)) | (1L << (JSON_REMOVE - 237)) | (1L << (JSON_REPLACE - 237)) | (1L << (JSON_SET - 237)) | (1L << (JSON_UNQUOTE - 237)) | (1L << (JSON_DEPTH - 237)) | (1L << (JSON_LENGTH - 237)) | (1L << (JSON_TYPE - 237)) | (1L << (JSON_VALID - 237)) | (1L << (JSON_TABLE - 237)) | (1L << (JSON_SCHEMA_VALID - 237)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 237)) | (1L << (JSON_PRETTY - 237)) | (1L << (JSON_STORAGE_FREE - 237)) | (1L << (JSON_STORAGE_SIZE - 237)) | (1L << (JSON_ARRAYAGG - 237)) | (1L << (JSON_OBJECTAGG - 237)) | (1L << (AVG - 237)) | (1L << (BIT_AND - 237)) | (1L << (BIT_OR - 237)) | (1L << (BIT_XOR - 237)) | (1L << (COUNT - 237)) | (1L << (GROUP_CONCAT - 237)) | (1L << (MAX - 237)) | (1L << (MIN - 237)))) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & ((1L << (STD - 305)) | (1L << (STDDEV - 305)) | (1L << (STDDEV_POP - 305)) | (1L << (STDDEV_SAMP - 305)) | (1L << (SUM - 305)) | (1L << (VAR_POP - 305)) | (1L << (VAR_SAMP - 305)) | (1L << (VARIANCE - 305)) | (1L << (POSITION - 305)) | (1L << (ACCOUNT - 305)) | (1L << (ACTION - 305)) | (1L << (AFTER - 305)) | (1L << (AGGREGATE - 305)) | (1L << (ALGORITHM - 305)) | (1L << (ANY - 305)) | (1L << (AT - 305)) | (1L << (AUTHORS - 305)) | (1L << (AUTOCOMMIT - 305)) | (1L << (AUTOEXTEND_SIZE - 305)) | (1L << (AUTO_INCREMENT - 305)) | (1L << (AVG_ROW_LENGTH - 305)) | (1L << (BEGIN - 305)) | (1L << (BINLOG - 305)) | (1L << (BIT - 305)) | (1L << (BLOCK - 305)) | (1L << (BOOL - 305)) | (1L << (BOOLEAN - 305)) | (1L << (BTREE - 305)) | (1L << (CACHE - 305)) | (1L << (CASCADED - 305)) | (1L << (CHAIN - 305)) | (1L << (CHANGED - 305)) | (1L << (CHANNEL - 305)) | (1L << (CHECKSUM - 305)) | (1L << (PAGE_CHECKSUM - 305)) | (1L << (CIPHER - 305)) | (1L << (CLASS_ORIGIN - 305)) | (1L << (CLIENT - 305)) | (1L << (CLOSE - 305)) | (1L << (COALESCE - 305)) | (1L << (CODE - 305)) | (1L << (COLUMNS - 305)) | (1L << (COLUMN_FORMAT - 305)) | (1L << (COLUMN_NAME - 305)) | (1L << (COMMENT - 305)) | (1L << (COMMIT - 305)))) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & ((1L << (COMPACT - 369)) | (1L << (COMPLETION - 369)) | (1L << (COMPRESSED - 369)) | (1L << (COMPRESSION - 369)) | (1L << (CONCURRENT - 369)) | (1L << (CONNECT - 369)) | (1L << (CONNECTION - 369)) | (1L << (CONSISTENT - 369)) | (1L << (CONSTRAINT_CATALOG - 369)) | (1L << (CONSTRAINT_SCHEMA - 369)) | (1L << (CONSTRAINT_NAME - 369)) | (1L << (CONTAINS - 369)) | (1L << (CONTEXT - 369)) | (1L << (CONTRIBUTORS - 369)) | (1L << (COPY - 369)) | (1L << (CPU - 369)) | (1L << (CURSOR_NAME - 369)) | (1L << (DATA - 369)) | (1L << (DATAFILE - 369)) | (1L << (DEALLOCATE - 369)) | (1L << (DEFAULT_AUTH - 369)) | (1L << (DEFINER - 369)) | (1L << (DELAY_KEY_WRITE - 369)) | (1L << (DES_KEY_FILE - 369)) | (1L << (DIRECTORY - 369)) | (1L << (DISABLE - 369)) | (1L << (DISCARD - 369)) | (1L << (DISK - 369)) | (1L << (DO - 369)) | (1L << (DUMPFILE - 369)) | (1L << (DUPLICATE - 369)) | (1L << (DYNAMIC - 369)) | (1L << (ENABLE - 369)) | (1L << (ENCRYPTION - 369)) | (1L << (END - 369)) | (1L << (ENDS - 369)) | (1L << (ENGINE - 369)) | (1L << (ENGINES - 369)) | (1L << (ERROR - 369)) | (1L << (ERRORS - 369)) | (1L << (ESCAPE - 369)) | (1L << (EVEN - 369)) | (1L << (EVENT - 369)) | (1L << (EVENTS - 369)) | (1L << (EVERY - 369)) | (1L << (EXCHANGE - 369)) | (1L << (EXCLUSIVE - 369)) | (1L << (EXPIRE - 369)) | (1L << (EXPORT - 369)) | (1L << (EXTENDED - 369)) | (1L << (EXTENT_SIZE - 369)) | (1L << (FAST - 369)) | (1L << (FAULTS - 369)) | (1L << (FIELDS - 369)) | (1L << (FILE_BLOCK_SIZE - 369)) | (1L << (FILTER - 369)) | (1L << (FIRST - 369)) | (1L << (FIXED - 369)) | (1L << (FLUSH - 369)) | (1L << (FOLLOWS - 369)) | (1L << (FOUND - 369)) | (1L << (FULL - 369)) | (1L << (FUNCTION - 369)))) != 0) || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & ((1L << (GENERAL - 433)) | (1L << (GLOBAL - 433)) | (1L << (GRANTS - 433)) | (1L << (GROUP_REPLICATION - 433)) | (1L << (HANDLER - 433)) | (1L << (HASH - 433)) | (1L << (HELP - 433)) | (1L << (HOST - 433)) | (1L << (HOSTS - 433)) | (1L << (IDENTIFIED - 433)) | (1L << (IGNORE_SERVER_IDS - 433)) | (1L << (IMPORT - 433)) | (1L << (INDEXES - 433)) | (1L << (INITIAL_SIZE - 433)) | (1L << (INPLACE - 433)) | (1L << (INSERT_METHOD - 433)) | (1L << (INSTALL - 433)) | (1L << (INSTANCE - 433)) | (1L << (INVISIBLE - 433)) | (1L << (INVOKER - 433)) | (1L << (IO - 433)) | (1L << (IO_THREAD - 433)) | (1L << (IPC - 433)) | (1L << (ISOLATION - 433)) | (1L << (ISSUER - 433)) | (1L << (JSON - 433)) | (1L << (KEY_BLOCK_SIZE - 433)) | (1L << (LANGUAGE - 433)) | (1L << (LAST - 433)) | (1L << (LEAVES - 433)) | (1L << (LESS - 433)) | (1L << (LEVEL - 433)) | (1L << (LIST - 433)) | (1L << (LOCAL - 433)) | (1L << (LOGFILE - 433)) | (1L << (LOGS - 433)) | (1L << (MASTER - 433)) | (1L << (MASTER_AUTO_POSITION - 433)) | (1L << (MASTER_CONNECT_RETRY - 433)) | (1L << (MASTER_DELAY - 433)) | (1L << (MASTER_HEARTBEAT_PERIOD - 433)) | (1L << (MASTER_HOST - 433)) | (1L << (MASTER_LOG_FILE - 433)) | (1L << (MASTER_LOG_POS - 433)) | (1L << (MASTER_PASSWORD - 433)) | (1L << (MASTER_PORT - 433)) | (1L << (MASTER_RETRY_COUNT - 433)) | (1L << (MASTER_SSL - 433)) | (1L << (MASTER_SSL_CA - 433)) | (1L << (MASTER_SSL_CAPATH - 433)) | (1L << (MASTER_SSL_CERT - 433)) | (1L << (MASTER_SSL_CIPHER - 433)) | (1L << (MASTER_SSL_CRL - 433)) | (1L << (MASTER_SSL_CRLPATH - 433)) | (1L << (MASTER_SSL_KEY - 433)) | (1L << (MASTER_TLS_VERSION - 433)) | (1L << (MASTER_USER - 433)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 433)) | (1L << (MAX_QUERIES_PER_HOUR - 433)) | (1L << (MAX_ROWS - 433)) | (1L << (MAX_SIZE - 433)) | (1L << (MAX_UPDATES_PER_HOUR - 433)) | (1L << (MAX_USER_CONNECTIONS - 433)) | (1L << (MEDIUM - 433)))) != 0) || ((((_la - 497)) & ~0x3f) == 0 && ((1L << (_la - 497)) & ((1L << (MEMBER - 497)) | (1L << (MERGE - 497)) | (1L << (MESSAGE_TEXT - 497)) | (1L << (MID - 497)) | (1L << (MIGRATE - 497)) | (1L << (MIN_ROWS - 497)) | (1L << (MODE - 497)) | (1L << (MODIFY - 497)) | (1L << (MUTEX - 497)) | (1L << (MYSQL - 497)) | (1L << (MYSQL_ERRNO - 497)) | (1L << (NAME - 497)) | (1L << (NAMES - 497)) | (1L << (NCHAR - 497)) | (1L << (NEVER - 497)) | (1L << (NEXT - 497)) | (1L << (NO - 497)) | (1L << (NODEGROUP - 497)) | (1L << (NONE - 497)) | (1L << (ODBC - 497)) | (1L << (OFFLINE - 497)) | (1L << (OFFSET - 497)) | (1L << (OF - 497)) | (1L << (OJ - 497)) | (1L << (OLD_PASSWORD - 497)) | (1L << (ONE - 497)) | (1L << (ONLINE - 497)) | (1L << (ONLY - 497)) | (1L << (OPEN - 497)) | (1L << (OPTIMIZER_COSTS - 497)) | (1L << (OPTIONS - 497)) | (1L << (OWNER - 497)) | (1L << (PACK_KEYS - 497)) | (1L << (PAGE - 497)) | (1L << (PARSER - 497)) | (1L << (PARTIAL - 497)) | (1L << (PARTITIONING - 497)) | (1L << (PARTITIONS - 497)) | (1L << (PASSWORD - 497)) | (1L << (PHASE - 497)) | (1L << (PLUGIN - 497)) | (1L << (PLUGIN_DIR - 497)) | (1L << (PLUGINS - 497)) | (1L << (PORT - 497)) | (1L << (PRECEDES - 497)) | (1L << (PREPARE - 497)) | (1L << (PRESERVE - 497)) | (1L << (PREV - 497)) | (1L << (PROCESSLIST - 497)) | (1L << (PROFILE - 497)) | (1L << (PROFILES - 497)) | (1L << (PROXY - 497)) | (1L << (QUERY - 497)) | (1L << (QUICK - 497)) | (1L << (REBUILD - 497)) | (1L << (RECOVER - 497)) | (1L << (REDO_BUFFER_SIZE - 497)) | (1L << (REDUNDANT - 497)) | (1L << (RELAY - 497)) | (1L << (RELAY_LOG_FILE - 497)) | (1L << (RELAY_LOG_POS - 497)) | (1L << (RELAYLOG - 497)) | (1L << (REMOVE - 497)))) != 0) || ((((_la - 561)) & ~0x3f) == 0 && ((1L << (_la - 561)) & ((1L << (REORGANIZE - 561)) | (1L << (REPAIR - 561)) | (1L << (REPLICATE_DO_DB - 561)) | (1L << (REPLICATE_DO_TABLE - 561)) | (1L << (REPLICATE_IGNORE_DB - 561)) | (1L << (REPLICATE_IGNORE_TABLE - 561)) | (1L << (REPLICATE_REWRITE_DB - 561)) | (1L << (REPLICATE_WILD_DO_TABLE - 561)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 561)) | (1L << (REPLICATION - 561)) | (1L << (RESET - 561)) | (1L << (RESUME - 561)) | (1L << (RETURNED_SQLSTATE - 561)) | (1L << (RETURNS - 561)) | (1L << (ROLE - 561)) | (1L << (ROLLBACK - 561)) | (1L << (ROLLUP - 561)) | (1L << (ROTATE - 561)) | (1L << (ROW - 561)) | (1L << (ROWS - 561)) | (1L << (ROW_FORMAT - 561)) | (1L << (SAVEPOINT - 561)) | (1L << (SCHEDULE - 561)) | (1L << (SECURITY - 561)) | (1L << (SERVER - 561)) | (1L << (SESSION - 561)) | (1L << (SHARE - 561)) | (1L << (SHARED - 561)) | (1L << (SIGNED - 561)) | (1L << (SIMPLE - 561)) | (1L << (SLAVE - 561)) | (1L << (SLOW - 561)) | (1L << (SNAPSHOT - 561)) | (1L << (SOCKET - 561)) | (1L << (SOME - 561)) | (1L << (SONAME - 561)) | (1L << (SOUNDS - 561)) | (1L << (SOURCE - 561)) | (1L << (SQL_AFTER_GTIDS - 561)) | (1L << (SQL_AFTER_MTS_GAPS - 561)) | (1L << (SQL_BEFORE_GTIDS - 561)) | (1L << (SQL_BUFFER_RESULT - 561)) | (1L << (SQL_CACHE - 561)) | (1L << (SQL_NO_CACHE - 561)) | (1L << (SQL_THREAD - 561)) | (1L << (START - 561)) | (1L << (STARTS - 561)) | (1L << (STATS_AUTO_RECALC - 561)) | (1L << (STATS_PERSISTENT - 561)) | (1L << (STATS_SAMPLE_PAGES - 561)) | (1L << (STATUS - 561)) | (1L << (STOP - 561)) | (1L << (STORAGE - 561)) | (1L << (STRING - 561)) | (1L << (SUBCLASS_ORIGIN - 561)) | (1L << (SUBJECT - 561)) | (1L << (SUBPARTITION - 561)) | (1L << (SUBPARTITIONS - 561)) | (1L << (SUSPEND - 561)) | (1L << (SWAPS - 561)) | (1L << (SWITCHES - 561)) | (1L << (TABLE_NAME - 561)))) != 0) || ((((_la - 625)) & ~0x3f) == 0 && ((1L << (_la - 625)) & ((1L << (TABLESPACE - 625)) | (1L << (TEMPORARY - 625)) | (1L << (TEMPTABLE - 625)) | (1L << (THAN - 625)) | (1L << (TRADITIONAL - 625)) | (1L << (TRANSACTION - 625)) | (1L << (TRANSACTIONAL - 625)) | (1L << (TRIGGERS - 625)) | (1L << (TRUNCATE - 625)) | (1L << (UNDEFINED - 625)) | (1L << (UNDOFILE - 625)) | (1L << (UNDO_BUFFER_SIZE - 625)) | (1L << (UNINSTALL - 625)) | (1L << (UNKNOWN - 625)) | (1L << (UNTIL - 625)) | (1L << (UPGRADE - 625)) | (1L << (USER - 625)) | (1L << (USE_FRM - 625)) | (1L << (USER_RESOURCES - 625)) | (1L << (VALIDATION - 625)) | (1L << (VALUE - 625)) | (1L << (VARIABLES - 625)) | (1L << (VIEW - 625)) | (1L << (VISIBLE - 625)) | (1L << (WAIT - 625)) | (1L << (WARNINGS - 625)) | (1L << (WITHOUT - 625)) | (1L << (WORK - 625)) | (1L << (WRAPPER - 625)) | (1L << (X509 - 625)) | (1L << (XA - 625)) | (1L << (XML - 625)) | (1L << (EUR - 625)) | (1L << (USA - 625)) | (1L << (JIS - 625)) | (1L << (ISO - 625)) | (1L << (INTERNAL - 625)) | (1L << (QUARTER - 625)) | (1L << (MONTH - 625)) | (1L << (DAY - 625)) | (1L << (HOUR - 625)) | (1L << (MINUTE - 625)) | (1L << (WEEK - 625)) | (1L << (SECOND - 625)) | (1L << (MICROSECOND - 625)) | (1L << (TABLES - 625)) | (1L << (ROUTINE - 625)) | (1L << (EXECUTE - 625)) | (1L << (FILE - 625)) | (1L << (PROCESS - 625)) | (1L << (RELOAD - 625)) | (1L << (SHUTDOWN - 625)) | (1L << (SUPER - 625)) | (1L << (PRIVILEGES - 625)) | (1L << (AUDIT_ADMIN - 625)) | (1L << (BACKUP_ADMIN - 625)) | (1L << (BINLOG_ADMIN - 625)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 625)) | (1L << (CLONE_ADMIN - 625)))) != 0) || ((((_la - 689)) & ~0x3f) == 0 && ((1L << (_la - 689)) & ((1L << (CONNECTION_ADMIN - 689)) | (1L << (ENCRYPTION_KEY_ADMIN - 689)) | (1L << (FIREWALL_ADMIN - 689)) | (1L << (FIREWALL_USER - 689)) | (1L << (GROUP_REPLICATION_ADMIN - 689)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 689)) | (1L << (NDB_STORED_USER - 689)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 689)) | (1L << (REPLICATION_APPLIER - 689)) | (1L << (REPLICATION_SLAVE_ADMIN - 689)) | (1L << (RESOURCE_GROUP_ADMIN - 689)) | (1L << (RESOURCE_GROUP_USER - 689)) | (1L << (ROLE_ADMIN - 689)) | (1L << (SESSION_VARIABLES_ADMIN - 689)) | (1L << (SET_USER_ID - 689)) | (1L << (SHOW_ROUTINE - 689)) | (1L << (SYSTEM_VARIABLES_ADMIN - 689)) | (1L << (TABLE_ENCRYPTION_ADMIN - 689)) | (1L << (VERSION_TOKEN_ADMIN - 689)) | (1L << (XA_RECOVER_ADMIN - 689)) | (1L << (ARMSCII8 - 689)) | (1L << (ASCII - 689)) | (1L << (BIG5 - 689)) | (1L << (CP1250 - 689)) | (1L << (CP1251 - 689)) | (1L << (CP1256 - 689)) | (1L << (CP1257 - 689)) | (1L << (CP850 - 689)) | (1L << (CP852 - 689)) | (1L << (CP866 - 689)) | (1L << (CP932 - 689)) | (1L << (DEC8 - 689)) | (1L << (EUCJPMS - 689)) | (1L << (EUCKR - 689)) | (1L << (GB18030 - 689)) | (1L << (GB2312 - 689)) | (1L << (GBK - 689)) | (1L << (GEOSTD8 - 689)) | (1L << (GREEK - 689)) | (1L << (HEBREW - 689)) | (1L << (HP8 - 689)) | (1L << (KEYBCS2 - 689)) | (1L << (KOI8R - 689)) | (1L << (KOI8U - 689)) | (1L << (LATIN1 - 689)) | (1L << (LATIN2 - 689)) | (1L << (LATIN5 - 689)) | (1L << (LATIN7 - 689)) | (1L << (MACCE - 689)) | (1L << (MACROMAN - 689)) | (1L << (SJIS - 689)) | (1L << (SWE7 - 689)) | (1L << (TIS620 - 689)) | (1L << (UCS2 - 689)) | (1L << (UJIS - 689)) | (1L << (UTF16 - 689)) | (1L << (UTF16LE - 689)) | (1L << (UTF32 - 689)))) != 0) || ((((_la - 753)) & ~0x3f) == 0 && ((1L << (_la - 753)) & ((1L << (UTF8 - 753)) | (1L << (UTF8MB3 - 753)) | (1L << (UTF8MB4 - 753)) | (1L << (ARCHIVE - 753)) | (1L << (BLACKHOLE - 753)) | (1L << (CSV - 753)) | (1L << (FEDERATED - 753)) | (1L << (INNODB - 753)) | (1L << (MEMORY - 753)) | (1L << (MRG_MYISAM - 753)) | (1L << (MYISAM - 753)) | (1L << (NDB - 753)) | (1L << (NDBCLUSTER - 753)) | (1L << (PERFORMANCE_SCHEMA - 753)) | (1L << (TOKUDB - 753)) | (1L << (REPEATABLE - 753)) | (1L << (COMMITTED - 753)) | (1L << (UNCOMMITTED - 753)) | (1L << (SERIALIZABLE - 753)) | (1L << (GEOMETRYCOLLECTION - 753)) | (1L << (LINESTRING - 753)) | (1L << (MULTILINESTRING - 753)) | (1L << (MULTIPOINT - 753)) | (1L << (MULTIPOLYGON - 753)) | (1L << (POINT - 753)) | (1L << (POLYGON - 753)) | (1L << (ABS - 753)) | (1L << (ACOS - 753)) | (1L << (ADDDATE - 753)) | (1L << (ADDTIME - 753)) | (1L << (AES_DECRYPT - 753)) | (1L << (AES_ENCRYPT - 753)) | (1L << (AREA - 753)) | (1L << (ASBINARY - 753)) | (1L << (ASIN - 753)) | (1L << (ASTEXT - 753)) | (1L << (ASWKB - 753)) | (1L << (ASWKT - 753)) | (1L << (ASYMMETRIC_DECRYPT - 753)) | (1L << (ASYMMETRIC_DERIVE - 753)) | (1L << (ASYMMETRIC_ENCRYPT - 753)) | (1L << (ASYMMETRIC_SIGN - 753)) | (1L << (ASYMMETRIC_VERIFY - 753)) | (1L << (ATAN - 753)) | (1L << (ATAN2 - 753)) | (1L << (BENCHMARK - 753)) | (1L << (BIN - 753)) | (1L << (BIT_COUNT - 753)) | (1L << (BIT_LENGTH - 753)) | (1L << (BUFFER - 753)) | (1L << (CATALOG_NAME - 753)) | (1L << (CEIL - 753)) | (1L << (CEILING - 753)) | (1L << (CENTROID - 753)) | (1L << (CHARACTER_LENGTH - 753)) | (1L << (CHARSET - 753)) | (1L << (CHAR_LENGTH - 753)) | (1L << (COERCIBILITY - 753)) | (1L << (COLLATION - 753)) | (1L << (COMPRESS - 753)) | (1L << (CONCAT - 753)) | (1L << (CONCAT_WS - 753)))) != 0) || ((((_la - 817)) & ~0x3f) == 0 && ((1L << (_la - 817)) & ((1L << (CONNECTION_ID - 817)) | (1L << (CONV - 817)) | (1L << (CONVERT_TZ - 817)) | (1L << (COS - 817)) | (1L << (COT - 817)) | (1L << (CRC32 - 817)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 817)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 817)) | (1L << (CREATE_DH_PARAMETERS - 817)) | (1L << (CREATE_DIGEST - 817)) | (1L << (CROSSES - 817)) | (1L << (DATEDIFF - 817)) | (1L << (DATE_FORMAT - 817)) | (1L << (DAYNAME - 817)) | (1L << (DAYOFMONTH - 817)) | (1L << (DAYOFWEEK - 817)) | (1L << (DAYOFYEAR - 817)) | (1L << (DECODE - 817)) | (1L << (DEGREES - 817)) | (1L << (DES_DECRYPT - 817)) | (1L << (DES_ENCRYPT - 817)) | (1L << (DIMENSION - 817)) | (1L << (DISJOINT - 817)) | (1L << (ELT - 817)) | (1L << (ENCODE - 817)) | (1L << (ENCRYPT - 817)) | (1L << (ENDPOINT - 817)) | (1L << (ENVELOPE - 817)) | (1L << (EQUALS - 817)) | (1L << (EXP - 817)) | (1L << (EXPORT_SET - 817)) | (1L << (EXTERIORRING - 817)) | (1L << (EXTRACTVALUE - 817)) | (1L << (FIELD - 817)) | (1L << (FIND_IN_SET - 817)) | (1L << (FLOOR - 817)) | (1L << (FORMAT - 817)) | (1L << (FOUND_ROWS - 817)) | (1L << (FROM_BASE64 - 817)) | (1L << (FROM_DAYS - 817)) | (1L << (FROM_UNIXTIME - 817)) | (1L << (GEOMCOLLFROMTEXT - 817)) | (1L << (GEOMCOLLFROMWKB - 817)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 817)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 817)) | (1L << (GEOMETRYFROMTEXT - 817)) | (1L << (GEOMETRYFROMWKB - 817)) | (1L << (GEOMETRYN - 817)) | (1L << (GEOMETRYTYPE - 817)) | (1L << (GEOMFROMTEXT - 817)) | (1L << (GEOMFROMWKB - 817)) | (1L << (GET_FORMAT - 817)) | (1L << (GET_LOCK - 817)) | (1L << (GLENGTH - 817)) | (1L << (GREATEST - 817)) | (1L << (GTID_SUBSET - 817)) | (1L << (GTID_SUBTRACT - 817)) | (1L << (HEX - 817)) | (1L << (IFNULL - 817)) | (1L << (INET6_ATON - 817)) | (1L << (INET6_NTOA - 817)) | (1L << (INET_ATON - 817)) | (1L << (INET_NTOA - 817)) | (1L << (INSTR - 817)))) != 0) || ((((_la - 881)) & ~0x3f) == 0 && ((1L << (_la - 881)) & ((1L << (INTERIORRINGN - 881)) | (1L << (INTERSECTS - 881)) | (1L << (ISCLOSED - 881)) | (1L << (ISEMPTY - 881)) | (1L << (ISNULL - 881)) | (1L << (ISSIMPLE - 881)) | (1L << (IS_FREE_LOCK - 881)) | (1L << (IS_IPV4 - 881)) | (1L << (IS_IPV4_COMPAT - 881)) | (1L << (IS_IPV4_MAPPED - 881)) | (1L << (IS_IPV6 - 881)) | (1L << (IS_USED_LOCK - 881)) | (1L << (LAST_INSERT_ID - 881)) | (1L << (LCASE - 881)) | (1L << (LEAST - 881)) | (1L << (LENGTH - 881)) | (1L << (LINEFROMTEXT - 881)) | (1L << (LINEFROMWKB - 881)) | (1L << (LINESTRINGFROMTEXT - 881)) | (1L << (LINESTRINGFROMWKB - 881)) | (1L << (LN - 881)) | (1L << (LOAD_FILE - 881)) | (1L << (LOCATE - 881)) | (1L << (LOG - 881)) | (1L << (LOG10 - 881)) | (1L << (LOG2 - 881)) | (1L << (LOWER - 881)) | (1L << (LPAD - 881)) | (1L << (LTRIM - 881)) | (1L << (MAKEDATE - 881)) | (1L << (MAKETIME - 881)) | (1L << (MAKE_SET - 881)) | (1L << (MASTER_POS_WAIT - 881)) | (1L << (MBRCONTAINS - 881)) | (1L << (MBRDISJOINT - 881)) | (1L << (MBREQUAL - 881)) | (1L << (MBRINTERSECTS - 881)) | (1L << (MBROVERLAPS - 881)) | (1L << (MBRTOUCHES - 881)) | (1L << (MBRWITHIN - 881)) | (1L << (MD5 - 881)) | (1L << (MLINEFROMTEXT - 881)) | (1L << (MLINEFROMWKB - 881)) | (1L << (MONTHNAME - 881)) | (1L << (MPOINTFROMTEXT - 881)) | (1L << (MPOINTFROMWKB - 881)) | (1L << (MPOLYFROMTEXT - 881)) | (1L << (MPOLYFROMWKB - 881)) | (1L << (MULTILINESTRINGFROMTEXT - 881)) | (1L << (MULTILINESTRINGFROMWKB - 881)) | (1L << (MULTIPOINTFROMTEXT - 881)) | (1L << (MULTIPOINTFROMWKB - 881)) | (1L << (MULTIPOLYGONFROMTEXT - 881)) | (1L << (MULTIPOLYGONFROMWKB - 881)) | (1L << (NAME_CONST - 881)) | (1L << (NULLIF - 881)) | (1L << (NUMGEOMETRIES - 881)) | (1L << (NUMINTERIORRINGS - 881)) | (1L << (NUMPOINTS - 881)) | (1L << (OCT - 881)) | (1L << (OCTET_LENGTH - 881)) | (1L << (ORD - 881)) | (1L << (OVERLAPS - 881)) | (1L << (PERIOD_ADD - 881)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (PERIOD_DIFF - 945)) | (1L << (PI - 945)) | (1L << (POINTFROMTEXT - 945)) | (1L << (POINTFROMWKB - 945)) | (1L << (POINTN - 945)) | (1L << (POLYFROMTEXT - 945)) | (1L << (POLYFROMWKB - 945)) | (1L << (POLYGONFROMTEXT - 945)) | (1L << (POLYGONFROMWKB - 945)) | (1L << (POW - 945)) | (1L << (POWER - 945)) | (1L << (QUOTE - 945)) | (1L << (RADIANS - 945)) | (1L << (RAND - 945)) | (1L << (RANDOM_BYTES - 945)) | (1L << (RELEASE_LOCK - 945)) | (1L << (REVERSE - 945)) | (1L << (ROUND - 945)) | (1L << (ROW_COUNT - 945)) | (1L << (RPAD - 945)) | (1L << (RTRIM - 945)) | (1L << (SEC_TO_TIME - 945)) | (1L << (SESSION_USER - 945)) | (1L << (SHA - 945)) | (1L << (SHA1 - 945)) | (1L << (SHA2 - 945)) | (1L << (SCHEMA_NAME - 945)) | (1L << (SIGN - 945)) | (1L << (SIN - 945)) | (1L << (SLEEP - 945)) | (1L << (SOUNDEX - 945)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 945)) | (1L << (SQRT - 945)) | (1L << (SRID - 945)) | (1L << (STARTPOINT - 945)) | (1L << (STRCMP - 945)) | (1L << (STR_TO_DATE - 945)) | (1L << (ST_AREA - 945)) | (1L << (ST_ASBINARY - 945)) | (1L << (ST_ASTEXT - 945)) | (1L << (ST_ASWKB - 945)) | (1L << (ST_ASWKT - 945)) | (1L << (ST_BUFFER - 945)) | (1L << (ST_CENTROID - 945)) | (1L << (ST_CONTAINS - 945)) | (1L << (ST_CROSSES - 945)) | (1L << (ST_DIFFERENCE - 945)) | (1L << (ST_DIMENSION - 945)) | (1L << (ST_DISJOINT - 945)) | (1L << (ST_DISTANCE - 945)) | (1L << (ST_ENDPOINT - 945)) | (1L << (ST_ENVELOPE - 945)) | (1L << (ST_EQUALS - 945)) | (1L << (ST_EXTERIORRING - 945)) | (1L << (ST_GEOMCOLLFROMTEXT - 945)) | (1L << (ST_GEOMCOLLFROMTXT - 945)) | (1L << (ST_GEOMCOLLFROMWKB - 945)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 945)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 945)) | (1L << (ST_GEOMETRYFROMTEXT - 945)) | (1L << (ST_GEOMETRYFROMWKB - 945)) | (1L << (ST_GEOMETRYN - 945)) | (1L << (ST_GEOMETRYTYPE - 945)) | (1L << (ST_GEOMFROMTEXT - 945)))) != 0) || ((((_la - 1009)) & ~0x3f) == 0 && ((1L << (_la - 1009)) & ((1L << (ST_GEOMFROMWKB - 1009)) | (1L << (ST_INTERIORRINGN - 1009)) | (1L << (ST_INTERSECTION - 1009)) | (1L << (ST_INTERSECTS - 1009)) | (1L << (ST_ISCLOSED - 1009)) | (1L << (ST_ISEMPTY - 1009)) | (1L << (ST_ISSIMPLE - 1009)) | (1L << (ST_LINEFROMTEXT - 1009)) | (1L << (ST_LINEFROMWKB - 1009)) | (1L << (ST_LINESTRINGFROMTEXT - 1009)) | (1L << (ST_LINESTRINGFROMWKB - 1009)) | (1L << (ST_NUMGEOMETRIES - 1009)) | (1L << (ST_NUMINTERIORRING - 1009)) | (1L << (ST_NUMINTERIORRINGS - 1009)) | (1L << (ST_NUMPOINTS - 1009)) | (1L << (ST_OVERLAPS - 1009)) | (1L << (ST_POINTFROMTEXT - 1009)) | (1L << (ST_POINTFROMWKB - 1009)) | (1L << (ST_POINTN - 1009)) | (1L << (ST_POLYFROMTEXT - 1009)) | (1L << (ST_POLYFROMWKB - 1009)) | (1L << (ST_POLYGONFROMTEXT - 1009)) | (1L << (ST_POLYGONFROMWKB - 1009)) | (1L << (ST_SRID - 1009)) | (1L << (ST_STARTPOINT - 1009)) | (1L << (ST_SYMDIFFERENCE - 1009)) | (1L << (ST_TOUCHES - 1009)) | (1L << (ST_UNION - 1009)) | (1L << (ST_WITHIN - 1009)) | (1L << (ST_X - 1009)) | (1L << (ST_Y - 1009)) | (1L << (SUBDATE - 1009)) | (1L << (SUBSTRING_INDEX - 1009)) | (1L << (SUBTIME - 1009)) | (1L << (SYSTEM_USER - 1009)) | (1L << (TAN - 1009)) | (1L << (TIMEDIFF - 1009)) | (1L << (TIMESTAMPADD - 1009)) | (1L << (TIMESTAMPDIFF - 1009)) | (1L << (TIME_FORMAT - 1009)) | (1L << (TIME_TO_SEC - 1009)) | (1L << (TOUCHES - 1009)) | (1L << (TO_BASE64 - 1009)) | (1L << (TO_DAYS - 1009)) | (1L << (TO_SECONDS - 1009)) | (1L << (UCASE - 1009)) | (1L << (UNCOMPRESS - 1009)) | (1L << (UNCOMPRESSED_LENGTH - 1009)) | (1L << (UNHEX - 1009)) | (1L << (UNIX_TIMESTAMP - 1009)) | (1L << (UPDATEXML - 1009)) | (1L << (UPPER - 1009)) | (1L << (UUID - 1009)) | (1L << (UUID_SHORT - 1009)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1009)) | (1L << (VERSION - 1009)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1009)) | (1L << (WEEKDAY - 1009)) | (1L << (WEEKOFYEAR - 1009)) | (1L << (WEIGHT_STRING - 1009)) | (1L << (WITHIN - 1009)) | (1L << (YEARWEEK - 1009)) | (1L << (Y_FUNCTION - 1009)) | (1L << (X_FUNCTION - 1009)))) != 0) || ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & ((1L << (MOD - 1088)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1088)) | (1L << (STRING_LITERAL - 1088)) | (1L << (ID - 1088)) | (1L << (REVERSE_QUOTE_ID - 1088)) | (1L << (OPTIONAL - 1088)))) != 0)) {
				{
				setState(3310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3309);
					match(AS);
					}
				}

				setState(3312);
				uid();
				}
			}

			setState(3315);
			match(SET);
			setState(3316);
			updatedElement();
			setState(3321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3317);
				match(COMMA);
				setState(3318);
				updatedElement();
				}
				}
				setState(3323);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3326);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				setState(3324);
				match(WHERE);
				setState(3325);
				expression(0);
				}
				break;
			}
			setState(3329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3328);
				orderByClause();
				}
			}

			setState(3332);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3331);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(SpeakQlParser.UPDATE, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(SpeakQlParser.IGNORE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(SpeakQlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(SpeakQlParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterMultipleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitMultipleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitMultipleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleUpdateStatementContext multipleUpdateStatement() throws RecognitionException {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_multipleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3334);
			match(UPDATE);
			setState(3336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3335);
				((MultipleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3339);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3338);
				match(IGNORE);
				}
			}

			setState(3341);
			tableSources();
			setState(3342);
			match(SET);
			setState(3343);
			updatedElement();
			setState(3348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3344);
				match(COMMA);
				setState(3345);
				updatedElement();
				}
				}
				setState(3350);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3353);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				{
				setState(3351);
				match(WHERE);
				setState(3352);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(SpeakQlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SpeakQlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3355);
			match(ORDER);
			setState(3356);
			match(BY);
			setState(3357);
			orderByExpression();
			setState(3362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3358);
				match(COMMA);
				setState(3359);
				orderByExpression();
				}
				}
				setState(3364);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByExpressionContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(SpeakQlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SpeakQlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterOrderByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitOrderByExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitOrderByExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByExpressionContext orderByExpression() throws RecognitionException {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_orderByExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3365);
			expression(0);
			setState(3367);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
			case 1:
				{
				setState(3366);
				((OrderByExpressionContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderByExpressionContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourcesContext extends ParserRuleContext {
		public List<TableSourceContext> tableSource() {
			return getRuleContexts(TableSourceContext.class);
		}
		public TableSourceContext tableSource(int i) {
			return getRuleContext(TableSourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableSources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableSources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableSources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourcesContext tableSources() throws RecognitionException {
		TableSourcesContext _localctx = new TableSourcesContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_tableSources);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3369);
			tableSource();
			setState(3374);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3370);
				match(COMMA);
				setState(3371);
				tableSource();
				}
				}
				setState(3376);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceContext extends ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSource; }
	 
		public TableSourceContext() { }
		public void copyFrom(TableSourceContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableSourceNestedContext extends TableSourceContext {
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceNestedContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableSourceNested(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableSourceNested(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableSourceNested(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourceBaseContext extends TableSourceContext {
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceBaseContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableSourceBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableSourceBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableSourceBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceContext tableSource() throws RecognitionException {
		TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_tableSource);
		int _la;
		try {
			int _alt;
			setState(3394);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3377);
				tableSourceItem();
				setState(3381);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,465,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3378);
						joinPart();
						}
						} 
					}
					setState(3383);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,465,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3384);
				match(LR_BRACKET);
				setState(3385);
				tableSourceItem();
				setState(3389);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << JOIN_TABLE) | (1L << BY_JOINING) | (1L << BY_JOINING_TABLE) | (1L << JOIN_WITH) | (1L << JOIN_WITH_TABLE) | (1L << JOINED_WITH) | (1L << JOINED_WITH_TABLE) | (1L << CROSS))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (INNER - 93)) | (1L << (JOIN - 93)) | (1L << (LEFT - 93)) | (1L << (NATURAL - 93)) | (1L << (RIGHT - 93)))) != 0) || _la==STRAIGHT_JOIN) {
					{
					{
					setState(3386);
					joinPart();
					}
					}
					setState(3391);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3392);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceItemContext extends ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceItem; }
	 
		public TableSourceItemContext() { }
		public void copyFrom(TableSourceItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryTableItemContext extends TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode AS() { return getToken(SpeakQlParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSubqueryTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSubqueryTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSubqueryTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtomTableItemContext extends TableSourceItemContext {
		public UidContext alias;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(SpeakQlParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public AtomTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAtomTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAtomTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAtomTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourcesItemContext extends TableSourceItemContext {
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TableSourcesItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableSourcesItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableSourcesItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableSourcesItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceItemContext tableSourceItem() throws RecognitionException {
		TableSourceItemContext _localctx = new TableSourceItemContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			setState(3436);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3396);
				tableName();
				setState(3402);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(3397);
					match(PARTITION);
					setState(3398);
					match(LR_BRACKET);
					setState(3399);
					uidList();
					setState(3400);
					match(RR_BRACKET);
					}
				}

				setState(3408);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
				case 1:
					{
					setState(3405);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3404);
						match(AS);
						}
					}

					setState(3407);
					((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				setState(3418);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
				case 1:
					{
					setState(3410);
					indexHint();
					setState(3415);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,471,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3411);
							match(COMMA);
							setState(3412);
							indexHint();
							}
							} 
						}
						setState(3417);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,471,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3425);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
				case 1:
					{
					setState(3420);
					selectStatement();
					}
					break;
				case 2:
					{
					setState(3421);
					match(LR_BRACKET);
					setState(3422);
					((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					setState(3423);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3427);
					match(AS);
					}
				}

				setState(3430);
				((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3432);
				match(LR_BRACKET);
				setState(3433);
				tableSources();
				setState(3434);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public Token indexHintAction;
		public Token keyFormat;
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode USE() { return getToken(SpeakQlParser.USE, 0); }
		public TerminalNode IGNORE() { return getToken(SpeakQlParser.IGNORE, 0); }
		public TerminalNode FORCE() { return getToken(SpeakQlParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(SpeakQlParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIndexHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIndexHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_indexHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3438);
			((IndexHintContext)_localctx).indexHintAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				((IndexHintContext)_localctx).indexHintAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3439);
			((IndexHintContext)_localctx).keyFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				((IndexHintContext)_localctx).keyFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3440);
				match(FOR);
				setState(3441);
				indexHintType();
				}
			}

			setState(3444);
			match(LR_BRACKET);
			setState(3445);
			uidList();
			setState(3446);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(SpeakQlParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(SpeakQlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SpeakQlParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(SpeakQlParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIndexHintType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIndexHintType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIndexHintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_indexHintType);
		try {
			setState(3453);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3448);
				match(JOIN);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3449);
				match(ORDER);
				setState(3450);
				match(BY);
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 3);
				{
				setState(3451);
				match(GROUP);
				setState(3452);
				match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinPartContext extends ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPart; }
	 
		public JoinPartContext() { }
		public void copyFrom(JoinPartContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class InnerJoinContext extends JoinPartContext {
		public JoinKeywordContext joinKeyword() {
			return getRuleContext(JoinKeywordContext.class,0);
		}
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(SpeakQlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(SpeakQlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode INNER() { return getToken(SpeakQlParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(SpeakQlParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterInnerJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitInnerJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitInnerJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NaturalJoinContext extends JoinPartContext {
		public TerminalNode NATURAL() { return getToken(SpeakQlParser.NATURAL, 0); }
		public JoinKeywordContext joinKeyword() {
			return getRuleContext(JoinKeywordContext.class,0);
		}
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(SpeakQlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(SpeakQlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(SpeakQlParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterNaturalJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitNaturalJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitNaturalJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OuterJoinContext extends JoinPartContext {
		public JoinKeywordContext joinKeyword() {
			return getRuleContext(JoinKeywordContext.class,0);
		}
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(SpeakQlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(SpeakQlParser.RIGHT, 0); }
		public TerminalNode ON() { return getToken(SpeakQlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(SpeakQlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode OUTER() { return getToken(SpeakQlParser.OUTER, 0); }
		public OuterJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterOuterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitOuterJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitOuterJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StraightJoinContext extends JoinPartContext {
		public TerminalNode STRAIGHT_JOIN() { return getToken(SpeakQlParser.STRAIGHT_JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(SpeakQlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public StraightJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterStraightJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitStraightJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitStraightJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinPartContext joinPart() throws RecognitionException {
		JoinPartContext _localctx = new JoinPartContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_joinPart);
		int _la;
		try {
			setState(3500);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN_TABLE:
			case BY_JOINING:
			case BY_JOINING_TABLE:
			case JOIN_WITH:
			case JOIN_WITH_TABLE:
			case JOINED_WITH:
			case JOINED_WITH_TABLE:
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3456);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					setState(3455);
					_la = _input.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3458);
				joinKeyword();
				setState(3459);
				tableSourceItem();
				setState(3467);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
				case 1:
					{
					setState(3460);
					match(ON);
					setState(3461);
					expression(0);
					}
					break;
				case 2:
					{
					setState(3462);
					match(USING);
					setState(3463);
					match(LR_BRACKET);
					setState(3464);
					uidList();
					setState(3465);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3469);
				match(STRAIGHT_JOIN);
				setState(3470);
				tableSourceItem();
				setState(3473);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
				case 1:
					{
					setState(3471);
					match(ON);
					setState(3472);
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3475);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3477);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3476);
					match(OUTER);
					}
				}

				setState(3479);
				joinKeyword();
				setState(3480);
				tableSourceItem();
				setState(3488);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(3481);
					match(ON);
					setState(3482);
					expression(0);
					}
					break;
				case USING:
					{
					setState(3483);
					match(USING);
					setState(3484);
					match(LR_BRACKET);
					setState(3485);
					uidList();
					setState(3486);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3490);
				match(NATURAL);
				setState(3495);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					setState(3491);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3493);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(3492);
						match(OUTER);
						}
					}

					}
				}

				setState(3497);
				joinKeyword();
				setState(3498);
				tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinKeywordContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(SpeakQlParser.JOIN, 0); }
		public TerminalNode JOIN_TABLE() { return getToken(SpeakQlParser.JOIN_TABLE, 0); }
		public TerminalNode BY_JOINING() { return getToken(SpeakQlParser.BY_JOINING, 0); }
		public TerminalNode BY_JOINING_TABLE() { return getToken(SpeakQlParser.BY_JOINING_TABLE, 0); }
		public TerminalNode JOINED_WITH() { return getToken(SpeakQlParser.JOINED_WITH, 0); }
		public TerminalNode JOIN_WITH() { return getToken(SpeakQlParser.JOIN_WITH, 0); }
		public TerminalNode JOINED_WITH_TABLE() { return getToken(SpeakQlParser.JOINED_WITH_TABLE, 0); }
		public TerminalNode JOIN_WITH_TABLE() { return getToken(SpeakQlParser.JOIN_WITH_TABLE, 0); }
		public JoinKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterJoinKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitJoinKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitJoinKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinKeywordContext joinKeyword() throws RecognitionException {
		JoinKeywordContext _localctx = new JoinKeywordContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_joinKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3502);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << JOIN_TABLE) | (1L << BY_JOINING) | (1L << BY_JOINING_TABLE) | (1L << JOIN_WITH) | (1L << JOIN_WITH_TABLE) | (1L << JOINED_WITH) | (1L << JOINED_WITH_TABLE))) != 0) || _la==JOIN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_queryExpression);
		try {
			setState(3512);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3504);
				match(LR_BRACKET);
				setState(3505);
				querySpecification();
				setState(3506);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3508);
				match(LR_BRACKET);
				setState(3509);
				queryExpression();
				setState(3510);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionNointoContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterQueryExpressionNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitQueryExpressionNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitQueryExpressionNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionNointoContext queryExpressionNointo() throws RecognitionException {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_queryExpressionNointo);
		try {
			setState(3522);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3514);
				match(LR_BRACKET);
				setState(3515);
				querySpecificationNointo();
				setState(3516);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3518);
				match(LR_BRACKET);
				setState(3519);
				queryExpressionNointo();
				setState(3520);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public SelectExpressionContext selectExpression() {
			return getRuleContext(SelectExpressionContext.class,0);
		}
		public TableExpressionContext tableExpression() {
			return getRuleContext(TableExpressionContext.class,0);
		}
		public SelectModifierExpressionContext selectModifierExpression() {
			return getRuleContext(SelectModifierExpressionContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_querySpecification);
		try {
			setState(3532);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3524);
				selectExpression();
				setState(3525);
				tableExpression();
				setState(3526);
				selectModifierExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3528);
				tableExpression();
				setState(3529);
				selectExpression();
				setState(3530);
				selectModifierExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectModifierExpressionContext extends ParserRuleContext {
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public SelectIntoExpressionContext selectIntoExpression() {
			return getRuleContext(SelectIntoExpressionContext.class,0);
		}
		public SelectModifierExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectModifierExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSelectModifierExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSelectModifierExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSelectModifierExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectModifierExpressionContext selectModifierExpression() throws RecognitionException {
		SelectModifierExpressionContext _localctx = new SelectModifierExpressionContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_selectModifierExpression);
		int _la;
		try {
			setState(3567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3535);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
				case 1:
					{
					setState(3534);
					groupByClause();
					}
					break;
				}
				setState(3538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(3537);
					havingClause();
					}
				}

				setState(3541);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WINDOW) {
					{
					setState(3540);
					windowClause();
					}
				}

				setState(3544);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
				case 1:
					{
					setState(3543);
					orderByClause();
					}
					break;
				}
				setState(3547);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
				case 1:
					{
					setState(3546);
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3550);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
				case 1:
					{
					setState(3549);
					groupByClause();
					}
					break;
				}
				setState(3553);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(3552);
					havingClause();
					}
				}

				setState(3556);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WINDOW) {
					{
					setState(3555);
					windowClause();
					}
				}

				setState(3559);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
				case 1:
					{
					setState(3558);
					orderByClause();
					}
					break;
				}
				setState(3562);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
				case 1:
					{
					setState(3561);
					limitClause();
					}
					break;
				}
				setState(3565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3564);
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectExpressionContext extends ParserRuleContext {
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public SelectIntoExpressionContext selectIntoExpression() {
			return getRuleContext(SelectIntoExpressionContext.class,0);
		}
		public SelectExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSelectExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSelectExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSelectExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectExpressionContext selectExpression() throws RecognitionException {
		SelectExpressionContext _localctx = new SelectExpressionContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_selectExpression);
		try {
			int _alt;
			setState(3589);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,504,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3569);
				selectClause();
				setState(3573);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,501,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3570);
						selectSpec();
						}
						} 
					}
					setState(3575);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,501,_ctx);
				}
				setState(3576);
				selectElements();
				setState(3578);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
				case 1:
					{
					setState(3577);
					selectIntoExpression();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3580);
				selectClause();
				setState(3584);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,503,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3581);
						selectSpec();
						}
						} 
					}
					setState(3586);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,503,_ctx);
				}
				setState(3587);
				selectElements();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableExpressionContext extends ParserRuleContext {
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public TableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableExpressionContext tableExpression() throws RecognitionException {
		TableExpressionContext _localctx = new TableExpressionContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_tableExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3592);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
			case 1:
				{
				setState(3591);
				fromClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectClauseContext extends ParserRuleContext {
		public SelectKeywordContext selectKeyword() {
			return getRuleContext(SelectKeywordContext.class,0);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSelectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSelectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseContext selectClause() throws RecognitionException {
		SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_selectClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3594);
			selectKeyword();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectKeywordContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(SpeakQlParser.SELECT, 0); }
		public TerminalNode RETRIEVE() { return getToken(SpeakQlParser.RETRIEVE, 0); }
		public TerminalNode SHOW_ME() { return getToken(SpeakQlParser.SHOW_ME, 0); }
		public TerminalNode DISPLAY() { return getToken(SpeakQlParser.DISPLAY, 0); }
		public TerminalNode PRESENT() { return getToken(SpeakQlParser.PRESENT, 0); }
		public TerminalNode FIND() { return getToken(SpeakQlParser.FIND, 0); }
		public SelectKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSelectKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSelectKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSelectKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectKeywordContext selectKeyword() throws RecognitionException {
		SelectKeywordContext _localctx = new SelectKeywordContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_selectKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3596);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RETRIEVE) | (1L << SHOW_ME) | (1L << DISPLAY) | (1L << PRESENT) | (1L << FIND))) != 0) || _la==SELECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationNointoContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(SpeakQlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecificationNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterQuerySpecificationNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitQuerySpecificationNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitQuerySpecificationNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationNointoContext querySpecificationNointo() throws RecognitionException {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3598);
			match(SELECT);
			setState(3602);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,506,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3599);
					selectSpec();
					}
					} 
				}
				setState(3604);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,506,_ctx);
			}
			setState(3605);
			selectElements();
			setState(3607);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				{
				setState(3606);
				fromClause();
				}
				break;
			}
			setState(3610);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
			case 1:
				{
				setState(3609);
				groupByClause();
				}
				break;
			}
			setState(3613);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(3612);
				havingClause();
				}
			}

			setState(3616);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WINDOW) {
				{
				setState(3615);
				windowClause();
				}
			}

			setState(3619);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
			case 1:
				{
				setState(3618);
				orderByClause();
				}
				break;
			}
			setState(3622);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
			case 1:
				{
				setState(3621);
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionParenthesisContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(SpeakQlParser.UNION, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SpeakQlParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionParenthesis; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUnionParenthesis(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUnionParenthesis(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUnionParenthesis(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionParenthesisContext unionParenthesis() throws RecognitionException {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_unionParenthesis);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3624);
			match(UNION);
			setState(3626);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3625);
				((UnionParenthesisContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionParenthesisContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3628);
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionStatementContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(SpeakQlParser.UNION, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SpeakQlParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUnionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUnionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUnionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionStatementContext unionStatement() throws RecognitionException {
		UnionStatementContext _localctx = new UnionStatementContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_unionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3630);
			match(UNION);
			setState(3632);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3631);
				((UnionStatementContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionStatementContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3636);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(3634);
				querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				setState(3635);
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectSpecContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SpeakQlParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(SpeakQlParser.DISTINCTROW, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(SpeakQlParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(SpeakQlParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(SpeakQlParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(SpeakQlParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(SpeakQlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(SpeakQlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(SpeakQlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(SpeakQlParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSelectSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSelectSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSelectSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectSpecContext selectSpec() throws RecognitionException {
		SelectSpecContext _localctx = new SelectSpecContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_selectSpec);
		int _la;
		try {
			setState(3646);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(3638);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3639);
				match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3640);
				match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3641);
				match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(3642);
				match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3643);
				match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(3644);
				_la = _input.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(3645);
				match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementsContext extends ParserRuleContext {
		public Token star;
		public List<SelectElementContext> selectElement() {
			return getRuleContexts(SelectElementContext.class);
		}
		public SelectElementContext selectElement(int i) {
			return getRuleContext(SelectElementContext.class,i);
		}
		public TerminalNode STAR() { return getToken(SpeakQlParser.STAR, 0); }
		public List<SelectElementDelimiterContext> selectElementDelimiter() {
			return getRuleContexts(SelectElementDelimiterContext.class);
		}
		public SelectElementDelimiterContext selectElementDelimiter(int i) {
			return getRuleContext(SelectElementDelimiterContext.class,i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSelectElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSelectElements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSelectElements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementsContext selectElements() throws RecognitionException {
		SelectElementsContext _localctx = new SelectElementsContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_selectElements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3650);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
			case 1:
				{
				setState(3648);
				((SelectElementsContext)_localctx).star = match(STAR);
				}
				break;
			case 2:
				{
				setState(3649);
				selectElement();
				}
				break;
			}
			setState(3657);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND || _la==COMMA) {
				{
				{
				setState(3652);
				selectElementDelimiter();
				setState(3653);
				selectElement();
				}
				}
				setState(3659);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementDelimiterContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(SpeakQlParser.COMMA, 0); }
		public TerminalNode AND() { return getToken(SpeakQlParser.AND, 0); }
		public SelectElementDelimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElementDelimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSelectElementDelimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSelectElementDelimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSelectElementDelimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementDelimiterContext selectElementDelimiter() throws RecognitionException {
		SelectElementDelimiterContext _localctx = new SelectElementDelimiterContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_selectElementDelimiter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3660);
			_la = _input.LA(1);
			if ( !(_la==AND || _la==COMMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementContext extends ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElement; }
	 
		public SelectElementContext() { }
		public void copyFrom(SelectElementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectExpressionElementContext extends SelectElementContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(SpeakQlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(SpeakQlParser.VAR_ASSIGN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(SpeakQlParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSelectExpressionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSelectExpressionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSelectExpressionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectFunctionElementContext extends SelectElementContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(SpeakQlParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSelectFunctionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSelectFunctionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSelectFunctionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectStarElementContext extends SelectElementContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode DOT() { return getToken(SpeakQlParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(SpeakQlParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSelectStarElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSelectStarElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSelectStarElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectColumnElementContext extends SelectElementContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(SpeakQlParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSelectColumnElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSelectColumnElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSelectColumnElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementContext selectElement() throws RecognitionException {
		SelectElementContext _localctx = new SelectElementContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_selectElement);
		int _la;
		try {
			setState(3691);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3662);
				fullId();
				setState(3663);
				match(DOT);
				setState(3664);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3666);
				fullColumnName();
				setState(3671);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
				case 1:
					{
					setState(3668);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3667);
						match(AS);
						}
					}

					setState(3670);
					uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3673);
				functionCall();
				setState(3678);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
				case 1:
					{
					setState(3675);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3674);
						match(AS);
						}
					}

					setState(3677);
					uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3682);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
				case 1:
					{
					setState(3680);
					match(LOCAL_ID);
					setState(3681);
					match(VAR_ASSIGN);
					}
					break;
				}
				setState(3684);
				expression(0);
				setState(3689);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
				case 1:
					{
					setState(3686);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3685);
						match(AS);
						}
					}

					setState(3688);
					uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoExpressionContext extends ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoExpression; }
	 
		public SelectIntoExpressionContext() { }
		public void copyFrom(SelectIntoExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectIntoVariablesContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(SpeakQlParser.INTO, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSelectIntoVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSelectIntoVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSelectIntoVariables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoTextFileContext extends SelectIntoExpressionContext {
		public Token filename;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public TerminalNode INTO() { return getToken(SpeakQlParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(SpeakQlParser.OUTFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARACTER() { return getToken(SpeakQlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public TerminalNode LINES() { return getToken(SpeakQlParser.LINES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode FIELDS() { return getToken(SpeakQlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(SpeakQlParser.COLUMNS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSelectIntoTextFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSelectIntoTextFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSelectIntoTextFile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(SpeakQlParser.INTO, 0); }
		public TerminalNode DUMPFILE() { return getToken(SpeakQlParser.DUMPFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSelectIntoDumpFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSelectIntoDumpFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSelectIntoDumpFile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoExpressionContext selectIntoExpression() throws RecognitionException {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_selectIntoExpression);
		int _la;
		try {
			setState(3729);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3693);
				match(INTO);
				setState(3694);
				assignmentField();
				setState(3699);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3695);
					match(COMMA);
					setState(3696);
					assignmentField();
					}
					}
					setState(3701);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3702);
				match(INTO);
				setState(3703);
				match(DUMPFILE);
				setState(3704);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(3705);
				match(INTO);
				setState(3706);
				match(OUTFILE);
				setState(3707);
				((SelectIntoTextFileContext)_localctx).filename = match(STRING_LITERAL);
				setState(3711);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(3708);
					match(CHARACTER);
					setState(3709);
					match(SET);
					setState(3710);
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				setState(3719);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
				case 1:
					{
					setState(3713);
					((SelectIntoTextFileContext)_localctx).fieldsFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3715); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3714);
						selectFieldsInto();
						}
						}
						setState(3717); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ENCLOSED - 68)) | (1L << (ESCAPED - 68)) | (1L << (OPTIONALLY - 68)))) != 0) || _la==TERMINATED );
					}
					break;
				}
				setState(3727);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(3721);
					match(LINES);
					setState(3723); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3722);
						selectLinesInto();
						}
						}
						setState(3725); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFieldsIntoContext extends ParserRuleContext {
		public Token terminationField;
		public Token enclosion;
		public Token escaping;
		public TerminalNode TERMINATED() { return getToken(SpeakQlParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(SpeakQlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode ENCLOSED() { return getToken(SpeakQlParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(SpeakQlParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(SpeakQlParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSelectFieldsInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSelectFieldsInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSelectFieldsInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFieldsIntoContext selectFieldsInto() throws RecognitionException {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_selectFieldsInto);
		int _la;
		try {
			setState(3743);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3731);
				match(TERMINATED);
				setState(3732);
				match(BY);
				setState(3733);
				((SelectFieldsIntoContext)_localctx).terminationField = match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3735);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(3734);
					match(OPTIONALLY);
					}
				}

				setState(3737);
				match(ENCLOSED);
				setState(3738);
				match(BY);
				setState(3739);
				((SelectFieldsIntoContext)_localctx).enclosion = match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(3740);
				match(ESCAPED);
				setState(3741);
				match(BY);
				setState(3742);
				((SelectFieldsIntoContext)_localctx).escaping = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLinesIntoContext extends ParserRuleContext {
		public Token starting;
		public Token terminationLine;
		public TerminalNode STARTING() { return getToken(SpeakQlParser.STARTING, 0); }
		public TerminalNode BY() { return getToken(SpeakQlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode TERMINATED() { return getToken(SpeakQlParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSelectLinesInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSelectLinesInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSelectLinesInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLinesIntoContext selectLinesInto() throws RecognitionException {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_selectLinesInto);
		try {
			setState(3751);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3745);
				match(STARTING);
				setState(3746);
				match(BY);
				setState(3747);
				((SelectLinesIntoContext)_localctx).starting = match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(3748);
				match(TERMINATED);
				setState(3749);
				match(BY);
				setState(3750);
				((SelectLinesIntoContext)_localctx).terminationLine = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public ExpressionContext whereExpr;
		public FromKeywordContext fromKeyword() {
			return getRuleContext(FromKeywordContext.class,0);
		}
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(SpeakQlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3756);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,537,_ctx) ) {
			case 1:
				{
				setState(3753);
				fromKeyword();
				setState(3754);
				tableSources();
				}
				break;
			}
			setState(3760);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
			case 1:
				{
				setState(3758);
				match(WHERE);
				setState(3759);
				((FromClauseContext)_localctx).whereExpr = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromKeywordContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(SpeakQlParser.FROM, 0); }
		public TerminalNode IN_TABLE() { return getToken(SpeakQlParser.IN_TABLE, 0); }
		public TerminalNode FROM_TABLE() { return getToken(SpeakQlParser.FROM_TABLE, 0); }
		public FromKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFromKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFromKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFromKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromKeywordContext fromKeyword() throws RecognitionException {
		FromKeywordContext _localctx = new FromKeywordContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_fromKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3762);
			_la = _input.LA(1);
			if ( !(_la==IN_TABLE || _la==FROM_TABLE || _la==FROM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(SpeakQlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(SpeakQlParser.BY, 0); }
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(SpeakQlParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(SpeakQlParser.ROLLUP, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_groupByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3764);
			match(GROUP);
			setState(3765);
			match(BY);
			setState(3766);
			groupByItem();
			setState(3771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3767);
				match(COMMA);
				setState(3768);
				groupByItem();
				}
				}
				setState(3773);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3776);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
			case 1:
				{
				setState(3774);
				match(WITH);
				setState(3775);
				match(ROLLUP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public ExpressionContext havingExpr;
		public TerminalNode HAVING() { return getToken(SpeakQlParser.HAVING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3778);
			match(HAVING);
			setState(3779);
			((HavingClauseContext)_localctx).havingExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(SpeakQlParser.WINDOW, 0); }
		public List<WindowNameContext> windowName() {
			return getRuleContexts(WindowNameContext.class);
		}
		public WindowNameContext windowName(int i) {
			return getRuleContext(WindowNameContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(SpeakQlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(SpeakQlParser.AS, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(SpeakQlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SpeakQlParser.LR_BRACKET, i);
		}
		public List<WindowSpecContext> windowSpec() {
			return getRuleContexts(WindowSpecContext.class);
		}
		public WindowSpecContext windowSpec(int i) {
			return getRuleContext(WindowSpecContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SpeakQlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SpeakQlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterWindowClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitWindowClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitWindowClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_windowClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3781);
			match(WINDOW);
			setState(3782);
			windowName();
			setState(3783);
			match(AS);
			setState(3784);
			match(LR_BRACKET);
			setState(3785);
			windowSpec();
			setState(3786);
			match(RR_BRACKET);
			setState(3796);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3787);
				match(COMMA);
				setState(3788);
				windowName();
				setState(3789);
				match(AS);
				setState(3790);
				match(LR_BRACKET);
				setState(3791);
				windowSpec();
				setState(3792);
				match(RR_BRACKET);
				}
				}
				setState(3798);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(SpeakQlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SpeakQlParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterGroupByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitGroupByItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_groupByItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3799);
			expression(0);
			setState(3801);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
			case 1:
				{
				setState(3800);
				((GroupByItemContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((GroupByItemContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		public TerminalNode LIMIT() { return getToken(SpeakQlParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(SpeakQlParser.OFFSET, 0); }
		public List<LimitClauseAtomContext> limitClauseAtom() {
			return getRuleContexts(LimitClauseAtomContext.class);
		}
		public LimitClauseAtomContext limitClauseAtom(int i) {
			return getRuleContext(LimitClauseAtomContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(SpeakQlParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3803);
			match(LIMIT);
			setState(3814);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
			case 1:
				{
				setState(3807);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
				case 1:
					{
					setState(3804);
					((LimitClauseContext)_localctx).offset = limitClauseAtom();
					setState(3805);
					match(COMMA);
					}
					break;
				}
				setState(3809);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				setState(3810);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				setState(3811);
				match(OFFSET);
				setState(3812);
				((LimitClauseContext)_localctx).offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseAtomContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClauseAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLimitClauseAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLimitClauseAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLimitClauseAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseAtomContext limitClauseAtom() throws RecognitionException {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_limitClauseAtom);
		try {
			setState(3819);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3816);
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3817);
				mysqlVariable();
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case OPTIONAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3818);
				simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartTransactionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(SpeakQlParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(SpeakQlParser.TRANSACTION, 0); }
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitStartTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartTransactionContext startTransaction() throws RecognitionException {
		StartTransactionContext _localctx = new StartTransactionContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_startTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3821);
			match(START);
			setState(3822);
			match(TRANSACTION);
			setState(3831);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READ || _la==WITH) {
				{
				setState(3823);
				transactionMode();
				setState(3828);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3824);
					match(COMMA);
					setState(3825);
					transactionMode();
					}
					}
					setState(3830);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginWorkContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(SpeakQlParser.BEGIN, 0); }
		public TerminalNode WORK() { return getToken(SpeakQlParser.WORK, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterBeginWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitBeginWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitBeginWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginWorkContext beginWork() throws RecognitionException {
		BeginWorkContext _localctx = new BeginWorkContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_beginWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3833);
			match(BEGIN);
			setState(3835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3834);
				match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode COMMIT() { return getToken(SpeakQlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(SpeakQlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(SpeakQlParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(SpeakQlParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(SpeakQlParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(SpeakQlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(SpeakQlParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCommitWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitWorkContext commitWork() throws RecognitionException {
		CommitWorkContext _localctx = new CommitWorkContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_commitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3837);
			match(COMMIT);
			setState(3839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3838);
				match(WORK);
				}
			}

			setState(3846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3841);
				match(AND);
				setState(3843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3842);
					((CommitWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(3845);
				match(CHAIN);
				}
			}

			setState(3852);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
			case 1:
				{
				setState(3849);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3848);
					((CommitWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(3851);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode ROLLBACK() { return getToken(SpeakQlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(SpeakQlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(SpeakQlParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(SpeakQlParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(SpeakQlParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(SpeakQlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(SpeakQlParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRollbackWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackWorkContext rollbackWork() throws RecognitionException {
		RollbackWorkContext _localctx = new RollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_rollbackWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3854);
			match(ROLLBACK);
			setState(3856);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3855);
				match(WORK);
				}
			}

			setState(3863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3858);
				match(AND);
				setState(3860);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3859);
					((RollbackWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(3862);
				match(CHAIN);
				}
			}

			setState(3869);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				{
				setState(3866);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3865);
					((RollbackWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(3868);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SavepointStatementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(SpeakQlParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSavepointStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSavepointStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSavepointStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SavepointStatementContext savepointStatement() throws RecognitionException {
		SavepointStatementContext _localctx = new SavepointStatementContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_savepointStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3871);
			match(SAVEPOINT);
			setState(3872);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackStatementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(SpeakQlParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(SpeakQlParser.TO, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WORK() { return getToken(SpeakQlParser.WORK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(SpeakQlParser.SAVEPOINT, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRollbackStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRollbackStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRollbackStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackStatementContext rollbackStatement() throws RecognitionException {
		RollbackStatementContext _localctx = new RollbackStatementContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_rollbackStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3874);
			match(ROLLBACK);
			setState(3876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3875);
				match(WORK);
				}
			}

			setState(3878);
			match(TO);
			setState(3880);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
			case 1:
				{
				setState(3879);
				match(SAVEPOINT);
				}
				break;
			}
			setState(3882);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReleaseStatementContext extends ParserRuleContext {
		public TerminalNode RELEASE() { return getToken(SpeakQlParser.RELEASE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(SpeakQlParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_releaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterReleaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitReleaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitReleaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReleaseStatementContext releaseStatement() throws RecognitionException {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_releaseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3884);
			match(RELEASE);
			setState(3885);
			match(SAVEPOINT);
			setState(3886);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTablesContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(SpeakQlParser.LOCK, 0); }
		public TerminalNode TABLES() { return getToken(SpeakQlParser.TABLES, 0); }
		public List<LockTableElementContext> lockTableElement() {
			return getRuleContexts(LockTableElementContext.class);
		}
		public LockTableElementContext lockTableElement(int i) {
			return getRuleContext(LockTableElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public LockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLockTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLockTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLockTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTablesContext lockTables() throws RecognitionException {
		LockTablesContext _localctx = new LockTablesContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_lockTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3888);
			match(LOCK);
			setState(3889);
			match(TABLES);
			setState(3890);
			lockTableElement();
			setState(3895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3891);
				match(COMMA);
				setState(3892);
				lockTableElement();
				}
				}
				setState(3897);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlockTablesContext extends ParserRuleContext {
		public TerminalNode UNLOCK() { return getToken(SpeakQlParser.UNLOCK, 0); }
		public TerminalNode TABLES() { return getToken(SpeakQlParser.TABLES, 0); }
		public UnlockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlockTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUnlockTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUnlockTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUnlockTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlockTablesContext unlockTables() throws RecognitionException {
		UnlockTablesContext _localctx = new UnlockTablesContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_unlockTables);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3898);
			match(UNLOCK);
			setState(3899);
			match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetAutocommitStatementContext extends ParserRuleContext {
		public Token autocommitValue;
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(SpeakQlParser.AUTOCOMMIT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(SpeakQlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(SpeakQlParser.ONE_DECIMAL, 0); }
		public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAutocommitStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSetAutocommitStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSetAutocommitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSetAutocommitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetAutocommitStatementContext setAutocommitStatement() throws RecognitionException {
		SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_setAutocommitStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3901);
			match(SET);
			setState(3902);
			match(AUTOCOMMIT);
			setState(3903);
			match(EQUAL_SYMBOL);
			setState(3904);
			((SetAutocommitStatementContext)_localctx).autocommitValue = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				((SetAutocommitStatementContext)_localctx).autocommitValue = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTransactionStatementContext extends ParserRuleContext {
		public Token transactionContext;
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(SpeakQlParser.TRANSACTION, 0); }
		public List<TransactionOptionContext> transactionOption() {
			return getRuleContexts(TransactionOptionContext.class);
		}
		public TransactionOptionContext transactionOption(int i) {
			return getRuleContext(TransactionOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TerminalNode GLOBAL() { return getToken(SpeakQlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(SpeakQlParser.SESSION, 0); }
		public SetTransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTransactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSetTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSetTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSetTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTransactionStatementContext setTransactionStatement() throws RecognitionException {
		SetTransactionStatementContext _localctx = new SetTransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_setTransactionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3906);
			match(SET);
			setState(3908);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				setState(3907);
				((SetTransactionStatementContext)_localctx).transactionContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
					((SetTransactionStatementContext)_localctx).transactionContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3910);
			match(TRANSACTION);
			setState(3911);
			transactionOption();
			setState(3916);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3912);
				match(COMMA);
				setState(3913);
				transactionOption();
				}
				}
				setState(3918);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SpeakQlParser.WITH, 0); }
		public TerminalNode CONSISTENT() { return getToken(SpeakQlParser.CONSISTENT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(SpeakQlParser.SNAPSHOT, 0); }
		public TerminalNode READ() { return getToken(SpeakQlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(SpeakQlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(SpeakQlParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTransactionMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTransactionMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTransactionMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_transactionMode);
		try {
			setState(3926);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3919);
				match(WITH);
				setState(3920);
				match(CONSISTENT);
				setState(3921);
				match(SNAPSHOT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3922);
				match(READ);
				setState(3923);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3924);
				match(READ);
				setState(3925);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTableElementContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public LockActionContext lockAction() {
			return getRuleContext(LockActionContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(SpeakQlParser.AS, 0); }
		public LockTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLockTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLockTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLockTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTableElementContext lockTableElement() throws RecognitionException {
		LockTableElementContext _localctx = new LockTableElementContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_lockTableElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3928);
			tableName();
			setState(3933);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & ((1L << (AS - 26)) | (1L << (CURRENT - 26)) | (1L << (DATABASE - 26)) | (1L << (DIAGNOSTICS - 26)) | (1L << (EXCEPT - 26)) | (1L << (GROUP - 26)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (LEFT - 106)) | (1L << (NUMBER - 106)) | (1L << (ORDER - 106)) | (1L << (RIGHT - 106)) | (1L << (SCHEMA - 106)))) != 0) || ((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (STACKED - 172)) | (1L << (DATE - 172)) | (1L << (TIME - 172)) | (1L << (TIMESTAMP - 172)) | (1L << (DATETIME - 172)) | (1L << (YEAR - 172)) | (1L << (BINARY - 172)))) != 0) || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (TEXT - 237)) | (1L << (ENUM - 237)) | (1L << (SERIAL - 237)) | (1L << (JSON_ARRAY - 237)) | (1L << (JSON_OBJECT - 237)) | (1L << (JSON_QUOTE - 237)) | (1L << (JSON_CONTAINS - 237)) | (1L << (JSON_CONTAINS_PATH - 237)) | (1L << (JSON_EXTRACT - 237)) | (1L << (JSON_KEYS - 237)) | (1L << (JSON_OVERLAPS - 237)) | (1L << (JSON_SEARCH - 237)) | (1L << (JSON_VALUE - 237)) | (1L << (JSON_ARRAY_APPEND - 237)) | (1L << (JSON_ARRAY_INSERT - 237)) | (1L << (JSON_INSERT - 237)) | (1L << (JSON_MERGE - 237)) | (1L << (JSON_MERGE_PATCH - 237)) | (1L << (JSON_MERGE_PRESERVE - 237)) | (1L << (JSON_REMOVE - 237)) | (1L << (JSON_REPLACE - 237)) | (1L << (JSON_SET - 237)) | (1L << (JSON_UNQUOTE - 237)) | (1L << (JSON_DEPTH - 237)) | (1L << (JSON_LENGTH - 237)) | (1L << (JSON_TYPE - 237)) | (1L << (JSON_VALID - 237)) | (1L << (JSON_TABLE - 237)) | (1L << (JSON_SCHEMA_VALID - 237)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 237)) | (1L << (JSON_PRETTY - 237)) | (1L << (JSON_STORAGE_FREE - 237)) | (1L << (JSON_STORAGE_SIZE - 237)) | (1L << (JSON_ARRAYAGG - 237)) | (1L << (JSON_OBJECTAGG - 237)) | (1L << (AVG - 237)) | (1L << (BIT_AND - 237)) | (1L << (BIT_OR - 237)) | (1L << (BIT_XOR - 237)) | (1L << (COUNT - 237)) | (1L << (GROUP_CONCAT - 237)) | (1L << (MAX - 237)) | (1L << (MIN - 237)))) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & ((1L << (STD - 305)) | (1L << (STDDEV - 305)) | (1L << (STDDEV_POP - 305)) | (1L << (STDDEV_SAMP - 305)) | (1L << (SUM - 305)) | (1L << (VAR_POP - 305)) | (1L << (VAR_SAMP - 305)) | (1L << (VARIANCE - 305)) | (1L << (POSITION - 305)) | (1L << (ACCOUNT - 305)) | (1L << (ACTION - 305)) | (1L << (AFTER - 305)) | (1L << (AGGREGATE - 305)) | (1L << (ALGORITHM - 305)) | (1L << (ANY - 305)) | (1L << (AT - 305)) | (1L << (AUTHORS - 305)) | (1L << (AUTOCOMMIT - 305)) | (1L << (AUTOEXTEND_SIZE - 305)) | (1L << (AUTO_INCREMENT - 305)) | (1L << (AVG_ROW_LENGTH - 305)) | (1L << (BEGIN - 305)) | (1L << (BINLOG - 305)) | (1L << (BIT - 305)) | (1L << (BLOCK - 305)) | (1L << (BOOL - 305)) | (1L << (BOOLEAN - 305)) | (1L << (BTREE - 305)) | (1L << (CACHE - 305)) | (1L << (CASCADED - 305)) | (1L << (CHAIN - 305)) | (1L << (CHANGED - 305)) | (1L << (CHANNEL - 305)) | (1L << (CHECKSUM - 305)) | (1L << (PAGE_CHECKSUM - 305)) | (1L << (CIPHER - 305)) | (1L << (CLASS_ORIGIN - 305)) | (1L << (CLIENT - 305)) | (1L << (CLOSE - 305)) | (1L << (COALESCE - 305)) | (1L << (CODE - 305)) | (1L << (COLUMNS - 305)) | (1L << (COLUMN_FORMAT - 305)) | (1L << (COLUMN_NAME - 305)) | (1L << (COMMENT - 305)) | (1L << (COMMIT - 305)))) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & ((1L << (COMPACT - 369)) | (1L << (COMPLETION - 369)) | (1L << (COMPRESSED - 369)) | (1L << (COMPRESSION - 369)) | (1L << (CONCURRENT - 369)) | (1L << (CONNECT - 369)) | (1L << (CONNECTION - 369)) | (1L << (CONSISTENT - 369)) | (1L << (CONSTRAINT_CATALOG - 369)) | (1L << (CONSTRAINT_SCHEMA - 369)) | (1L << (CONSTRAINT_NAME - 369)) | (1L << (CONTAINS - 369)) | (1L << (CONTEXT - 369)) | (1L << (CONTRIBUTORS - 369)) | (1L << (COPY - 369)) | (1L << (CPU - 369)) | (1L << (CURSOR_NAME - 369)) | (1L << (DATA - 369)) | (1L << (DATAFILE - 369)) | (1L << (DEALLOCATE - 369)) | (1L << (DEFAULT_AUTH - 369)) | (1L << (DEFINER - 369)) | (1L << (DELAY_KEY_WRITE - 369)) | (1L << (DES_KEY_FILE - 369)) | (1L << (DIRECTORY - 369)) | (1L << (DISABLE - 369)) | (1L << (DISCARD - 369)) | (1L << (DISK - 369)) | (1L << (DO - 369)) | (1L << (DUMPFILE - 369)) | (1L << (DUPLICATE - 369)) | (1L << (DYNAMIC - 369)) | (1L << (ENABLE - 369)) | (1L << (ENCRYPTION - 369)) | (1L << (END - 369)) | (1L << (ENDS - 369)) | (1L << (ENGINE - 369)) | (1L << (ENGINES - 369)) | (1L << (ERROR - 369)) | (1L << (ERRORS - 369)) | (1L << (ESCAPE - 369)) | (1L << (EVEN - 369)) | (1L << (EVENT - 369)) | (1L << (EVENTS - 369)) | (1L << (EVERY - 369)) | (1L << (EXCHANGE - 369)) | (1L << (EXCLUSIVE - 369)) | (1L << (EXPIRE - 369)) | (1L << (EXPORT - 369)) | (1L << (EXTENDED - 369)) | (1L << (EXTENT_SIZE - 369)) | (1L << (FAST - 369)) | (1L << (FAULTS - 369)) | (1L << (FIELDS - 369)) | (1L << (FILE_BLOCK_SIZE - 369)) | (1L << (FILTER - 369)) | (1L << (FIRST - 369)) | (1L << (FIXED - 369)) | (1L << (FLUSH - 369)) | (1L << (FOLLOWS - 369)) | (1L << (FOUND - 369)) | (1L << (FULL - 369)) | (1L << (FUNCTION - 369)))) != 0) || ((((_la - 433)) & ~0x3f) == 0 && ((1L << (_la - 433)) & ((1L << (GENERAL - 433)) | (1L << (GLOBAL - 433)) | (1L << (GRANTS - 433)) | (1L << (GROUP_REPLICATION - 433)) | (1L << (HANDLER - 433)) | (1L << (HASH - 433)) | (1L << (HELP - 433)) | (1L << (HOST - 433)) | (1L << (HOSTS - 433)) | (1L << (IDENTIFIED - 433)) | (1L << (IGNORE_SERVER_IDS - 433)) | (1L << (IMPORT - 433)) | (1L << (INDEXES - 433)) | (1L << (INITIAL_SIZE - 433)) | (1L << (INPLACE - 433)) | (1L << (INSERT_METHOD - 433)) | (1L << (INSTALL - 433)) | (1L << (INSTANCE - 433)) | (1L << (INVISIBLE - 433)) | (1L << (INVOKER - 433)) | (1L << (IO - 433)) | (1L << (IO_THREAD - 433)) | (1L << (IPC - 433)) | (1L << (ISOLATION - 433)) | (1L << (ISSUER - 433)) | (1L << (JSON - 433)) | (1L << (KEY_BLOCK_SIZE - 433)) | (1L << (LANGUAGE - 433)) | (1L << (LAST - 433)) | (1L << (LEAVES - 433)) | (1L << (LESS - 433)) | (1L << (LEVEL - 433)) | (1L << (LIST - 433)) | (1L << (LOCAL - 433)) | (1L << (LOGFILE - 433)) | (1L << (LOGS - 433)) | (1L << (MASTER - 433)) | (1L << (MASTER_AUTO_POSITION - 433)) | (1L << (MASTER_CONNECT_RETRY - 433)) | (1L << (MASTER_DELAY - 433)) | (1L << (MASTER_HEARTBEAT_PERIOD - 433)) | (1L << (MASTER_HOST - 433)) | (1L << (MASTER_LOG_FILE - 433)) | (1L << (MASTER_LOG_POS - 433)) | (1L << (MASTER_PASSWORD - 433)) | (1L << (MASTER_PORT - 433)) | (1L << (MASTER_RETRY_COUNT - 433)) | (1L << (MASTER_SSL - 433)) | (1L << (MASTER_SSL_CA - 433)) | (1L << (MASTER_SSL_CAPATH - 433)) | (1L << (MASTER_SSL_CERT - 433)) | (1L << (MASTER_SSL_CIPHER - 433)) | (1L << (MASTER_SSL_CRL - 433)) | (1L << (MASTER_SSL_CRLPATH - 433)) | (1L << (MASTER_SSL_KEY - 433)) | (1L << (MASTER_TLS_VERSION - 433)) | (1L << (MASTER_USER - 433)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 433)) | (1L << (MAX_QUERIES_PER_HOUR - 433)) | (1L << (MAX_ROWS - 433)) | (1L << (MAX_SIZE - 433)) | (1L << (MAX_UPDATES_PER_HOUR - 433)) | (1L << (MAX_USER_CONNECTIONS - 433)) | (1L << (MEDIUM - 433)))) != 0) || ((((_la - 497)) & ~0x3f) == 0 && ((1L << (_la - 497)) & ((1L << (MEMBER - 497)) | (1L << (MERGE - 497)) | (1L << (MESSAGE_TEXT - 497)) | (1L << (MID - 497)) | (1L << (MIGRATE - 497)) | (1L << (MIN_ROWS - 497)) | (1L << (MODE - 497)) | (1L << (MODIFY - 497)) | (1L << (MUTEX - 497)) | (1L << (MYSQL - 497)) | (1L << (MYSQL_ERRNO - 497)) | (1L << (NAME - 497)) | (1L << (NAMES - 497)) | (1L << (NCHAR - 497)) | (1L << (NEVER - 497)) | (1L << (NEXT - 497)) | (1L << (NO - 497)) | (1L << (NODEGROUP - 497)) | (1L << (NONE - 497)) | (1L << (ODBC - 497)) | (1L << (OFFLINE - 497)) | (1L << (OFFSET - 497)) | (1L << (OF - 497)) | (1L << (OJ - 497)) | (1L << (OLD_PASSWORD - 497)) | (1L << (ONE - 497)) | (1L << (ONLINE - 497)) | (1L << (ONLY - 497)) | (1L << (OPEN - 497)) | (1L << (OPTIMIZER_COSTS - 497)) | (1L << (OPTIONS - 497)) | (1L << (OWNER - 497)) | (1L << (PACK_KEYS - 497)) | (1L << (PAGE - 497)) | (1L << (PARSER - 497)) | (1L << (PARTIAL - 497)) | (1L << (PARTITIONING - 497)) | (1L << (PARTITIONS - 497)) | (1L << (PASSWORD - 497)) | (1L << (PHASE - 497)) | (1L << (PLUGIN - 497)) | (1L << (PLUGIN_DIR - 497)) | (1L << (PLUGINS - 497)) | (1L << (PORT - 497)) | (1L << (PRECEDES - 497)) | (1L << (PREPARE - 497)) | (1L << (PRESERVE - 497)) | (1L << (PREV - 497)) | (1L << (PROCESSLIST - 497)) | (1L << (PROFILE - 497)) | (1L << (PROFILES - 497)) | (1L << (PROXY - 497)) | (1L << (QUERY - 497)) | (1L << (QUICK - 497)) | (1L << (REBUILD - 497)) | (1L << (RECOVER - 497)) | (1L << (REDO_BUFFER_SIZE - 497)) | (1L << (REDUNDANT - 497)) | (1L << (RELAY - 497)) | (1L << (RELAY_LOG_FILE - 497)) | (1L << (RELAY_LOG_POS - 497)) | (1L << (RELAYLOG - 497)) | (1L << (REMOVE - 497)))) != 0) || ((((_la - 561)) & ~0x3f) == 0 && ((1L << (_la - 561)) & ((1L << (REORGANIZE - 561)) | (1L << (REPAIR - 561)) | (1L << (REPLICATE_DO_DB - 561)) | (1L << (REPLICATE_DO_TABLE - 561)) | (1L << (REPLICATE_IGNORE_DB - 561)) | (1L << (REPLICATE_IGNORE_TABLE - 561)) | (1L << (REPLICATE_REWRITE_DB - 561)) | (1L << (REPLICATE_WILD_DO_TABLE - 561)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 561)) | (1L << (REPLICATION - 561)) | (1L << (RESET - 561)) | (1L << (RESUME - 561)) | (1L << (RETURNED_SQLSTATE - 561)) | (1L << (RETURNS - 561)) | (1L << (ROLE - 561)) | (1L << (ROLLBACK - 561)) | (1L << (ROLLUP - 561)) | (1L << (ROTATE - 561)) | (1L << (ROW - 561)) | (1L << (ROWS - 561)) | (1L << (ROW_FORMAT - 561)) | (1L << (SAVEPOINT - 561)) | (1L << (SCHEDULE - 561)) | (1L << (SECURITY - 561)) | (1L << (SERVER - 561)) | (1L << (SESSION - 561)) | (1L << (SHARE - 561)) | (1L << (SHARED - 561)) | (1L << (SIGNED - 561)) | (1L << (SIMPLE - 561)) | (1L << (SLAVE - 561)) | (1L << (SLOW - 561)) | (1L << (SNAPSHOT - 561)) | (1L << (SOCKET - 561)) | (1L << (SOME - 561)) | (1L << (SONAME - 561)) | (1L << (SOUNDS - 561)) | (1L << (SOURCE - 561)) | (1L << (SQL_AFTER_GTIDS - 561)) | (1L << (SQL_AFTER_MTS_GAPS - 561)) | (1L << (SQL_BEFORE_GTIDS - 561)) | (1L << (SQL_BUFFER_RESULT - 561)) | (1L << (SQL_CACHE - 561)) | (1L << (SQL_NO_CACHE - 561)) | (1L << (SQL_THREAD - 561)) | (1L << (START - 561)) | (1L << (STARTS - 561)) | (1L << (STATS_AUTO_RECALC - 561)) | (1L << (STATS_PERSISTENT - 561)) | (1L << (STATS_SAMPLE_PAGES - 561)) | (1L << (STATUS - 561)) | (1L << (STOP - 561)) | (1L << (STORAGE - 561)) | (1L << (STRING - 561)) | (1L << (SUBCLASS_ORIGIN - 561)) | (1L << (SUBJECT - 561)) | (1L << (SUBPARTITION - 561)) | (1L << (SUBPARTITIONS - 561)) | (1L << (SUSPEND - 561)) | (1L << (SWAPS - 561)) | (1L << (SWITCHES - 561)) | (1L << (TABLE_NAME - 561)))) != 0) || ((((_la - 625)) & ~0x3f) == 0 && ((1L << (_la - 625)) & ((1L << (TABLESPACE - 625)) | (1L << (TEMPORARY - 625)) | (1L << (TEMPTABLE - 625)) | (1L << (THAN - 625)) | (1L << (TRADITIONAL - 625)) | (1L << (TRANSACTION - 625)) | (1L << (TRANSACTIONAL - 625)) | (1L << (TRIGGERS - 625)) | (1L << (TRUNCATE - 625)) | (1L << (UNDEFINED - 625)) | (1L << (UNDOFILE - 625)) | (1L << (UNDO_BUFFER_SIZE - 625)) | (1L << (UNINSTALL - 625)) | (1L << (UNKNOWN - 625)) | (1L << (UNTIL - 625)) | (1L << (UPGRADE - 625)) | (1L << (USER - 625)) | (1L << (USE_FRM - 625)) | (1L << (USER_RESOURCES - 625)) | (1L << (VALIDATION - 625)) | (1L << (VALUE - 625)) | (1L << (VARIABLES - 625)) | (1L << (VIEW - 625)) | (1L << (VISIBLE - 625)) | (1L << (WAIT - 625)) | (1L << (WARNINGS - 625)) | (1L << (WITHOUT - 625)) | (1L << (WORK - 625)) | (1L << (WRAPPER - 625)) | (1L << (X509 - 625)) | (1L << (XA - 625)) | (1L << (XML - 625)) | (1L << (EUR - 625)) | (1L << (USA - 625)) | (1L << (JIS - 625)) | (1L << (ISO - 625)) | (1L << (INTERNAL - 625)) | (1L << (QUARTER - 625)) | (1L << (MONTH - 625)) | (1L << (DAY - 625)) | (1L << (HOUR - 625)) | (1L << (MINUTE - 625)) | (1L << (WEEK - 625)) | (1L << (SECOND - 625)) | (1L << (MICROSECOND - 625)) | (1L << (TABLES - 625)) | (1L << (ROUTINE - 625)) | (1L << (EXECUTE - 625)) | (1L << (FILE - 625)) | (1L << (PROCESS - 625)) | (1L << (RELOAD - 625)) | (1L << (SHUTDOWN - 625)) | (1L << (SUPER - 625)) | (1L << (PRIVILEGES - 625)) | (1L << (AUDIT_ADMIN - 625)) | (1L << (BACKUP_ADMIN - 625)) | (1L << (BINLOG_ADMIN - 625)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 625)) | (1L << (CLONE_ADMIN - 625)))) != 0) || ((((_la - 689)) & ~0x3f) == 0 && ((1L << (_la - 689)) & ((1L << (CONNECTION_ADMIN - 689)) | (1L << (ENCRYPTION_KEY_ADMIN - 689)) | (1L << (FIREWALL_ADMIN - 689)) | (1L << (FIREWALL_USER - 689)) | (1L << (GROUP_REPLICATION_ADMIN - 689)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 689)) | (1L << (NDB_STORED_USER - 689)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 689)) | (1L << (REPLICATION_APPLIER - 689)) | (1L << (REPLICATION_SLAVE_ADMIN - 689)) | (1L << (RESOURCE_GROUP_ADMIN - 689)) | (1L << (RESOURCE_GROUP_USER - 689)) | (1L << (ROLE_ADMIN - 689)) | (1L << (SESSION_VARIABLES_ADMIN - 689)) | (1L << (SET_USER_ID - 689)) | (1L << (SHOW_ROUTINE - 689)) | (1L << (SYSTEM_VARIABLES_ADMIN - 689)) | (1L << (TABLE_ENCRYPTION_ADMIN - 689)) | (1L << (VERSION_TOKEN_ADMIN - 689)) | (1L << (XA_RECOVER_ADMIN - 689)) | (1L << (ARMSCII8 - 689)) | (1L << (ASCII - 689)) | (1L << (BIG5 - 689)) | (1L << (CP1250 - 689)) | (1L << (CP1251 - 689)) | (1L << (CP1256 - 689)) | (1L << (CP1257 - 689)) | (1L << (CP850 - 689)) | (1L << (CP852 - 689)) | (1L << (CP866 - 689)) | (1L << (CP932 - 689)) | (1L << (DEC8 - 689)) | (1L << (EUCJPMS - 689)) | (1L << (EUCKR - 689)) | (1L << (GB18030 - 689)) | (1L << (GB2312 - 689)) | (1L << (GBK - 689)) | (1L << (GEOSTD8 - 689)) | (1L << (GREEK - 689)) | (1L << (HEBREW - 689)) | (1L << (HP8 - 689)) | (1L << (KEYBCS2 - 689)) | (1L << (KOI8R - 689)) | (1L << (KOI8U - 689)) | (1L << (LATIN1 - 689)) | (1L << (LATIN2 - 689)) | (1L << (LATIN5 - 689)) | (1L << (LATIN7 - 689)) | (1L << (MACCE - 689)) | (1L << (MACROMAN - 689)) | (1L << (SJIS - 689)) | (1L << (SWE7 - 689)) | (1L << (TIS620 - 689)) | (1L << (UCS2 - 689)) | (1L << (UJIS - 689)) | (1L << (UTF16 - 689)) | (1L << (UTF16LE - 689)) | (1L << (UTF32 - 689)))) != 0) || ((((_la - 753)) & ~0x3f) == 0 && ((1L << (_la - 753)) & ((1L << (UTF8 - 753)) | (1L << (UTF8MB3 - 753)) | (1L << (UTF8MB4 - 753)) | (1L << (ARCHIVE - 753)) | (1L << (BLACKHOLE - 753)) | (1L << (CSV - 753)) | (1L << (FEDERATED - 753)) | (1L << (INNODB - 753)) | (1L << (MEMORY - 753)) | (1L << (MRG_MYISAM - 753)) | (1L << (MYISAM - 753)) | (1L << (NDB - 753)) | (1L << (NDBCLUSTER - 753)) | (1L << (PERFORMANCE_SCHEMA - 753)) | (1L << (TOKUDB - 753)) | (1L << (REPEATABLE - 753)) | (1L << (COMMITTED - 753)) | (1L << (UNCOMMITTED - 753)) | (1L << (SERIALIZABLE - 753)) | (1L << (GEOMETRYCOLLECTION - 753)) | (1L << (LINESTRING - 753)) | (1L << (MULTILINESTRING - 753)) | (1L << (MULTIPOINT - 753)) | (1L << (MULTIPOLYGON - 753)) | (1L << (POINT - 753)) | (1L << (POLYGON - 753)) | (1L << (ABS - 753)) | (1L << (ACOS - 753)) | (1L << (ADDDATE - 753)) | (1L << (ADDTIME - 753)) | (1L << (AES_DECRYPT - 753)) | (1L << (AES_ENCRYPT - 753)) | (1L << (AREA - 753)) | (1L << (ASBINARY - 753)) | (1L << (ASIN - 753)) | (1L << (ASTEXT - 753)) | (1L << (ASWKB - 753)) | (1L << (ASWKT - 753)) | (1L << (ASYMMETRIC_DECRYPT - 753)) | (1L << (ASYMMETRIC_DERIVE - 753)) | (1L << (ASYMMETRIC_ENCRYPT - 753)) | (1L << (ASYMMETRIC_SIGN - 753)) | (1L << (ASYMMETRIC_VERIFY - 753)) | (1L << (ATAN - 753)) | (1L << (ATAN2 - 753)) | (1L << (BENCHMARK - 753)) | (1L << (BIN - 753)) | (1L << (BIT_COUNT - 753)) | (1L << (BIT_LENGTH - 753)) | (1L << (BUFFER - 753)) | (1L << (CATALOG_NAME - 753)) | (1L << (CEIL - 753)) | (1L << (CEILING - 753)) | (1L << (CENTROID - 753)) | (1L << (CHARACTER_LENGTH - 753)) | (1L << (CHARSET - 753)) | (1L << (CHAR_LENGTH - 753)) | (1L << (COERCIBILITY - 753)) | (1L << (COLLATION - 753)) | (1L << (COMPRESS - 753)) | (1L << (CONCAT - 753)) | (1L << (CONCAT_WS - 753)))) != 0) || ((((_la - 817)) & ~0x3f) == 0 && ((1L << (_la - 817)) & ((1L << (CONNECTION_ID - 817)) | (1L << (CONV - 817)) | (1L << (CONVERT_TZ - 817)) | (1L << (COS - 817)) | (1L << (COT - 817)) | (1L << (CRC32 - 817)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 817)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 817)) | (1L << (CREATE_DH_PARAMETERS - 817)) | (1L << (CREATE_DIGEST - 817)) | (1L << (CROSSES - 817)) | (1L << (DATEDIFF - 817)) | (1L << (DATE_FORMAT - 817)) | (1L << (DAYNAME - 817)) | (1L << (DAYOFMONTH - 817)) | (1L << (DAYOFWEEK - 817)) | (1L << (DAYOFYEAR - 817)) | (1L << (DECODE - 817)) | (1L << (DEGREES - 817)) | (1L << (DES_DECRYPT - 817)) | (1L << (DES_ENCRYPT - 817)) | (1L << (DIMENSION - 817)) | (1L << (DISJOINT - 817)) | (1L << (ELT - 817)) | (1L << (ENCODE - 817)) | (1L << (ENCRYPT - 817)) | (1L << (ENDPOINT - 817)) | (1L << (ENVELOPE - 817)) | (1L << (EQUALS - 817)) | (1L << (EXP - 817)) | (1L << (EXPORT_SET - 817)) | (1L << (EXTERIORRING - 817)) | (1L << (EXTRACTVALUE - 817)) | (1L << (FIELD - 817)) | (1L << (FIND_IN_SET - 817)) | (1L << (FLOOR - 817)) | (1L << (FORMAT - 817)) | (1L << (FOUND_ROWS - 817)) | (1L << (FROM_BASE64 - 817)) | (1L << (FROM_DAYS - 817)) | (1L << (FROM_UNIXTIME - 817)) | (1L << (GEOMCOLLFROMTEXT - 817)) | (1L << (GEOMCOLLFROMWKB - 817)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 817)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 817)) | (1L << (GEOMETRYFROMTEXT - 817)) | (1L << (GEOMETRYFROMWKB - 817)) | (1L << (GEOMETRYN - 817)) | (1L << (GEOMETRYTYPE - 817)) | (1L << (GEOMFROMTEXT - 817)) | (1L << (GEOMFROMWKB - 817)) | (1L << (GET_FORMAT - 817)) | (1L << (GET_LOCK - 817)) | (1L << (GLENGTH - 817)) | (1L << (GREATEST - 817)) | (1L << (GTID_SUBSET - 817)) | (1L << (GTID_SUBTRACT - 817)) | (1L << (HEX - 817)) | (1L << (IFNULL - 817)) | (1L << (INET6_ATON - 817)) | (1L << (INET6_NTOA - 817)) | (1L << (INET_ATON - 817)) | (1L << (INET_NTOA - 817)) | (1L << (INSTR - 817)))) != 0) || ((((_la - 881)) & ~0x3f) == 0 && ((1L << (_la - 881)) & ((1L << (INTERIORRINGN - 881)) | (1L << (INTERSECTS - 881)) | (1L << (ISCLOSED - 881)) | (1L << (ISEMPTY - 881)) | (1L << (ISNULL - 881)) | (1L << (ISSIMPLE - 881)) | (1L << (IS_FREE_LOCK - 881)) | (1L << (IS_IPV4 - 881)) | (1L << (IS_IPV4_COMPAT - 881)) | (1L << (IS_IPV4_MAPPED - 881)) | (1L << (IS_IPV6 - 881)) | (1L << (IS_USED_LOCK - 881)) | (1L << (LAST_INSERT_ID - 881)) | (1L << (LCASE - 881)) | (1L << (LEAST - 881)) | (1L << (LENGTH - 881)) | (1L << (LINEFROMTEXT - 881)) | (1L << (LINEFROMWKB - 881)) | (1L << (LINESTRINGFROMTEXT - 881)) | (1L << (LINESTRINGFROMWKB - 881)) | (1L << (LN - 881)) | (1L << (LOAD_FILE - 881)) | (1L << (LOCATE - 881)) | (1L << (LOG - 881)) | (1L << (LOG10 - 881)) | (1L << (LOG2 - 881)) | (1L << (LOWER - 881)) | (1L << (LPAD - 881)) | (1L << (LTRIM - 881)) | (1L << (MAKEDATE - 881)) | (1L << (MAKETIME - 881)) | (1L << (MAKE_SET - 881)) | (1L << (MASTER_POS_WAIT - 881)) | (1L << (MBRCONTAINS - 881)) | (1L << (MBRDISJOINT - 881)) | (1L << (MBREQUAL - 881)) | (1L << (MBRINTERSECTS - 881)) | (1L << (MBROVERLAPS - 881)) | (1L << (MBRTOUCHES - 881)) | (1L << (MBRWITHIN - 881)) | (1L << (MD5 - 881)) | (1L << (MLINEFROMTEXT - 881)) | (1L << (MLINEFROMWKB - 881)) | (1L << (MONTHNAME - 881)) | (1L << (MPOINTFROMTEXT - 881)) | (1L << (MPOINTFROMWKB - 881)) | (1L << (MPOLYFROMTEXT - 881)) | (1L << (MPOLYFROMWKB - 881)) | (1L << (MULTILINESTRINGFROMTEXT - 881)) | (1L << (MULTILINESTRINGFROMWKB - 881)) | (1L << (MULTIPOINTFROMTEXT - 881)) | (1L << (MULTIPOINTFROMWKB - 881)) | (1L << (MULTIPOLYGONFROMTEXT - 881)) | (1L << (MULTIPOLYGONFROMWKB - 881)) | (1L << (NAME_CONST - 881)) | (1L << (NULLIF - 881)) | (1L << (NUMGEOMETRIES - 881)) | (1L << (NUMINTERIORRINGS - 881)) | (1L << (NUMPOINTS - 881)) | (1L << (OCT - 881)) | (1L << (OCTET_LENGTH - 881)) | (1L << (ORD - 881)) | (1L << (OVERLAPS - 881)) | (1L << (PERIOD_ADD - 881)))) != 0) || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (PERIOD_DIFF - 945)) | (1L << (PI - 945)) | (1L << (POINTFROMTEXT - 945)) | (1L << (POINTFROMWKB - 945)) | (1L << (POINTN - 945)) | (1L << (POLYFROMTEXT - 945)) | (1L << (POLYFROMWKB - 945)) | (1L << (POLYGONFROMTEXT - 945)) | (1L << (POLYGONFROMWKB - 945)) | (1L << (POW - 945)) | (1L << (POWER - 945)) | (1L << (QUOTE - 945)) | (1L << (RADIANS - 945)) | (1L << (RAND - 945)) | (1L << (RANDOM_BYTES - 945)) | (1L << (RELEASE_LOCK - 945)) | (1L << (REVERSE - 945)) | (1L << (ROUND - 945)) | (1L << (ROW_COUNT - 945)) | (1L << (RPAD - 945)) | (1L << (RTRIM - 945)) | (1L << (SEC_TO_TIME - 945)) | (1L << (SESSION_USER - 945)) | (1L << (SHA - 945)) | (1L << (SHA1 - 945)) | (1L << (SHA2 - 945)) | (1L << (SCHEMA_NAME - 945)) | (1L << (SIGN - 945)) | (1L << (SIN - 945)) | (1L << (SLEEP - 945)) | (1L << (SOUNDEX - 945)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 945)) | (1L << (SQRT - 945)) | (1L << (SRID - 945)) | (1L << (STARTPOINT - 945)) | (1L << (STRCMP - 945)) | (1L << (STR_TO_DATE - 945)) | (1L << (ST_AREA - 945)) | (1L << (ST_ASBINARY - 945)) | (1L << (ST_ASTEXT - 945)) | (1L << (ST_ASWKB - 945)) | (1L << (ST_ASWKT - 945)) | (1L << (ST_BUFFER - 945)) | (1L << (ST_CENTROID - 945)) | (1L << (ST_CONTAINS - 945)) | (1L << (ST_CROSSES - 945)) | (1L << (ST_DIFFERENCE - 945)) | (1L << (ST_DIMENSION - 945)) | (1L << (ST_DISJOINT - 945)) | (1L << (ST_DISTANCE - 945)) | (1L << (ST_ENDPOINT - 945)) | (1L << (ST_ENVELOPE - 945)) | (1L << (ST_EQUALS - 945)) | (1L << (ST_EXTERIORRING - 945)) | (1L << (ST_GEOMCOLLFROMTEXT - 945)) | (1L << (ST_GEOMCOLLFROMTXT - 945)) | (1L << (ST_GEOMCOLLFROMWKB - 945)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 945)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 945)) | (1L << (ST_GEOMETRYFROMTEXT - 945)) | (1L << (ST_GEOMETRYFROMWKB - 945)) | (1L << (ST_GEOMETRYN - 945)) | (1L << (ST_GEOMETRYTYPE - 945)) | (1L << (ST_GEOMFROMTEXT - 945)))) != 0) || ((((_la - 1009)) & ~0x3f) == 0 && ((1L << (_la - 1009)) & ((1L << (ST_GEOMFROMWKB - 1009)) | (1L << (ST_INTERIORRINGN - 1009)) | (1L << (ST_INTERSECTION - 1009)) | (1L << (ST_INTERSECTS - 1009)) | (1L << (ST_ISCLOSED - 1009)) | (1L << (ST_ISEMPTY - 1009)) | (1L << (ST_ISSIMPLE - 1009)) | (1L << (ST_LINEFROMTEXT - 1009)) | (1L << (ST_LINEFROMWKB - 1009)) | (1L << (ST_LINESTRINGFROMTEXT - 1009)) | (1L << (ST_LINESTRINGFROMWKB - 1009)) | (1L << (ST_NUMGEOMETRIES - 1009)) | (1L << (ST_NUMINTERIORRING - 1009)) | (1L << (ST_NUMINTERIORRINGS - 1009)) | (1L << (ST_NUMPOINTS - 1009)) | (1L << (ST_OVERLAPS - 1009)) | (1L << (ST_POINTFROMTEXT - 1009)) | (1L << (ST_POINTFROMWKB - 1009)) | (1L << (ST_POINTN - 1009)) | (1L << (ST_POLYFROMTEXT - 1009)) | (1L << (ST_POLYFROMWKB - 1009)) | (1L << (ST_POLYGONFROMTEXT - 1009)) | (1L << (ST_POLYGONFROMWKB - 1009)) | (1L << (ST_SRID - 1009)) | (1L << (ST_STARTPOINT - 1009)) | (1L << (ST_SYMDIFFERENCE - 1009)) | (1L << (ST_TOUCHES - 1009)) | (1L << (ST_UNION - 1009)) | (1L << (ST_WITHIN - 1009)) | (1L << (ST_X - 1009)) | (1L << (ST_Y - 1009)) | (1L << (SUBDATE - 1009)) | (1L << (SUBSTRING_INDEX - 1009)) | (1L << (SUBTIME - 1009)) | (1L << (SYSTEM_USER - 1009)) | (1L << (TAN - 1009)) | (1L << (TIMEDIFF - 1009)) | (1L << (TIMESTAMPADD - 1009)) | (1L << (TIMESTAMPDIFF - 1009)) | (1L << (TIME_FORMAT - 1009)) | (1L << (TIME_TO_SEC - 1009)) | (1L << (TOUCHES - 1009)) | (1L << (TO_BASE64 - 1009)) | (1L << (TO_DAYS - 1009)) | (1L << (TO_SECONDS - 1009)) | (1L << (UCASE - 1009)) | (1L << (UNCOMPRESS - 1009)) | (1L << (UNCOMPRESSED_LENGTH - 1009)) | (1L << (UNHEX - 1009)) | (1L << (UNIX_TIMESTAMP - 1009)) | (1L << (UPDATEXML - 1009)) | (1L << (UPPER - 1009)) | (1L << (UUID - 1009)) | (1L << (UUID_SHORT - 1009)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1009)) | (1L << (VERSION - 1009)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1009)) | (1L << (WEEKDAY - 1009)) | (1L << (WEEKOFYEAR - 1009)) | (1L << (WEIGHT_STRING - 1009)) | (1L << (WITHIN - 1009)) | (1L << (YEARWEEK - 1009)) | (1L << (Y_FUNCTION - 1009)) | (1L << (X_FUNCTION - 1009)))) != 0) || ((((_la - 1088)) & ~0x3f) == 0 && ((1L << (_la - 1088)) & ((1L << (MOD - 1088)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1088)) | (1L << (STRING_LITERAL - 1088)) | (1L << (ID - 1088)) | (1L << (REVERSE_QUOTE_ID - 1088)) | (1L << (OPTIONAL - 1088)))) != 0)) {
				{
				setState(3930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3929);
					match(AS);
					}
				}

				setState(3932);
				uid();
				}
			}

			setState(3935);
			lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockActionContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(SpeakQlParser.READ, 0); }
		public TerminalNode LOCAL() { return getToken(SpeakQlParser.LOCAL, 0); }
		public TerminalNode WRITE() { return getToken(SpeakQlParser.WRITE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(SpeakQlParser.LOW_PRIORITY, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLockAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLockAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLockAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockActionContext lockAction() throws RecognitionException {
		LockActionContext _localctx = new LockActionContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_lockAction);
		int _la;
		try {
			setState(3945);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(3937);
				match(READ);
				setState(3939);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(3938);
					match(LOCAL);
					}
				}

				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3942);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					setState(3941);
					match(LOW_PRIORITY);
					}
				}

				setState(3944);
				match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionOptionContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(SpeakQlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(SpeakQlParser.LEVEL, 0); }
		public TransactionLevelContext transactionLevel() {
			return getRuleContext(TransactionLevelContext.class,0);
		}
		public TerminalNode READ() { return getToken(SpeakQlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(SpeakQlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(SpeakQlParser.ONLY, 0); }
		public TransactionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTransactionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTransactionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTransactionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionOptionContext transactionOption() throws RecognitionException {
		TransactionOptionContext _localctx = new TransactionOptionContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_transactionOption);
		try {
			setState(3954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3947);
				match(ISOLATION);
				setState(3948);
				match(LEVEL);
				setState(3949);
				transactionLevel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3950);
				match(READ);
				setState(3951);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3952);
				match(READ);
				setState(3953);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(SpeakQlParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(SpeakQlParser.READ, 0); }
		public TerminalNode COMMITTED() { return getToken(SpeakQlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(SpeakQlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(SpeakQlParser.SERIALIZABLE, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTransactionLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTransactionLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTransactionLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelContext transactionLevel() throws RecognitionException {
		TransactionLevelContext _localctx = new TransactionLevelContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_transactionLevel);
		try {
			setState(3963);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3956);
				match(REPEATABLE);
				setState(3957);
				match(READ);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3958);
				match(READ);
				setState(3959);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3960);
				match(READ);
				setState(3961);
				match(UNCOMMITTED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3962);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(SpeakQlParser.CHANGE, 0); }
		public TerminalNode MASTER() { return getToken(SpeakQlParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(SpeakQlParser.TO, 0); }
		public List<MasterOptionContext> masterOption() {
			return getRuleContexts(MasterOptionContext.class);
		}
		public MasterOptionContext masterOption(int i) {
			return getRuleContext(MasterOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterChangeMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitChangeMaster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitChangeMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeMasterContext changeMaster() throws RecognitionException {
		ChangeMasterContext _localctx = new ChangeMasterContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_changeMaster);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3965);
			match(CHANGE);
			setState(3966);
			match(MASTER);
			setState(3967);
			match(TO);
			setState(3968);
			masterOption();
			setState(3973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3969);
				match(COMMA);
				setState(3970);
				masterOption();
				}
				}
				setState(3975);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3976);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeReplicationFilterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(SpeakQlParser.CHANGE, 0); }
		public TerminalNode REPLICATION() { return getToken(SpeakQlParser.REPLICATION, 0); }
		public TerminalNode FILTER() { return getToken(SpeakQlParser.FILTER, 0); }
		public List<ReplicationFilterContext> replicationFilter() {
			return getRuleContexts(ReplicationFilterContext.class);
		}
		public ReplicationFilterContext replicationFilter(int i) {
			return getRuleContext(ReplicationFilterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterChangeReplicationFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitChangeReplicationFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitChangeReplicationFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeReplicationFilterContext changeReplicationFilter() throws RecognitionException {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_changeReplicationFilter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3979);
			match(CHANGE);
			setState(3980);
			match(REPLICATION);
			setState(3981);
			match(FILTER);
			setState(3982);
			replicationFilter();
			setState(3987);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3983);
				match(COMMA);
				setState(3984);
				replicationFilter();
				}
				}
				setState(3989);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PurgeBinaryLogsContext extends ParserRuleContext {
		public Token purgeFormat;
		public Token fileName;
		public Token timeValue;
		public TerminalNode PURGE() { return getToken(SpeakQlParser.PURGE, 0); }
		public TerminalNode LOGS() { return getToken(SpeakQlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(SpeakQlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(SpeakQlParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(SpeakQlParser.TO, 0); }
		public TerminalNode BEFORE() { return getToken(SpeakQlParser.BEFORE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_purgeBinaryLogs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPurgeBinaryLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPurgeBinaryLogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPurgeBinaryLogs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PurgeBinaryLogsContext purgeBinaryLogs() throws RecognitionException {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_purgeBinaryLogs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3990);
			match(PURGE);
			setState(3991);
			((PurgeBinaryLogsContext)_localctx).purgeFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				((PurgeBinaryLogsContext)_localctx).purgeFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3992);
			match(LOGS);
			setState(3997);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(3993);
				match(TO);
				setState(3994);
				((PurgeBinaryLogsContext)_localctx).fileName = match(STRING_LITERAL);
				}
				break;
			case BEFORE:
				{
				setState(3995);
				match(BEFORE);
				setState(3996);
				((PurgeBinaryLogsContext)_localctx).timeValue = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetMasterContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(SpeakQlParser.RESET, 0); }
		public TerminalNode MASTER() { return getToken(SpeakQlParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterResetMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitResetMaster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitResetMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetMasterContext resetMaster() throws RecognitionException {
		ResetMasterContext _localctx = new ResetMasterContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_resetMaster);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3999);
			match(RESET);
			setState(4000);
			match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetSlaveContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(SpeakQlParser.RESET, 0); }
		public TerminalNode SLAVE() { return getToken(SpeakQlParser.SLAVE, 0); }
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ResetSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterResetSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitResetSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitResetSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetSlaveContext resetSlave() throws RecognitionException {
		ResetSlaveContext _localctx = new ResetSlaveContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_resetSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4002);
			match(RESET);
			setState(4003);
			match(SLAVE);
			setState(4005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(4004);
				match(ALL);
				}
			}

			setState(4008);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4007);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartSlaveContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(SpeakQlParser.START, 0); }
		public TerminalNode SLAVE() { return getToken(SpeakQlParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public TerminalNode UNTIL() { return getToken(SpeakQlParser.UNTIL, 0); }
		public UntilOptionContext untilOption() {
			return getRuleContext(UntilOptionContext.class,0);
		}
		public List<ConnectionOptionContext> connectionOption() {
			return getRuleContexts(ConnectionOptionContext.class);
		}
		public ConnectionOptionContext connectionOption(int i) {
			return getRuleContext(ConnectionOptionContext.class,i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterStartSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitStartSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitStartSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartSlaveContext startSlave() throws RecognitionException {
		StartSlaveContext _localctx = new StartSlaveContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_startSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4010);
			match(START);
			setState(4011);
			match(SLAVE);
			setState(4020);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(4012);
				threadType();
				setState(4017);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4013);
					match(COMMA);
					setState(4014);
					threadType();
					}
					}
					setState(4019);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4024);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(4022);
				match(UNTIL);
				setState(4023);
				untilOption();
				}
			}

			setState(4029);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT_AUTH || _la==PASSWORD || _la==PLUGIN_DIR || _la==USER) {
				{
				{
				setState(4026);
				connectionOption();
				}
				}
				setState(4031);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4033);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4032);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopSlaveContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(SpeakQlParser.STOP, 0); }
		public TerminalNode SLAVE() { return getToken(SpeakQlParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterStopSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitStopSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitStopSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopSlaveContext stopSlave() throws RecognitionException {
		StopSlaveContext _localctx = new StopSlaveContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_stopSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4035);
			match(STOP);
			setState(4036);
			match(SLAVE);
			setState(4045);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(4037);
				threadType();
				setState(4042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4038);
					match(COMMA);
					setState(4039);
					threadType();
					}
					}
					setState(4044);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartGroupReplicationContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(SpeakQlParser.START, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(SpeakQlParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startGroupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterStartGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitStartGroupReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitStartGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartGroupReplicationContext startGroupReplication() throws RecognitionException {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_startGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4047);
			match(START);
			setState(4048);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopGroupReplicationContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(SpeakQlParser.STOP, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(SpeakQlParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopGroupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterStopGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitStopGroupReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitStopGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopGroupReplicationContext stopGroupReplication() throws RecognitionException {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_stopGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4050);
			match(STOP);
			setState(4051);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterOptionContext extends ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterOption; }
	 
		public MasterOptionContext() { }
		public void copyFrom(MasterOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MasterStringOptionContext extends MasterOptionContext {
		public StringMasterOptionContext stringMasterOption() {
			return getRuleContext(StringMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public MasterStringOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterMasterStringOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitMasterStringOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitMasterStringOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterRealOptionContext extends MasterOptionContext {
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(SpeakQlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(SpeakQlParser.REAL_LITERAL, 0); }
		public MasterRealOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterMasterRealOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitMasterRealOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitMasterRealOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterBoolOptionContext extends MasterOptionContext {
		public Token boolVal;
		public BoolMasterOptionContext boolMasterOption() {
			return getRuleContext(BoolMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(SpeakQlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(SpeakQlParser.ONE_DECIMAL, 0); }
		public MasterBoolOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterMasterBoolOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitMasterBoolOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitMasterBoolOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterUidListOptionContext extends MasterOptionContext {
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(SpeakQlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public MasterUidListOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterMasterUidListOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitMasterUidListOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitMasterUidListOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterDecimalOptionContext extends MasterOptionContext {
		public DecimalMasterOptionContext decimalMasterOption() {
			return getRuleContext(DecimalMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterDecimalOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterMasterDecimalOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitMasterDecimalOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitMasterDecimalOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MasterOptionContext masterOption() throws RecognitionException {
		MasterOptionContext _localctx = new MasterOptionContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_masterOption);
		int _la;
		try {
			setState(4082);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4053);
				stringMasterOption();
				setState(4054);
				match(EQUAL_SYMBOL);
				setState(4055);
				match(STRING_LITERAL);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4057);
				decimalMasterOption();
				setState(4058);
				match(EQUAL_SYMBOL);
				setState(4059);
				decimalLiteral();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4061);
				boolMasterOption();
				setState(4062);
				match(EQUAL_SYMBOL);
				setState(4063);
				((MasterBoolOptionContext)_localctx).boolVal = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((MasterBoolOptionContext)_localctx).boolVal = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4065);
				match(MASTER_HEARTBEAT_PERIOD);
				setState(4066);
				match(EQUAL_SYMBOL);
				setState(4067);
				match(REAL_LITERAL);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4068);
				match(IGNORE_SERVER_IDS);
				setState(4069);
				match(EQUAL_SYMBOL);
				setState(4070);
				match(LR_BRACKET);
				setState(4079);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
					{
					setState(4071);
					uid();
					setState(4076);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4072);
						match(COMMA);
						setState(4073);
						uid();
						}
						}
						setState(4078);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(4081);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_BIND() { return getToken(SpeakQlParser.MASTER_BIND, 0); }
		public TerminalNode MASTER_HOST() { return getToken(SpeakQlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_USER() { return getToken(SpeakQlParser.MASTER_USER, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(SpeakQlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(SpeakQlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(SpeakQlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(SpeakQlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(SpeakQlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(SpeakQlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(SpeakQlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(SpeakQlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(SpeakQlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(SpeakQlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(SpeakQlParser.MASTER_TLS_VERSION, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterStringMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitStringMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitStringMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringMasterOptionContext stringMasterOption() throws RecognitionException {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_stringMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4084);
			_la = _input.LA(1);
			if ( !(_la==MASTER_BIND || ((((_la - 474)) & ~0x3f) == 0 && ((1L << (_la - 474)) & ((1L << (MASTER_HOST - 474)) | (1L << (MASTER_LOG_FILE - 474)) | (1L << (MASTER_PASSWORD - 474)) | (1L << (MASTER_SSL_CA - 474)) | (1L << (MASTER_SSL_CAPATH - 474)) | (1L << (MASTER_SSL_CERT - 474)) | (1L << (MASTER_SSL_CIPHER - 474)) | (1L << (MASTER_SSL_CRL - 474)) | (1L << (MASTER_SSL_CRLPATH - 474)) | (1L << (MASTER_SSL_KEY - 474)) | (1L << (MASTER_TLS_VERSION - 474)) | (1L << (MASTER_USER - 474)))) != 0) || _la==RELAY_LOG_FILE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_PORT() { return getToken(SpeakQlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(SpeakQlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(SpeakQlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(SpeakQlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(SpeakQlParser.MASTER_LOG_POS, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(SpeakQlParser.RELAY_LOG_POS, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDecimalMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDecimalMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDecimalMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalMasterOptionContext decimalMasterOption() throws RecognitionException {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_decimalMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4086);
			_la = _input.LA(1);
			if ( !(((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & ((1L << (MASTER_CONNECT_RETRY - 471)) | (1L << (MASTER_DELAY - 471)) | (1L << (MASTER_LOG_POS - 471)) | (1L << (MASTER_PORT - 471)) | (1L << (MASTER_RETRY_COUNT - 471)))) != 0) || _la==RELAY_LOG_POS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(SpeakQlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_SSL() { return getToken(SpeakQlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return getToken(SpeakQlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterBoolMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitBoolMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitBoolMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoolMasterOptionContext boolMasterOption() throws RecognitionException {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_boolMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4088);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(SpeakQlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(SpeakQlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public ChannelOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channelOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterChannelOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitChannelOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitChannelOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChannelOptionContext channelOption() throws RecognitionException {
		ChannelOptionContext _localctx = new ChannelOptionContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_channelOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4090);
			match(FOR);
			setState(4091);
			match(CHANNEL);
			setState(4092);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationFilterContext extends ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationFilter; }
	 
		public ReplicationFilterContext() { }
		public void copyFrom(ReplicationFilterContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public WildIgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterWildIgnoreTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitWildIgnoreTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitWildIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(SpeakQlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public DoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDoTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDoTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(SpeakQlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public IgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIgnoreTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIgnoreTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RewriteDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(SpeakQlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public List<TablePairContext> tablePair() {
			return getRuleContexts(TablePairContext.class);
		}
		public TablePairContext tablePair(int i) {
			return getRuleContext(TablePairContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRewriteDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRewriteDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRewriteDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_DB() { return getToken(SpeakQlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public DoDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDoDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDoDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDoDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(SpeakQlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public IgnoreDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIgnoreDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIgnoreDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIgnoreDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WildDoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(SpeakQlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public WildDoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterWildDoTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitWildDoTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitWildDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationFilterContext replicationFilter() throws RecognitionException {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_replicationFilter);
		int _la;
		try {
			setState(4143);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4094);
				match(REPLICATE_DO_DB);
				setState(4095);
				match(EQUAL_SYMBOL);
				setState(4096);
				match(LR_BRACKET);
				setState(4097);
				uidList();
				setState(4098);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4100);
				match(REPLICATE_IGNORE_DB);
				setState(4101);
				match(EQUAL_SYMBOL);
				setState(4102);
				match(LR_BRACKET);
				setState(4103);
				uidList();
				setState(4104);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4106);
				match(REPLICATE_DO_TABLE);
				setState(4107);
				match(EQUAL_SYMBOL);
				setState(4108);
				match(LR_BRACKET);
				setState(4109);
				tables();
				setState(4110);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4112);
				match(REPLICATE_IGNORE_TABLE);
				setState(4113);
				match(EQUAL_SYMBOL);
				setState(4114);
				match(LR_BRACKET);
				setState(4115);
				tables();
				setState(4116);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4118);
				match(REPLICATE_WILD_DO_TABLE);
				setState(4119);
				match(EQUAL_SYMBOL);
				setState(4120);
				match(LR_BRACKET);
				setState(4121);
				simpleStrings();
				setState(4122);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4124);
				match(REPLICATE_WILD_IGNORE_TABLE);
				setState(4125);
				match(EQUAL_SYMBOL);
				setState(4126);
				match(LR_BRACKET);
				setState(4127);
				simpleStrings();
				setState(4128);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4130);
				match(REPLICATE_REWRITE_DB);
				setState(4131);
				match(EQUAL_SYMBOL);
				setState(4132);
				match(LR_BRACKET);
				setState(4133);
				tablePair();
				setState(4138);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4134);
					match(COMMA);
					setState(4135);
					tablePair();
					}
					}
					setState(4140);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4141);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablePairContext extends ParserRuleContext {
		public TableNameContext firstTable;
		public TableNameContext secondTable;
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(SpeakQlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTablePair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTablePair(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTablePair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablePairContext tablePair() throws RecognitionException {
		TablePairContext _localctx = new TablePairContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_tablePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4145);
			match(LR_BRACKET);
			setState(4146);
			((TablePairContext)_localctx).firstTable = tableName();
			setState(4147);
			match(COMMA);
			setState(4148);
			((TablePairContext)_localctx).secondTable = tableName();
			setState(4149);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadTypeContext extends ParserRuleContext {
		public TerminalNode IO_THREAD() { return getToken(SpeakQlParser.IO_THREAD, 0); }
		public TerminalNode SQL_THREAD() { return getToken(SpeakQlParser.SQL_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterThreadType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitThreadType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitThreadType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ThreadTypeContext threadType() throws RecognitionException {
		ThreadTypeContext _localctx = new ThreadTypeContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_threadType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4151);
			_la = _input.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UntilOptionContext extends ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_untilOption; }
	 
		public UntilOptionContext() { }
		public void copyFrom(UntilOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GtidsUntilOptionContext extends UntilOptionContext {
		public Token gtids;
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public GtuidSetContext gtuidSet() {
			return getRuleContext(GtuidSetContext.class,0);
		}
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(SpeakQlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(SpeakQlParser.SQL_AFTER_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterGtidsUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitGtidsUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitGtidsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SqlGapsUntilOptionContext extends UntilOptionContext {
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(SpeakQlParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSqlGapsUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSqlGapsUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSqlGapsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode MASTER_LOG_FILE() { return getToken(SpeakQlParser.MASTER_LOG_FILE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(SpeakQlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(SpeakQlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode COMMA() { return getToken(SpeakQlParser.COMMA, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(SpeakQlParser.MASTER_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterMasterLogUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitMasterLogUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitMasterLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RelayLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode RELAY_LOG_FILE() { return getToken(SpeakQlParser.RELAY_LOG_FILE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(SpeakQlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(SpeakQlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode COMMA() { return getToken(SpeakQlParser.COMMA, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(SpeakQlParser.RELAY_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public RelayLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRelayLogUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRelayLogUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRelayLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UntilOptionContext untilOption() throws RecognitionException {
		UntilOptionContext _localctx = new UntilOptionContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_untilOption);
		int _la;
		try {
			setState(4171);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4153);
				((GtidsUntilOptionContext)_localctx).gtids = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4154);
				match(EQUAL_SYMBOL);
				setState(4155);
				gtuidSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4156);
				match(MASTER_LOG_FILE);
				setState(4157);
				match(EQUAL_SYMBOL);
				setState(4158);
				match(STRING_LITERAL);
				setState(4159);
				match(COMMA);
				setState(4160);
				match(MASTER_LOG_POS);
				setState(4161);
				match(EQUAL_SYMBOL);
				setState(4162);
				decimalLiteral();
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4163);
				match(RELAY_LOG_FILE);
				setState(4164);
				match(EQUAL_SYMBOL);
				setState(4165);
				match(STRING_LITERAL);
				setState(4166);
				match(COMMA);
				setState(4167);
				match(RELAY_LOG_POS);
				setState(4168);
				match(EQUAL_SYMBOL);
				setState(4169);
				decimalLiteral();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4170);
				match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectionOptionContext extends ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionOption; }
	 
		public ConnectionOptionContext() { }
		public void copyFrom(ConnectionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PluginDirConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPluginDir;
		public TerminalNode PLUGIN_DIR() { return getToken(SpeakQlParser.PLUGIN_DIR, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public PluginDirConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPluginDirConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPluginDirConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPluginDirConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UserConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptUser;
		public TerminalNode USER() { return getToken(SpeakQlParser.USER, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public UserConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUserConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUserConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUserConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptDefAuth;
		public TerminalNode DEFAULT_AUTH() { return getToken(SpeakQlParser.DEFAULT_AUTH, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDefaultAuthConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDefaultAuthConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDefaultAuthConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPassword;
		public TerminalNode PASSWORD() { return getToken(SpeakQlParser.PASSWORD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public PasswordConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPasswordConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPasswordConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPasswordConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectionOptionContext connectionOption() throws RecognitionException {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_connectionOption);
		try {
			setState(4185);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4173);
				match(USER);
				setState(4174);
				match(EQUAL_SYMBOL);
				setState(4175);
				((UserConnectionOptionContext)_localctx).conOptUser = match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4176);
				match(PASSWORD);
				setState(4177);
				match(EQUAL_SYMBOL);
				setState(4178);
				((PasswordConnectionOptionContext)_localctx).conOptPassword = match(STRING_LITERAL);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4179);
				match(DEFAULT_AUTH);
				setState(4180);
				match(EQUAL_SYMBOL);
				setState(4181);
				((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = match(STRING_LITERAL);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4182);
				match(PLUGIN_DIR);
				setState(4183);
				match(EQUAL_SYMBOL);
				setState(4184);
				((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GtuidSetContext extends ParserRuleContext {
		public List<UuidSetContext> uuidSet() {
			return getRuleContexts(UuidSetContext.class);
		}
		public UuidSetContext uuidSet(int i) {
			return getRuleContext(UuidSetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public GtuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gtuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterGtuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitGtuidSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitGtuidSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GtuidSetContext gtuidSet() throws RecognitionException {
		GtuidSetContext _localctx = new GtuidSetContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_gtuidSet);
		int _la;
		try {
			setState(4196);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4187);
				uuidSet();
				setState(4192);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4188);
					match(COMMA);
					setState(4189);
					uuidSet();
					}
					}
					setState(4194);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4195);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaStartTransactionContext extends ParserRuleContext {
		public Token xaStart;
		public Token xaAction;
		public TerminalNode XA() { return getToken(SpeakQlParser.XA, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode START() { return getToken(SpeakQlParser.START, 0); }
		public TerminalNode BEGIN() { return getToken(SpeakQlParser.BEGIN, 0); }
		public TerminalNode JOIN() { return getToken(SpeakQlParser.JOIN, 0); }
		public TerminalNode RESUME() { return getToken(SpeakQlParser.RESUME, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaStartTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterXaStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitXaStartTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitXaStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaStartTransactionContext xaStartTransaction() throws RecognitionException {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_xaStartTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4198);
			match(XA);
			setState(4199);
			((XaStartTransactionContext)_localctx).xaStart = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				((XaStartTransactionContext)_localctx).xaStart = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4200);
			xid();
			setState(4202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==JOIN || _la==RESUME) {
				{
				setState(4201);
				((XaStartTransactionContext)_localctx).xaAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					((XaStartTransactionContext)_localctx).xaAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaEndTransactionContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(SpeakQlParser.XA, 0); }
		public TerminalNode END() { return getToken(SpeakQlParser.END, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode SUSPEND() { return getToken(SpeakQlParser.SUSPEND, 0); }
		public TerminalNode FOR() { return getToken(SpeakQlParser.FOR, 0); }
		public TerminalNode MIGRATE() { return getToken(SpeakQlParser.MIGRATE, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaEndTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterXaEndTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitXaEndTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitXaEndTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaEndTransactionContext xaEndTransaction() throws RecognitionException {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_xaEndTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4204);
			match(XA);
			setState(4205);
			match(END);
			setState(4206);
			xid();
			setState(4212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUSPEND) {
				{
				setState(4207);
				match(SUSPEND);
				setState(4210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4208);
					match(FOR);
					setState(4209);
					match(MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaPrepareStatementContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(SpeakQlParser.XA, 0); }
		public TerminalNode PREPARE() { return getToken(SpeakQlParser.PREPARE, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaPrepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterXaPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitXaPrepareStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitXaPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaPrepareStatementContext xaPrepareStatement() throws RecognitionException {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_xaPrepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4214);
			match(XA);
			setState(4215);
			match(PREPARE);
			setState(4216);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaCommitWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(SpeakQlParser.XA, 0); }
		public TerminalNode COMMIT() { return getToken(SpeakQlParser.COMMIT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode ONE() { return getToken(SpeakQlParser.ONE, 0); }
		public TerminalNode PHASE() { return getToken(SpeakQlParser.PHASE, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaCommitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterXaCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitXaCommitWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitXaCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaCommitWorkContext xaCommitWork() throws RecognitionException {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_xaCommitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4218);
			match(XA);
			setState(4219);
			match(COMMIT);
			setState(4220);
			xid();
			setState(4223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONE) {
				{
				setState(4221);
				match(ONE);
				setState(4222);
				match(PHASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRollbackWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(SpeakQlParser.XA, 0); }
		public TerminalNode ROLLBACK() { return getToken(SpeakQlParser.ROLLBACK, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterXaRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitXaRollbackWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitXaRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRollbackWorkContext xaRollbackWork() throws RecognitionException {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_xaRollbackWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4225);
			match(XA);
			setState(4226);
			match(ROLLBACK);
			setState(4227);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRecoverWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(SpeakQlParser.XA, 0); }
		public TerminalNode RECOVER() { return getToken(SpeakQlParser.RECOVER, 0); }
		public TerminalNode CONVERT() { return getToken(SpeakQlParser.CONVERT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRecoverWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterXaRecoverWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitXaRecoverWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitXaRecoverWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRecoverWorkContext xaRecoverWork() throws RecognitionException {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_xaRecoverWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4229);
			match(XA);
			setState(4230);
			match(RECOVER);
			setState(4233);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONVERT) {
				{
				setState(4231);
				match(CONVERT);
				setState(4232);
				xid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareStatementContext extends ParserRuleContext {
		public Token query;
		public Token variable;
		public TerminalNode PREPARE() { return getToken(SpeakQlParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SpeakQlParser.FROM, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(SpeakQlParser.LOCAL_ID, 0); }
		public PrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPrepareStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareStatementContext prepareStatement() throws RecognitionException {
		PrepareStatementContext _localctx = new PrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_prepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4235);
			match(PREPARE);
			setState(4236);
			uid();
			setState(4237);
			match(FROM);
			setState(4240);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				{
				setState(4238);
				((PrepareStatementContext)_localctx).query = match(STRING_LITERAL);
				}
				break;
			case LOCAL_ID:
				{
				setState(4239);
				((PrepareStatementContext)_localctx).variable = match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(SpeakQlParser.EXECUTE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode USING() { return getToken(SpeakQlParser.USING, 0); }
		public UserVariablesContext userVariables() {
			return getRuleContext(UserVariablesContext.class,0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterExecuteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitExecuteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitExecuteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4242);
			match(EXECUTE);
			setState(4243);
			uid();
			setState(4246);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4244);
				match(USING);
				setState(4245);
				userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocatePrepareContext extends ParserRuleContext {
		public Token dropFormat;
		public TerminalNode PREPARE() { return getToken(SpeakQlParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DEALLOCATE() { return getToken(SpeakQlParser.DEALLOCATE, 0); }
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocatePrepare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDeallocatePrepare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDeallocatePrepare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDeallocatePrepare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocatePrepareContext deallocatePrepare() throws RecognitionException {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_deallocatePrepare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4248);
			((DeallocatePrepareContext)_localctx).dropFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				((DeallocatePrepareContext)_localctx).dropFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4249);
			match(PREPARE);
			setState(4250);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineBodyContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRoutineBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRoutineBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRoutineBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineBodyContext routineBody() throws RecognitionException {
		RoutineBodyContext _localctx = new RoutineBodyContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_routineBody);
		try {
			setState(4254);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4252);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4253);
				sqlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockStatementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(SpeakQlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(SpeakQlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(SpeakQlParser.COLON_SYMB, 0); }
		public List<DeclareVariableContext> declareVariable() {
			return getRuleContexts(DeclareVariableContext.class);
		}
		public DeclareVariableContext declareVariable(int i) {
			return getRuleContext(DeclareVariableContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(SpeakQlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(SpeakQlParser.SEMI, i);
		}
		public List<DeclareConditionContext> declareCondition() {
			return getRuleContexts(DeclareConditionContext.class);
		}
		public DeclareConditionContext declareCondition(int i) {
			return getRuleContext(DeclareConditionContext.class,i);
		}
		public List<DeclareCursorContext> declareCursor() {
			return getRuleContexts(DeclareCursorContext.class);
		}
		public DeclareCursorContext declareCursor(int i) {
			return getRuleContext(DeclareCursorContext.class,i);
		}
		public List<DeclareHandlerContext> declareHandler() {
			return getRuleContexts(DeclareHandlerContext.class);
		}
		public DeclareHandlerContext declareHandler(int i) {
			return getRuleContext(DeclareHandlerContext.class,i);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blockStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterBlockStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitBlockStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitBlockStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockStatementContext blockStatement() throws RecognitionException {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4259);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
			case 1:
				{
				setState(4256);
				uid();
				setState(4257);
				match(COLON_SYMB);
				}
				break;
			}
			setState(4261);
			match(BEGIN);
			setState(4300);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
			case 1:
				{
				setState(4267);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,603,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4262);
						declareVariable();
						setState(4263);
						match(SEMI);
						}
						} 
					}
					setState(4269);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,603,_ctx);
				}
				setState(4275);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,604,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4270);
						declareCondition();
						setState(4271);
						match(SEMI);
						}
						} 
					}
					setState(4277);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,604,_ctx);
				}
				setState(4283);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,605,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4278);
						declareCursor();
						setState(4279);
						match(SEMI);
						}
						} 
					}
					setState(4285);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,605,_ctx);
				}
				setState(4291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DECLARE) {
					{
					{
					setState(4286);
					declareHandler();
					setState(4287);
					match(SEMI);
					}
					}
					setState(4293);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4297);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,607,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4294);
						procedureSqlStatement();
						}
						} 
					}
					setState(4299);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,607,_ctx);
				}
				}
				break;
			}
			setState(4302);
			match(END);
			setState(4304);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,609,_ctx) ) {
			case 1:
				{
				setState(4303);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(SpeakQlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(SpeakQlParser.CASE, i);
		}
		public TerminalNode END() { return getToken(SpeakQlParser.END, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<CaseAlternativeContext> caseAlternative() {
			return getRuleContexts(CaseAlternativeContext.class);
		}
		public CaseAlternativeContext caseAlternative(int i) {
			return getRuleContext(CaseAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(SpeakQlParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4306);
			match(CASE);
			setState(4309);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,610,_ctx) ) {
			case 1:
				{
				setState(4307);
				uid();
				}
				break;
			case 2:
				{
				setState(4308);
				expression(0);
				}
				break;
			}
			setState(4312); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4311);
				caseAlternative();
				}
				}
				setState(4314); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4316);
				match(ELSE);
				setState(4318); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4317);
						procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4320); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,612,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4324);
			match(END);
			setState(4325);
			match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public ProcedureSqlStatementContext procedureSqlStatement;
		public List<ProcedureSqlStatementContext> thenStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<ProcedureSqlStatementContext> elseStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<TerminalNode> IF() { return getTokens(SpeakQlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(SpeakQlParser.IF, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(SpeakQlParser.THEN, 0); }
		public TerminalNode END() { return getToken(SpeakQlParser.END, 0); }
		public List<ElifAlternativeContext> elifAlternative() {
			return getRuleContexts(ElifAlternativeContext.class);
		}
		public ElifAlternativeContext elifAlternative(int i) {
			return getRuleContext(ElifAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(SpeakQlParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIfStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIfStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIfStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4327);
			match(IF);
			setState(4328);
			expression(0);
			setState(4329);
			match(THEN);
			setState(4331); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4330);
					((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
					((IfStatementContext)_localctx).thenStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4333); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,614,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF) {
				{
				{
				setState(4335);
				elifAlternative();
				}
				}
				setState(4340);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4341);
				match(ELSE);
				setState(4343); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4342);
						((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
						((IfStatementContext)_localctx).elseStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4345); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,616,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4349);
			match(END);
			setState(4350);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(SpeakQlParser.ITERATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIterateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIterateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIterateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4352);
			match(ITERATE);
			setState(4353);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE() { return getToken(SpeakQlParser.LEAVE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLeaveStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLeaveStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLeaveStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4355);
			match(LEAVE);
			setState(4356);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopStatementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(SpeakQlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(SpeakQlParser.LOOP, i);
		}
		public TerminalNode END() { return getToken(SpeakQlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(SpeakQlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLoopStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLoopStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLoopStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoopStatementContext loopStatement() throws RecognitionException {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_loopStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4361);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
				{
				setState(4358);
				uid();
				setState(4359);
				match(COLON_SYMB);
				}
			}

			setState(4363);
			match(LOOP);
			setState(4365); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4364);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4367); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,619,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4369);
			match(END);
			setState(4370);
			match(LOOP);
			setState(4372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
				{
				setState(4371);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatStatementContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT() { return getTokens(SpeakQlParser.REPEAT); }
		public TerminalNode REPEAT(int i) {
			return getToken(SpeakQlParser.REPEAT, i);
		}
		public TerminalNode UNTIL() { return getToken(SpeakQlParser.UNTIL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(SpeakQlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(SpeakQlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRepeatStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRepeatStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRepeatStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatStatementContext repeatStatement() throws RecognitionException {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_repeatStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
				{
				setState(4374);
				uid();
				setState(4375);
				match(COLON_SYMB);
				}
			}

			setState(4379);
			match(REPEAT);
			setState(4381); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4380);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4383); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,622,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4385);
			match(UNTIL);
			setState(4386);
			expression(0);
			setState(4387);
			match(END);
			setState(4388);
			match(REPEAT);
			setState(4390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
				{
				setState(4389);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(SpeakQlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterReturnStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitReturnStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitReturnStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4392);
			match(RETURN);
			setState(4393);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileStatementContext extends ParserRuleContext {
		public List<TerminalNode> WHILE() { return getTokens(SpeakQlParser.WHILE); }
		public TerminalNode WHILE(int i) {
			return getToken(SpeakQlParser.WHILE, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(SpeakQlParser.DO, 0); }
		public TerminalNode END() { return getToken(SpeakQlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(SpeakQlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterWhileStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitWhileStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitWhileStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhileStatementContext whileStatement() throws RecognitionException {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_whileStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4398);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
				{
				setState(4395);
				uid();
				setState(4396);
				match(COLON_SYMB);
				}
			}

			setState(4400);
			match(WHILE);
			setState(4401);
			expression(0);
			setState(4402);
			match(DO);
			setState(4404); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4403);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4406); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,625,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4408);
			match(END);
			setState(4409);
			match(WHILE);
			setState(4411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DATABASE - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)) | (1L << (LEFT - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (RIGHT - 124)) | (1L << (SCHEMA - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (BINARY - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)) | (1L << (SERIAL - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (AVG - 284)) | (1L << (BIT_AND - 284)) | (1L << (BIT_OR - 284)) | (1L << (BIT_XOR - 284)) | (1L << (COUNT - 284)) | (1L << (GROUP_CONCAT - 284)) | (1L << (MAX - 284)) | (1L << (MIN - 284)) | (1L << (STD - 284)) | (1L << (STDDEV - 284)) | (1L << (STDDEV_POP - 284)) | (1L << (STDDEV_SAMP - 284)) | (1L << (SUM - 284)) | (1L << (VAR_POP - 284)) | (1L << (VAR_SAMP - 284)) | (1L << (VARIANCE - 284)) | (1L << (POSITION - 284)) | (1L << (ACCOUNT - 284)) | (1L << (ACTION - 284)) | (1L << (AFTER - 284)) | (1L << (AGGREGATE - 284)) | (1L << (ALGORITHM - 284)) | (1L << (ANY - 284)) | (1L << (AT - 284)) | (1L << (AUTHORS - 284)) | (1L << (AUTOCOMMIT - 284)) | (1L << (AUTOEXTEND_SIZE - 284)) | (1L << (AUTO_INCREMENT - 284)) | (1L << (AVG_ROW_LENGTH - 284)) | (1L << (BEGIN - 284)) | (1L << (BINLOG - 284)) | (1L << (BIT - 284)) | (1L << (BLOCK - 284)))) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & ((1L << (BOOL - 348)) | (1L << (BOOLEAN - 348)) | (1L << (BTREE - 348)) | (1L << (CACHE - 348)) | (1L << (CASCADED - 348)) | (1L << (CHAIN - 348)) | (1L << (CHANGED - 348)) | (1L << (CHANNEL - 348)) | (1L << (CHECKSUM - 348)) | (1L << (PAGE_CHECKSUM - 348)) | (1L << (CIPHER - 348)) | (1L << (CLASS_ORIGIN - 348)) | (1L << (CLIENT - 348)) | (1L << (CLOSE - 348)) | (1L << (COALESCE - 348)) | (1L << (CODE - 348)) | (1L << (COLUMNS - 348)) | (1L << (COLUMN_FORMAT - 348)) | (1L << (COLUMN_NAME - 348)) | (1L << (COMMENT - 348)) | (1L << (COMMIT - 348)) | (1L << (COMPACT - 348)) | (1L << (COMPLETION - 348)) | (1L << (COMPRESSED - 348)) | (1L << (COMPRESSION - 348)) | (1L << (CONCURRENT - 348)) | (1L << (CONNECT - 348)) | (1L << (CONNECTION - 348)) | (1L << (CONSISTENT - 348)) | (1L << (CONSTRAINT_CATALOG - 348)) | (1L << (CONSTRAINT_SCHEMA - 348)) | (1L << (CONSTRAINT_NAME - 348)) | (1L << (CONTAINS - 348)) | (1L << (CONTEXT - 348)) | (1L << (CONTRIBUTORS - 348)) | (1L << (COPY - 348)) | (1L << (CPU - 348)) | (1L << (CURSOR_NAME - 348)) | (1L << (DATA - 348)) | (1L << (DATAFILE - 348)) | (1L << (DEALLOCATE - 348)) | (1L << (DEFAULT_AUTH - 348)) | (1L << (DEFINER - 348)) | (1L << (DELAY_KEY_WRITE - 348)) | (1L << (DES_KEY_FILE - 348)) | (1L << (DIRECTORY - 348)) | (1L << (DISABLE - 348)) | (1L << (DISCARD - 348)) | (1L << (DISK - 348)) | (1L << (DO - 348)) | (1L << (DUMPFILE - 348)) | (1L << (DUPLICATE - 348)) | (1L << (DYNAMIC - 348)) | (1L << (ENABLE - 348)) | (1L << (ENCRYPTION - 348)) | (1L << (END - 348)) | (1L << (ENDS - 348)) | (1L << (ENGINE - 348)) | (1L << (ENGINES - 348)) | (1L << (ERROR - 348)) | (1L << (ERRORS - 348)) | (1L << (ESCAPE - 348)) | (1L << (EVEN - 348)) | (1L << (EVENT - 348)))) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & ((1L << (EVENTS - 412)) | (1L << (EVERY - 412)) | (1L << (EXCHANGE - 412)) | (1L << (EXCLUSIVE - 412)) | (1L << (EXPIRE - 412)) | (1L << (EXPORT - 412)) | (1L << (EXTENDED - 412)) | (1L << (EXTENT_SIZE - 412)) | (1L << (FAST - 412)) | (1L << (FAULTS - 412)) | (1L << (FIELDS - 412)) | (1L << (FILE_BLOCK_SIZE - 412)) | (1L << (FILTER - 412)) | (1L << (FIRST - 412)) | (1L << (FIXED - 412)) | (1L << (FLUSH - 412)) | (1L << (FOLLOWS - 412)) | (1L << (FOUND - 412)) | (1L << (FULL - 412)) | (1L << (FUNCTION - 412)) | (1L << (GENERAL - 412)) | (1L << (GLOBAL - 412)) | (1L << (GRANTS - 412)) | (1L << (GROUP_REPLICATION - 412)) | (1L << (HANDLER - 412)) | (1L << (HASH - 412)) | (1L << (HELP - 412)) | (1L << (HOST - 412)) | (1L << (HOSTS - 412)) | (1L << (IDENTIFIED - 412)) | (1L << (IGNORE_SERVER_IDS - 412)) | (1L << (IMPORT - 412)) | (1L << (INDEXES - 412)) | (1L << (INITIAL_SIZE - 412)) | (1L << (INPLACE - 412)) | (1L << (INSERT_METHOD - 412)) | (1L << (INSTALL - 412)) | (1L << (INSTANCE - 412)) | (1L << (INVISIBLE - 412)) | (1L << (INVOKER - 412)) | (1L << (IO - 412)) | (1L << (IO_THREAD - 412)) | (1L << (IPC - 412)) | (1L << (ISOLATION - 412)) | (1L << (ISSUER - 412)) | (1L << (JSON - 412)) | (1L << (KEY_BLOCK_SIZE - 412)) | (1L << (LANGUAGE - 412)) | (1L << (LAST - 412)) | (1L << (LEAVES - 412)) | (1L << (LESS - 412)) | (1L << (LEVEL - 412)) | (1L << (LIST - 412)) | (1L << (LOCAL - 412)) | (1L << (LOGFILE - 412)) | (1L << (LOGS - 412)) | (1L << (MASTER - 412)) | (1L << (MASTER_AUTO_POSITION - 412)) | (1L << (MASTER_CONNECT_RETRY - 412)) | (1L << (MASTER_DELAY - 412)) | (1L << (MASTER_HEARTBEAT_PERIOD - 412)) | (1L << (MASTER_HOST - 412)) | (1L << (MASTER_LOG_FILE - 412)))) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (MASTER_LOG_POS - 476)) | (1L << (MASTER_PASSWORD - 476)) | (1L << (MASTER_PORT - 476)) | (1L << (MASTER_RETRY_COUNT - 476)) | (1L << (MASTER_SSL - 476)) | (1L << (MASTER_SSL_CA - 476)) | (1L << (MASTER_SSL_CAPATH - 476)) | (1L << (MASTER_SSL_CERT - 476)) | (1L << (MASTER_SSL_CIPHER - 476)) | (1L << (MASTER_SSL_CRL - 476)) | (1L << (MASTER_SSL_CRLPATH - 476)) | (1L << (MASTER_SSL_KEY - 476)) | (1L << (MASTER_TLS_VERSION - 476)) | (1L << (MASTER_USER - 476)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 476)) | (1L << (MAX_QUERIES_PER_HOUR - 476)) | (1L << (MAX_ROWS - 476)) | (1L << (MAX_SIZE - 476)) | (1L << (MAX_UPDATES_PER_HOUR - 476)) | (1L << (MAX_USER_CONNECTIONS - 476)) | (1L << (MEDIUM - 476)) | (1L << (MEMBER - 476)) | (1L << (MERGE - 476)) | (1L << (MESSAGE_TEXT - 476)) | (1L << (MID - 476)) | (1L << (MIGRATE - 476)) | (1L << (MIN_ROWS - 476)) | (1L << (MODE - 476)) | (1L << (MODIFY - 476)) | (1L << (MUTEX - 476)) | (1L << (MYSQL - 476)) | (1L << (MYSQL_ERRNO - 476)) | (1L << (NAME - 476)) | (1L << (NAMES - 476)) | (1L << (NCHAR - 476)) | (1L << (NEVER - 476)) | (1L << (NEXT - 476)) | (1L << (NO - 476)) | (1L << (NODEGROUP - 476)) | (1L << (NONE - 476)) | (1L << (ODBC - 476)) | (1L << (OFFLINE - 476)) | (1L << (OFFSET - 476)) | (1L << (OF - 476)) | (1L << (OJ - 476)) | (1L << (OLD_PASSWORD - 476)) | (1L << (ONE - 476)) | (1L << (ONLINE - 476)) | (1L << (ONLY - 476)) | (1L << (OPEN - 476)) | (1L << (OPTIMIZER_COSTS - 476)) | (1L << (OPTIONS - 476)) | (1L << (OWNER - 476)) | (1L << (PACK_KEYS - 476)) | (1L << (PAGE - 476)) | (1L << (PARSER - 476)) | (1L << (PARTIAL - 476)) | (1L << (PARTITIONING - 476)) | (1L << (PARTITIONS - 476)) | (1L << (PASSWORD - 476)) | (1L << (PHASE - 476)) | (1L << (PLUGIN - 476)) | (1L << (PLUGIN_DIR - 476)) | (1L << (PLUGINS - 476)))) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & ((1L << (PORT - 540)) | (1L << (PRECEDES - 540)) | (1L << (PREPARE - 540)) | (1L << (PRESERVE - 540)) | (1L << (PREV - 540)) | (1L << (PROCESSLIST - 540)) | (1L << (PROFILE - 540)) | (1L << (PROFILES - 540)) | (1L << (PROXY - 540)) | (1L << (QUERY - 540)) | (1L << (QUICK - 540)) | (1L << (REBUILD - 540)) | (1L << (RECOVER - 540)) | (1L << (REDO_BUFFER_SIZE - 540)) | (1L << (REDUNDANT - 540)) | (1L << (RELAY - 540)) | (1L << (RELAY_LOG_FILE - 540)) | (1L << (RELAY_LOG_POS - 540)) | (1L << (RELAYLOG - 540)) | (1L << (REMOVE - 540)) | (1L << (REORGANIZE - 540)) | (1L << (REPAIR - 540)) | (1L << (REPLICATE_DO_DB - 540)) | (1L << (REPLICATE_DO_TABLE - 540)) | (1L << (REPLICATE_IGNORE_DB - 540)) | (1L << (REPLICATE_IGNORE_TABLE - 540)) | (1L << (REPLICATE_REWRITE_DB - 540)) | (1L << (REPLICATE_WILD_DO_TABLE - 540)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 540)) | (1L << (REPLICATION - 540)) | (1L << (RESET - 540)) | (1L << (RESUME - 540)) | (1L << (RETURNED_SQLSTATE - 540)) | (1L << (RETURNS - 540)) | (1L << (ROLE - 540)) | (1L << (ROLLBACK - 540)) | (1L << (ROLLUP - 540)) | (1L << (ROTATE - 540)) | (1L << (ROW - 540)) | (1L << (ROWS - 540)) | (1L << (ROW_FORMAT - 540)) | (1L << (SAVEPOINT - 540)) | (1L << (SCHEDULE - 540)) | (1L << (SECURITY - 540)) | (1L << (SERVER - 540)) | (1L << (SESSION - 540)) | (1L << (SHARE - 540)) | (1L << (SHARED - 540)) | (1L << (SIGNED - 540)) | (1L << (SIMPLE - 540)) | (1L << (SLAVE - 540)) | (1L << (SLOW - 540)) | (1L << (SNAPSHOT - 540)) | (1L << (SOCKET - 540)) | (1L << (SOME - 540)) | (1L << (SONAME - 540)) | (1L << (SOUNDS - 540)) | (1L << (SOURCE - 540)) | (1L << (SQL_AFTER_GTIDS - 540)) | (1L << (SQL_AFTER_MTS_GAPS - 540)) | (1L << (SQL_BEFORE_GTIDS - 540)) | (1L << (SQL_BUFFER_RESULT - 540)))) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (SQL_CACHE - 604)) | (1L << (SQL_NO_CACHE - 604)) | (1L << (SQL_THREAD - 604)) | (1L << (START - 604)) | (1L << (STARTS - 604)) | (1L << (STATS_AUTO_RECALC - 604)) | (1L << (STATS_PERSISTENT - 604)) | (1L << (STATS_SAMPLE_PAGES - 604)) | (1L << (STATUS - 604)) | (1L << (STOP - 604)) | (1L << (STORAGE - 604)) | (1L << (STRING - 604)) | (1L << (SUBCLASS_ORIGIN - 604)) | (1L << (SUBJECT - 604)) | (1L << (SUBPARTITION - 604)) | (1L << (SUBPARTITIONS - 604)) | (1L << (SUSPEND - 604)) | (1L << (SWAPS - 604)) | (1L << (SWITCHES - 604)) | (1L << (TABLE_NAME - 604)) | (1L << (TABLESPACE - 604)) | (1L << (TEMPORARY - 604)) | (1L << (TEMPTABLE - 604)) | (1L << (THAN - 604)) | (1L << (TRADITIONAL - 604)) | (1L << (TRANSACTION - 604)) | (1L << (TRANSACTIONAL - 604)) | (1L << (TRIGGERS - 604)) | (1L << (TRUNCATE - 604)) | (1L << (UNDEFINED - 604)) | (1L << (UNDOFILE - 604)) | (1L << (UNDO_BUFFER_SIZE - 604)) | (1L << (UNINSTALL - 604)) | (1L << (UNKNOWN - 604)) | (1L << (UNTIL - 604)) | (1L << (UPGRADE - 604)) | (1L << (USER - 604)) | (1L << (USE_FRM - 604)) | (1L << (USER_RESOURCES - 604)) | (1L << (VALIDATION - 604)) | (1L << (VALUE - 604)) | (1L << (VARIABLES - 604)) | (1L << (VIEW - 604)) | (1L << (VISIBLE - 604)) | (1L << (WAIT - 604)) | (1L << (WARNINGS - 604)) | (1L << (WITHOUT - 604)) | (1L << (WORK - 604)) | (1L << (WRAPPER - 604)) | (1L << (X509 - 604)) | (1L << (XA - 604)) | (1L << (XML - 604)) | (1L << (EUR - 604)) | (1L << (USA - 604)) | (1L << (JIS - 604)) | (1L << (ISO - 604)) | (1L << (INTERNAL - 604)) | (1L << (QUARTER - 604)) | (1L << (MONTH - 604)))) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & ((1L << (DAY - 668)) | (1L << (HOUR - 668)) | (1L << (MINUTE - 668)) | (1L << (WEEK - 668)) | (1L << (SECOND - 668)) | (1L << (MICROSECOND - 668)) | (1L << (TABLES - 668)) | (1L << (ROUTINE - 668)) | (1L << (EXECUTE - 668)) | (1L << (FILE - 668)) | (1L << (PROCESS - 668)) | (1L << (RELOAD - 668)) | (1L << (SHUTDOWN - 668)) | (1L << (SUPER - 668)) | (1L << (PRIVILEGES - 668)) | (1L << (AUDIT_ADMIN - 668)) | (1L << (BACKUP_ADMIN - 668)) | (1L << (BINLOG_ADMIN - 668)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 668)) | (1L << (CLONE_ADMIN - 668)) | (1L << (CONNECTION_ADMIN - 668)) | (1L << (ENCRYPTION_KEY_ADMIN - 668)) | (1L << (FIREWALL_ADMIN - 668)) | (1L << (FIREWALL_USER - 668)) | (1L << (GROUP_REPLICATION_ADMIN - 668)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 668)) | (1L << (NDB_STORED_USER - 668)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 668)) | (1L << (REPLICATION_APPLIER - 668)) | (1L << (REPLICATION_SLAVE_ADMIN - 668)) | (1L << (RESOURCE_GROUP_ADMIN - 668)) | (1L << (RESOURCE_GROUP_USER - 668)) | (1L << (ROLE_ADMIN - 668)) | (1L << (SESSION_VARIABLES_ADMIN - 668)) | (1L << (SET_USER_ID - 668)) | (1L << (SHOW_ROUTINE - 668)) | (1L << (SYSTEM_VARIABLES_ADMIN - 668)) | (1L << (TABLE_ENCRYPTION_ADMIN - 668)) | (1L << (VERSION_TOKEN_ADMIN - 668)) | (1L << (XA_RECOVER_ADMIN - 668)) | (1L << (ARMSCII8 - 668)) | (1L << (ASCII - 668)) | (1L << (BIG5 - 668)) | (1L << (CP1250 - 668)) | (1L << (CP1251 - 668)) | (1L << (CP1256 - 668)) | (1L << (CP1257 - 668)) | (1L << (CP850 - 668)) | (1L << (CP852 - 668)) | (1L << (CP866 - 668)) | (1L << (CP932 - 668)) | (1L << (DEC8 - 668)) | (1L << (EUCJPMS - 668)) | (1L << (EUCKR - 668)) | (1L << (GB18030 - 668)) | (1L << (GB2312 - 668)) | (1L << (GBK - 668)))) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & ((1L << (GEOSTD8 - 732)) | (1L << (GREEK - 732)) | (1L << (HEBREW - 732)) | (1L << (HP8 - 732)) | (1L << (KEYBCS2 - 732)) | (1L << (KOI8R - 732)) | (1L << (KOI8U - 732)) | (1L << (LATIN1 - 732)) | (1L << (LATIN2 - 732)) | (1L << (LATIN5 - 732)) | (1L << (LATIN7 - 732)) | (1L << (MACCE - 732)) | (1L << (MACROMAN - 732)) | (1L << (SJIS - 732)) | (1L << (SWE7 - 732)) | (1L << (TIS620 - 732)) | (1L << (UCS2 - 732)) | (1L << (UJIS - 732)) | (1L << (UTF16 - 732)) | (1L << (UTF16LE - 732)) | (1L << (UTF32 - 732)) | (1L << (UTF8 - 732)) | (1L << (UTF8MB3 - 732)) | (1L << (UTF8MB4 - 732)) | (1L << (ARCHIVE - 732)) | (1L << (BLACKHOLE - 732)) | (1L << (CSV - 732)) | (1L << (FEDERATED - 732)) | (1L << (INNODB - 732)) | (1L << (MEMORY - 732)) | (1L << (MRG_MYISAM - 732)) | (1L << (MYISAM - 732)) | (1L << (NDB - 732)) | (1L << (NDBCLUSTER - 732)) | (1L << (PERFORMANCE_SCHEMA - 732)) | (1L << (TOKUDB - 732)) | (1L << (REPEATABLE - 732)) | (1L << (COMMITTED - 732)) | (1L << (UNCOMMITTED - 732)) | (1L << (SERIALIZABLE - 732)) | (1L << (GEOMETRYCOLLECTION - 732)) | (1L << (LINESTRING - 732)) | (1L << (MULTILINESTRING - 732)) | (1L << (MULTIPOINT - 732)) | (1L << (MULTIPOLYGON - 732)) | (1L << (POINT - 732)) | (1L << (POLYGON - 732)) | (1L << (ABS - 732)) | (1L << (ACOS - 732)) | (1L << (ADDDATE - 732)) | (1L << (ADDTIME - 732)) | (1L << (AES_DECRYPT - 732)) | (1L << (AES_ENCRYPT - 732)) | (1L << (AREA - 732)) | (1L << (ASBINARY - 732)) | (1L << (ASIN - 732)) | (1L << (ASTEXT - 732)) | (1L << (ASWKB - 732)) | (1L << (ASWKT - 732)) | (1L << (ASYMMETRIC_DECRYPT - 732)) | (1L << (ASYMMETRIC_DERIVE - 732)) | (1L << (ASYMMETRIC_ENCRYPT - 732)))) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & ((1L << (ASYMMETRIC_SIGN - 796)) | (1L << (ASYMMETRIC_VERIFY - 796)) | (1L << (ATAN - 796)) | (1L << (ATAN2 - 796)) | (1L << (BENCHMARK - 796)) | (1L << (BIN - 796)) | (1L << (BIT_COUNT - 796)) | (1L << (BIT_LENGTH - 796)) | (1L << (BUFFER - 796)) | (1L << (CATALOG_NAME - 796)) | (1L << (CEIL - 796)) | (1L << (CEILING - 796)) | (1L << (CENTROID - 796)) | (1L << (CHARACTER_LENGTH - 796)) | (1L << (CHARSET - 796)) | (1L << (CHAR_LENGTH - 796)) | (1L << (COERCIBILITY - 796)) | (1L << (COLLATION - 796)) | (1L << (COMPRESS - 796)) | (1L << (CONCAT - 796)) | (1L << (CONCAT_WS - 796)) | (1L << (CONNECTION_ID - 796)) | (1L << (CONV - 796)) | (1L << (CONVERT_TZ - 796)) | (1L << (COS - 796)) | (1L << (COT - 796)) | (1L << (CRC32 - 796)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1L << (CREATE_DH_PARAMETERS - 796)) | (1L << (CREATE_DIGEST - 796)) | (1L << (CROSSES - 796)) | (1L << (DATEDIFF - 796)) | (1L << (DATE_FORMAT - 796)) | (1L << (DAYNAME - 796)) | (1L << (DAYOFMONTH - 796)) | (1L << (DAYOFWEEK - 796)) | (1L << (DAYOFYEAR - 796)) | (1L << (DECODE - 796)) | (1L << (DEGREES - 796)) | (1L << (DES_DECRYPT - 796)) | (1L << (DES_ENCRYPT - 796)) | (1L << (DIMENSION - 796)) | (1L << (DISJOINT - 796)) | (1L << (ELT - 796)) | (1L << (ENCODE - 796)) | (1L << (ENCRYPT - 796)) | (1L << (ENDPOINT - 796)) | (1L << (ENVELOPE - 796)) | (1L << (EQUALS - 796)) | (1L << (EXP - 796)) | (1L << (EXPORT_SET - 796)) | (1L << (EXTERIORRING - 796)) | (1L << (EXTRACTVALUE - 796)) | (1L << (FIELD - 796)) | (1L << (FIND_IN_SET - 796)) | (1L << (FLOOR - 796)) | (1L << (FORMAT - 796)) | (1L << (FOUND_ROWS - 796)) | (1L << (FROM_BASE64 - 796)) | (1L << (FROM_DAYS - 796)) | (1L << (FROM_UNIXTIME - 796)) | (1L << (GEOMCOLLFROMTEXT - 796)) | (1L << (GEOMCOLLFROMWKB - 796)))) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & ((1L << (GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 860)) | (1L << (GEOMETRYFROMTEXT - 860)) | (1L << (GEOMETRYFROMWKB - 860)) | (1L << (GEOMETRYN - 860)) | (1L << (GEOMETRYTYPE - 860)) | (1L << (GEOMFROMTEXT - 860)) | (1L << (GEOMFROMWKB - 860)) | (1L << (GET_FORMAT - 860)) | (1L << (GET_LOCK - 860)) | (1L << (GLENGTH - 860)) | (1L << (GREATEST - 860)) | (1L << (GTID_SUBSET - 860)) | (1L << (GTID_SUBTRACT - 860)) | (1L << (HEX - 860)) | (1L << (IFNULL - 860)) | (1L << (INET6_ATON - 860)) | (1L << (INET6_NTOA - 860)) | (1L << (INET_ATON - 860)) | (1L << (INET_NTOA - 860)) | (1L << (INSTR - 860)) | (1L << (INTERIORRINGN - 860)) | (1L << (INTERSECTS - 860)) | (1L << (ISCLOSED - 860)) | (1L << (ISEMPTY - 860)) | (1L << (ISNULL - 860)) | (1L << (ISSIMPLE - 860)) | (1L << (IS_FREE_LOCK - 860)) | (1L << (IS_IPV4 - 860)) | (1L << (IS_IPV4_COMPAT - 860)) | (1L << (IS_IPV4_MAPPED - 860)) | (1L << (IS_IPV6 - 860)) | (1L << (IS_USED_LOCK - 860)) | (1L << (LAST_INSERT_ID - 860)) | (1L << (LCASE - 860)) | (1L << (LEAST - 860)) | (1L << (LENGTH - 860)) | (1L << (LINEFROMTEXT - 860)) | (1L << (LINEFROMWKB - 860)) | (1L << (LINESTRINGFROMTEXT - 860)) | (1L << (LINESTRINGFROMWKB - 860)) | (1L << (LN - 860)) | (1L << (LOAD_FILE - 860)) | (1L << (LOCATE - 860)) | (1L << (LOG - 860)) | (1L << (LOG10 - 860)) | (1L << (LOG2 - 860)) | (1L << (LOWER - 860)) | (1L << (LPAD - 860)) | (1L << (LTRIM - 860)) | (1L << (MAKEDATE - 860)) | (1L << (MAKETIME - 860)) | (1L << (MAKE_SET - 860)) | (1L << (MASTER_POS_WAIT - 860)) | (1L << (MBRCONTAINS - 860)) | (1L << (MBRDISJOINT - 860)) | (1L << (MBREQUAL - 860)) | (1L << (MBRINTERSECTS - 860)) | (1L << (MBROVERLAPS - 860)) | (1L << (MBRTOUCHES - 860)) | (1L << (MBRWITHIN - 860)) | (1L << (MD5 - 860)) | (1L << (MLINEFROMTEXT - 860)) | (1L << (MLINEFROMWKB - 860)))) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & ((1L << (MONTHNAME - 924)) | (1L << (MPOINTFROMTEXT - 924)) | (1L << (MPOINTFROMWKB - 924)) | (1L << (MPOLYFROMTEXT - 924)) | (1L << (MPOLYFROMWKB - 924)) | (1L << (MULTILINESTRINGFROMTEXT - 924)) | (1L << (MULTILINESTRINGFROMWKB - 924)) | (1L << (MULTIPOINTFROMTEXT - 924)) | (1L << (MULTIPOINTFROMWKB - 924)) | (1L << (MULTIPOLYGONFROMTEXT - 924)) | (1L << (MULTIPOLYGONFROMWKB - 924)) | (1L << (NAME_CONST - 924)) | (1L << (NULLIF - 924)) | (1L << (NUMGEOMETRIES - 924)) | (1L << (NUMINTERIORRINGS - 924)) | (1L << (NUMPOINTS - 924)) | (1L << (OCT - 924)) | (1L << (OCTET_LENGTH - 924)) | (1L << (ORD - 924)) | (1L << (OVERLAPS - 924)) | (1L << (PERIOD_ADD - 924)) | (1L << (PERIOD_DIFF - 924)) | (1L << (PI - 924)) | (1L << (POINTFROMTEXT - 924)) | (1L << (POINTFROMWKB - 924)) | (1L << (POINTN - 924)) | (1L << (POLYFROMTEXT - 924)) | (1L << (POLYFROMWKB - 924)) | (1L << (POLYGONFROMTEXT - 924)) | (1L << (POLYGONFROMWKB - 924)) | (1L << (POW - 924)) | (1L << (POWER - 924)) | (1L << (QUOTE - 924)) | (1L << (RADIANS - 924)) | (1L << (RAND - 924)) | (1L << (RANDOM_BYTES - 924)) | (1L << (RELEASE_LOCK - 924)) | (1L << (REVERSE - 924)) | (1L << (ROUND - 924)) | (1L << (ROW_COUNT - 924)) | (1L << (RPAD - 924)) | (1L << (RTRIM - 924)) | (1L << (SEC_TO_TIME - 924)) | (1L << (SESSION_USER - 924)) | (1L << (SHA - 924)) | (1L << (SHA1 - 924)) | (1L << (SHA2 - 924)) | (1L << (SCHEMA_NAME - 924)) | (1L << (SIGN - 924)) | (1L << (SIN - 924)) | (1L << (SLEEP - 924)) | (1L << (SOUNDEX - 924)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1L << (SQRT - 924)) | (1L << (SRID - 924)) | (1L << (STARTPOINT - 924)) | (1L << (STRCMP - 924)) | (1L << (STR_TO_DATE - 924)) | (1L << (ST_AREA - 924)) | (1L << (ST_ASBINARY - 924)) | (1L << (ST_ASTEXT - 924)) | (1L << (ST_ASWKB - 924)) | (1L << (ST_ASWKT - 924)) | (1L << (ST_BUFFER - 924)))) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & ((1L << (ST_CENTROID - 988)) | (1L << (ST_CONTAINS - 988)) | (1L << (ST_CROSSES - 988)) | (1L << (ST_DIFFERENCE - 988)) | (1L << (ST_DIMENSION - 988)) | (1L << (ST_DISJOINT - 988)) | (1L << (ST_DISTANCE - 988)) | (1L << (ST_ENDPOINT - 988)) | (1L << (ST_ENVELOPE - 988)) | (1L << (ST_EQUALS - 988)) | (1L << (ST_EXTERIORRING - 988)) | (1L << (ST_GEOMCOLLFROMTEXT - 988)) | (1L << (ST_GEOMCOLLFROMTXT - 988)) | (1L << (ST_GEOMCOLLFROMWKB - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1L << (ST_GEOMETRYFROMTEXT - 988)) | (1L << (ST_GEOMETRYFROMWKB - 988)) | (1L << (ST_GEOMETRYN - 988)) | (1L << (ST_GEOMETRYTYPE - 988)) | (1L << (ST_GEOMFROMTEXT - 988)) | (1L << (ST_GEOMFROMWKB - 988)) | (1L << (ST_INTERIORRINGN - 988)) | (1L << (ST_INTERSECTION - 988)) | (1L << (ST_INTERSECTS - 988)) | (1L << (ST_ISCLOSED - 988)) | (1L << (ST_ISEMPTY - 988)) | (1L << (ST_ISSIMPLE - 988)) | (1L << (ST_LINEFROMTEXT - 988)) | (1L << (ST_LINEFROMWKB - 988)) | (1L << (ST_LINESTRINGFROMTEXT - 988)) | (1L << (ST_LINESTRINGFROMWKB - 988)) | (1L << (ST_NUMGEOMETRIES - 988)) | (1L << (ST_NUMINTERIORRING - 988)) | (1L << (ST_NUMINTERIORRINGS - 988)) | (1L << (ST_NUMPOINTS - 988)) | (1L << (ST_OVERLAPS - 988)) | (1L << (ST_POINTFROMTEXT - 988)) | (1L << (ST_POINTFROMWKB - 988)) | (1L << (ST_POINTN - 988)) | (1L << (ST_POLYFROMTEXT - 988)) | (1L << (ST_POLYFROMWKB - 988)) | (1L << (ST_POLYGONFROMTEXT - 988)) | (1L << (ST_POLYGONFROMWKB - 988)) | (1L << (ST_SRID - 988)) | (1L << (ST_STARTPOINT - 988)) | (1L << (ST_SYMDIFFERENCE - 988)) | (1L << (ST_TOUCHES - 988)) | (1L << (ST_UNION - 988)) | (1L << (ST_WITHIN - 988)) | (1L << (ST_X - 988)) | (1L << (ST_Y - 988)) | (1L << (SUBDATE - 988)) | (1L << (SUBSTRING_INDEX - 988)) | (1L << (SUBTIME - 988)) | (1L << (SYSTEM_USER - 988)) | (1L << (TAN - 988)) | (1L << (TIMEDIFF - 988)) | (1L << (TIMESTAMPADD - 988)) | (1L << (TIMESTAMPDIFF - 988)) | (1L << (TIME_FORMAT - 988)) | (1L << (TIME_TO_SEC - 988)) | (1L << (TOUCHES - 988)) | (1L << (TO_BASE64 - 988)))) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & ((1L << (TO_DAYS - 1052)) | (1L << (TO_SECONDS - 1052)) | (1L << (UCASE - 1052)) | (1L << (UNCOMPRESS - 1052)) | (1L << (UNCOMPRESSED_LENGTH - 1052)) | (1L << (UNHEX - 1052)) | (1L << (UNIX_TIMESTAMP - 1052)) | (1L << (UPDATEXML - 1052)) | (1L << (UPPER - 1052)) | (1L << (UUID - 1052)) | (1L << (UUID_SHORT - 1052)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1052)) | (1L << (VERSION - 1052)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1L << (WEEKDAY - 1052)) | (1L << (WEEKOFYEAR - 1052)) | (1L << (WEIGHT_STRING - 1052)) | (1L << (WITHIN - 1052)) | (1L << (YEARWEEK - 1052)) | (1L << (Y_FUNCTION - 1052)) | (1L << (X_FUNCTION - 1052)) | (1L << (MOD - 1052)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1L << (STRING_LITERAL - 1052)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)) | (1L << (OPTIONAL - 1121)))) != 0)) {
				{
				setState(4410);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorStatementContext extends ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorStatement; }
	 
		public CursorStatementContext() { }
		public void copyFrom(CursorStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CloseCursorContext extends CursorStatementContext {
		public TerminalNode CLOSE() { return getToken(SpeakQlParser.CLOSE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CloseCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCloseCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCloseCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCloseCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OpenCursorContext extends CursorStatementContext {
		public TerminalNode OPEN() { return getToken(SpeakQlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public OpenCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterOpenCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitOpenCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitOpenCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FetchCursorContext extends CursorStatementContext {
		public TerminalNode FETCH() { return getToken(SpeakQlParser.FETCH, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INTO() { return getToken(SpeakQlParser.INTO, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SpeakQlParser.FROM, 0); }
		public TerminalNode NEXT() { return getToken(SpeakQlParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFetchCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFetchCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFetchCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorStatementContext cursorStatement() throws RecognitionException {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_cursorStatement);
		int _la;
		try {
			setState(4428);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4413);
				match(CLOSE);
				setState(4414);
				uid();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4415);
				match(FETCH);
				setState(4420);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,628,_ctx) ) {
				case 1:
					{
					setState(4417);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEXT) {
						{
						setState(4416);
						match(NEXT);
						}
					}

					setState(4419);
					match(FROM);
					}
					break;
				}
				setState(4422);
				uid();
				setState(4423);
				match(INTO);
				setState(4424);
				uidList();
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4426);
				match(OPEN);
				setState(4427);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareVariableContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(SpeakQlParser.DECLARE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDeclareVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDeclareVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDeclareVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareVariableContext declareVariable() throws RecognitionException {
		DeclareVariableContext _localctx = new DeclareVariableContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_declareVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4430);
			match(DECLARE);
			setState(4431);
			uidList();
			setState(4432);
			dataType();
			setState(4435);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4433);
				match(DEFAULT);
				setState(4434);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareConditionContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(SpeakQlParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONDITION() { return getToken(SpeakQlParser.CONDITION, 0); }
		public TerminalNode FOR() { return getToken(SpeakQlParser.FOR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(SpeakQlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(SpeakQlParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDeclareCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDeclareCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDeclareCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareConditionContext declareCondition() throws RecognitionException {
		DeclareConditionContext _localctx = new DeclareConditionContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_declareCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4437);
			match(DECLARE);
			setState(4438);
			uid();
			setState(4439);
			match(CONDITION);
			setState(4440);
			match(FOR);
			setState(4447);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				{
				setState(4441);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				{
				setState(4442);
				match(SQLSTATE);
				setState(4444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4443);
					match(VALUE);
					}
				}

				setState(4446);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareCursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(SpeakQlParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(SpeakQlParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(SpeakQlParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDeclareCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDeclareCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDeclareCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorContext declareCursor() throws RecognitionException {
		DeclareCursorContext _localctx = new DeclareCursorContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_declareCursor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4449);
			match(DECLARE);
			setState(4450);
			uid();
			setState(4451);
			match(CURSOR);
			setState(4452);
			match(FOR);
			setState(4453);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareHandlerContext extends ParserRuleContext {
		public Token handlerAction;
		public TerminalNode DECLARE() { return getToken(SpeakQlParser.DECLARE, 0); }
		public TerminalNode HANDLER() { return getToken(SpeakQlParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(SpeakQlParser.FOR, 0); }
		public List<HandlerConditionValueContext> handlerConditionValue() {
			return getRuleContexts(HandlerConditionValueContext.class);
		}
		public HandlerConditionValueContext handlerConditionValue(int i) {
			return getRuleContext(HandlerConditionValueContext.class,i);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode CONTINUE() { return getToken(SpeakQlParser.CONTINUE, 0); }
		public TerminalNode EXIT() { return getToken(SpeakQlParser.EXIT, 0); }
		public TerminalNode UNDO() { return getToken(SpeakQlParser.UNDO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareHandler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDeclareHandler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDeclareHandler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDeclareHandler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareHandlerContext declareHandler() throws RecognitionException {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_declareHandler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4455);
			match(DECLARE);
			setState(4456);
			((DeclareHandlerContext)_localctx).handlerAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				((DeclareHandlerContext)_localctx).handlerAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4457);
			match(HANDLER);
			setState(4458);
			match(FOR);
			setState(4459);
			handlerConditionValue();
			setState(4464);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4460);
				match(COMMA);
				setState(4461);
				handlerConditionValue();
				}
				}
				setState(4466);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4467);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerConditionValueContext extends ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerConditionValue; }
	 
		public HandlerConditionValueContext() { }
		public void copyFrom(HandlerConditionValueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class HandlerConditionWarningContext extends HandlerConditionValueContext {
		public TerminalNode SQLWARNING() { return getToken(SpeakQlParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterHandlerConditionWarning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitHandlerConditionWarning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitHandlerConditionWarning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionCodeContext extends HandlerConditionValueContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterHandlerConditionCode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitHandlerConditionCode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitHandlerConditionCode(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
		public TerminalNode NOT() { return getToken(SpeakQlParser.NOT, 0); }
		public TerminalNode FOUND() { return getToken(SpeakQlParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterHandlerConditionNotfound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitHandlerConditionNotfound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitHandlerConditionNotfound(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionStateContext extends HandlerConditionValueContext {
		public TerminalNode SQLSTATE() { return getToken(SpeakQlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(SpeakQlParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterHandlerConditionState(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitHandlerConditionState(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitHandlerConditionState(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionExceptionContext extends HandlerConditionValueContext {
		public TerminalNode SQLEXCEPTION() { return getToken(SpeakQlParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterHandlerConditionException(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitHandlerConditionException(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitHandlerConditionException(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNameContext extends HandlerConditionValueContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterHandlerConditionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitHandlerConditionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitHandlerConditionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerConditionValueContext handlerConditionValue() throws RecognitionException {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_handlerConditionValue);
		int _la;
		try {
			setState(4480);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4469);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4470);
				match(SQLSTATE);
				setState(4472);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4471);
					match(VALUE);
					}
				}

				setState(4474);
				match(STRING_LITERAL);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case OPTIONAL:
				_localctx = new HandlerConditionNameContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4475);
				uid();
				}
				break;
			case SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4476);
				match(SQLWARNING);
				}
				break;
			case NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4477);
				match(NOT);
				setState(4478);
				match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4479);
				match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureSqlStatementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(SpeakQlParser.SEMI, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureSqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterProcedureSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitProcedureSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitProcedureSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureSqlStatementContext procedureSqlStatement() throws RecognitionException {
		ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_procedureSqlStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
			case 1:
				{
				setState(4482);
				compoundStatement();
				}
				break;
			case 2:
				{
				setState(4483);
				sqlStatement();
				}
				break;
			}
			setState(4486);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseAlternativeContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(SpeakQlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(SpeakQlParser.THEN, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCaseAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCaseAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCaseAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseAlternativeContext caseAlternative() throws RecognitionException {
		CaseAlternativeContext _localctx = new CaseAlternativeContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_caseAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4488);
			match(WHEN);
			setState(4491);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
			case 1:
				{
				setState(4489);
				constant();
				}
				break;
			case 2:
				{
				setState(4490);
				expression(0);
				}
				break;
			}
			setState(4493);
			match(THEN);
			setState(4495); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4494);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4497); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,638,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElifAlternativeContext extends ParserRuleContext {
		public TerminalNode ELSEIF() { return getToken(SpeakQlParser.ELSEIF, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(SpeakQlParser.THEN, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public ElifAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elifAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterElifAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitElifAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitElifAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElifAlternativeContext elifAlternative() throws RecognitionException {
		ElifAlternativeContext _localctx = new ElifAlternativeContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_elifAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4499);
			match(ELSEIF);
			setState(4500);
			expression(0);
			setState(4501);
			match(THEN);
			setState(4503); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4502);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4505); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,639,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserContext extends ParserRuleContext {
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
	 
		public AlterUserContext() { }
		public void copyFrom(AlterUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUserMysqlV56Context extends AlterUserContext {
		public TerminalNode ALTER() { return getToken(SpeakQlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(SpeakQlParser.USER, 0); }
		public List<UserSpecificationContext> userSpecification() {
			return getRuleContexts(UserSpecificationContext.class);
		}
		public UserSpecificationContext userSpecification(int i) {
			return getRuleContext(UserSpecificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public AlterUserMysqlV56Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterUserMysqlV56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterUserMysqlV56(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterUserMysqlV56(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterUserMysqlV57Context extends AlterUserContext {
		public Token tlsNone;
		public TerminalNode ALTER() { return getToken(SpeakQlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(SpeakQlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(SpeakQlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(SpeakQlParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(SpeakQlParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(SpeakQlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(SpeakQlParser.AND, i);
		}
		public AlterUserMysqlV57Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAlterUserMysqlV57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAlterUserMysqlV57(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAlterUserMysqlV57(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_alterUser);
		int _la;
		try {
			setState(4561);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,651,_ctx) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4507);
				match(ALTER);
				setState(4508);
				match(USER);
				setState(4509);
				userSpecification();
				setState(4514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4510);
					match(COMMA);
					setState(4511);
					userSpecification();
					}
					}
					setState(4516);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4517);
				match(ALTER);
				setState(4518);
				match(USER);
				setState(4520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4519);
					ifExists();
					}
				}

				setState(4522);
				userAuthOption();
				setState(4527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4523);
					match(COMMA);
					setState(4524);
					userAuthOption();
					}
					}
					setState(4529);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4544);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4530);
					match(REQUIRE);
					setState(4542);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4531);
						((AlterUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4532);
						tlsOption();
						setState(4539);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4534);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4533);
								match(AND);
								}
							}

							setState(4536);
							tlsOption();
							}
							}
							setState(4541);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4552);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4546);
					match(WITH);
					setState(4548); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4547);
						userResourceOption();
						}
						}
						setState(4550); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 490)) | (1L << (MAX_QUERIES_PER_HOUR - 490)) | (1L << (MAX_UPDATES_PER_HOUR - 490)) | (1L << (MAX_USER_CONNECTIONS - 490)))) != 0) );
					}
				}

				setState(4558);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4556);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4554);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4555);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4560);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserContext extends ParserRuleContext {
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
	 
		public CreateUserContext() { }
		public void copyFrom(CreateUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CreateUserMysqlV57Context extends CreateUserContext {
		public Token tlsNone;
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(SpeakQlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(SpeakQlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(SpeakQlParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(SpeakQlParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(SpeakQlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(SpeakQlParser.AND, i);
		}
		public CreateUserMysqlV57Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCreateUserMysqlV57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCreateUserMysqlV57(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCreateUserMysqlV57(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateUserMysqlV56Context extends CreateUserContext {
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(SpeakQlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public CreateUserMysqlV56Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCreateUserMysqlV56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCreateUserMysqlV56(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCreateUserMysqlV56(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_createUser);
		int _la;
		try {
			setState(4617);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4563);
				match(CREATE);
				setState(4564);
				match(USER);
				setState(4565);
				userAuthOption();
				setState(4570);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4566);
					match(COMMA);
					setState(4567);
					userAuthOption();
					}
					}
					setState(4572);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new CreateUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4573);
				match(CREATE);
				setState(4574);
				match(USER);
				setState(4576);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4575);
					ifNotExists();
					}
				}

				setState(4578);
				userAuthOption();
				setState(4583);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4579);
					match(COMMA);
					setState(4580);
					userAuthOption();
					}
					}
					setState(4585);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4600);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4586);
					match(REQUIRE);
					setState(4598);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4587);
						((CreateUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4588);
						tlsOption();
						setState(4595);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4590);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4589);
								match(AND);
								}
							}

							setState(4592);
							tlsOption();
							}
							}
							setState(4597);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4608);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4602);
					match(WITH);
					setState(4604); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4603);
						userResourceOption();
						}
						}
						setState(4606); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 490)) | (1L << (MAX_QUERIES_PER_HOUR - 490)) | (1L << (MAX_UPDATES_PER_HOUR - 490)) | (1L << (MAX_USER_CONNECTIONS - 490)))) != 0) );
					}
				}

				setState(4614);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4612);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4610);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4611);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4616);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(SpeakQlParser.USER, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDropUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDropUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDropUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_dropUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4619);
			match(DROP);
			setState(4620);
			match(USER);
			setState(4622);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4621);
				ifExists();
				}
			}

			setState(4624);
			userName();
			setState(4629);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4625);
				match(COMMA);
				setState(4626);
				userName();
				}
				}
				setState(4631);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantStatementContext extends ParserRuleContext {
		public Token privilegeObject;
		public Token tlsNone;
		public List<TerminalNode> GRANT() { return getTokens(SpeakQlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(SpeakQlParser.GRANT, i);
		}
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(SpeakQlParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode TO() { return getToken(SpeakQlParser.TO, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(SpeakQlParser.REQUIRE, 0); }
		public List<TerminalNode> WITH() { return getTokens(SpeakQlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(SpeakQlParser.WITH, i);
		}
		public TerminalNode AS() { return getToken(SpeakQlParser.AS, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode ROLE() { return getToken(SpeakQlParser.ROLE, 0); }
		public RoleOptionContext roleOption() {
			return getRuleContext(RoleOptionContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(SpeakQlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(SpeakQlParser.PROCEDURE, 0); }
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(SpeakQlParser.NONE, 0); }
		public List<TerminalNode> OPTION() { return getTokens(SpeakQlParser.OPTION); }
		public TerminalNode OPTION(int i) {
			return getToken(SpeakQlParser.OPTION, i);
		}
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(SpeakQlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(SpeakQlParser.AND, i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADMIN() { return getToken(SpeakQlParser.ADMIN, 0); }
		public GrantStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterGrantStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitGrantStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitGrantStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantStatementContext grantStatement() throws RecognitionException {
		GrantStatementContext _localctx = new GrantStatementContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_grantStatement);
		int _la;
		try {
			int _alt;
			setState(4719);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4632);
				match(GRANT);
				setState(4633);
				privelegeClause();
				setState(4638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4634);
					match(COMMA);
					setState(4635);
					privelegeClause();
					}
					}
					setState(4640);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4641);
				match(ON);
				setState(4643);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,667,_ctx) ) {
				case 1:
					{
					setState(4642);
					((GrantStatementContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((GrantStatementContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4645);
				privilegeLevel();
				setState(4646);
				match(TO);
				setState(4647);
				userAuthOption();
				setState(4652);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4648);
					match(COMMA);
					setState(4649);
					userAuthOption();
					}
					}
					setState(4654);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4669);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4655);
					match(REQUIRE);
					setState(4667);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4656);
						((GrantStatementContext)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4657);
						tlsOption();
						setState(4664);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4659);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4658);
								match(AND);
								}
							}

							setState(4661);
							tlsOption();
							}
							}
							setState(4666);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4680);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4671);
					match(WITH);
					setState(4677);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,674,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(4675);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case GRANT:
								{
								setState(4672);
								match(GRANT);
								setState(4673);
								match(OPTION);
								}
								break;
							case MAX_CONNECTIONS_PER_HOUR:
							case MAX_QUERIES_PER_HOUR:
							case MAX_UPDATES_PER_HOUR:
							case MAX_USER_CONNECTIONS:
								{
								setState(4674);
								userResourceOption();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							} 
						}
						setState(4679);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,674,_ctx);
					}
					}
				}

				setState(4688);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4682);
					match(AS);
					setState(4683);
					userName();
					setState(4684);
					match(WITH);
					setState(4685);
					match(ROLE);
					setState(4686);
					roleOption();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4690);
				match(GRANT);
				setState(4691);
				uid();
				setState(4696);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4692);
					match(COMMA);
					setState(4693);
					uid();
					}
					}
					setState(4698);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4699);
				match(TO);
				setState(4702);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
				case 1:
					{
					setState(4700);
					userName();
					}
					break;
				case 2:
					{
					setState(4701);
					uid();
					}
					break;
				}
				setState(4711);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4704);
					match(COMMA);
					setState(4707);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
					case 1:
						{
						setState(4705);
						userName();
						}
						break;
					case 2:
						{
						setState(4706);
						uid();
						}
						break;
					}
					}
					}
					setState(4713);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4717);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4714);
					match(WITH);
					setState(4715);
					match(ADMIN);
					setState(4716);
					match(OPTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOptionContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(SpeakQlParser.NONE, 0); }
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public TerminalNode EXCEPT() { return getToken(SpeakQlParser.EXCEPT, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public RoleOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRoleOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRoleOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRoleOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleOptionContext roleOption() throws RecognitionException {
		RoleOptionContext _localctx = new RoleOptionContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_roleOption);
		int _la;
		try {
			setState(4743);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4721);
				match(DEFAULT);
				}
				break;
			case NONE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4722);
				match(NONE);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4723);
				match(ALL);
				setState(4733);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPT) {
					{
					setState(4724);
					match(EXCEPT);
					setState(4725);
					userName();
					setState(4730);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4726);
						match(COMMA);
						setState(4727);
						userName();
						}
						}
						setState(4732);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case STRING_LITERAL:
			case ID:
			case STRING_USER_NAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(4735);
				userName();
				setState(4740);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4736);
					match(COMMA);
					setState(4737);
					userName();
					}
					}
					setState(4742);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantProxyContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public UserNameContext userName;
		public List<UserNameContext> toOther = new ArrayList<UserNameContext>();
		public List<TerminalNode> GRANT() { return getTokens(SpeakQlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(SpeakQlParser.GRANT, i);
		}
		public TerminalNode PROXY() { return getToken(SpeakQlParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(SpeakQlParser.ON, 0); }
		public TerminalNode TO() { return getToken(SpeakQlParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(SpeakQlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(SpeakQlParser.OPTION, 0); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantProxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterGrantProxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitGrantProxy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitGrantProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantProxyContext grantProxy() throws RecognitionException {
		GrantProxyContext _localctx = new GrantProxyContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_grantProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4745);
			match(GRANT);
			setState(4746);
			match(PROXY);
			setState(4747);
			match(ON);
			setState(4748);
			((GrantProxyContext)_localctx).fromFirst = userName();
			setState(4749);
			match(TO);
			setState(4750);
			((GrantProxyContext)_localctx).toFirst = userName();
			setState(4755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4751);
				match(COMMA);
				setState(4752);
				((GrantProxyContext)_localctx).userName = userName();
				((GrantProxyContext)_localctx).toOther.add(((GrantProxyContext)_localctx).userName);
				}
				}
				setState(4757);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4761);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4758);
				match(WITH);
				setState(4759);
				match(GRANT);
				setState(4760);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(SpeakQlParser.RENAME, 0); }
		public TerminalNode USER() { return getToken(SpeakQlParser.USER, 0); }
		public List<RenameUserClauseContext> renameUserClause() {
			return getRuleContexts(RenameUserClauseContext.class);
		}
		public RenameUserClauseContext renameUserClause(int i) {
			return getRuleContext(RenameUserClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRenameUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRenameUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRenameUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserContext renameUser() throws RecognitionException {
		RenameUserContext _localctx = new RenameUserContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_renameUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4763);
			match(RENAME);
			setState(4764);
			match(USER);
			setState(4765);
			renameUserClause();
			setState(4770);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4766);
				match(COMMA);
				setState(4767);
				renameUserClause();
				}
				}
				setState(4772);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeStatementContext extends ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeStatement; }
	 
		public RevokeStatementContext() { }
		public void copyFrom(RevokeStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DetailRevokeContext extends RevokeStatementContext {
		public Token privilegeObject;
		public TerminalNode REVOKE() { return getToken(SpeakQlParser.REVOKE, 0); }
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(SpeakQlParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SpeakQlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(SpeakQlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(SpeakQlParser.PROCEDURE, 0); }
		public DetailRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDetailRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDetailRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDetailRevoke(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoleRevokeContext extends RevokeStatementContext {
		public TerminalNode REVOKE() { return getToken(SpeakQlParser.REVOKE, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode FROM() { return getToken(SpeakQlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public RoleRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRoleRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRoleRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRoleRevoke(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShortRevokeContext extends RevokeStatementContext {
		public TerminalNode REVOKE() { return getToken(SpeakQlParser.REVOKE, 0); }
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TerminalNode GRANT() { return getToken(SpeakQlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(SpeakQlParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(SpeakQlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode PRIVILEGES() { return getToken(SpeakQlParser.PRIVILEGES, 0); }
		public ShortRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShortRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShortRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShortRevoke(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeStatementContext revokeStatement() throws RecognitionException {
		RevokeStatementContext _localctx = new RevokeStatementContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_revokeStatement);
		int _la;
		try {
			setState(4837);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,699,_ctx) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4773);
				match(REVOKE);
				setState(4774);
				privelegeClause();
				setState(4779);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4775);
					match(COMMA);
					setState(4776);
					privelegeClause();
					}
					}
					setState(4781);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4782);
				match(ON);
				setState(4784);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,691,_ctx) ) {
				case 1:
					{
					setState(4783);
					((DetailRevokeContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4786);
				privilegeLevel();
				setState(4787);
				match(FROM);
				setState(4788);
				userName();
				setState(4793);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4789);
					match(COMMA);
					setState(4790);
					userName();
					}
					}
					setState(4795);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4796);
				match(REVOKE);
				setState(4797);
				match(ALL);
				setState(4799);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4798);
					match(PRIVILEGES);
					}
				}

				setState(4801);
				match(COMMA);
				setState(4802);
				match(GRANT);
				setState(4803);
				match(OPTION);
				setState(4804);
				match(FROM);
				setState(4805);
				userName();
				setState(4810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4806);
					match(COMMA);
					setState(4807);
					userName();
					}
					}
					setState(4812);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new RoleRevokeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4813);
				match(REVOKE);
				setState(4814);
				uid();
				setState(4819);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4815);
					match(COMMA);
					setState(4816);
					uid();
					}
					}
					setState(4821);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4822);
				match(FROM);
				setState(4825);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
				case 1:
					{
					setState(4823);
					userName();
					}
					break;
				case 2:
					{
					setState(4824);
					uid();
					}
					break;
				}
				setState(4834);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4827);
					match(COMMA);
					setState(4830);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
					case 1:
						{
						setState(4828);
						userName();
						}
						break;
					case 2:
						{
						setState(4829);
						uid();
						}
						break;
					}
					}
					}
					setState(4836);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeProxyContext extends ParserRuleContext {
		public UserNameContext onUser;
		public UserNameContext fromFirst;
		public UserNameContext userName;
		public List<UserNameContext> fromOther = new ArrayList<UserNameContext>();
		public TerminalNode REVOKE() { return getToken(SpeakQlParser.REVOKE, 0); }
		public TerminalNode PROXY() { return getToken(SpeakQlParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(SpeakQlParser.ON, 0); }
		public TerminalNode FROM() { return getToken(SpeakQlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public RevokeProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeProxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRevokeProxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRevokeProxy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRevokeProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeProxyContext revokeProxy() throws RecognitionException {
		RevokeProxyContext _localctx = new RevokeProxyContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_revokeProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4839);
			match(REVOKE);
			setState(4840);
			match(PROXY);
			setState(4841);
			match(ON);
			setState(4842);
			((RevokeProxyContext)_localctx).onUser = userName();
			setState(4843);
			match(FROM);
			setState(4844);
			((RevokeProxyContext)_localctx).fromFirst = userName();
			setState(4849);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4845);
				match(COMMA);
				setState(4846);
				((RevokeProxyContext)_localctx).userName = userName();
				((RevokeProxyContext)_localctx).fromOther.add(((RevokeProxyContext)_localctx).userName);
				}
				}
				setState(4851);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetPasswordStatementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public TerminalNode PASSWORD() { return getToken(SpeakQlParser.PASSWORD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode FOR() { return getToken(SpeakQlParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SetPasswordStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setPasswordStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSetPasswordStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSetPasswordStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSetPasswordStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetPasswordStatementContext setPasswordStatement() throws RecognitionException {
		SetPasswordStatementContext _localctx = new SetPasswordStatementContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_setPasswordStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4852);
			match(SET);
			setState(4853);
			match(PASSWORD);
			setState(4856);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4854);
				match(FOR);
				setState(4855);
				userName();
				}
			}

			setState(4858);
			match(EQUAL_SYMBOL);
			setState(4861);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OLD_PASSWORD:
			case PASSWORD:
				{
				setState(4859);
				passwordFunctionClause();
				}
				break;
			case STRING_LITERAL:
				{
				setState(4860);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserSpecificationContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public UserPasswordOptionContext userPasswordOption() {
			return getRuleContext(UserPasswordOptionContext.class,0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUserSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUserSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUserSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserSpecificationContext userSpecification() throws RecognitionException {
		UserSpecificationContext _localctx = new UserSpecificationContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_userSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4863);
			userName();
			setState(4864);
			userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserAuthOptionContext extends ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userAuthOption; }
	 
		public UserAuthOptionContext() { }
		public void copyFrom(UserAuthOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSimpleAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSimpleAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSimpleAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordAuthOptionContext extends UserAuthOptionContext {
		public Token hashed;
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(SpeakQlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(SpeakQlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(SpeakQlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public PasswordAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPasswordAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPasswordAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPasswordAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(SpeakQlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(SpeakQlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode WITH() { return getToken(SpeakQlParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode RETAIN() { return getToken(SpeakQlParser.RETAIN, 0); }
		public TerminalNode CURRENT() { return getToken(SpeakQlParser.CURRENT, 0); }
		public TerminalNode PASSWORD() { return getToken(SpeakQlParser.PASSWORD, 0); }
		public StringAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterStringAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitStringAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitStringAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HashAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(SpeakQlParser.IDENTIFIED, 0); }
		public TerminalNode WITH() { return getToken(SpeakQlParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode AS() { return getToken(SpeakQlParser.AS, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public HashAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterHashAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitHashAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitHashAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserAuthOptionContext userAuthOption() throws RecognitionException {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_userAuthOption);
		int _la;
		try {
			setState(4894);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
			case 1:
				_localctx = new PasswordAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4866);
				userName();
				setState(4867);
				match(IDENTIFIED);
				setState(4868);
				match(BY);
				setState(4869);
				match(PASSWORD);
				setState(4870);
				((PasswordAuthOptionContext)_localctx).hashed = match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4872);
				userName();
				setState(4873);
				match(IDENTIFIED);
				setState(4876);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4874);
					match(WITH);
					setState(4875);
					authPlugin();
					}
				}

				setState(4878);
				match(BY);
				setState(4879);
				match(STRING_LITERAL);
				setState(4883);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETAIN) {
					{
					setState(4880);
					match(RETAIN);
					setState(4881);
					match(CURRENT);
					setState(4882);
					match(PASSWORD);
					}
				}

				}
				break;
			case 3:
				_localctx = new HashAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4885);
				userName();
				setState(4886);
				match(IDENTIFIED);
				setState(4887);
				match(WITH);
				setState(4888);
				authPlugin();
				setState(4891);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
				case 1:
					{
					setState(4889);
					match(AS);
					setState(4890);
					match(STRING_LITERAL);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4893);
				userName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TlsOptionContext extends ParserRuleContext {
		public TerminalNode SSL() { return getToken(SpeakQlParser.SSL, 0); }
		public TerminalNode X509() { return getToken(SpeakQlParser.X509, 0); }
		public TerminalNode CIPHER() { return getToken(SpeakQlParser.CIPHER, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode ISSUER() { return getToken(SpeakQlParser.ISSUER, 0); }
		public TerminalNode SUBJECT() { return getToken(SpeakQlParser.SUBJECT, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tlsOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTlsOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTlsOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTlsOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TlsOptionContext tlsOption() throws RecognitionException {
		TlsOptionContext _localctx = new TlsOptionContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_tlsOption);
		try {
			setState(4904);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SSL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4896);
				match(SSL);
				}
				break;
			case X509:
				enterOuterAlt(_localctx, 2);
				{
				setState(4897);
				match(X509);
				}
				break;
			case CIPHER:
				enterOuterAlt(_localctx, 3);
				{
				setState(4898);
				match(CIPHER);
				setState(4899);
				match(STRING_LITERAL);
				}
				break;
			case ISSUER:
				enterOuterAlt(_localctx, 4);
				{
				setState(4900);
				match(ISSUER);
				setState(4901);
				match(STRING_LITERAL);
				}
				break;
			case SUBJECT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4902);
				match(SUBJECT);
				setState(4903);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserResourceOptionContext extends ParserRuleContext {
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(SpeakQlParser.MAX_QUERIES_PER_HOUR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(SpeakQlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(SpeakQlParser.MAX_USER_CONNECTIONS, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userResourceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUserResourceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUserResourceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUserResourceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserResourceOptionContext userResourceOption() throws RecognitionException {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_userResourceOption);
		try {
			setState(4914);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4906);
				match(MAX_QUERIES_PER_HOUR);
				setState(4907);
				decimalLiteral();
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4908);
				match(MAX_UPDATES_PER_HOUR);
				setState(4909);
				decimalLiteral();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				enterOuterAlt(_localctx, 3);
				{
				setState(4910);
				match(MAX_CONNECTIONS_PER_HOUR);
				setState(4911);
				decimalLiteral();
				}
				break;
			case MAX_USER_CONNECTIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4912);
				match(MAX_USER_CONNECTIONS);
				setState(4913);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserPasswordOptionContext extends ParserRuleContext {
		public Token expireType;
		public TerminalNode PASSWORD() { return getToken(SpeakQlParser.PASSWORD, 0); }
		public TerminalNode EXPIRE() { return getToken(SpeakQlParser.EXPIRE, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode DAY() { return getToken(SpeakQlParser.DAY, 0); }
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public TerminalNode NEVER() { return getToken(SpeakQlParser.NEVER, 0); }
		public TerminalNode INTERVAL() { return getToken(SpeakQlParser.INTERVAL, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userPasswordOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUserPasswordOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUserPasswordOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUserPasswordOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserPasswordOptionContext userPasswordOption() throws RecognitionException {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_userPasswordOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4916);
			match(PASSWORD);
			setState(4917);
			match(EXPIRE);
			setState(4924);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				{
				setState(4918);
				((UserPasswordOptionContext)_localctx).expireType = match(DEFAULT);
				}
				break;
			case NEVER:
				{
				setState(4919);
				((UserPasswordOptionContext)_localctx).expireType = match(NEVER);
				}
				break;
			case INTERVAL:
				{
				setState(4920);
				((UserPasswordOptionContext)_localctx).expireType = match(INTERVAL);
				setState(4921);
				decimalLiteral();
				setState(4922);
				match(DAY);
				}
				break;
			case EOF:
			case RETRIEVE:
			case SHOW_ME:
			case DISPLAY:
			case PRESENT:
			case FIND:
			case IN_TABLE:
			case FROM_TABLE:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case FROM:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case WHERE:
			case ACCOUNT:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PASSWORD:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUS:
			case LR_BRACKET:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserLockOptionContext extends ParserRuleContext {
		public Token lockType;
		public TerminalNode ACCOUNT() { return getToken(SpeakQlParser.ACCOUNT, 0); }
		public TerminalNode LOCK() { return getToken(SpeakQlParser.LOCK, 0); }
		public TerminalNode UNLOCK() { return getToken(SpeakQlParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userLockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUserLockOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUserLockOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUserLockOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserLockOptionContext userLockOption() throws RecognitionException {
		UserLockOptionContext _localctx = new UserLockOptionContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_userLockOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4926);
			match(ACCOUNT);
			setState(4927);
			((UserLockOptionContext)_localctx).lockType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				((UserLockOptionContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivelegeClauseContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privelegeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPrivelegeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPrivelegeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPrivelegeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivelegeClauseContext privelegeClause() throws RecognitionException {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_privelegeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4929);
			privilege();
			setState(4934);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(4930);
				match(LR_BRACKET);
				setState(4931);
				uidList();
				setState(4932);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(SpeakQlParser.PRIVILEGES, 0); }
		public TerminalNode ALTER() { return getToken(SpeakQlParser.ALTER, 0); }
		public TerminalNode ROUTINE() { return getToken(SpeakQlParser.ROUTINE, 0); }
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SpeakQlParser.TEMPORARY, 0); }
		public TerminalNode TABLES() { return getToken(SpeakQlParser.TABLES, 0); }
		public TerminalNode VIEW() { return getToken(SpeakQlParser.VIEW, 0); }
		public TerminalNode USER() { return getToken(SpeakQlParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(SpeakQlParser.TABLESPACE, 0); }
		public TerminalNode ROLE() { return getToken(SpeakQlParser.ROLE, 0); }
		public TerminalNode DELETE() { return getToken(SpeakQlParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(SpeakQlParser.EVENT, 0); }
		public TerminalNode EXECUTE() { return getToken(SpeakQlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(SpeakQlParser.FILE, 0); }
		public TerminalNode GRANT() { return getToken(SpeakQlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(SpeakQlParser.OPTION, 0); }
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public TerminalNode INSERT() { return getToken(SpeakQlParser.INSERT, 0); }
		public TerminalNode LOCK() { return getToken(SpeakQlParser.LOCK, 0); }
		public TerminalNode PROCESS() { return getToken(SpeakQlParser.PROCESS, 0); }
		public TerminalNode PROXY() { return getToken(SpeakQlParser.PROXY, 0); }
		public TerminalNode REFERENCES() { return getToken(SpeakQlParser.REFERENCES, 0); }
		public TerminalNode RELOAD() { return getToken(SpeakQlParser.RELOAD, 0); }
		public TerminalNode REPLICATION() { return getToken(SpeakQlParser.REPLICATION, 0); }
		public TerminalNode CLIENT() { return getToken(SpeakQlParser.CLIENT, 0); }
		public TerminalNode SLAVE() { return getToken(SpeakQlParser.SLAVE, 0); }
		public TerminalNode SELECT() { return getToken(SpeakQlParser.SELECT, 0); }
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(SpeakQlParser.DATABASES, 0); }
		public TerminalNode SHUTDOWN() { return getToken(SpeakQlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(SpeakQlParser.SUPER, 0); }
		public TerminalNode TRIGGER() { return getToken(SpeakQlParser.TRIGGER, 0); }
		public TerminalNode UPDATE() { return getToken(SpeakQlParser.UPDATE, 0); }
		public TerminalNode USAGE() { return getToken(SpeakQlParser.USAGE, 0); }
		public TerminalNode APPLICATION_PASSWORD_ADMIN() { return getToken(SpeakQlParser.APPLICATION_PASSWORD_ADMIN, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(SpeakQlParser.AUDIT_ADMIN, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(SpeakQlParser.BACKUP_ADMIN, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(SpeakQlParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(SpeakQlParser.CLONE_ADMIN, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(SpeakQlParser.CONNECTION_ADMIN, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(SpeakQlParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(SpeakQlParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(SpeakQlParser.FIREWALL_USER, 0); }
		public TerminalNode FLUSH_OPTIMIZER_COSTS() { return getToken(SpeakQlParser.FLUSH_OPTIMIZER_COSTS, 0); }
		public TerminalNode FLUSH_STATUS() { return getToken(SpeakQlParser.FLUSH_STATUS, 0); }
		public TerminalNode FLUSH_TABLES() { return getToken(SpeakQlParser.FLUSH_TABLES, 0); }
		public TerminalNode FLUSH_USER_RESOURCES() { return getToken(SpeakQlParser.FLUSH_USER_RESOURCES, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(SpeakQlParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode INNODB_REDO_LOG_ENABLE() { return getToken(SpeakQlParser.INNODB_REDO_LOG_ENABLE, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(SpeakQlParser.NDB_STORED_USER, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(SpeakQlParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(SpeakQlParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(SpeakQlParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(SpeakQlParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(SpeakQlParser.ROLE_ADMIN, 0); }
		public TerminalNode SERVICE_CONNECTION_ADMIN() { return getToken(SpeakQlParser.SERVICE_CONNECTION_ADMIN, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(SpeakQlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(SpeakQlParser.SET_USER_ID, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(SpeakQlParser.SHOW_ROUTINE, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(SpeakQlParser.SYSTEM_USER, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(SpeakQlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(SpeakQlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(SpeakQlParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(SpeakQlParser.XA_RECOVER_ADMIN, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_privilege);
		int _la;
		try {
			setState(5015);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4936);
				match(ALL);
				setState(4938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4937);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4940);
				match(ALTER);
				setState(4942);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUTINE) {
					{
					setState(4941);
					match(ROUTINE);
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4944);
				match(CREATE);
				setState(4952);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TEMPORARY:
					{
					setState(4945);
					match(TEMPORARY);
					setState(4946);
					match(TABLES);
					}
					break;
				case ROUTINE:
					{
					setState(4947);
					match(ROUTINE);
					}
					break;
				case VIEW:
					{
					setState(4948);
					match(VIEW);
					}
					break;
				case USER:
					{
					setState(4949);
					match(USER);
					}
					break;
				case TABLESPACE:
					{
					setState(4950);
					match(TABLESPACE);
					}
					break;
				case ROLE:
					{
					setState(4951);
					match(ROLE);
					}
					break;
				case ON:
				case LR_BRACKET:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(4954);
				match(DELETE);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 5);
				{
				setState(4955);
				match(DROP);
				setState(4957);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROLE) {
					{
					setState(4956);
					match(ROLE);
					}
				}

				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 6);
				{
				setState(4959);
				match(EVENT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4960);
				match(EXECUTE);
				}
				break;
			case FILE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4961);
				match(FILE);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(4962);
				match(GRANT);
				setState(4963);
				match(OPTION);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 10);
				{
				setState(4964);
				match(INDEX);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(4965);
				match(INSERT);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 12);
				{
				setState(4966);
				match(LOCK);
				setState(4967);
				match(TABLES);
				}
				break;
			case PROCESS:
				enterOuterAlt(_localctx, 13);
				{
				setState(4968);
				match(PROCESS);
				}
				break;
			case PROXY:
				enterOuterAlt(_localctx, 14);
				{
				setState(4969);
				match(PROXY);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 15);
				{
				setState(4970);
				match(REFERENCES);
				}
				break;
			case RELOAD:
				enterOuterAlt(_localctx, 16);
				{
				setState(4971);
				match(RELOAD);
				}
				break;
			case REPLICATION:
				enterOuterAlt(_localctx, 17);
				{
				setState(4972);
				match(REPLICATION);
				setState(4973);
				_la = _input.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 18);
				{
				setState(4974);
				match(SELECT);
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 19);
				{
				setState(4975);
				match(SHOW);
				setState(4976);
				_la = _input.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 20);
				{
				setState(4977);
				match(SHUTDOWN);
				}
				break;
			case SUPER:
				enterOuterAlt(_localctx, 21);
				{
				setState(4978);
				match(SUPER);
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 22);
				{
				setState(4979);
				match(TRIGGER);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 23);
				{
				setState(4980);
				match(UPDATE);
				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 24);
				{
				setState(4981);
				match(USAGE);
				}
				break;
			case APPLICATION_PASSWORD_ADMIN:
				enterOuterAlt(_localctx, 25);
				{
				setState(4982);
				match(APPLICATION_PASSWORD_ADMIN);
				}
				break;
			case AUDIT_ADMIN:
				enterOuterAlt(_localctx, 26);
				{
				setState(4983);
				match(AUDIT_ADMIN);
				}
				break;
			case BACKUP_ADMIN:
				enterOuterAlt(_localctx, 27);
				{
				setState(4984);
				match(BACKUP_ADMIN);
				}
				break;
			case BINLOG_ADMIN:
				enterOuterAlt(_localctx, 28);
				{
				setState(4985);
				match(BINLOG_ADMIN);
				}
				break;
			case BINLOG_ENCRYPTION_ADMIN:
				enterOuterAlt(_localctx, 29);
				{
				setState(4986);
				match(BINLOG_ENCRYPTION_ADMIN);
				}
				break;
			case CLONE_ADMIN:
				enterOuterAlt(_localctx, 30);
				{
				setState(4987);
				match(CLONE_ADMIN);
				}
				break;
			case CONNECTION_ADMIN:
				enterOuterAlt(_localctx, 31);
				{
				setState(4988);
				match(CONNECTION_ADMIN);
				}
				break;
			case ENCRYPTION_KEY_ADMIN:
				enterOuterAlt(_localctx, 32);
				{
				setState(4989);
				match(ENCRYPTION_KEY_ADMIN);
				}
				break;
			case FIREWALL_ADMIN:
				enterOuterAlt(_localctx, 33);
				{
				setState(4990);
				match(FIREWALL_ADMIN);
				}
				break;
			case FIREWALL_USER:
				enterOuterAlt(_localctx, 34);
				{
				setState(4991);
				match(FIREWALL_USER);
				}
				break;
			case FLUSH_OPTIMIZER_COSTS:
				enterOuterAlt(_localctx, 35);
				{
				setState(4992);
				match(FLUSH_OPTIMIZER_COSTS);
				}
				break;
			case FLUSH_STATUS:
				enterOuterAlt(_localctx, 36);
				{
				setState(4993);
				match(FLUSH_STATUS);
				}
				break;
			case FLUSH_TABLES:
				enterOuterAlt(_localctx, 37);
				{
				setState(4994);
				match(FLUSH_TABLES);
				}
				break;
			case FLUSH_USER_RESOURCES:
				enterOuterAlt(_localctx, 38);
				{
				setState(4995);
				match(FLUSH_USER_RESOURCES);
				}
				break;
			case GROUP_REPLICATION_ADMIN:
				enterOuterAlt(_localctx, 39);
				{
				setState(4996);
				match(GROUP_REPLICATION_ADMIN);
				}
				break;
			case INNODB_REDO_LOG_ARCHIVE:
				enterOuterAlt(_localctx, 40);
				{
				setState(4997);
				match(INNODB_REDO_LOG_ARCHIVE);
				}
				break;
			case INNODB_REDO_LOG_ENABLE:
				enterOuterAlt(_localctx, 41);
				{
				setState(4998);
				match(INNODB_REDO_LOG_ENABLE);
				}
				break;
			case NDB_STORED_USER:
				enterOuterAlt(_localctx, 42);
				{
				setState(4999);
				match(NDB_STORED_USER);
				}
				break;
			case PERSIST_RO_VARIABLES_ADMIN:
				enterOuterAlt(_localctx, 43);
				{
				setState(5000);
				match(PERSIST_RO_VARIABLES_ADMIN);
				}
				break;
			case REPLICATION_APPLIER:
				enterOuterAlt(_localctx, 44);
				{
				setState(5001);
				match(REPLICATION_APPLIER);
				}
				break;
			case REPLICATION_SLAVE_ADMIN:
				enterOuterAlt(_localctx, 45);
				{
				setState(5002);
				match(REPLICATION_SLAVE_ADMIN);
				}
				break;
			case RESOURCE_GROUP_ADMIN:
				enterOuterAlt(_localctx, 46);
				{
				setState(5003);
				match(RESOURCE_GROUP_ADMIN);
				}
				break;
			case RESOURCE_GROUP_USER:
				enterOuterAlt(_localctx, 47);
				{
				setState(5004);
				match(RESOURCE_GROUP_USER);
				}
				break;
			case ROLE_ADMIN:
				enterOuterAlt(_localctx, 48);
				{
				setState(5005);
				match(ROLE_ADMIN);
				}
				break;
			case SERVICE_CONNECTION_ADMIN:
				enterOuterAlt(_localctx, 49);
				{
				setState(5006);
				match(SERVICE_CONNECTION_ADMIN);
				}
				break;
			case SESSION_VARIABLES_ADMIN:
				enterOuterAlt(_localctx, 50);
				{
				setState(5007);
				match(SESSION_VARIABLES_ADMIN);
				}
				break;
			case SET_USER_ID:
				enterOuterAlt(_localctx, 51);
				{
				setState(5008);
				match(SET_USER_ID);
				}
				break;
			case SHOW_ROUTINE:
				enterOuterAlt(_localctx, 52);
				{
				setState(5009);
				match(SHOW_ROUTINE);
				}
				break;
			case SYSTEM_USER:
				enterOuterAlt(_localctx, 53);
				{
				setState(5010);
				match(SYSTEM_USER);
				}
				break;
			case SYSTEM_VARIABLES_ADMIN:
				enterOuterAlt(_localctx, 54);
				{
				setState(5011);
				match(SYSTEM_VARIABLES_ADMIN);
				}
				break;
			case TABLE_ENCRYPTION_ADMIN:
				enterOuterAlt(_localctx, 55);
				{
				setState(5012);
				match(TABLE_ENCRYPTION_ADMIN);
				}
				break;
			case VERSION_TOKEN_ADMIN:
				enterOuterAlt(_localctx, 56);
				{
				setState(5013);
				match(VERSION_TOKEN_ADMIN);
				}
				break;
			case XA_RECOVER_ADMIN:
				enterOuterAlt(_localctx, 57);
				{
				setState(5014);
				match(XA_RECOVER_ADMIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeLevelContext extends ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeLevel; }
	 
		public PrivilegeLevelContext() { }
		public void copyFrom(PrivilegeLevelContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DOT() { return getToken(SpeakQlParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(SpeakQlParser.STAR, 0); }
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDefiniteSchemaPrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDefiniteSchemaPrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDefiniteSchemaPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteFullTablePrivLevel2Context extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext dottedId() {
			return getRuleContext(DottedIdContext.class,0);
		}
		public DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDefiniteFullTablePrivLevel2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDefiniteFullTablePrivLevel2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDefiniteFullTablePrivLevel2(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT() { return getToken(SpeakQlParser.DOT, 0); }
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDefiniteFullTablePrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDefiniteFullTablePrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDefiniteFullTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GlobalPrivLevelContext extends PrivilegeLevelContext {
		public List<TerminalNode> STAR() { return getTokens(SpeakQlParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(SpeakQlParser.STAR, i);
		}
		public TerminalNode DOT() { return getToken(SpeakQlParser.DOT, 0); }
		public GlobalPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterGlobalPrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitGlobalPrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitGlobalPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDefiniteTablePrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDefiniteTablePrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDefiniteTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
		public TerminalNode STAR() { return getToken(SpeakQlParser.STAR, 0); }
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCurrentSchemaPriviLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCurrentSchemaPriviLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCurrentSchemaPriviLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeLevelContext privilegeLevel() throws RecognitionException {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_privilegeLevel);
		try {
			setState(5033);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5017);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5018);
				match(STAR);
				setState(5019);
				match(DOT);
				setState(5020);
				match(STAR);
				}
				break;
			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5021);
				uid();
				setState(5022);
				match(DOT);
				setState(5023);
				match(STAR);
				}
				break;
			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5025);
				uid();
				setState(5026);
				match(DOT);
				setState(5027);
				uid();
				}
				break;
			case 5:
				_localctx = new DefiniteFullTablePrivLevel2Context(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5029);
				uid();
				setState(5030);
				dottedId();
				}
				break;
			case 6:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5032);
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserClauseContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public TerminalNode TO() { return getToken(SpeakQlParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUserClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRenameUserClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRenameUserClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRenameUserClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserClauseContext renameUserClause() throws RecognitionException {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_renameUserClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5035);
			((RenameUserClauseContext)_localctx).fromFirst = userName();
			setState(5036);
			match(TO);
			setState(5037);
			((RenameUserClauseContext)_localctx).toFirst = userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode ANALYZE() { return getToken(SpeakQlParser.ANALYZE, 0); }
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(SpeakQlParser.UPDATE, 0); }
		public List<TerminalNode> HISTOGRAM() { return getTokens(SpeakQlParser.HISTOGRAM); }
		public TerminalNode HISTOGRAM(int i) {
			return getToken(SpeakQlParser.HISTOGRAM, i);
		}
		public List<TerminalNode> ON() { return getTokens(SpeakQlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(SpeakQlParser.ON, i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public TerminalNode DROP() { return getToken(SpeakQlParser.DROP, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(SpeakQlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(SpeakQlParser.LOCAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(SpeakQlParser.WITH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode BUCKETS() { return getToken(SpeakQlParser.BUCKETS, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAnalyzeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAnalyzeTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAnalyzeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeTableContext analyzeTable() throws RecognitionException {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_analyzeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5039);
			match(ANALYZE);
			setState(5041);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5040);
				((AnalyzeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((AnalyzeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5043);
			match(TABLE);
			setState(5044);
			tables();
			setState(5062);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,720,_ctx) ) {
			case 1:
				{
				setState(5045);
				match(UPDATE);
				setState(5046);
				match(HISTOGRAM);
				setState(5047);
				match(ON);
				setState(5048);
				fullColumnName();
				setState(5053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5049);
					match(COMMA);
					setState(5050);
					fullColumnName();
					}
					}
					setState(5055);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5060);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5056);
					match(WITH);
					setState(5057);
					decimalLiteral();
					setState(5058);
					match(BUCKETS);
					}
				}

				}
				break;
			}
			setState(5075);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,722,_ctx) ) {
			case 1:
				{
				setState(5064);
				match(DROP);
				setState(5065);
				match(HISTOGRAM);
				setState(5066);
				match(ON);
				setState(5067);
				fullColumnName();
				setState(5072);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5068);
					match(COMMA);
					setState(5069);
					fullColumnName();
					}
					}
					setState(5074);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(SpeakQlParser.CHECK, 0); }
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public List<CheckTableOptionContext> checkTableOption() {
			return getRuleContexts(CheckTableOptionContext.class);
		}
		public CheckTableOptionContext checkTableOption(int i) {
			return getRuleContext(CheckTableOptionContext.class,i);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCheckTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCheckTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCheckTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableContext checkTable() throws RecognitionException {
		CheckTableContext _localctx = new CheckTableContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_checkTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5077);
			match(CHECK);
			setState(5078);
			match(TABLE);
			setState(5079);
			tables();
			setState(5083);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==CHANGED || _la==EXTENDED || _la==FAST || _la==MEDIUM || _la==QUICK) {
				{
				{
				setState(5080);
				checkTableOption();
				}
				}
				setState(5085);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChecksumTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode CHECKSUM() { return getToken(SpeakQlParser.CHECKSUM, 0); }
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(SpeakQlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(SpeakQlParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksumTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterChecksumTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitChecksumTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitChecksumTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChecksumTableContext checksumTable() throws RecognitionException {
		ChecksumTableContext _localctx = new ChecksumTableContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_checksumTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5086);
			match(CHECKSUM);
			setState(5087);
			match(TABLE);
			setState(5088);
			tables();
			setState(5090);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==QUICK) {
				{
				setState(5089);
				((ChecksumTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					((ChecksumTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptimizeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode OPTIMIZE() { return getToken(SpeakQlParser.OPTIMIZE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(SpeakQlParser.TABLES, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(SpeakQlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(SpeakQlParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterOptimizeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitOptimizeTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitOptimizeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptimizeTableContext optimizeTable() throws RecognitionException {
		OptimizeTableContext _localctx = new OptimizeTableContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_optimizeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5092);
			match(OPTIMIZE);
			setState(5094);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5093);
				((OptimizeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((OptimizeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5096);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5097);
			tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepairTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode REPAIR() { return getToken(SpeakQlParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(SpeakQlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(SpeakQlParser.EXTENDED, 0); }
		public TerminalNode USE_FRM() { return getToken(SpeakQlParser.USE_FRM, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(SpeakQlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(SpeakQlParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRepairTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRepairTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRepairTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepairTableContext repairTable() throws RecognitionException {
		RepairTableContext _localctx = new RepairTableContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_repairTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5099);
			match(REPAIR);
			setState(5101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5100);
				((RepairTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((RepairTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5103);
			match(TABLE);
			setState(5104);
			tables();
			setState(5106);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(5105);
				match(QUICK);
				}
			}

			setState(5109);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(5108);
				match(EXTENDED);
				}
			}

			setState(5112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USE_FRM) {
				{
				setState(5111);
				match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(SpeakQlParser.FOR, 0); }
		public TerminalNode UPGRADE() { return getToken(SpeakQlParser.UPGRADE, 0); }
		public TerminalNode QUICK() { return getToken(SpeakQlParser.QUICK, 0); }
		public TerminalNode FAST() { return getToken(SpeakQlParser.FAST, 0); }
		public TerminalNode MEDIUM() { return getToken(SpeakQlParser.MEDIUM, 0); }
		public TerminalNode EXTENDED() { return getToken(SpeakQlParser.EXTENDED, 0); }
		public TerminalNode CHANGED() { return getToken(SpeakQlParser.CHANGED, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCheckTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCheckTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCheckTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableOptionContext checkTableOption() throws RecognitionException {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_checkTableOption);
		try {
			setState(5121);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5114);
				match(FOR);
				setState(5115);
				match(UPGRADE);
				}
				break;
			case QUICK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5116);
				match(QUICK);
				}
				break;
			case FAST:
				enterOuterAlt(_localctx, 3);
				{
				setState(5117);
				match(FAST);
				}
				break;
			case MEDIUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(5118);
				match(MEDIUM);
				}
				break;
			case EXTENDED:
				enterOuterAlt(_localctx, 5);
				{
				setState(5119);
				match(EXTENDED);
				}
				break;
			case CHANGED:
				enterOuterAlt(_localctx, 6);
				{
				setState(5120);
				match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUdfunctionContext extends ParserRuleContext {
		public Token returnType;
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(SpeakQlParser.FUNCTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(SpeakQlParser.RETURNS, 0); }
		public TerminalNode SONAME() { return getToken(SpeakQlParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode STRING() { return getToken(SpeakQlParser.STRING, 0); }
		public TerminalNode INTEGER() { return getToken(SpeakQlParser.INTEGER, 0); }
		public TerminalNode REAL() { return getToken(SpeakQlParser.REAL, 0); }
		public TerminalNode DECIMAL() { return getToken(SpeakQlParser.DECIMAL, 0); }
		public TerminalNode AGGREGATE() { return getToken(SpeakQlParser.AGGREGATE, 0); }
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdfunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCreateUdfunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCreateUdfunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCreateUdfunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUdfunctionContext createUdfunction() throws RecognitionException {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_createUdfunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5123);
			match(CREATE);
			setState(5125);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE) {
				{
				setState(5124);
				match(AGGREGATE);
				}
			}

			setState(5127);
			match(FUNCTION);
			setState(5128);
			uid();
			setState(5129);
			match(RETURNS);
			setState(5130);
			((CreateUdfunctionContext)_localctx).returnType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (INTEGER - 209)) | (1L << (REAL - 209)) | (1L << (DECIMAL - 209)))) != 0) || _la==STRING) ) {
				((CreateUdfunctionContext)_localctx).returnType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5131);
			match(SONAME);
			setState(5132);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallPluginContext extends ParserRuleContext {
		public TerminalNode INSTALL() { return getToken(SpeakQlParser.INSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(SpeakQlParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SONAME() { return getToken(SpeakQlParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public InstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterInstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitInstallPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitInstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InstallPluginContext installPlugin() throws RecognitionException {
		InstallPluginContext _localctx = new InstallPluginContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_installPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5134);
			match(INSTALL);
			setState(5135);
			match(PLUGIN);
			setState(5136);
			uid();
			setState(5137);
			match(SONAME);
			setState(5138);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UninstallPluginContext extends ParserRuleContext {
		public TerminalNode UNINSTALL() { return getToken(SpeakQlParser.UNINSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(SpeakQlParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUninstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUninstallPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUninstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UninstallPluginContext uninstallPlugin() throws RecognitionException {
		UninstallPluginContext _localctx = new UninstallPluginContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_uninstallPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5140);
			match(UNINSTALL);
			setState(5141);
			match(PLUGIN);
			setState(5142);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementContext extends ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
	 
		public SetStatementContext() { }
		public void copyFrom(SetStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SetTransactionContext extends SetStatementContext {
		public SetTransactionStatementContext setTransactionStatement() {
			return getRuleContext(SetTransactionStatementContext.class,0);
		}
		public SetTransactionContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSetTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSetTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSetTransaction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetCharsetContext extends SetStatementContext {
		public List<TerminalNode> SET() { return getTokens(SpeakQlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(SpeakQlParser.SET, i);
		}
		public TerminalNode CHARACTER() { return getToken(SpeakQlParser.CHARACTER, 0); }
		public TerminalNode CHARSET() { return getToken(SpeakQlParser.CHARSET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public SetCharsetContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSetCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSetCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSetCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNamesContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public TerminalNode NAMES() { return getToken(SpeakQlParser.NAMES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(SpeakQlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public SetNamesContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSetNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSetNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSetNames(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetPasswordContext extends SetStatementContext {
		public SetPasswordStatementContext setPasswordStatement() {
			return getRuleContext(SetPasswordStatementContext.class,0);
		}
		public SetPasswordContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSetPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSetPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSetPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetAutocommitContext extends SetStatementContext {
		public SetAutocommitStatementContext setAutocommitStatement() {
			return getRuleContext(SetAutocommitStatementContext.class,0);
		}
		public SetAutocommitContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSetAutocommit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSetAutocommit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSetAutocommit(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNewValueInsideTriggerContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(SpeakQlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(SpeakQlParser.EQUAL_SYMBOL, i);
		}
		public List<TerminalNode> VAR_ASSIGN() { return getTokens(SpeakQlParser.VAR_ASSIGN); }
		public TerminalNode VAR_ASSIGN(int i) {
			return getToken(SpeakQlParser.VAR_ASSIGN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public SetNewValueInsideTriggerContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSetNewValueInsideTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSetNewValueInsideTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSetNewValueInsideTrigger(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetVariableContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(SpeakQlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(SpeakQlParser.EQUAL_SYMBOL, i);
		}
		public List<TerminalNode> VAR_ASSIGN() { return getTokens(SpeakQlParser.VAR_ASSIGN); }
		public TerminalNode VAR_ASSIGN(int i) {
			return getToken(SpeakQlParser.VAR_ASSIGN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public SetVariableContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSetVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSetVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSetVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_setStatement);
		int _la;
		try {
			setState(5195);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,738,_ctx) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5144);
				match(SET);
				setState(5145);
				variableClause();
				setState(5146);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5147);
				expression(0);
				setState(5155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5148);
					match(COMMA);
					setState(5149);
					variableClause();
					setState(5150);
					_la = _input.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5151);
					expression(0);
					}
					}
					setState(5157);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetCharsetContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5158);
				match(SET);
				setState(5162);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(5159);
					match(CHARACTER);
					setState(5160);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(5161);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5166);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(5164);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(5165);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new SetNamesContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5168);
				match(SET);
				setState(5169);
				match(NAMES);
				setState(5176);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(5170);
					charsetName();
					setState(5173);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COLLATE) {
						{
						setState(5171);
						match(COLLATE);
						setState(5172);
						collationName();
						}
					}

					}
					break;
				case DEFAULT:
					{
					setState(5175);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new SetPasswordContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5178);
				setPasswordStatement();
				}
				break;
			case 5:
				_localctx = new SetTransactionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5179);
				setTransactionStatement();
				}
				break;
			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5180);
				setAutocommitStatement();
				}
				break;
			case 7:
				_localctx = new SetNewValueInsideTriggerContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5181);
				match(SET);
				setState(5182);
				fullId();
				setState(5183);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5184);
				expression(0);
				setState(5192);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5185);
					match(COMMA);
					setState(5186);
					fullId();
					setState(5187);
					_la = _input.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5188);
					expression(0);
					}
					}
					setState(5194);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
	 
		public ShowStatementContext() { }
		public void copyFrom(ShowStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ShowOpenTablesContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public TerminalNode OPEN() { return getToken(SpeakQlParser.OPEN, 0); }
		public TerminalNode TABLES() { return getToken(SpeakQlParser.TABLES, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SpeakQlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SpeakQlParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowOpenTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowOpenTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowOpenTables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGlobalInfoContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return getRuleContext(ShowGlobalInfoClauseContext.class,0);
		}
		public ShowGlobalInfoContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowGlobalInfo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowGlobalInfo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowGlobalInfo(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateFullIdObjectContext extends ShowStatementContext {
		public Token namedEntity;
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode EVENT() { return getToken(SpeakQlParser.EVENT, 0); }
		public TerminalNode FUNCTION() { return getToken(SpeakQlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(SpeakQlParser.PROCEDURE, 0); }
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(SpeakQlParser.TRIGGER, 0); }
		public TerminalNode VIEW() { return getToken(SpeakQlParser.VIEW, 0); }
		public ShowCreateFullIdObjectContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowCreateFullIdObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowCreateFullIdObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowCreateFullIdObject(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateUserContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(SpeakQlParser.USER, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowCreateUserContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowCreateUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowCreateUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public TerminalNode ERRORS() { return getToken(SpeakQlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(SpeakQlParser.WARNINGS, 0); }
		public TerminalNode LIMIT() { return getToken(SpeakQlParser.LIMIT, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(SpeakQlParser.COMMA, 0); }
		public ShowErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowErrors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCountErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public TerminalNode COUNT() { return getToken(SpeakQlParser.COUNT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode STAR() { return getToken(SpeakQlParser.STAR, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode ERRORS() { return getToken(SpeakQlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(SpeakQlParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowCountErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowCountErrors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowCountErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowObjectFilterContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public ShowCommonEntityContext showCommonEntity() {
			return getRuleContext(ShowCommonEntityContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowObjectFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowObjectFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowObjectFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowObjectFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateDbContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(SpeakQlParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(SpeakQlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SpeakQlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public ShowCreateDbContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowCreateDb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowCreateDb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowCreateDb(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowEngineContext extends ShowStatementContext {
		public Token engineOption;
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public TerminalNode ENGINE() { return getToken(SpeakQlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(SpeakQlParser.STATUS, 0); }
		public TerminalNode MUTEX() { return getToken(SpeakQlParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSchemaFilterContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public ShowSchemaEntityContext showSchemaEntity() {
			return getRuleContext(ShowSchemaEntityContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SpeakQlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SpeakQlParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowSchemaFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowSchemaFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowSchemaFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowIndexesContext extends ShowStatementContext {
		public Token indexFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(SpeakQlParser.INDEXES, 0); }
		public TerminalNode KEYS() { return getToken(SpeakQlParser.KEYS, 0); }
		public List<TerminalNode> FROM() { return getTokens(SpeakQlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(SpeakQlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(SpeakQlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(SpeakQlParser.IN, i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(SpeakQlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowIndexesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowIndexes(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowLogEventsContext extends ShowStatementContext {
		public Token logFormat;
		public Token filename;
		public DecimalLiteralContext fromPosition;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public TerminalNode EVENTS() { return getToken(SpeakQlParser.EVENTS, 0); }
		public TerminalNode BINLOG() { return getToken(SpeakQlParser.BINLOG, 0); }
		public TerminalNode RELAYLOG() { return getToken(SpeakQlParser.RELAYLOG, 0); }
		public TerminalNode IN() { return getToken(SpeakQlParser.IN, 0); }
		public TerminalNode FROM() { return getToken(SpeakQlParser.FROM, 0); }
		public TerminalNode LIMIT() { return getToken(SpeakQlParser.LIMIT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(SpeakQlParser.COMMA, 0); }
		public ShowLogEventsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowLogEvents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowLogEvents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowLogEvents(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowMasterLogsContext extends ShowStatementContext {
		public Token logFormat;
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public TerminalNode LOGS() { return getToken(SpeakQlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(SpeakQlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(SpeakQlParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowMasterLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowMasterLogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowMasterLogs(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGrantsContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public TerminalNode GRANTS() { return getToken(SpeakQlParser.GRANTS, 0); }
		public TerminalNode FOR() { return getToken(SpeakQlParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowGrantsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowGrants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowGrants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowGrants(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSlaveStatusContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public TerminalNode SLAVE() { return getToken(SpeakQlParser.SLAVE, 0); }
		public TerminalNode STATUS() { return getToken(SpeakQlParser.STATUS, 0); }
		public TerminalNode FOR() { return getToken(SpeakQlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(SpeakQlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public ShowSlaveStatusContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowSlaveStatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowSlaveStatus(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowSlaveStatus(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowRoutineContext extends ShowStatementContext {
		public Token routine;
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public TerminalNode CODE() { return getToken(SpeakQlParser.CODE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(SpeakQlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(SpeakQlParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowRoutine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowRoutine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowRoutine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowProfileContext extends ShowStatementContext {
		public DecimalLiteralContext queryCount;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public TerminalNode PROFILE() { return getToken(SpeakQlParser.PROFILE, 0); }
		public List<ShowProfileTypeContext> showProfileType() {
			return getRuleContexts(ShowProfileTypeContext.class);
		}
		public ShowProfileTypeContext showProfileType(int i) {
			return getRuleContext(ShowProfileTypeContext.class,i);
		}
		public TerminalNode LIMIT() { return getToken(SpeakQlParser.LIMIT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TerminalNode FOR() { return getToken(SpeakQlParser.FOR, 0); }
		public TerminalNode QUERY() { return getToken(SpeakQlParser.QUERY, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public ShowProfileContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowProfile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowProfile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowProfile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowColumnsContext extends ShowStatementContext {
		public Token columnsFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(SpeakQlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(SpeakQlParser.COLUMNS, 0); }
		public TerminalNode FIELDS() { return getToken(SpeakQlParser.FIELDS, 0); }
		public List<TerminalNode> FROM() { return getTokens(SpeakQlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(SpeakQlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(SpeakQlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(SpeakQlParser.IN, i);
		}
		public TerminalNode FULL() { return getToken(SpeakQlParser.FULL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowColumnsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_showStatement);
		int _la;
		try {
			setState(5348);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,760,_ctx) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5197);
				match(SHOW);
				setState(5198);
				((ShowMasterLogsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5199);
				match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5200);
				match(SHOW);
				setState(5201);
				((ShowLogEventsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5202);
				match(EVENTS);
				setState(5205);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(5203);
					match(IN);
					setState(5204);
					((ShowLogEventsContext)_localctx).filename = match(STRING_LITERAL);
					}
				}

				setState(5209);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,740,_ctx) ) {
				case 1:
					{
					setState(5207);
					match(FROM);
					setState(5208);
					((ShowLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
					break;
				}
				setState(5218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(5211);
					match(LIMIT);
					setState(5215);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,741,_ctx) ) {
					case 1:
						{
						setState(5212);
						((ShowLogEventsContext)_localctx).offset = decimalLiteral();
						setState(5213);
						match(COMMA);
						}
						break;
					}
					setState(5217);
					((ShowLogEventsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5220);
				match(SHOW);
				setState(5221);
				showCommonEntity();
				setState(5223);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,743,_ctx) ) {
				case 1:
					{
					setState(5222);
					showFilter();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5225);
				match(SHOW);
				setState(5227);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5226);
					match(FULL);
					}
				}

				setState(5229);
				((ShowColumnsContext)_localctx).columnsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5230);
				((ShowColumnsContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5231);
				tableName();
				setState(5234);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,745,_ctx) ) {
				case 1:
					{
					setState(5232);
					((ShowColumnsContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5233);
					uid();
					}
					break;
				}
				setState(5237);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
				case 1:
					{
					setState(5236);
					showFilter();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5239);
				match(SHOW);
				setState(5240);
				match(CREATE);
				setState(5241);
				((ShowCreateDbContext)_localctx).schemaFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5243);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(5242);
					ifNotExists();
					}
				}

				setState(5245);
				uid();
				}
				break;
			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5246);
				match(SHOW);
				setState(5247);
				match(CREATE);
				setState(5248);
				((ShowCreateFullIdObjectContext)_localctx).namedEntity = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (PROCEDURE - 137)) | (1L << (TABLE - 137)) | (1L << (TRIGGER - 137)))) != 0) || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreateFullIdObjectContext)_localctx).namedEntity = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5249);
				fullId();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5250);
				match(SHOW);
				setState(5251);
				match(CREATE);
				setState(5252);
				match(USER);
				setState(5253);
				userName();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5254);
				match(SHOW);
				setState(5255);
				match(ENGINE);
				setState(5256);
				engineName();
				setState(5257);
				((ShowEngineContext)_localctx).engineOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5259);
				match(SHOW);
				setState(5260);
				showGlobalInfoClause();
				}
				break;
			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5261);
				match(SHOW);
				setState(5262);
				((ShowErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				{
				setState(5263);
				match(LIMIT);
				setState(5267);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,748,_ctx) ) {
				case 1:
					{
					setState(5264);
					((ShowErrorsContext)_localctx).offset = decimalLiteral();
					setState(5265);
					match(COMMA);
					}
					break;
				}
				setState(5269);
				((ShowErrorsContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5270);
				match(SHOW);
				setState(5271);
				match(COUNT);
				setState(5272);
				match(LR_BRACKET);
				setState(5273);
				match(STAR);
				setState(5274);
				match(RR_BRACKET);
				setState(5275);
				((ShowCountErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5276);
				match(SHOW);
				setState(5277);
				showSchemaEntity();
				setState(5280);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,749,_ctx) ) {
				case 1:
					{
					setState(5278);
					((ShowSchemaFilterContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5279);
					uid();
					}
					break;
				}
				setState(5283);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,750,_ctx) ) {
				case 1:
					{
					setState(5282);
					showFilter();
					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5285);
				match(SHOW);
				setState(5286);
				((ShowRoutineContext)_localctx).routine = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5287);
				match(CODE);
				setState(5288);
				fullId();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5289);
				match(SHOW);
				setState(5290);
				match(GRANTS);
				setState(5293);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5291);
					match(FOR);
					setState(5292);
					userName();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(5295);
				match(SHOW);
				setState(5296);
				((ShowIndexesContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
					((ShowIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5297);
				((ShowIndexesContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5298);
				tableName();
				setState(5301);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,752,_ctx) ) {
				case 1:
					{
					setState(5299);
					((ShowIndexesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5300);
					uid();
					}
					break;
				}
				setState(5305);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,753,_ctx) ) {
				case 1:
					{
					setState(5303);
					match(WHERE);
					setState(5304);
					expression(0);
					}
					break;
				}
				}
				break;
			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(5307);
				match(SHOW);
				setState(5308);
				match(OPEN);
				setState(5309);
				match(TABLES);
				setState(5312);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
				case 1:
					{
					setState(5310);
					((ShowOpenTablesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5311);
					uid();
					}
					break;
				}
				setState(5315);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,755,_ctx) ) {
				case 1:
					{
					setState(5314);
					showFilter();
					}
					break;
				}
				}
				break;
			case 17:
				_localctx = new ShowProfileContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(5317);
				match(SHOW);
				setState(5318);
				match(PROFILE);
				setState(5319);
				showProfileType();
				setState(5324);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5320);
					match(COMMA);
					setState(5321);
					showProfileType();
					}
					}
					setState(5326);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5330);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5327);
					match(FOR);
					setState(5328);
					match(QUERY);
					setState(5329);
					((ShowProfileContext)_localctx).queryCount = decimalLiteral();
					}
				}

				{
				setState(5332);
				match(LIMIT);
				setState(5336);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,758,_ctx) ) {
				case 1:
					{
					setState(5333);
					((ShowProfileContext)_localctx).offset = decimalLiteral();
					setState(5334);
					match(COMMA);
					}
					break;
				}
				setState(5338);
				((ShowProfileContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(5340);
				match(SHOW);
				setState(5341);
				match(SLAVE);
				setState(5342);
				match(STATUS);
				setState(5346);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5343);
					match(FOR);
					setState(5344);
					match(CHANNEL);
					setState(5345);
					match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableClauseContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(SpeakQlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(SpeakQlParser.GLOBAL_ID, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(SpeakQlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(SpeakQlParser.SESSION, 0); }
		public TerminalNode LOCAL() { return getToken(SpeakQlParser.LOCAL, 0); }
		public List<TerminalNode> AT_SIGN() { return getTokens(SpeakQlParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(SpeakQlParser.AT_SIGN, i);
		}
		public VariableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterVariableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitVariableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitVariableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableClauseContext variableClause() throws RecognitionException {
		VariableClauseContext _localctx = new VariableClauseContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_variableClause);
		int _la;
		try {
			setState(5360);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5350);
				match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5351);
				match(GLOBAL_ID);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case OPTIONAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5357);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,762,_ctx) ) {
				case 1:
					{
					setState(5354);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AT_SIGN) {
						{
						setState(5352);
						match(AT_SIGN);
						setState(5353);
						match(AT_SIGN);
						}
					}

					setState(5356);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5359);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCommonEntityContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(SpeakQlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public TerminalNode COLLATION() { return getToken(SpeakQlParser.COLLATION, 0); }
		public TerminalNode DATABASES() { return getToken(SpeakQlParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(SpeakQlParser.SCHEMAS, 0); }
		public TerminalNode FUNCTION() { return getToken(SpeakQlParser.FUNCTION, 0); }
		public TerminalNode STATUS() { return getToken(SpeakQlParser.STATUS, 0); }
		public TerminalNode PROCEDURE() { return getToken(SpeakQlParser.PROCEDURE, 0); }
		public TerminalNode VARIABLES() { return getToken(SpeakQlParser.VARIABLES, 0); }
		public TerminalNode GLOBAL() { return getToken(SpeakQlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(SpeakQlParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommonEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowCommonEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowCommonEntity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowCommonEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCommonEntityContext showCommonEntity() throws RecognitionException {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_showCommonEntity);
		int _la;
		try {
			setState(5375);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5362);
				match(CHARACTER);
				setState(5363);
				match(SET);
				}
				break;
			case COLLATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(5364);
				match(COLLATION);
				}
				break;
			case DATABASES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5365);
				match(DATABASES);
				}
				break;
			case SCHEMAS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5366);
				match(SCHEMAS);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 5);
				{
				setState(5367);
				match(FUNCTION);
				setState(5368);
				match(STATUS);
				}
				break;
			case PROCEDURE:
				enterOuterAlt(_localctx, 6);
				{
				setState(5369);
				match(PROCEDURE);
				setState(5370);
				match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				enterOuterAlt(_localctx, 7);
				{
				setState(5372);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					setState(5371);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5374);
				_la = _input.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFilterContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(SpeakQlParser.LIKE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode WHERE() { return getToken(SpeakQlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowFilterContext showFilter() throws RecognitionException {
		ShowFilterContext _localctx = new ShowFilterContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_showFilter);
		try {
			setState(5381);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5377);
				match(LIKE);
				setState(5378);
				match(STRING_LITERAL);
				}
				break;
			case WHERE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5379);
				match(WHERE);
				setState(5380);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowGlobalInfoClauseContext extends ParserRuleContext {
		public TerminalNode ENGINES() { return getToken(SpeakQlParser.ENGINES, 0); }
		public TerminalNode STORAGE() { return getToken(SpeakQlParser.STORAGE, 0); }
		public TerminalNode MASTER() { return getToken(SpeakQlParser.MASTER, 0); }
		public TerminalNode STATUS() { return getToken(SpeakQlParser.STATUS, 0); }
		public TerminalNode PLUGINS() { return getToken(SpeakQlParser.PLUGINS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(SpeakQlParser.PRIVILEGES, 0); }
		public TerminalNode PROCESSLIST() { return getToken(SpeakQlParser.PROCESSLIST, 0); }
		public TerminalNode FULL() { return getToken(SpeakQlParser.FULL, 0); }
		public TerminalNode PROFILES() { return getToken(SpeakQlParser.PROFILES, 0); }
		public TerminalNode SLAVE() { return getToken(SpeakQlParser.SLAVE, 0); }
		public TerminalNode HOSTS() { return getToken(SpeakQlParser.HOSTS, 0); }
		public TerminalNode AUTHORS() { return getToken(SpeakQlParser.AUTHORS, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(SpeakQlParser.CONTRIBUTORS, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGlobalInfoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowGlobalInfoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowGlobalInfoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowGlobalInfoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowGlobalInfoClauseContext showGlobalInfoClause() throws RecognitionException {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_showGlobalInfoClause);
		int _la;
		try {
			setState(5400);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINES:
			case STORAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5384);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(5383);
					match(STORAGE);
					}
				}

				setState(5386);
				match(ENGINES);
				}
				break;
			case MASTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5387);
				match(MASTER);
				setState(5388);
				match(STATUS);
				}
				break;
			case PLUGINS:
				enterOuterAlt(_localctx, 3);
				{
				setState(5389);
				match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				enterOuterAlt(_localctx, 4);
				{
				setState(5390);
				match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				enterOuterAlt(_localctx, 5);
				{
				setState(5392);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5391);
					match(FULL);
					}
				}

				setState(5394);
				match(PROCESSLIST);
				}
				break;
			case PROFILES:
				enterOuterAlt(_localctx, 6);
				{
				setState(5395);
				match(PROFILES);
				}
				break;
			case SLAVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5396);
				match(SLAVE);
				setState(5397);
				match(HOSTS);
				}
				break;
			case AUTHORS:
				enterOuterAlt(_localctx, 8);
				{
				setState(5398);
				match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5399);
				match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSchemaEntityContext extends ParserRuleContext {
		public TerminalNode EVENTS() { return getToken(SpeakQlParser.EVENTS, 0); }
		public TerminalNode TABLE() { return getToken(SpeakQlParser.TABLE, 0); }
		public TerminalNode STATUS() { return getToken(SpeakQlParser.STATUS, 0); }
		public TerminalNode TABLES() { return getToken(SpeakQlParser.TABLES, 0); }
		public TerminalNode FULL() { return getToken(SpeakQlParser.FULL, 0); }
		public TerminalNode TRIGGERS() { return getToken(SpeakQlParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSchemaEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowSchemaEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowSchemaEntity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowSchemaEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowSchemaEntityContext showSchemaEntity() throws RecognitionException {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_showSchemaEntity);
		int _la;
		try {
			setState(5410);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EVENTS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5402);
				match(EVENTS);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5403);
				match(TABLE);
				setState(5404);
				match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5406);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5405);
					match(FULL);
					}
				}

				setState(5408);
				match(TABLES);
				}
				break;
			case TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5409);
				match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfileTypeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public TerminalNode BLOCK() { return getToken(SpeakQlParser.BLOCK, 0); }
		public TerminalNode IO() { return getToken(SpeakQlParser.IO, 0); }
		public TerminalNode CONTEXT() { return getToken(SpeakQlParser.CONTEXT, 0); }
		public TerminalNode SWITCHES() { return getToken(SpeakQlParser.SWITCHES, 0); }
		public TerminalNode CPU() { return getToken(SpeakQlParser.CPU, 0); }
		public TerminalNode IPC() { return getToken(SpeakQlParser.IPC, 0); }
		public TerminalNode MEMORY() { return getToken(SpeakQlParser.MEMORY, 0); }
		public TerminalNode PAGE() { return getToken(SpeakQlParser.PAGE, 0); }
		public TerminalNode FAULTS() { return getToken(SpeakQlParser.FAULTS, 0); }
		public TerminalNode SOURCE() { return getToken(SpeakQlParser.SOURCE, 0); }
		public TerminalNode SWAPS() { return getToken(SpeakQlParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfileType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShowProfileType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShowProfileType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShowProfileType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProfileTypeContext showProfileType() throws RecognitionException {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_showProfileType);
		try {
			setState(5424);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5412);
				match(ALL);
				}
				break;
			case BLOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5413);
				match(BLOCK);
				setState(5414);
				match(IO);
				}
				break;
			case CONTEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5415);
				match(CONTEXT);
				setState(5416);
				match(SWITCHES);
				}
				break;
			case CPU:
				enterOuterAlt(_localctx, 4);
				{
				setState(5417);
				match(CPU);
				}
				break;
			case IPC:
				enterOuterAlt(_localctx, 5);
				{
				setState(5418);
				match(IPC);
				}
				break;
			case MEMORY:
				enterOuterAlt(_localctx, 6);
				{
				setState(5419);
				match(MEMORY);
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5420);
				match(PAGE);
				setState(5421);
				match(FAULTS);
				}
				break;
			case SOURCE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5422);
				match(SOURCE);
				}
				break;
			case SWAPS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5423);
				match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinlogStatementContext extends ParserRuleContext {
		public TerminalNode BINLOG() { return getToken(SpeakQlParser.BINLOG, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public BinlogStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binlogStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterBinlogStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitBinlogStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitBinlogStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BinlogStatementContext binlogStatement() throws RecognitionException {
		BinlogStatementContext _localctx = new BinlogStatementContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_binlogStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5426);
			match(BINLOG);
			setState(5427);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheIndexStatementContext extends ParserRuleContext {
		public UidContext schema;
		public TerminalNode CACHE() { return getToken(SpeakQlParser.CACHE, 0); }
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public List<TableIndexesContext> tableIndexes() {
			return getRuleContexts(TableIndexesContext.class);
		}
		public TableIndexesContext tableIndexes(int i) {
			return getRuleContext(TableIndexesContext.class,i);
		}
		public TerminalNode IN() { return getToken(SpeakQlParser.IN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCacheIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCacheIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCacheIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CacheIndexStatementContext cacheIndexStatement() throws RecognitionException {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_cacheIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5429);
			match(CACHE);
			setState(5430);
			match(INDEX);
			setState(5431);
			tableIndexes();
			setState(5436);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5432);
				match(COMMA);
				setState(5433);
				tableIndexes();
				}
				}
				setState(5438);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5446);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5439);
				match(PARTITION);
				setState(5440);
				match(LR_BRACKET);
				setState(5443);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					setState(5441);
					uidList();
					}
					break;
				case ALL:
					{
					setState(5442);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5445);
				match(RR_BRACKET);
				}
			}

			setState(5448);
			match(IN);
			setState(5449);
			((CacheIndexStatementContext)_localctx).schema = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushStatementContext extends ParserRuleContext {
		public Token flushFormat;
		public TerminalNode FLUSH() { return getToken(SpeakQlParser.FLUSH, 0); }
		public List<FlushOptionContext> flushOption() {
			return getRuleContexts(FlushOptionContext.class);
		}
		public FlushOptionContext flushOption(int i) {
			return getRuleContext(FlushOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(SpeakQlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(SpeakQlParser.LOCAL, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFlushStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFlushStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFlushStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushStatementContext flushStatement() throws RecognitionException {
		FlushStatementContext _localctx = new FlushStatementContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_flushStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5451);
			match(FLUSH);
			setState(5453);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5452);
				((FlushStatementContext)_localctx).flushFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((FlushStatementContext)_localctx).flushFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5455);
			flushOption();
			setState(5460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5456);
				match(COMMA);
				setState(5457);
				flushOption();
				}
				}
				setState(5462);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KillStatementContext extends ParserRuleContext {
		public Token connectionFormat;
		public TerminalNode KILL() { return getToken(SpeakQlParser.KILL, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode CONNECTION() { return getToken(SpeakQlParser.CONNECTION, 0); }
		public TerminalNode QUERY() { return getToken(SpeakQlParser.QUERY, 0); }
		public KillStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_killStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterKillStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitKillStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitKillStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KillStatementContext killStatement() throws RecognitionException {
		KillStatementContext _localctx = new KillStatementContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_killStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5463);
			match(KILL);
			setState(5465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONNECTION || _la==QUERY) {
				{
				setState(5464);
				((KillStatementContext)_localctx).connectionFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					((KillStatementContext)_localctx).connectionFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5468); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5467);
				decimalLiteral();
				}
				}
				setState(5470); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 1103)) & ~0x3f) == 0 && ((1L << (_la - 1103)) & ((1L << (ZERO_DECIMAL - 1103)) | (1L << (ONE_DECIMAL - 1103)) | (1L << (TWO_DECIMAL - 1103)) | (1L << (DECIMAL_LITERAL - 1103)) | (1L << (REAL_LITERAL - 1103)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadIndexIntoCacheContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(SpeakQlParser.LOAD, 0); }
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public TerminalNode INTO() { return getToken(SpeakQlParser.INTO, 0); }
		public TerminalNode CACHE() { return getToken(SpeakQlParser.CACHE, 0); }
		public List<LoadedTableIndexesContext> loadedTableIndexes() {
			return getRuleContexts(LoadedTableIndexesContext.class);
		}
		public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return getRuleContext(LoadedTableIndexesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadIndexIntoCache; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLoadIndexIntoCache(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLoadIndexIntoCache(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLoadIndexIntoCache(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadIndexIntoCacheContext loadIndexIntoCache() throws RecognitionException {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_loadIndexIntoCache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5472);
			match(LOAD);
			setState(5473);
			match(INDEX);
			setState(5474);
			match(INTO);
			setState(5475);
			match(CACHE);
			setState(5476);
			loadedTableIndexes();
			setState(5481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5477);
				match(COMMA);
				setState(5478);
				loadedTableIndexes();
				}
				}
				setState(5483);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetStatementContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(SpeakQlParser.RESET, 0); }
		public TerminalNode QUERY() { return getToken(SpeakQlParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(SpeakQlParser.CACHE, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterResetStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitResetStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitResetStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetStatementContext resetStatement() throws RecognitionException {
		ResetStatementContext _localctx = new ResetStatementContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_resetStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5484);
			match(RESET);
			setState(5485);
			match(QUERY);
			setState(5486);
			match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShutdownStatementContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(SpeakQlParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdownStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterShutdownStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitShutdownStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitShutdownStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShutdownStatementContext shutdownStatement() throws RecognitionException {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_shutdownStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5488);
			match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableIndexesContext extends ParserRuleContext {
		public Token indexFormat;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public TableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIndexes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableIndexesContext tableIndexes() throws RecognitionException {
		TableIndexesContext _localctx = new TableIndexesContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_tableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5490);
			tableName();
			setState(5498);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				setState(5492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5491);
					((TableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((TableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5494);
				match(LR_BRACKET);
				setState(5495);
				uidList();
				setState(5496);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushOptionContext extends ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption; }
	 
		public FlushOptionContext() { }
		public void copyFrom(FlushOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableFlushOptionContext extends FlushOptionContext {
		public TerminalNode TABLES() { return getToken(SpeakQlParser.TABLES, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public FlushTableOptionContext flushTableOption() {
			return getRuleContext(FlushTableOptionContext.class,0);
		}
		public TableFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ChannelFlushOptionContext extends FlushOptionContext {
		public TerminalNode RELAY() { return getToken(SpeakQlParser.RELAY, 0); }
		public TerminalNode LOGS() { return getToken(SpeakQlParser.LOGS, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChannelFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterChannelFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitChannelFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitChannelFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFlushOptionContext extends FlushOptionContext {
		public TerminalNode DES_KEY_FILE() { return getToken(SpeakQlParser.DES_KEY_FILE, 0); }
		public TerminalNode HOSTS() { return getToken(SpeakQlParser.HOSTS, 0); }
		public TerminalNode LOGS() { return getToken(SpeakQlParser.LOGS, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(SpeakQlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(SpeakQlParser.PRIVILEGES, 0); }
		public TerminalNode QUERY() { return getToken(SpeakQlParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(SpeakQlParser.CACHE, 0); }
		public TerminalNode STATUS() { return getToken(SpeakQlParser.STATUS, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(SpeakQlParser.USER_RESOURCES, 0); }
		public TerminalNode TABLES() { return getToken(SpeakQlParser.TABLES, 0); }
		public TerminalNode WITH() { return getToken(SpeakQlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(SpeakQlParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(SpeakQlParser.LOCK, 0); }
		public TerminalNode BINARY() { return getToken(SpeakQlParser.BINARY, 0); }
		public TerminalNode ENGINE() { return getToken(SpeakQlParser.ENGINE, 0); }
		public TerminalNode ERROR() { return getToken(SpeakQlParser.ERROR, 0); }
		public TerminalNode GENERAL() { return getToken(SpeakQlParser.GENERAL, 0); }
		public TerminalNode RELAY() { return getToken(SpeakQlParser.RELAY, 0); }
		public TerminalNode SLOW() { return getToken(SpeakQlParser.SLOW, 0); }
		public SimpleFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSimpleFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSimpleFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSimpleFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushOptionContext flushOption() throws RecognitionException {
		FlushOptionContext _localctx = new FlushOptionContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_flushOption);
		int _la;
		try {
			setState(5530);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,788,_ctx) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5518);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DES_KEY_FILE:
					{
					setState(5500);
					match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					setState(5501);
					match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					setState(5503);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BINARY || ((((_la - 405)) & ~0x3f) == 0 && ((1L << (_la - 405)) & ((1L << (ENGINE - 405)) | (1L << (ERROR - 405)) | (1L << (GENERAL - 405)))) != 0) || _la==RELAY || _la==SLOW) {
						{
						setState(5502);
						_la = _input.LA(1);
						if ( !(_la==BINARY || ((((_la - 405)) & ~0x3f) == 0 && ((1L << (_la - 405)) & ((1L << (ENGINE - 405)) | (1L << (ERROR - 405)) | (1L << (GENERAL - 405)))) != 0) || _la==RELAY || _la==SLOW) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(5505);
					match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					setState(5506);
					match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					setState(5507);
					match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					setState(5508);
					match(QUERY);
					setState(5509);
					match(CACHE);
					}
					break;
				case STATUS:
					{
					setState(5510);
					match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					setState(5511);
					match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					setState(5512);
					match(TABLES);
					setState(5516);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(5513);
						match(WITH);
						setState(5514);
						match(READ);
						setState(5515);
						match(LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5520);
				match(RELAY);
				setState(5521);
				match(LOGS);
				setState(5523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5522);
					channelOption();
					}
				}

				}
				break;
			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5525);
				match(TABLES);
				setState(5526);
				tables();
				setState(5528);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==WITH) {
					{
					setState(5527);
					flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTableOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SpeakQlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(SpeakQlParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(SpeakQlParser.LOCK, 0); }
		public TerminalNode FOR() { return getToken(SpeakQlParser.FOR, 0); }
		public TerminalNode EXPORT() { return getToken(SpeakQlParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFlushTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFlushTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFlushTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushTableOptionContext flushTableOption() throws RecognitionException {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_flushTableOption);
		try {
			setState(5537);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5532);
				match(WITH);
				setState(5533);
				match(READ);
				setState(5534);
				match(LOCK);
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5535);
				match(FOR);
				setState(5536);
				match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadedTableIndexesContext extends ParserRuleContext {
		public UidListContext partitionList;
		public Token indexFormat;
		public UidListContext indexList;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SpeakQlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SpeakQlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SpeakQlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SpeakQlParser.RR_BRACKET, i);
		}
		public TerminalNode IGNORE() { return getToken(SpeakQlParser.IGNORE, 0); }
		public TerminalNode LEAVES() { return getToken(SpeakQlParser.LEAVES, 0); }
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public TerminalNode INDEX() { return getToken(SpeakQlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(SpeakQlParser.KEY, 0); }
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadedTableIndexes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLoadedTableIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLoadedTableIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLoadedTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadedTableIndexesContext loadedTableIndexes() throws RecognitionException {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_loadedTableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5539);
			tableName();
			setState(5547);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5540);
				match(PARTITION);
				setState(5541);
				match(LR_BRACKET);
				setState(5544);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case OPTIONAL:
					{
					setState(5542);
					((LoadedTableIndexesContext)_localctx).partitionList = uidList();
					}
					break;
				case ALL:
					{
					setState(5543);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5546);
				match(RR_BRACKET);
				}
			}

			setState(5556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,793,_ctx) ) {
			case 1:
				{
				setState(5550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5549);
					((LoadedTableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((LoadedTableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5552);
				match(LR_BRACKET);
				setState(5553);
				((LoadedTableIndexesContext)_localctx).indexList = uidList();
				setState(5554);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5560);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(5558);
				match(IGNORE);
				setState(5559);
				match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public UidContext column;
		public Token pattern;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(SpeakQlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(SpeakQlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(SpeakQlParser.DESC, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSimpleDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSimpleDescribeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSimpleDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleDescribeStatementContext simpleDescribeStatement() throws RecognitionException {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_simpleDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5562);
			((SimpleDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (DESC - 57)) | (1L << (DESCRIBE - 57)) | (1L << (EXPLAIN - 57)))) != 0)) ) {
				((SimpleDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5563);
			tableName();
			setState(5566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,795,_ctx) ) {
			case 1:
				{
				setState(5564);
				((SimpleDescribeStatementContext)_localctx).column = uid();
				}
				break;
			case 2:
				{
				setState(5565);
				((SimpleDescribeStatementContext)_localctx).pattern = match(STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public Token formatType;
		public Token formatValue;
		public DescribeObjectClauseContext describeObjectClause() {
			return getRuleContext(DescribeObjectClauseContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(SpeakQlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(SpeakQlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(SpeakQlParser.DESC, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode EXTENDED() { return getToken(SpeakQlParser.EXTENDED, 0); }
		public TerminalNode PARTITIONS() { return getToken(SpeakQlParser.PARTITIONS, 0); }
		public TerminalNode FORMAT() { return getToken(SpeakQlParser.FORMAT, 0); }
		public TerminalNode TRADITIONAL() { return getToken(SpeakQlParser.TRADITIONAL, 0); }
		public TerminalNode JSON() { return getToken(SpeakQlParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFullDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFullDescribeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFullDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullDescribeStatementContext fullDescribeStatement() throws RecognitionException {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_fullDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5568);
			((FullDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & ((1L << (DESC - 57)) | (1L << (DESCRIBE - 57)) | (1L << (EXPLAIN - 57)))) != 0)) ) {
				((FullDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5572);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				setState(5569);
				((FullDescribeStatementContext)_localctx).formatType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					((FullDescribeStatementContext)_localctx).formatType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5570);
				match(EQUAL_SYMBOL);
				setState(5571);
				((FullDescribeStatementContext)_localctx).formatValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					((FullDescribeStatementContext)_localctx).formatValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5574);
			describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HelpStatementContext extends ParserRuleContext {
		public TerminalNode HELP() { return getToken(SpeakQlParser.HELP, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public HelpStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterHelpStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitHelpStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitHelpStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HelpStatementContext helpStatement() throws RecognitionException {
		HelpStatementContext _localctx = new HelpStatementContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_helpStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5576);
			match(HELP);
			setState(5577);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseStatementContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(SpeakQlParser.USE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseStatementContext useStatement() throws RecognitionException {
		UseStatementContext _localctx = new UseStatementContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_useStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5579);
			match(USE);
			setState(5580);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL() { return getToken(SpeakQlParser.SIGNAL, 0); }
		public TerminalNode ID() { return getToken(SpeakQlParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(SpeakQlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(SpeakQlParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(SpeakQlParser.VALUE, 0); }
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_signalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5582);
			match(SIGNAL);
			setState(5590);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(5583);
				match(SQLSTATE);
				setState(5585);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5584);
					match(VALUE);
					}
				}

				setState(5587);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(5588);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(5589);
				match(REVERSE_QUOTE_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5601);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,800,_ctx) ) {
			case 1:
				{
				setState(5592);
				match(SET);
				setState(5593);
				signalConditionInformation();
				setState(5598);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5594);
					match(COMMA);
					setState(5595);
					signalConditionInformation();
					}
					}
					setState(5600);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResignalStatementContext extends ParserRuleContext {
		public TerminalNode RESIGNAL() { return getToken(SpeakQlParser.RESIGNAL, 0); }
		public TerminalNode ID() { return getToken(SpeakQlParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(SpeakQlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(SpeakQlParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(SpeakQlParser.VALUE, 0); }
		public ResignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resignalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterResignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitResignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitResignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResignalStatementContext resignalStatement() throws RecognitionException {
		ResignalStatementContext _localctx = new ResignalStatementContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_resignalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5603);
			match(RESIGNAL);
			setState(5611);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(5604);
				match(SQLSTATE);
				setState(5606);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5605);
					match(VALUE);
					}
				}

				setState(5608);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(5609);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(5610);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case EOF:
			case RETRIEVE:
			case SHOW_ME:
			case DISPLAY:
			case PRESENT:
			case FIND:
			case IN_TABLE:
			case FROM_TABLE:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case FROM:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case WHERE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUS:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			setState(5622);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
			case 1:
				{
				setState(5613);
				match(SET);
				setState(5614);
				signalConditionInformation();
				setState(5619);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5615);
					match(COMMA);
					setState(5616);
					signalConditionInformation();
					}
					}
					setState(5621);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalConditionInformationContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(SpeakQlParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(SpeakQlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(SpeakQlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(SpeakQlParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(SpeakQlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(SpeakQlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(SpeakQlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(SpeakQlParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(SpeakQlParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(SpeakQlParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(SpeakQlParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(SpeakQlParser.CURSOR_NAME, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode DECIMAL_LITERAL() { return getToken(SpeakQlParser.DECIMAL_LITERAL, 0); }
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public SignalConditionInformationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalConditionInformation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSignalConditionInformation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSignalConditionInformation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSignalConditionInformation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalConditionInformationContext signalConditionInformation() throws RecognitionException {
		SignalConditionInformationContext _localctx = new SignalConditionInformationContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_signalConditionInformation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5624);
			_la = _input.LA(1);
			if ( !(((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (CLASS_ORIGIN - 359)) | (1L << (COLUMN_NAME - 359)) | (1L << (CONSTRAINT_CATALOG - 359)) | (1L << (CONSTRAINT_SCHEMA - 359)) | (1L << (CONSTRAINT_NAME - 359)) | (1L << (CURSOR_NAME - 359)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || _la==SUBCLASS_ORIGIN || _la==TABLE_NAME || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5625);
			match(EQUAL_SYMBOL);
			setState(5630);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
			case 1:
				{
				setState(5626);
				stringLiteral();
				}
				break;
			case 2:
				{
				setState(5627);
				match(DECIMAL_LITERAL);
				}
				break;
			case 3:
				{
				setState(5628);
				mysqlVariable();
				}
				break;
			case 4:
				{
				setState(5629);
				simpleId();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticsStatementContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(SpeakQlParser.GET, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(SpeakQlParser.DIAGNOSTICS, 0); }
		public TerminalNode CURRENT() { return getToken(SpeakQlParser.CURRENT, 0); }
		public TerminalNode STACKED() { return getToken(SpeakQlParser.STACKED, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(SpeakQlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(SpeakQlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode CONDITION() { return getToken(SpeakQlParser.CONDITION, 0); }
		public List<DiagnosticsConditionInformationNameContext> diagnosticsConditionInformationName() {
			return getRuleContexts(DiagnosticsConditionInformationNameContext.class);
		}
		public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName(int i) {
			return getRuleContext(DiagnosticsConditionInformationNameContext.class,i);
		}
		public List<TerminalNode> NUMBER() { return getTokens(SpeakQlParser.NUMBER); }
		public TerminalNode NUMBER(int i) {
			return getToken(SpeakQlParser.NUMBER, i);
		}
		public List<TerminalNode> ROW_COUNT() { return getTokens(SpeakQlParser.ROW_COUNT); }
		public TerminalNode ROW_COUNT(int i) {
			return getToken(SpeakQlParser.ROW_COUNT, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public DiagnosticsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDiagnosticsStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDiagnosticsStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDiagnosticsStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiagnosticsStatementContext diagnosticsStatement() throws RecognitionException {
		DiagnosticsStatementContext _localctx = new DiagnosticsStatementContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_diagnosticsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5632);
			match(GET);
			setState(5634);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CURRENT || _la==STACKED) {
				{
				setState(5633);
				_la = _input.LA(1);
				if ( !(_la==CURRENT || _la==STACKED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5636);
			match(DIAGNOSTICS);
			setState(5668);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
			case OPTIONAL:
				{
				{
				setState(5637);
				variableClause();
				setState(5638);
				match(EQUAL_SYMBOL);
				setState(5639);
				_la = _input.LA(1);
				if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5647);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5640);
					match(COMMA);
					setState(5641);
					variableClause();
					setState(5642);
					match(EQUAL_SYMBOL);
					setState(5643);
					_la = _input.LA(1);
					if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(5649);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case CONDITION:
				{
				{
				setState(5650);
				match(CONDITION);
				setState(5653);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					setState(5651);
					decimalLiteral();
					}
					break;
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case LEFT:
				case NUMBER:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case AT_SIGN:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
				case OPTIONAL:
					{
					setState(5652);
					variableClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5655);
				variableClause();
				setState(5656);
				match(EQUAL_SYMBOL);
				setState(5657);
				diagnosticsConditionInformationName();
				setState(5665);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5658);
					match(COMMA);
					setState(5659);
					variableClause();
					setState(5660);
					match(EQUAL_SYMBOL);
					setState(5661);
					diagnosticsConditionInformationName();
					}
					}
					setState(5667);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticsConditionInformationNameContext extends ParserRuleContext {
		public TerminalNode CLASS_ORIGIN() { return getToken(SpeakQlParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(SpeakQlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(SpeakQlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(SpeakQlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(SpeakQlParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(SpeakQlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(SpeakQlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(SpeakQlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(SpeakQlParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(SpeakQlParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(SpeakQlParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(SpeakQlParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(SpeakQlParser.CURSOR_NAME, 0); }
		public DiagnosticsConditionInformationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsConditionInformationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDiagnosticsConditionInformationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDiagnosticsConditionInformationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDiagnosticsConditionInformationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName() throws RecognitionException {
		DiagnosticsConditionInformationNameContext _localctx = new DiagnosticsConditionInformationNameContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_diagnosticsConditionInformationName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5670);
			_la = _input.LA(1);
			if ( !(((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (CLASS_ORIGIN - 359)) | (1L << (COLUMN_NAME - 359)) | (1L << (CONSTRAINT_CATALOG - 359)) | (1L << (CONSTRAINT_SCHEMA - 359)) | (1L << (CONSTRAINT_NAME - 359)) | (1L << (CURSOR_NAME - 359)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || ((((_la - 573)) & ~0x3f) == 0 && ((1L << (_la - 573)) & ((1L << (RETURNED_SQLSTATE - 573)) | (1L << (SUBCLASS_ORIGIN - 573)) | (1L << (TABLE_NAME - 573)))) != 0) || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeObjectClauseContext extends ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeObjectClause; }
	 
		public DescribeObjectClauseContext() { }
		public void copyFrom(DescribeObjectClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DescribeStatementsContext extends DescribeObjectClauseContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDescribeStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDescribeStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDescribeStatements(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescribeConnectionContext extends DescribeObjectClauseContext {
		public TerminalNode FOR() { return getToken(SpeakQlParser.FOR, 0); }
		public TerminalNode CONNECTION() { return getToken(SpeakQlParser.CONNECTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDescribeConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDescribeConnection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDescribeConnection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeObjectClauseContext describeObjectClause() throws RecognitionException {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_describeObjectClause);
		try {
			setState(5682);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETRIEVE:
			case SHOW_ME:
			case DISPLAY:
			case PRESENT:
			case FIND:
			case IN_TABLE:
			case FROM_TABLE:
			case DELETE:
			case FROM:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case WHERE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5677);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RETRIEVE:
				case SHOW_ME:
				case DISPLAY:
				case PRESENT:
				case FIND:
				case IN_TABLE:
				case FROM_TABLE:
				case FROM:
				case SELECT:
				case WHERE:
				case LR_BRACKET:
					{
					setState(5672);
					selectStatement();
					}
					break;
				case DELETE:
					{
					setState(5673);
					deleteStatement();
					}
					break;
				case INSERT:
					{
					setState(5674);
					insertStatement();
					}
					break;
				case REPLACE:
					{
					setState(5675);
					replaceStatement();
					}
					break;
				case UPDATE:
					{
					setState(5676);
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5679);
				match(FOR);
				setState(5680);
				match(CONNECTION);
				setState(5681);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullIdContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT_ID() { return getToken(SpeakQlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(SpeakQlParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFullId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFullId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFullId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullIdContext fullId() throws RecognitionException {
		FullIdContext _localctx = new FullIdContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_fullId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5684);
			uid();
			setState(5688);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
			case 1:
				{
				setState(5685);
				match(DOT_ID);
				}
				break;
			case 2:
				{
				setState(5686);
				match(DOT);
				setState(5687);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5690);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<DottedIdContext> dottedId() {
			return getRuleContexts(DottedIdContext.class);
		}
		public DottedIdContext dottedId(int i) {
			return getRuleContext(DottedIdContext.class,i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFullColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFullColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFullColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullColumnNameContext fullColumnName() throws RecognitionException {
		FullColumnNameContext _localctx = new FullColumnNameContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_fullColumnName);
		try {
			setState(5704);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,817,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5692);
				uid();
				setState(5697);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
				case 1:
					{
					setState(5693);
					dottedId();
					setState(5695);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
					case 1:
						{
						setState(5694);
						dottedId();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5699);
				matchWildcard();
				setState(5700);
				dottedId();
				setState(5702);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,816,_ctx) ) {
				case 1:
					{
					setState(5701);
					dottedId();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNameContext extends ParserRuleContext {
		public Token sortType;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode ASC() { return getToken(SpeakQlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SpeakQlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIndexColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIndexColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIndexColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNameContext indexColumnName() throws RecognitionException {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_indexColumnName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5717);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,820,_ctx) ) {
			case 1:
				{
				setState(5708);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,818,_ctx) ) {
				case 1:
					{
					setState(5706);
					uid();
					}
					break;
				case 2:
					{
					setState(5707);
					match(STRING_LITERAL);
					}
					break;
				}
				setState(5714);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5710);
					match(LR_BRACKET);
					setState(5711);
					decimalLiteral();
					setState(5712);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				{
				setState(5716);
				expression(0);
				}
				break;
			}
			setState(5720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(5719);
				((IndexColumnNameContext)_localctx).sortType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((IndexColumnNameContext)_localctx).sortType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserNameContext extends ParserRuleContext {
		public TerminalNode STRING_USER_NAME() { return getToken(SpeakQlParser.STRING_USER_NAME, 0); }
		public TerminalNode ID() { return getToken(SpeakQlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public UserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUserName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUserName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUserName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserNameContext userName() throws RecognitionException {
		UserNameContext _localctx = new UserNameContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_userName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5722);
			_la = _input.LA(1);
			if ( !(((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (STRING_USER_NAME - 1113)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MysqlVariableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(SpeakQlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(SpeakQlParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterMysqlVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitMysqlVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitMysqlVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MysqlVariableContext mysqlVariable() throws RecognitionException {
		MysqlVariableContext _localctx = new MysqlVariableContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_mysqlVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5724);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(SpeakQlParser.BINARY, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCharsetName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCharsetName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCharsetName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_charsetName);
		try {
			setState(5730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,822,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5726);
				match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5727);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5728);
				match(STRING_LITERAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5729);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_collationName);
		try {
			setState(5734);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,823,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5732);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5733);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode ARCHIVE() { return getToken(SpeakQlParser.ARCHIVE, 0); }
		public TerminalNode BLACKHOLE() { return getToken(SpeakQlParser.BLACKHOLE, 0); }
		public TerminalNode CSV() { return getToken(SpeakQlParser.CSV, 0); }
		public TerminalNode FEDERATED() { return getToken(SpeakQlParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(SpeakQlParser.INNODB, 0); }
		public TerminalNode MEMORY() { return getToken(SpeakQlParser.MEMORY, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(SpeakQlParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(SpeakQlParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(SpeakQlParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(SpeakQlParser.NDBCLUSTER, 0); }
		public TerminalNode PERFORMANCE_SCHEMA() { return getToken(SpeakQlParser.PERFORMANCE_SCHEMA, 0); }
		public TerminalNode TOKUDB() { return getToken(SpeakQlParser.TOKUDB, 0); }
		public TerminalNode ID() { return getToken(SpeakQlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(SpeakQlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CONNECT() { return getToken(SpeakQlParser.CONNECT, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterEngineName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitEngineName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitEngineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_engineName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5736);
			_la = _input.LA(1);
			if ( !(_la==CONNECT || ((((_la - 756)) & ~0x3f) == 0 && ((1L << (_la - 756)) & ((1L << (ARCHIVE - 756)) | (1L << (BLACKHOLE - 756)) | (1L << (CSV - 756)) | (1L << (FEDERATED - 756)) | (1L << (INNODB - 756)) | (1L << (MEMORY - 756)) | (1L << (MRG_MYISAM - 756)) | (1L << (MYISAM - 756)) | (1L << (NDB - 756)) | (1L << (NDBCLUSTER - 756)) | (1L << (PERFORMANCE_SCHEMA - 756)) | (1L << (TOKUDB - 756)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UuidSetContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public List<TerminalNode> MINUS() { return getTokens(SpeakQlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(SpeakQlParser.MINUS, i);
		}
		public List<TerminalNode> COLON_SYMB() { return getTokens(SpeakQlParser.COLON_SYMB); }
		public TerminalNode COLON_SYMB(int i) {
			return getToken(SpeakQlParser.COLON_SYMB, i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUuidSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUuidSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UuidSetContext uuidSet() throws RecognitionException {
		UuidSetContext _localctx = new UuidSetContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_uuidSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5738);
			decimalLiteral();
			setState(5739);
			match(MINUS);
			setState(5740);
			decimalLiteral();
			setState(5741);
			match(MINUS);
			setState(5742);
			decimalLiteral();
			setState(5743);
			match(MINUS);
			setState(5744);
			decimalLiteral();
			setState(5745);
			match(MINUS);
			setState(5746);
			decimalLiteral();
			setState(5752); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5747);
				match(COLON_SYMB);
				setState(5748);
				decimalLiteral();
				setState(5749);
				match(MINUS);
				setState(5750);
				decimalLiteral();
				}
				}
				setState(5754); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		public List<XuidStringIdContext> xuidStringId() {
			return getRuleContexts(XuidStringIdContext.class);
		}
		public XuidStringIdContext xuidStringId(int i) {
			return getRuleContext(XuidStringIdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterXid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitXid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitXid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5756);
			((XidContext)_localctx).globalTableUid = xuidStringId();
			setState(5763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5757);
				match(COMMA);
				setState(5758);
				((XidContext)_localctx).qualifier = xuidStringId();
				setState(5761);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5759);
					match(COMMA);
					setState(5760);
					((XidContext)_localctx).idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XuidStringIdContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(SpeakQlParser.BIT_STRING, 0); }
		public List<TerminalNode> HEXADECIMAL_LITERAL() { return getTokens(SpeakQlParser.HEXADECIMAL_LITERAL); }
		public TerminalNode HEXADECIMAL_LITERAL(int i) {
			return getToken(SpeakQlParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xuidStringId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterXuidStringId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitXuidStringId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitXuidStringId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XuidStringIdContext xuidStringId() throws RecognitionException {
		XuidStringIdContext _localctx = new XuidStringIdContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_xuidStringId);
		int _la;
		try {
			setState(5772);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5765);
				match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5766);
				match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5768); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5767);
					match(HEXADECIMAL_LITERAL);
					}
					}
					setState(5770); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthPluginContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAuthPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAuthPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAuthPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthPluginContext authPlugin() throws RecognitionException {
		AuthPluginContext _localctx = new AuthPluginContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_authPlugin);
		try {
			setState(5776);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,829,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5774);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5775);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidContext extends ParserRuleContext {
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(SpeakQlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidContext uid() throws RecognitionException {
		UidContext _localctx = new UidContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_uid);
		try {
			setState(5781);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,830,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5778);
				simpleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5779);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5780);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(SpeakQlParser.ID, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TransactionLevelBaseContext transactionLevelBase() {
			return getRuleContext(TransactionLevelBaseContext.class,0);
		}
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public PrivilegesBaseContext privilegesBase() {
			return getRuleContext(PrivilegesBaseContext.class,0);
		}
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public DataTypeBaseContext dataTypeBase() {
			return getRuleContext(DataTypeBaseContext.class,0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSimpleId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSimpleId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSimpleId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleIdContext simpleId() throws RecognitionException {
		SimpleIdContext _localctx = new SimpleIdContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_simpleId);
		try {
			setState(5792);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,831,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5783);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5784);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5785);
				transactionLevelBase();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5786);
				engineName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5787);
				privilegesBase();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5788);
				intervalTypeBase();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5789);
				dataTypeBase();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5790);
				keywordsCanBeId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5791);
				functionNameBase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DottedIdContext extends ParserRuleContext {
		public TerminalNode DOT_ID() { return getToken(SpeakQlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(SpeakQlParser.DOT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dottedId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDottedId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDottedId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDottedId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DottedIdContext dottedId() throws RecognitionException {
		DottedIdContext _localctx = new DottedIdContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_dottedId);
		try {
			setState(5797);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5794);
				match(DOT_ID);
				}
				break;
			case DOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5795);
				match(DOT);
				setState(5796);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalLiteralContext extends ParserRuleContext {
		public TerminalNode DECIMAL_LITERAL() { return getToken(SpeakQlParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(SpeakQlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(SpeakQlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(SpeakQlParser.TWO_DECIMAL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(SpeakQlParser.REAL_LITERAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_decimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5799);
			_la = _input.LA(1);
			if ( !(((((_la - 1103)) & ~0x3f) == 0 && ((1L << (_la - 1103)) & ((1L << (ZERO_DECIMAL - 1103)) | (1L << (ONE_DECIMAL - 1103)) | (1L << (TWO_DECIMAL - 1103)) | (1L << (DECIMAL_LITERAL - 1103)) | (1L << (REAL_LITERAL - 1103)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileSizeLiteralContext extends ParserRuleContext {
		public TerminalNode FILESIZE_LITERAL() { return getToken(SpeakQlParser.FILESIZE_LITERAL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileSizeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFileSizeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFileSizeLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFileSizeLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileSizeLiteralContext fileSizeLiteral() throws RecognitionException {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_fileSizeLiteral);
		try {
			setState(5803);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESIZE_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5801);
				match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5802);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(SpeakQlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(SpeakQlParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(SpeakQlParser.START_NATIONAL_STRING_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(SpeakQlParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode COLLATE() { return getToken(SpeakQlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			setState(5828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,840,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5810);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(5806);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(5805);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(5808);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(5809);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5813); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5812);
						match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5815); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,836,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5822);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(5818);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(5817);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(5820);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(5821);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5826);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,839,_ctx) ) {
				case 1:
					{
					setState(5824);
					match(COLLATE);
					setState(5825);
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(SpeakQlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SpeakQlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitBooleanLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5830);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(SpeakQlParser.HEXADECIMAL_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(SpeakQlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterHexadecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitHexadecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitHexadecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_hexadecimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5833);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				setState(5832);
				match(STRING_CHARSET_NAME);
				}
			}

			setState(5835);
			match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullNotnullContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(SpeakQlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(SpeakQlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(SpeakQlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullNotnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterNullNotnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitNullNotnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitNullNotnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullNotnullContext nullNotnull() throws RecognitionException {
		NullNotnullContext _localctx = new NullNotnullContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_nullNotnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5837);
				match(NOT);
				}
			}

			setState(5840);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token nullLiteral;
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(SpeakQlParser.MINUS, 0); }
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return getRuleContext(HexadecimalLiteralContext.class,0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return getRuleContext(BooleanLiteralContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(SpeakQlParser.REAL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(SpeakQlParser.BIT_STRING, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(SpeakQlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(SpeakQlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(SpeakQlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_constant);
		int _la;
		try {
			setState(5854);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,844,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5842);
				stringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5843);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5844);
				match(MINUS);
				setState(5845);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5846);
				hexadecimalLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5847);
				booleanLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5848);
				match(REAL_LITERAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5849);
				match(BIT_STRING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5850);
					match(NOT);
					}
				}

				setState(5853);
				((ConstantContext)_localctx).nullLiteral = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					((ConstantContext)_localctx).nullLiteral = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpatialDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(SpeakQlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(SpeakQlParser.GEOMCOLLECTION, 0); }
		public TerminalNode LINESTRING() { return getToken(SpeakQlParser.LINESTRING, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(SpeakQlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(SpeakQlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(SpeakQlParser.MULTIPOLYGON, 0); }
		public TerminalNode POINT() { return getToken(SpeakQlParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(SpeakQlParser.POLYGON, 0); }
		public TerminalNode JSON() { return getToken(SpeakQlParser.JSON, 0); }
		public TerminalNode GEOMETRY() { return getToken(SpeakQlParser.GEOMETRY, 0); }
		public SpatialDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSpatialDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSpatialDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSpatialDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongVarbinaryDataTypeContext extends DataTypeContext {
		public TerminalNode LONG() { return getToken(SpeakQlParser.LONG, 0); }
		public TerminalNode VARBINARY() { return getToken(SpeakQlParser.VARBINARY, 0); }
		public LongVarbinaryDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLongVarbinaryDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLongVarbinaryDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLongVarbinaryDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollectionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public CollectionOptionsContext collectionOptions() {
			return getRuleContext(CollectionOptionsContext.class,0);
		}
		public TerminalNode ENUM() { return getToken(SpeakQlParser.ENUM, 0); }
		public List<TerminalNode> SET() { return getTokens(SpeakQlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(SpeakQlParser.SET, i);
		}
		public TerminalNode BINARY() { return getToken(SpeakQlParser.BINARY, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(SpeakQlParser.CHARACTER, 0); }
		public TerminalNode CHARSET() { return getToken(SpeakQlParser.CHARSET, 0); }
		public CollectionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCollectionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCollectionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCollectionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalVaryingStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(SpeakQlParser.NATIONAL, 0); }
		public TerminalNode VARYING() { return getToken(SpeakQlParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(SpeakQlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(SpeakQlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(SpeakQlParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterNationalVaryingStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitNationalVaryingStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitNationalVaryingStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DimensionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode TINYINT() { return getToken(SpeakQlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(SpeakQlParser.SMALLINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(SpeakQlParser.MEDIUMINT, 0); }
		public TerminalNode INT() { return getToken(SpeakQlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(SpeakQlParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(SpeakQlParser.BIGINT, 0); }
		public TerminalNode MIDDLEINT() { return getToken(SpeakQlParser.MIDDLEINT, 0); }
		public TerminalNode INT1() { return getToken(SpeakQlParser.INT1, 0); }
		public TerminalNode INT2() { return getToken(SpeakQlParser.INT2, 0); }
		public TerminalNode INT3() { return getToken(SpeakQlParser.INT3, 0); }
		public TerminalNode INT4() { return getToken(SpeakQlParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(SpeakQlParser.INT8, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode ZEROFILL() { return getToken(SpeakQlParser.ZEROFILL, 0); }
		public TerminalNode SIGNED() { return getToken(SpeakQlParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(SpeakQlParser.UNSIGNED, 0); }
		public TerminalNode REAL() { return getToken(SpeakQlParser.REAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(SpeakQlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(SpeakQlParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(SpeakQlParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(SpeakQlParser.DEC, 0); }
		public TerminalNode FIXED() { return getToken(SpeakQlParser.FIXED, 0); }
		public TerminalNode NUMERIC() { return getToken(SpeakQlParser.NUMERIC, 0); }
		public TerminalNode FLOAT() { return getToken(SpeakQlParser.FLOAT, 0); }
		public TerminalNode FLOAT4() { return getToken(SpeakQlParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(SpeakQlParser.FLOAT8, 0); }
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public TerminalNode BIT() { return getToken(SpeakQlParser.BIT, 0); }
		public TerminalNode TIME() { return getToken(SpeakQlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SpeakQlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(SpeakQlParser.DATETIME, 0); }
		public TerminalNode BINARY() { return getToken(SpeakQlParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(SpeakQlParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(SpeakQlParser.BLOB, 0); }
		public TerminalNode YEAR() { return getToken(SpeakQlParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDimensionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDimensionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDimensionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(SpeakQlParser.CHAR, 0); }
		public List<TerminalNode> CHARACTER() { return getTokens(SpeakQlParser.CHARACTER); }
		public TerminalNode CHARACTER(int i) {
			return getToken(SpeakQlParser.CHARACTER, i);
		}
		public TerminalNode VARCHAR() { return getToken(SpeakQlParser.VARCHAR, 0); }
		public TerminalNode TINYTEXT() { return getToken(SpeakQlParser.TINYTEXT, 0); }
		public TerminalNode TEXT() { return getToken(SpeakQlParser.TEXT, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(SpeakQlParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGTEXT() { return getToken(SpeakQlParser.LONGTEXT, 0); }
		public TerminalNode NCHAR() { return getToken(SpeakQlParser.NCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(SpeakQlParser.NVARCHAR, 0); }
		public TerminalNode LONG() { return getToken(SpeakQlParser.LONG, 0); }
		public TerminalNode VARYING() { return getToken(SpeakQlParser.VARYING, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public List<TerminalNode> BINARY() { return getTokens(SpeakQlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(SpeakQlParser.BINARY, i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(SpeakQlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(SpeakQlParser.CHARSET, 0); }
		public StringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongVarcharDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode LONG() { return getToken(SpeakQlParser.LONG, 0); }
		public TerminalNode VARCHAR() { return getToken(SpeakQlParser.VARCHAR, 0); }
		public TerminalNode BINARY() { return getToken(SpeakQlParser.BINARY, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(SpeakQlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(SpeakQlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(SpeakQlParser.CHARSET, 0); }
		public LongVarcharDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLongVarcharDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLongVarcharDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLongVarcharDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(SpeakQlParser.NATIONAL, 0); }
		public TerminalNode VARCHAR() { return getToken(SpeakQlParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(SpeakQlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(SpeakQlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(SpeakQlParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterNationalStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitNationalStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitNationalStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode DATE() { return getToken(SpeakQlParser.DATE, 0); }
		public TerminalNode TINYBLOB() { return getToken(SpeakQlParser.TINYBLOB, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(SpeakQlParser.MEDIUMBLOB, 0); }
		public TerminalNode LONGBLOB() { return getToken(SpeakQlParser.LONGBLOB, 0); }
		public TerminalNode BOOL() { return getToken(SpeakQlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(SpeakQlParser.BOOLEAN, 0); }
		public TerminalNode SERIAL() { return getToken(SpeakQlParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSimpleDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSimpleDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSimpleDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_dataType);
		int _la;
		try {
			setState(5987);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,879,_ctx) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5856);
				((StringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (CHAR - 225)) | (1L << (VARCHAR - 225)) | (1L << (NVARCHAR - 225)) | (1L << (LONG - 225)) | (1L << (TINYTEXT - 225)) | (1L << (TEXT - 225)) | (1L << (MEDIUMTEXT - 225)) | (1L << (LONGTEXT - 225)))) != 0) || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARYING) {
					{
					setState(5857);
					match(VARYING);
					}
				}

				setState(5861);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,846,_ctx) ) {
				case 1:
					{
					setState(5860);
					lengthOneDimension();
					}
					break;
				}
				setState(5864);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,847,_ctx) ) {
				case 1:
					{
					setState(5863);
					match(BINARY);
					}
					break;
				}
				setState(5872);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,849,_ctx) ) {
				case 1:
					{
					setState(5869);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(5866);
						match(CHARACTER);
						setState(5867);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(5868);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5871);
					charsetName();
					}
					break;
				}
				setState(5877);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,850,_ctx) ) {
				case 1:
					{
					setState(5874);
					match(COLLATE);
					setState(5875);
					collationName();
					}
					break;
				case 2:
					{
					setState(5876);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5879);
				match(NATIONAL);
				setState(5880);
				((NationalStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5882);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,851,_ctx) ) {
				case 1:
					{
					setState(5881);
					lengthOneDimension();
					}
					break;
				}
				setState(5885);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,852,_ctx) ) {
				case 1:
					{
					setState(5884);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5887);
				match(NCHAR);
				setState(5888);
				((NationalStringDataTypeContext)_localctx).typeName = match(VARCHAR);
				setState(5890);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,853,_ctx) ) {
				case 1:
					{
					setState(5889);
					lengthOneDimension();
					}
					break;
				}
				setState(5893);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,854,_ctx) ) {
				case 1:
					{
					setState(5892);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5895);
				match(NATIONAL);
				setState(5896);
				((NationalVaryingStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5897);
				match(VARYING);
				setState(5899);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,855,_ctx) ) {
				case 1:
					{
					setState(5898);
					lengthOneDimension();
					}
					break;
				}
				setState(5902);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,856,_ctx) ) {
				case 1:
					{
					setState(5901);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5904);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (TINYINT - 199)) | (1L << (SMALLINT - 199)) | (1L << (MEDIUMINT - 199)) | (1L << (MIDDLEINT - 199)) | (1L << (INT - 199)) | (1L << (INT1 - 199)) | (1L << (INT2 - 199)) | (1L << (INT3 - 199)) | (1L << (INT4 - 199)) | (1L << (INT8 - 199)) | (1L << (INTEGER - 199)) | (1L << (BIGINT - 199)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5906);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,857,_ctx) ) {
				case 1:
					{
					setState(5905);
					lengthOneDimension();
					}
					break;
				}
				setState(5909);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
				case 1:
					{
					setState(5908);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5911);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5914);
				((DimensionDataTypeContext)_localctx).typeName = match(REAL);
				setState(5916);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,860,_ctx) ) {
				case 1:
					{
					setState(5915);
					lengthTwoDimension();
					}
					break;
				}
				setState(5919);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,861,_ctx) ) {
				case 1:
					{
					setState(5918);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5921);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5924);
				((DimensionDataTypeContext)_localctx).typeName = match(DOUBLE);
				setState(5926);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5925);
					match(PRECISION);
					}
				}

				setState(5929);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,864,_ctx) ) {
				case 1:
					{
					setState(5928);
					lengthTwoDimension();
					}
					break;
				}
				setState(5932);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,865,_ctx) ) {
				case 1:
					{
					setState(5931);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5935);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5934);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5937);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (FLOAT - 214)) | (1L << (FLOAT4 - 214)) | (1L << (FLOAT8 - 214)) | (1L << (DECIMAL - 214)) | (1L << (DEC - 214)) | (1L << (NUMERIC - 214)))) != 0) || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5939);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,867,_ctx) ) {
				case 1:
					{
					setState(5938);
					lengthTwoOptionalDimension();
					}
					break;
				}
				setState(5942);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,868,_ctx) ) {
				case 1:
					{
					setState(5941);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5945);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5944);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5947);
				((SimpleDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TINYBLOB - 220)) | (1L << (MEDIUMBLOB - 220)) | (1L << (LONGBLOB - 220)) | (1L << (SERIAL - 220)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5948);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & ((1L << (TIME - 221)) | (1L << (TIMESTAMP - 221)) | (1L << (DATETIME - 221)) | (1L << (YEAR - 221)) | (1L << (BINARY - 221)) | (1L << (VARBINARY - 221)) | (1L << (BLOB - 221)))) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5950);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,870,_ctx) ) {
				case 1:
					{
					setState(5949);
					lengthOneDimension();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5952);
				((CollectionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5953);
				collectionOptions();
				setState(5955);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,871,_ctx) ) {
				case 1:
					{
					setState(5954);
					match(BINARY);
					}
					break;
				}
				setState(5963);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,873,_ctx) ) {
				case 1:
					{
					setState(5960);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(5957);
						match(CHARACTER);
						setState(5958);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(5959);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5962);
					charsetName();
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5965);
				((SpatialDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (GEOMETRYCOLLECTION - 772)) | (1L << (GEOMCOLLECTION - 772)) | (1L << (GEOMETRY - 772)) | (1L << (LINESTRING - 772)) | (1L << (MULTILINESTRING - 772)) | (1L << (MULTIPOINT - 772)) | (1L << (MULTIPOLYGON - 772)) | (1L << (POINT - 772)) | (1L << (POLYGON - 772)))) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 13:
				_localctx = new LongVarcharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5966);
				((LongVarcharDataTypeContext)_localctx).typeName = match(LONG);
				setState(5968);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARCHAR) {
					{
					setState(5967);
					match(VARCHAR);
					}
				}

				setState(5971);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,875,_ctx) ) {
				case 1:
					{
					setState(5970);
					match(BINARY);
					}
					break;
				}
				setState(5979);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,877,_ctx) ) {
				case 1:
					{
					setState(5976);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(5973);
						match(CHARACTER);
						setState(5974);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(5975);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5978);
					charsetName();
					}
					break;
				}
				setState(5983);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
				case 1:
					{
					setState(5981);
					match(COLLATE);
					setState(5982);
					collationName();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new LongVarbinaryDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5985);
				match(LONG);
				setState(5986);
				match(VARBINARY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionOptionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(SpeakQlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(SpeakQlParser.STRING_LITERAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCollectionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCollectionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCollectionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionOptionsContext collectionOptions() throws RecognitionException {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_collectionOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5989);
			match(LR_BRACKET);
			setState(5990);
			match(STRING_LITERAL);
			setState(5995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5991);
				match(COMMA);
				setState(5992);
				match(STRING_LITERAL);
				}
				}
				setState(5997);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5998);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertedDataTypeContext extends ParserRuleContext {
		public Token typeName;
		public TerminalNode BINARY() { return getToken(SpeakQlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(SpeakQlParser.NCHAR, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(SpeakQlParser.CHAR, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(SpeakQlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(SpeakQlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(SpeakQlParser.CHARSET, 0); }
		public TerminalNode DATE() { return getToken(SpeakQlParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(SpeakQlParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(SpeakQlParser.TIME, 0); }
		public TerminalNode JSON() { return getToken(SpeakQlParser.JSON, 0); }
		public TerminalNode DECIMAL() { return getToken(SpeakQlParser.DECIMAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode SIGNED() { return getToken(SpeakQlParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(SpeakQlParser.UNSIGNED, 0); }
		public TerminalNode INTEGER() { return getToken(SpeakQlParser.INTEGER, 0); }
		public TerminalNode ARRAY() { return getToken(SpeakQlParser.ARRAY, 0); }
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertedDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterConvertedDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitConvertedDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitConvertedDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertedDataTypeContext convertedDataType() throws RecognitionException {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_convertedDataType);
		int _la;
		try {
			setState(6027);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,887,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6000);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6002);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6001);
					lengthOneDimension();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6004);
				((ConvertedDataTypeContext)_localctx).typeName = match(CHAR);
				setState(6006);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6005);
					lengthOneDimension();
					}
				}

				setState(6014);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHARSET) {
					{
					setState(6011);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(6008);
						match(CHARACTER);
						setState(6009);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(6010);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6013);
					charsetName();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6016);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (DATETIME - 220)))) != 0) || _la==JSON) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6017);
				((ConvertedDataTypeContext)_localctx).typeName = match(DECIMAL);
				setState(6019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6018);
					lengthTwoDimension();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6021);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6023);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(6022);
					match(INTEGER);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6025);
				match(UNSIGNED);
				setState(6026);
				match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthOneDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthOneDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLengthOneDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLengthOneDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLengthOneDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_lengthOneDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6029);
			match(LR_BRACKET);
			setState(6030);
			decimalLiteral();
			setState(6031);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(SpeakQlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLengthTwoDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLengthTwoDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLengthTwoDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6033);
			match(LR_BRACKET);
			setState(6034);
			decimalLiteral();
			setState(6035);
			match(COMMA);
			setState(6036);
			decimalLiteral();
			setState(6037);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoOptionalDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(SpeakQlParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoOptionalDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLengthTwoOptionalDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLengthTwoOptionalDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLengthTwoOptionalDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() throws RecognitionException {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6039);
			match(LR_BRACKET);
			setState(6040);
			decimalLiteral();
			setState(6043);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6041);
				match(COMMA);
				setState(6042);
				decimalLiteral();
				}
			}

			setState(6045);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidListContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uidList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUidList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUidList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUidList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidListContext uidList() throws RecognitionException {
		UidListContext _localctx = new UidListContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_uidList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6047);
			uid();
			setState(6052);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,889,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6048);
					match(COMMA);
					setState(6049);
					uid();
					}
					} 
				}
				setState(6054);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,889,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablesContext tables() throws RecognitionException {
		TablesContext _localctx = new TablesContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_tables);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6055);
			tableName();
			setState(6060);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,890,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6056);
					match(COMMA);
					setState(6057);
					tableName();
					}
					} 
				}
				setState(6062);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,890,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNamesContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public List<IndexColumnNameContext> indexColumnName() {
			return getRuleContexts(IndexColumnNameContext.class);
		}
		public IndexColumnNameContext indexColumnName(int i) {
			return getRuleContext(IndexColumnNameContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIndexColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIndexColumnNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIndexColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNamesContext indexColumnNames() throws RecognitionException {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_indexColumnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6063);
			match(LR_BRACKET);
			setState(6064);
			indexColumnName();
			setState(6069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6065);
				match(COMMA);
				setState(6066);
				indexColumnName();
				}
				}
				setState(6071);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6072);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6074);
			expression(0);
			setState(6079);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6075);
				match(COMMA);
				setState(6076);
				expression(0);
				}
				}
				setState(6081);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsWithDefaultsContext extends ParserRuleContext {
		public List<ExpressionOrDefaultContext> expressionOrDefault() {
			return getRuleContexts(ExpressionOrDefaultContext.class);
		}
		public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return getRuleContext(ExpressionOrDefaultContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsWithDefaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterExpressionsWithDefaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitExpressionsWithDefaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitExpressionsWithDefaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsWithDefaultsContext expressionsWithDefaults() throws RecognitionException {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_expressionsWithDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6082);
			expressionOrDefault();
			setState(6087);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6083);
				match(COMMA);
				setState(6084);
				expressionOrDefault();
				}
				}
				setState(6089);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constants; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterConstants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitConstants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitConstants(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantsContext constants() throws RecognitionException {
		ConstantsContext _localctx = new ConstantsContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_constants);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6090);
			constant();
			setState(6095);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6091);
				match(COMMA);
				setState(6092);
				constant();
				}
				}
				setState(6097);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleStringsContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(SpeakQlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(SpeakQlParser.STRING_LITERAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStrings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSimpleStrings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSimpleStrings(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSimpleStrings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleStringsContext simpleStrings() throws RecognitionException {
		SimpleStringsContext _localctx = new SimpleStringsContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_simpleStrings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6098);
			match(STRING_LITERAL);
			setState(6103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6099);
				match(COMMA);
				setState(6100);
				match(STRING_LITERAL);
				}
				}
				setState(6105);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserVariablesContext extends ParserRuleContext {
		public List<TerminalNode> LOCAL_ID() { return getTokens(SpeakQlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(SpeakQlParser.LOCAL_ID, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUserVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUserVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUserVariables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserVariablesContext userVariables() throws RecognitionException {
		UserVariablesContext _localctx = new UserVariablesContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_userVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6106);
			match(LOCAL_ID);
			setState(6111);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6107);
				match(COMMA);
				setState(6108);
				match(LOCAL_ID);
				}
				}
				setState(6113);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultValueContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(SpeakQlParser.NULL_LITERAL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public List<CurrentTimestampContext> currentTimestamp() {
			return getRuleContexts(CurrentTimestampContext.class);
		}
		public CurrentTimestampContext currentTimestamp(int i) {
			return getRuleContext(CurrentTimestampContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode ON() { return getToken(SpeakQlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(SpeakQlParser.UPDATE, 0); }
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDefaultValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDefaultValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDefaultValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultValueContext defaultValue() throws RecognitionException {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_defaultValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6124);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,898,_ctx) ) {
			case 1:
				{
				setState(6114);
				match(NULL_LITERAL);
				}
				break;
			case 2:
				{
				setState(6116);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,897,_ctx) ) {
				case 1:
					{
					setState(6115);
					unaryOperator();
					}
					break;
				}
				setState(6118);
				constant();
				}
				break;
			case 3:
				{
				setState(6119);
				currentTimestamp();
				}
				break;
			case 4:
				{
				setState(6120);
				match(LR_BRACKET);
				setState(6121);
				expression(0);
				setState(6122);
				match(RR_BRACKET);
				}
				break;
			}
			setState(6129);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
			case 1:
				{
				setState(6126);
				match(ON);
				setState(6127);
				match(UPDATE);
				setState(6128);
				currentTimestamp();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentTimestampContext extends ParserRuleContext {
		public TerminalNode NOW() { return getToken(SpeakQlParser.NOW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SpeakQlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(SpeakQlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(SpeakQlParser.LOCALTIMESTAMP, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentTimestamp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCurrentTimestamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCurrentTimestamp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCurrentTimestamp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentTimestampContext currentTimestamp() throws RecognitionException {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_currentTimestamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6145);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
				{
				setState(6131);
				_la = _input.LA(1);
				if ( !(((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (CURRENT_TIMESTAMP - 315)) | (1L << (LOCALTIME - 315)) | (1L << (LOCALTIMESTAMP - 315)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6137);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,901,_ctx) ) {
				case 1:
					{
					setState(6132);
					match(LR_BRACKET);
					setState(6134);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 1103)) & ~0x3f) == 0 && ((1L << (_la - 1103)) & ((1L << (ZERO_DECIMAL - 1103)) | (1L << (ONE_DECIMAL - 1103)) | (1L << (TWO_DECIMAL - 1103)) | (1L << (DECIMAL_LITERAL - 1103)) | (1L << (REAL_LITERAL - 1103)))) != 0)) {
						{
						setState(6133);
						decimalLiteral();
						}
					}

					setState(6136);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case NOW:
				{
				setState(6139);
				match(NOW);
				setState(6140);
				match(LR_BRACKET);
				setState(6142);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 1103)) & ~0x3f) == 0 && ((1L << (_la - 1103)) & ((1L << (ZERO_DECIMAL - 1103)) | (1L << (ONE_DECIMAL - 1103)) | (1L << (TWO_DECIMAL - 1103)) | (1L << (DECIMAL_LITERAL - 1103)) | (1L << (REAL_LITERAL - 1103)))) != 0)) {
					{
					setState(6141);
					decimalLiteral();
					}
				}

				setState(6144);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionOrDefaultContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SpeakQlParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionOrDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterExpressionOrDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitExpressionOrDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitExpressionOrDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionOrDefaultContext expressionOrDefault() throws RecognitionException {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_expressionOrDefault);
		try {
			setState(6149);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,904,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6147);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6148);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(SpeakQlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SpeakQlParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIfExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIfExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6151);
			match(IF);
			setState(6152);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(SpeakQlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(SpeakQlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(SpeakQlParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIfNotExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6154);
			match(IF);
			setState(6155);
			match(NOT);
			setState(6156);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
	 
		public FunctionCallContext() { }
		public void copyFrom(FunctionCallContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecificFunctionCallContext extends FunctionCallContext {
		public SpecificFunctionContext specificFunction() {
			return getRuleContext(SpecificFunctionContext.class,0);
		}
		public SpecificFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSpecificFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSpecificFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSpecificFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordFunctionCallContext extends FunctionCallContext {
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public PasswordFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPasswordFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPasswordFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPasswordFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UdfFunctionCallContext extends FunctionCallContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public UdfFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUdfFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUdfFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUdfFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NonAggregateFunctionCallContext extends FunctionCallContext {
		public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
			return getRuleContext(NonAggregateWindowedFunctionContext.class,0);
		}
		public NonAggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterNonAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitNonAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitNonAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AggregateFunctionCallContext extends FunctionCallContext {
		public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return getRuleContext(AggregateWindowedFunctionContext.class,0);
		}
		public AggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ScalarFunctionCallContext extends FunctionCallContext {
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public ScalarFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterScalarFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitScalarFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitScalarFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_functionCall);
		try {
			setState(6176);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,907,_ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6158);
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6159);
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new NonAggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6160);
				nonAggregateWindowedFunction();
				}
				break;
			case 4:
				_localctx = new ScalarFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6161);
				scalarFunctionName();
				setState(6162);
				match(LR_BRACKET);
				setState(6164);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,905,_ctx) ) {
				case 1:
					{
					setState(6163);
					functionArgs();
					}
					break;
				}
				setState(6166);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new UdfFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6168);
				fullId();
				setState(6169);
				match(LR_BRACKET);
				setState(6171);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,906,_ctx) ) {
				case 1:
					{
					setState(6170);
					functionArgs();
					}
					break;
				}
				setState(6173);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new PasswordFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6175);
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificFunctionContext extends ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificFunction; }
	 
		public SpecificFunctionContext() { }
		public void copyFrom(SpecificFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PositionFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		public TerminalNode POSITION() { return getToken(SpeakQlParser.POSITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode IN() { return getToken(SpeakQlParser.IN, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPositionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPositionFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPositionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TrimFunctionCallContext extends SpecificFunctionContext {
		public Token positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		public TerminalNode TRIM() { return getToken(SpeakQlParser.TRIM, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(SpeakQlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode BOTH() { return getToken(SpeakQlParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(SpeakQlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(SpeakQlParser.TRAILING, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTrimFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTrimFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTrimFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonValueFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode JSON_VALUE() { return getToken(SpeakQlParser.JSON_VALUE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(SpeakQlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode RETURNING() { return getToken(SpeakQlParser.RETURNING, 0); }
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(SpeakQlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(SpeakQlParser.ON, i);
		}
		public TerminalNode EMPTY() { return getToken(SpeakQlParser.EMPTY, 0); }
		public List<TerminalNode> ERROR() { return getTokens(SpeakQlParser.ERROR); }
		public TerminalNode ERROR(int i) {
			return getToken(SpeakQlParser.ERROR, i);
		}
		public List<TerminalNode> NULL_LITERAL() { return getTokens(SpeakQlParser.NULL_LITERAL); }
		public TerminalNode NULL_LITERAL(int i) {
			return getToken(SpeakQlParser.NULL_LITERAL, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(SpeakQlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(SpeakQlParser.DEFAULT, i);
		}
		public List<DefaultValueContext> defaultValue() {
			return getRuleContexts(DefaultValueContext.class);
		}
		public DefaultValueContext defaultValue(int i) {
			return getRuleContext(DefaultValueContext.class,i);
		}
		public JsonValueFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterJsonValueFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitJsonValueFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitJsonValueFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(SpeakQlParser.CASE, 0); }
		public TerminalNode END() { return getToken(SpeakQlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(SpeakQlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCaseFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCaseFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCaseFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExtractFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public TerminalNode EXTRACT() { return getToken(SpeakQlParser.EXTRACT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SpeakQlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterExtractFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitExtractFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitExtractFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DataTypeFunctionCallContext extends SpecificFunctionContext {
		public Token separator;
		public TerminalNode CONVERT() { return getToken(SpeakQlParser.CONVERT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(SpeakQlParser.COMMA, 0); }
		public TerminalNode USING() { return getToken(SpeakQlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CAST() { return getToken(SpeakQlParser.CAST, 0); }
		public TerminalNode AS() { return getToken(SpeakQlParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDataTypeFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDataTypeFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDataTypeFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ValuesFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode VALUES() { return getToken(SpeakQlParser.VALUES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterValuesFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitValuesFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitValuesFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseExpressionFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(SpeakQlParser.CASE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(SpeakQlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(SpeakQlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseExpressionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCaseExpressionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCaseExpressionFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCaseExpressionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CURRENT_DATE() { return getToken(SpeakQlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(SpeakQlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SpeakQlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(SpeakQlParser.CURRENT_USER, 0); }
		public TerminalNode LOCALTIME() { return getToken(SpeakQlParser.LOCALTIME, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSimpleFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSimpleFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSimpleFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CHAR() { return getToken(SpeakQlParser.CHAR, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(SpeakQlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCharFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCharFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCharFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WeightFunctionCallContext extends SpecificFunctionContext {
		public Token stringFormat;
		public TerminalNode WEIGHT_STRING() { return getToken(SpeakQlParser.WEIGHT_STRING, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SpeakQlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SpeakQlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SpeakQlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SpeakQlParser.RR_BRACKET, i);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(SpeakQlParser.AS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public LevelsInWeightStringContext levelsInWeightString() {
			return getRuleContext(LevelsInWeightStringContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(SpeakQlParser.CHAR, 0); }
		public TerminalNode BINARY() { return getToken(SpeakQlParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterWeightFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitWeightFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitWeightFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GetFormatFunctionCallContext extends SpecificFunctionContext {
		public Token datetimeFormat;
		public TerminalNode GET_FORMAT() { return getToken(SpeakQlParser.GET_FORMAT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(SpeakQlParser.COMMA, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode DATE() { return getToken(SpeakQlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(SpeakQlParser.TIME, 0); }
		public TerminalNode DATETIME() { return getToken(SpeakQlParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterGetFormatFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitGetFormatFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitGetFormatFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubstrFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(SpeakQlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode SUBSTR() { return getToken(SpeakQlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(SpeakQlParser.SUBSTRING, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FOR() { return getToken(SpeakQlParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSubstrFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSubstrFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSubstrFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificFunctionContext specificFunction() throws RecognitionException {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_specificFunction);
		int _la;
		try {
			setState(6370);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,933,_ctx) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6178);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (CURRENT_DATE - 313)) | (1L << (CURRENT_TIME - 313)) | (1L << (CURRENT_TIMESTAMP - 313)) | (1L << (LOCALTIME - 313)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6181);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,908,_ctx) ) {
				case 1:
					{
					setState(6179);
					match(LR_BRACKET);
					setState(6180);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6183);
				match(CONVERT);
				setState(6184);
				match(LR_BRACKET);
				setState(6185);
				expression(0);
				setState(6186);
				((DataTypeFunctionCallContext)_localctx).separator = match(COMMA);
				setState(6187);
				convertedDataType();
				setState(6188);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6190);
				match(CONVERT);
				setState(6191);
				match(LR_BRACKET);
				setState(6192);
				expression(0);
				setState(6193);
				match(USING);
				setState(6194);
				charsetName();
				setState(6195);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6197);
				match(CAST);
				setState(6198);
				match(LR_BRACKET);
				setState(6199);
				expression(0);
				setState(6200);
				match(AS);
				setState(6201);
				convertedDataType();
				setState(6202);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6204);
				match(VALUES);
				setState(6205);
				match(LR_BRACKET);
				setState(6206);
				fullColumnName();
				setState(6207);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseExpressionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6209);
				match(CASE);
				setState(6210);
				expression(0);
				setState(6212); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6211);
					caseFuncAlternative();
					}
					}
					setState(6214); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(6218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(6216);
					match(ELSE);
					setState(6217);
					((CaseExpressionFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(6220);
				match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(6222);
				match(CASE);
				setState(6224); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6223);
					caseFuncAlternative();
					}
					}
					setState(6226); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(6230);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(6228);
					match(ELSE);
					setState(6229);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(6232);
				match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(6234);
				match(CHAR);
				setState(6235);
				match(LR_BRACKET);
				setState(6236);
				functionArgs();
				setState(6239);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(6237);
					match(USING);
					setState(6238);
					charsetName();
					}
				}

				setState(6241);
				match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(6243);
				match(POSITION);
				setState(6244);
				match(LR_BRACKET);
				setState(6247);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,914,_ctx) ) {
				case 1:
					{
					setState(6245);
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6246);
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				setState(6249);
				match(IN);
				setState(6252);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,915,_ctx) ) {
				case 1:
					{
					setState(6250);
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6251);
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				setState(6254);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(6256);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6257);
				match(LR_BRACKET);
				setState(6260);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,916,_ctx) ) {
				case 1:
					{
					setState(6258);
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6259);
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6262);
				match(FROM);
				setState(6265);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,917,_ctx) ) {
				case 1:
					{
					setState(6263);
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					setState(6264);
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6272);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(6267);
					match(FOR);
					setState(6270);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,918,_ctx) ) {
					case 1:
						{
						setState(6268);
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						setState(6269);
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				setState(6274);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(6276);
				match(TRIM);
				setState(6277);
				match(LR_BRACKET);
				setState(6278);
				((TrimFunctionCallContext)_localctx).positioinForm = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6281);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,920,_ctx) ) {
				case 1:
					{
					setState(6279);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6280);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6283);
				match(FROM);
				setState(6286);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,921,_ctx) ) {
				case 1:
					{
					setState(6284);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6285);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6288);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(6290);
				match(TRIM);
				setState(6291);
				match(LR_BRACKET);
				setState(6294);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,922,_ctx) ) {
				case 1:
					{
					setState(6292);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6293);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6296);
				match(FROM);
				setState(6299);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,923,_ctx) ) {
				case 1:
					{
					setState(6297);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6298);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6301);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(6303);
				match(WEIGHT_STRING);
				setState(6304);
				match(LR_BRACKET);
				setState(6307);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,924,_ctx) ) {
				case 1:
					{
					setState(6305);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(6306);
					expression(0);
					}
					break;
				}
				setState(6315);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6309);
					match(AS);
					setState(6310);
					((WeightFunctionCallContext)_localctx).stringFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6311);
					match(LR_BRACKET);
					setState(6312);
					decimalLiteral();
					setState(6313);
					match(RR_BRACKET);
					}
				}

				setState(6318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(6317);
					levelsInWeightString();
					}
				}

				setState(6320);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(6322);
				match(EXTRACT);
				setState(6323);
				match(LR_BRACKET);
				setState(6324);
				intervalType();
				setState(6325);
				match(FROM);
				setState(6328);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,927,_ctx) ) {
				case 1:
					{
					setState(6326);
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6327);
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6330);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(6332);
				match(GET_FORMAT);
				setState(6333);
				match(LR_BRACKET);
				setState(6334);
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (DATETIME - 220)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6335);
				match(COMMA);
				setState(6336);
				stringLiteral();
				setState(6337);
				match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new JsonValueFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(6339);
				match(JSON_VALUE);
				setState(6340);
				match(LR_BRACKET);
				setState(6341);
				expression(0);
				setState(6342);
				match(COMMA);
				setState(6343);
				expression(0);
				setState(6346);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING) {
					{
					setState(6344);
					match(RETURNING);
					setState(6345);
					convertedDataType();
					}
				}

				setState(6356);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,930,_ctx) ) {
				case 1:
					{
					setState(6352);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NULL_LITERAL:
						{
						setState(6348);
						match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						setState(6349);
						match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						setState(6350);
						match(DEFAULT);
						setState(6351);
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6354);
					match(ON);
					setState(6355);
					match(EMPTY);
					}
					break;
				}
				setState(6366);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==NULL_LITERAL || _la==ERROR) {
					{
					setState(6362);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NULL_LITERAL:
						{
						setState(6358);
						match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						setState(6359);
						match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						setState(6360);
						match(DEFAULT);
						setState(6361);
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6364);
					match(ON);
					setState(6365);
					match(ERROR);
					}
				}

				setState(6368);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseFuncAlternativeContext extends ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		public TerminalNode WHEN() { return getToken(SpeakQlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(SpeakQlParser.THEN, 0); }
		public List<FunctionArgContext> functionArg() {
			return getRuleContexts(FunctionArgContext.class);
		}
		public FunctionArgContext functionArg(int i) {
			return getRuleContext(FunctionArgContext.class,i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseFuncAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCaseFuncAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCaseFuncAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCaseFuncAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseFuncAlternativeContext caseFuncAlternative() throws RecognitionException {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_caseFuncAlternative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6372);
			match(WHEN);
			setState(6373);
			((CaseFuncAlternativeContext)_localctx).condition = functionArg();
			setState(6374);
			match(THEN);
			setState(6375);
			((CaseFuncAlternativeContext)_localctx).consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelsInWeightStringContext extends ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelsInWeightString; }
	 
		public LevelsInWeightStringContext() { }
		public void copyFrom(LevelsInWeightStringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LevelWeightRangeContext extends LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		public TerminalNode LEVEL() { return getToken(SpeakQlParser.LEVEL, 0); }
		public TerminalNode MINUS() { return getToken(SpeakQlParser.MINUS, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLevelWeightRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLevelWeightRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLevelWeightRange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LevelWeightListContext extends LevelsInWeightStringContext {
		public TerminalNode LEVEL() { return getToken(SpeakQlParser.LEVEL, 0); }
		public List<LevelInWeightListElementContext> levelInWeightListElement() {
			return getRuleContexts(LevelInWeightListElementContext.class);
		}
		public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return getRuleContext(LevelInWeightListElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLevelWeightList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLevelWeightList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLevelWeightList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelsInWeightStringContext levelsInWeightString() throws RecognitionException {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_levelsInWeightString);
		int _la;
		try {
			setState(6391);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,935,_ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6377);
				match(LEVEL);
				setState(6378);
				levelInWeightListElement();
				setState(6383);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6379);
					match(COMMA);
					setState(6380);
					levelInWeightListElement();
					}
					}
					setState(6385);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6386);
				match(LEVEL);
				setState(6387);
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				setState(6388);
				match(MINUS);
				setState(6389);
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelInWeightListElementContext extends ParserRuleContext {
		public Token orderType;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode ASC() { return getToken(SpeakQlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SpeakQlParser.DESC, 0); }
		public TerminalNode REVERSE() { return getToken(SpeakQlParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLevelInWeightListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLevelInWeightListElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLevelInWeightListElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelInWeightListElementContext levelInWeightListElement() throws RecognitionException {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_levelInWeightListElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6393);
			decimalLiteral();
			setState(6395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				setState(6394);
				((LevelInWeightListElementContext)_localctx).orderType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					((LevelInWeightListElementContext)_localctx).orderType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWindowedFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token starArg;
		public Token separator;
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode AVG() { return getToken(SpeakQlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(SpeakQlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(SpeakQlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(SpeakQlParser.SUM, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SpeakQlParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(SpeakQlParser.COUNT, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode STAR() { return getToken(SpeakQlParser.STAR, 0); }
		public TerminalNode BIT_AND() { return getToken(SpeakQlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(SpeakQlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(SpeakQlParser.BIT_XOR, 0); }
		public TerminalNode STD() { return getToken(SpeakQlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(SpeakQlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(SpeakQlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(SpeakQlParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(SpeakQlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(SpeakQlParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(SpeakQlParser.VARIANCE, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(SpeakQlParser.GROUP_CONCAT, 0); }
		public TerminalNode ORDER() { return getToken(SpeakQlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SpeakQlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public TerminalNode SEPARATOR() { return getToken(SpeakQlParser.SEPARATOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_aggregateWindowedFunction);
		int _la;
		try {
			setState(6456);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case SUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(6397);
				_la = _input.LA(1);
				if ( !(((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (AVG - 286)) | (1L << (MAX - 286)) | (1L << (MIN - 286)) | (1L << (SUM - 286)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6398);
				match(LR_BRACKET);
				setState(6400);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,937,_ctx) ) {
				case 1:
					{
					setState(6399);
					((AggregateWindowedFunctionContext)_localctx).aggregator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						((AggregateWindowedFunctionContext)_localctx).aggregator = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(6402);
				functionArg();
				setState(6403);
				match(RR_BRACKET);
				setState(6405);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,938,_ctx) ) {
				case 1:
					{
					setState(6404);
					overClause();
					}
					break;
				}
				}
				break;
			case COUNT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6407);
				match(COUNT);
				setState(6408);
				match(LR_BRACKET);
				setState(6416);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,940,_ctx) ) {
				case 1:
					{
					setState(6409);
					((AggregateWindowedFunctionContext)_localctx).starArg = match(STAR);
					}
					break;
				case 2:
					{
					setState(6411);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,939,_ctx) ) {
					case 1:
						{
						setState(6410);
						((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
						}
						break;
					}
					setState(6413);
					functionArg();
					}
					break;
				case 3:
					{
					setState(6414);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					setState(6415);
					functionArgs();
					}
					break;
				}
				setState(6418);
				match(RR_BRACKET);
				setState(6420);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,941,_ctx) ) {
				case 1:
					{
					setState(6419);
					overClause();
					}
					break;
				}
				}
				break;
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6422);
				_la = _input.LA(1);
				if ( !(((((_la - 287)) & ~0x3f) == 0 && ((1L << (_la - 287)) & ((1L << (BIT_AND - 287)) | (1L << (BIT_OR - 287)) | (1L << (BIT_XOR - 287)) | (1L << (STD - 287)) | (1L << (STDDEV - 287)) | (1L << (STDDEV_POP - 287)) | (1L << (STDDEV_SAMP - 287)) | (1L << (VAR_POP - 287)) | (1L << (VAR_SAMP - 287)) | (1L << (VARIANCE - 287)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6423);
				match(LR_BRACKET);
				setState(6425);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,942,_ctx) ) {
				case 1:
					{
					setState(6424);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
					}
					break;
				}
				setState(6427);
				functionArg();
				setState(6428);
				match(RR_BRACKET);
				setState(6430);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,943,_ctx) ) {
				case 1:
					{
					setState(6429);
					overClause();
					}
					break;
				}
				}
				break;
			case GROUP_CONCAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(6432);
				match(GROUP_CONCAT);
				setState(6433);
				match(LR_BRACKET);
				setState(6435);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,944,_ctx) ) {
				case 1:
					{
					setState(6434);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					}
					break;
				}
				setState(6437);
				functionArgs();
				setState(6448);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6438);
					match(ORDER);
					setState(6439);
					match(BY);
					setState(6440);
					orderByExpression();
					setState(6445);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6441);
						match(COMMA);
						setState(6442);
						orderByExpression();
						}
						}
						setState(6447);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(6452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(6450);
					match(SEPARATOR);
					setState(6451);
					((AggregateWindowedFunctionContext)_localctx).separator = match(STRING_LITERAL);
					}
				}

				setState(6454);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonAggregateWindowedFunctionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode LAG() { return getToken(SpeakQlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(SpeakQlParser.LEAD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FIRST_VALUE() { return getToken(SpeakQlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(SpeakQlParser.LAST_VALUE, 0); }
		public TerminalNode CUME_DIST() { return getToken(SpeakQlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(SpeakQlParser.DENSE_RANK, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(SpeakQlParser.PERCENT_RANK, 0); }
		public TerminalNode RANK() { return getToken(SpeakQlParser.RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(SpeakQlParser.ROW_NUMBER, 0); }
		public TerminalNode NTH_VALUE() { return getToken(SpeakQlParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(SpeakQlParser.NTILE, 0); }
		public NonAggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonAggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterNonAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitNonAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitNonAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() throws RecognitionException {
		NonAggregateWindowedFunctionContext _localctx = new NonAggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_nonAggregateWindowedFunction);
		int _la;
		try {
			setState(6496);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LAG:
			case LEAD:
				enterOuterAlt(_localctx, 1);
				{
				setState(6458);
				_la = _input.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6459);
				match(LR_BRACKET);
				setState(6460);
				expression(0);
				setState(6463);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,949,_ctx) ) {
				case 1:
					{
					setState(6461);
					match(COMMA);
					setState(6462);
					decimalLiteral();
					}
					break;
				}
				setState(6467);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6465);
					match(COMMA);
					setState(6466);
					decimalLiteral();
					}
				}

				setState(6469);
				match(RR_BRACKET);
				setState(6470);
				overClause();
				}
				break;
			case FIRST_VALUE:
			case LAST_VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6472);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6473);
				match(LR_BRACKET);
				setState(6474);
				expression(0);
				setState(6475);
				match(RR_BRACKET);
				setState(6476);
				overClause();
				}
				break;
			case CUME_DIST:
			case DENSE_RANK:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 3);
				{
				setState(6478);
				_la = _input.LA(1);
				if ( !(((((_la - 291)) & ~0x3f) == 0 && ((1L << (_la - 291)) & ((1L << (CUME_DIST - 291)) | (1L << (DENSE_RANK - 291)) | (1L << (PERCENT_RANK - 291)) | (1L << (RANK - 291)) | (1L << (ROW_NUMBER - 291)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6479);
				match(LR_BRACKET);
				setState(6480);
				match(RR_BRACKET);
				setState(6481);
				overClause();
				}
				break;
			case NTH_VALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6482);
				match(NTH_VALUE);
				setState(6483);
				match(LR_BRACKET);
				setState(6484);
				expression(0);
				setState(6485);
				match(COMMA);
				setState(6486);
				decimalLiteral();
				setState(6487);
				match(RR_BRACKET);
				setState(6488);
				overClause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 5);
				{
				setState(6490);
				match(NTILE);
				setState(6491);
				match(LR_BRACKET);
				setState(6492);
				decimalLiteral();
				setState(6493);
				match(RR_BRACKET);
				setState(6494);
				overClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverClauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(SpeakQlParser.OVER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterOverClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitOverClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitOverClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverClauseContext overClause() throws RecognitionException {
		OverClauseContext _localctx = new OverClauseContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_overClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6498);
			match(OVER);
			setState(6505);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(6499);
				match(LR_BRACKET);
				setState(6501);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,952,_ctx) ) {
				case 1:
					{
					setState(6500);
					windowSpec();
					}
					break;
				}
				setState(6503);
				match(RR_BRACKET);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case OPTIONAL:
				{
				setState(6504);
				windowName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public FrameClauseContext frameClause() {
			return getRuleContext(FrameClauseContext.class,0);
		}
		public WindowSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterWindowSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitWindowSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitWindowSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecContext windowSpec() throws RecognitionException {
		WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_windowSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6508);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,954,_ctx) ) {
			case 1:
				{
				setState(6507);
				windowName();
				}
				break;
			}
			setState(6511);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(6510);
				partitionClause();
				}
			}

			setState(6514);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6513);
				orderByClause();
				}
			}

			setState(6517);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(6516);
				frameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterWindowName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitWindowName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6519);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameClauseContext extends ParserRuleContext {
		public FrameUnitsContext frameUnits() {
			return getRuleContext(FrameUnitsContext.class,0);
		}
		public FrameExtentContext frameExtent() {
			return getRuleContext(FrameExtentContext.class,0);
		}
		public FrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFrameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFrameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFrameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameClauseContext frameClause() throws RecognitionException {
		FrameClauseContext _localctx = new FrameClauseContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_frameClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6521);
			frameUnits();
			setState(6522);
			frameExtent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameUnitsContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(SpeakQlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(SpeakQlParser.RANGE, 0); }
		public FrameUnitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameUnits; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFrameUnits(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFrameUnits(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFrameUnits(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameUnitsContext frameUnits() throws RecognitionException {
		FrameUnitsContext _localctx = new FrameUnitsContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_frameUnits);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6524);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameExtentContext extends ParserRuleContext {
		public FrameRangeContext frameRange() {
			return getRuleContext(FrameRangeContext.class,0);
		}
		public FrameBetweenContext frameBetween() {
			return getRuleContext(FrameBetweenContext.class,0);
		}
		public FrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameExtent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFrameExtent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFrameExtent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFrameExtent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameExtentContext frameExtent() throws RecognitionException {
		FrameExtentContext _localctx = new FrameExtentContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_frameExtent);
		try {
			setState(6528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,958,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6526);
				frameRange();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6527);
				frameBetween();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(SpeakQlParser.BETWEEN, 0); }
		public List<FrameRangeContext> frameRange() {
			return getRuleContexts(FrameRangeContext.class);
		}
		public FrameRangeContext frameRange(int i) {
			return getRuleContext(FrameRangeContext.class,i);
		}
		public TerminalNode AND() { return getToken(SpeakQlParser.AND, 0); }
		public FrameBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBetween; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFrameBetween(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFrameBetween(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFrameBetween(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBetweenContext frameBetween() throws RecognitionException {
		FrameBetweenContext _localctx = new FrameBetweenContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_frameBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6530);
			match(BETWEEN);
			setState(6531);
			frameRange();
			setState(6532);
			match(AND);
			setState(6533);
			frameRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameRangeContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(SpeakQlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(SpeakQlParser.ROW, 0); }
		public TerminalNode UNBOUNDED() { return getToken(SpeakQlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(SpeakQlParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(SpeakQlParser.FOLLOWING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameRange; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFrameRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFrameRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFrameRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameRangeContext frameRange() throws RecognitionException {
		FrameRangeContext _localctx = new FrameRangeContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_frameRange);
		int _la;
		try {
			setState(6542);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,959,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6535);
				match(CURRENT);
				setState(6536);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6537);
				match(UNBOUNDED);
				setState(6538);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6539);
				expression(0);
				setState(6540);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(SpeakQlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(SpeakQlParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_partitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6544);
			match(PARTITION);
			setState(6545);
			match(BY);
			setState(6546);
			expression(0);
			setState(6551);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6547);
				match(COMMA);
				setState(6548);
				expression(0);
				}
				}
				setState(6553);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionNameContext extends ParserRuleContext {
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public TerminalNode ASCII() { return getToken(SpeakQlParser.ASCII, 0); }
		public TerminalNode CURDATE() { return getToken(SpeakQlParser.CURDATE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(SpeakQlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(SpeakQlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SpeakQlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURTIME() { return getToken(SpeakQlParser.CURTIME, 0); }
		public TerminalNode DATE_ADD() { return getToken(SpeakQlParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(SpeakQlParser.DATE_SUB, 0); }
		public TerminalNode IF() { return getToken(SpeakQlParser.IF, 0); }
		public TerminalNode INSERT() { return getToken(SpeakQlParser.INSERT, 0); }
		public TerminalNode LOCALTIME() { return getToken(SpeakQlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(SpeakQlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode MID() { return getToken(SpeakQlParser.MID, 0); }
		public TerminalNode NOW() { return getToken(SpeakQlParser.NOW, 0); }
		public TerminalNode REPLACE() { return getToken(SpeakQlParser.REPLACE, 0); }
		public TerminalNode SUBSTR() { return getToken(SpeakQlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(SpeakQlParser.SUBSTRING, 0); }
		public TerminalNode SYSDATE() { return getToken(SpeakQlParser.SYSDATE, 0); }
		public TerminalNode TRIM() { return getToken(SpeakQlParser.TRIM, 0); }
		public TerminalNode UTC_DATE() { return getToken(SpeakQlParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(SpeakQlParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(SpeakQlParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterScalarFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitScalarFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitScalarFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionNameContext scalarFunctionName() throws RecognitionException {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_scalarFunctionName);
		try {
			setState(6577);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case SCHEMA:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case COUNT:
			case POSITION:
			case INVISIBLE:
			case VISIBLE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case SESSION_VARIABLES_ADMIN:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
				enterOuterAlt(_localctx, 1);
				{
				setState(6554);
				functionNameBase();
				}
				break;
			case ASCII:
				enterOuterAlt(_localctx, 2);
				{
				setState(6555);
				match(ASCII);
				}
				break;
			case CURDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6556);
				match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6557);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(6558);
				match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(6559);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				enterOuterAlt(_localctx, 7);
				{
				setState(6560);
				match(CURTIME);
				}
				break;
			case DATE_ADD:
				enterOuterAlt(_localctx, 8);
				{
				setState(6561);
				match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				enterOuterAlt(_localctx, 9);
				{
				setState(6562);
				match(DATE_SUB);
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 10);
				{
				setState(6563);
				match(IF);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(6564);
				match(INSERT);
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 12);
				{
				setState(6565);
				match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 13);
				{
				setState(6566);
				match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				enterOuterAlt(_localctx, 14);
				{
				setState(6567);
				match(MID);
				}
				break;
			case NOW:
				enterOuterAlt(_localctx, 15);
				{
				setState(6568);
				match(NOW);
				}
				break;
			case REPLACE:
				enterOuterAlt(_localctx, 16);
				{
				setState(6569);
				match(REPLACE);
				}
				break;
			case SUBSTR:
				enterOuterAlt(_localctx, 17);
				{
				setState(6570);
				match(SUBSTR);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 18);
				{
				setState(6571);
				match(SUBSTRING);
				}
				break;
			case SYSDATE:
				enterOuterAlt(_localctx, 19);
				{
				setState(6572);
				match(SYSDATE);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 20);
				{
				setState(6573);
				match(TRIM);
				}
				break;
			case UTC_DATE:
				enterOuterAlt(_localctx, 21);
				{
				setState(6574);
				match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				enterOuterAlt(_localctx, 22);
				{
				setState(6575);
				match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				enterOuterAlt(_localctx, 23);
				{
				setState(6576);
				match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PasswordFunctionClauseContext extends ParserRuleContext {
		public Token functionName;
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode PASSWORD() { return getToken(SpeakQlParser.PASSWORD, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(SpeakQlParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordFunctionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPasswordFunctionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPasswordFunctionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPasswordFunctionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PasswordFunctionClauseContext passwordFunctionClause() throws RecognitionException {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_passwordFunctionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6579);
			((PasswordFunctionClauseContext)_localctx).functionName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				((PasswordFunctionClauseContext)_localctx).functionName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6580);
			match(LR_BRACKET);
			setState(6581);
			functionArg();
			setState(6582);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public List<FunctionCallContext> functionCall() {
			return getRuleContexts(FunctionCallContext.class);
		}
		public FunctionCallContext functionCall(int i) {
			return getRuleContext(FunctionCallContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFunctionArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFunctionArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFunctionArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgsContext functionArgs() throws RecognitionException {
		FunctionArgsContext _localctx = new FunctionArgsContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_functionArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6588);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,962,_ctx) ) {
			case 1:
				{
				setState(6584);
				constant();
				}
				break;
			case 2:
				{
				setState(6585);
				fullColumnName();
				}
				break;
			case 3:
				{
				setState(6586);
				functionCall();
				}
				break;
			case 4:
				{
				setState(6587);
				expression(0);
				}
				break;
			}
			setState(6599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6590);
				match(COMMA);
				setState(6595);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,963,_ctx) ) {
				case 1:
					{
					setState(6591);
					constant();
					}
					break;
				case 2:
					{
					setState(6592);
					fullColumnName();
					}
					break;
				case 3:
					{
					setState(6593);
					functionCall();
					}
					break;
				case 4:
					{
					setState(6594);
					expression(0);
					}
					break;
				}
				}
				}
				setState(6601);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFunctionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFunctionArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFunctionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgContext functionArg() throws RecognitionException {
		FunctionArgContext _localctx = new FunctionArgContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_functionArg);
		try {
			setState(6606);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,965,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6602);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6603);
				fullColumnName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6604);
				functionCall();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6605);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IsExpressionContext extends ExpressionContext {
		public Token testValue;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(SpeakQlParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(SpeakQlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SpeakQlParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(SpeakQlParser.UNKNOWN, 0); }
		public TerminalNode NOT() { return getToken(SpeakQlParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIsExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIsExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIsExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NotExpressionContext extends ExpressionContext {
		public Token notOperator;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SpeakQlParser.NOT, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(SpeakQlParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterNotExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitNotExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitNotExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LogicalExpressionContext extends ExpressionContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public LogicalExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLogicalExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLogicalExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLogicalExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicateExpressionContext extends ExpressionContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPredicateExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPredicateExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPredicateExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 646;
		enterRecursionRule(_localctx, 646, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6619);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,967,_ctx) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6609);
				((NotExpressionContext)_localctx).notOperator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6610);
				expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6611);
				predicate(0);
				setState(6612);
				match(IS);
				setState(6614);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(6613);
					match(NOT);
					}
				}

				setState(6616);
				((IsExpressionContext)_localctx).testValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6618);
				predicate(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6627);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,968,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_expression);
					setState(6621);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(6622);
					logicalOperator();
					setState(6623);
					expression(4);
					}
					} 
				}
				setState(6629);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,968,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	 
		public PredicateContext() { }
		public void copyFrom(PredicateContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SoundsLikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode SOUNDS() { return getToken(SpeakQlParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(SpeakQlParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSoundsLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSoundsLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSoundsLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExpressionAtomPredicateContext extends PredicateContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(SpeakQlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(SpeakQlParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterExpressionAtomPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitExpressionAtomPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitExpressionAtomPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryComparisonPredicateContext extends PredicateContext {
		public Token quantifier;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public TerminalNode ALL() { return getToken(SpeakQlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(SpeakQlParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(SpeakQlParser.SOME, 0); }
		public SubqueryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSubqueryComparisonPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSubqueryComparisonPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSubqueryComparisonPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonMemberOfPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(SpeakQlParser.MEMBER, 0); }
		public TerminalNode OF() { return getToken(SpeakQlParser.OF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public JsonMemberOfPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterJsonMemberOfPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitJsonMemberOfPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitJsonMemberOfPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryComparisonPredicateContext extends PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public BinaryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterBinaryComparisonPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitBinaryComparisonPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitBinaryComparisonPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IN() { return getToken(SpeakQlParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SpeakQlParser.NOT, 0); }
		public InPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitInPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BetweenPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(SpeakQlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(SpeakQlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(SpeakQlParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitBetweenPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsNullPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(SpeakQlParser.IS, 0); }
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public IsNullPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIsNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIsNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIsNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(SpeakQlParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(SpeakQlParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(SpeakQlParser.ESCAPE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(SpeakQlParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RegexpPredicateContext extends PredicateContext {
		public Token regex;
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode REGEXP() { return getToken(SpeakQlParser.REGEXP, 0); }
		public TerminalNode RLIKE() { return getToken(SpeakQlParser.RLIKE, 0); }
		public TerminalNode NOT() { return getToken(SpeakQlParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterRegexpPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitRegexpPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitRegexpPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 648;
		enterRecursionRule(_localctx, 648, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(6633);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,969,_ctx) ) {
			case 1:
				{
				setState(6631);
				match(LOCAL_ID);
				setState(6632);
				match(VAR_ASSIGN);
				}
				break;
			}
			setState(6635);
			expressionAtom(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(6701);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,977,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6699);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,976,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparisonPredicateContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6637);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(6638);
						comparisonOperator();
						setState(6639);
						((BinaryComparisonPredicateContext)_localctx).right = predicate(9);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6641);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(6643);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6642);
							match(NOT);
							}
						}

						setState(6645);
						match(BETWEEN);
						setState(6646);
						predicate(0);
						setState(6647);
						match(AND);
						setState(6648);
						predicate(7);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6650);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(6651);
						match(SOUNDS);
						setState(6652);
						match(LIKE);
						setState(6653);
						predicate(6);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6654);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6656);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6655);
							match(NOT);
							}
						}

						setState(6658);
						((RegexpPredicateContext)_localctx).regex = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6659);
						predicate(4);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6660);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(6662);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6661);
							match(NOT);
							}
						}

						setState(6664);
						match(IN);
						setState(6665);
						match(LR_BRACKET);
						setState(6668);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,973,_ctx) ) {
						case 1:
							{
							setState(6666);
							selectStatement();
							}
							break;
						case 2:
							{
							setState(6667);
							expressions();
							}
							break;
						}
						setState(6670);
						match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6672);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(6673);
						match(IS);
						setState(6674);
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6675);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(6676);
						comparisonOperator();
						setState(6677);
						((SubqueryComparisonPredicateContext)_localctx).quantifier = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparisonPredicateContext)_localctx).quantifier = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6678);
						match(LR_BRACKET);
						setState(6679);
						selectStatement();
						setState(6680);
						match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6682);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6684);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6683);
							match(NOT);
							}
						}

						setState(6686);
						match(LIKE);
						setState(6687);
						predicate(0);
						setState(6690);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,975,_ctx) ) {
						case 1:
							{
							setState(6688);
							match(ESCAPE);
							setState(6689);
							match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					case 9:
						{
						_localctx = new JsonMemberOfPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6692);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6693);
						match(MEMBER);
						setState(6694);
						match(OF);
						setState(6695);
						match(LR_BRACKET);
						setState(6696);
						predicate(0);
						setState(6697);
						match(RR_BRACKET);
						}
						break;
					}
					} 
				}
				setState(6703);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,977,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExpressionAtomContext extends ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionAtom; }
	 
		public ExpressionAtomContext() { }
		public void copyFrom(ExpressionAtomContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnaryExpressionAtomContext extends ExpressionAtomContext {
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUnaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUnaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUnaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(SpeakQlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCollateExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCollateExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCollateExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterMysqlVariableExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitMysqlVariableExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitMysqlVariableExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterNestedExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitNestedExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitNestedExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedRowExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode ROW() { return getToken(SpeakQlParser.ROW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SpeakQlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SpeakQlParser.COMMA, i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterNestedRowExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitNestedRowExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitNestedRowExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MathExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterMathExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitMathExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitMathExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExistsExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode EXISTS() { return getToken(SpeakQlParser.EXISTS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public ExistsExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterExistsExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitExistsExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitExistsExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode INTERVAL() { return getToken(SpeakQlParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIntervalExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIntervalExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIntervalExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public JsonOperatorContext jsonOperator() {
			return getRuleContext(JsonOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public JsonExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterJsonExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitJsonExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitJsonExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(SpeakQlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SpeakQlParser.RR_BRACKET, 0); }
		public SubqueryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterSubqueryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitSubqueryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitSubqueryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstantExpressionAtomContext extends ExpressionAtomContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterConstantExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitConstantExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitConstantExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFunctionCallExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFunctionCallExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFunctionCallExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode BINARY() { return getToken(SpeakQlParser.BINARY, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterBinaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitBinaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitBinaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFullColumnNameExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFullColumnNameExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFullColumnNameExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BitExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public BitOperatorContext bitOperator() {
			return getRuleContext(BitOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterBitExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitBitExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitBitExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionAtomContext expressionAtom() throws RecognitionException {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionAtomContext _localctx = new ExpressionAtomContext(_ctx, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 650;
		enterRecursionRule(_localctx, 650, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6749);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,980,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6705);
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6706);
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6707);
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6708);
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6709);
				unaryOperator();
				setState(6710);
				expressionAtom(10);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6712);
				match(BINARY);
				setState(6713);
				expressionAtom(9);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6714);
				match(LR_BRACKET);
				setState(6715);
				expression(0);
				setState(6720);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6716);
					match(COMMA);
					setState(6717);
					expression(0);
					}
					}
					setState(6722);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6723);
				match(RR_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6725);
				match(ROW);
				setState(6726);
				match(LR_BRACKET);
				setState(6727);
				expression(0);
				setState(6730); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6728);
					match(COMMA);
					setState(6729);
					expression(0);
					}
					}
					setState(6732); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(6734);
				match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6736);
				match(EXISTS);
				setState(6737);
				match(LR_BRACKET);
				setState(6738);
				selectStatement();
				setState(6739);
				match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6741);
				match(LR_BRACKET);
				setState(6742);
				selectStatement();
				setState(6743);
				match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6745);
				match(INTERVAL);
				setState(6746);
				expression(0);
				setState(6747);
				intervalType();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6768);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,982,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6766);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,981,_ctx) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6751);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6752);
						bitOperator();
						setState(6753);
						((BitExpressionAtomContext)_localctx).right = expressionAtom(4);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6755);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6756);
						mathOperator();
						setState(6757);
						((MathExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 3:
						{
						_localctx = new JsonExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((JsonExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6759);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6760);
						jsonOperator();
						setState(6761);
						((JsonExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 4:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6763);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(6764);
						match(COLLATE);
						setState(6765);
						collationName();
						}
						break;
					}
					} 
				}
				setState(6770);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,982,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(SpeakQlParser.EXCLAMATION_SYMBOL, 0); }
		public TerminalNode BIT_NOT_OP() { return getToken(SpeakQlParser.BIT_NOT_OP, 0); }
		public TerminalNode PLUS() { return getToken(SpeakQlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SpeakQlParser.MINUS, 0); }
		public TerminalNode NOT() { return getToken(SpeakQlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterUnaryOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitUnaryOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitUnaryOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6771);
			_la = _input.LA(1);
			if ( !(_la==NOT || ((((_la - 1085)) & ~0x3f) == 0 && ((1L << (_la - 1085)) & ((1L << (PLUS - 1085)) | (1L << (MINUS - 1085)) | (1L << (EXCLAMATION_SYMBOL - 1085)) | (1L << (BIT_NOT_OP - 1085)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(SpeakQlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(SpeakQlParser.GREATER_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(SpeakQlParser.LESS_SYMBOL, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(SpeakQlParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_comparisonOperator);
		try {
			setState(6787);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,983,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6773);
				match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6774);
				match(GREATER_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6775);
				match(LESS_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6776);
				match(LESS_SYMBOL);
				setState(6777);
				match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6778);
				match(GREATER_SYMBOL);
				setState(6779);
				match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6780);
				match(LESS_SYMBOL);
				setState(6781);
				match(GREATER_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6782);
				match(EXCLAMATION_SYMBOL);
				setState(6783);
				match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6784);
				match(LESS_SYMBOL);
				setState(6785);
				match(EQUAL_SYMBOL);
				setState(6786);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(SpeakQlParser.AND, 0); }
		public List<TerminalNode> BIT_AND_OP() { return getTokens(SpeakQlParser.BIT_AND_OP); }
		public TerminalNode BIT_AND_OP(int i) {
			return getToken(SpeakQlParser.BIT_AND_OP, i);
		}
		public TerminalNode XOR() { return getToken(SpeakQlParser.XOR, 0); }
		public TerminalNode OR() { return getToken(SpeakQlParser.OR, 0); }
		public List<TerminalNode> BIT_OR_OP() { return getTokens(SpeakQlParser.BIT_OR_OP); }
		public TerminalNode BIT_OR_OP(int i) {
			return getToken(SpeakQlParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitLogicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_logicalOperator);
		try {
			setState(6796);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(6789);
				match(AND);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(6790);
				match(BIT_AND_OP);
				setState(6791);
				match(BIT_AND_OP);
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(6792);
				match(XOR);
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 4);
				{
				setState(6793);
				match(OR);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(6794);
				match(BIT_OR_OP);
				setState(6795);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitOperatorContext extends ParserRuleContext {
		public List<TerminalNode> LESS_SYMBOL() { return getTokens(SpeakQlParser.LESS_SYMBOL); }
		public TerminalNode LESS_SYMBOL(int i) {
			return getToken(SpeakQlParser.LESS_SYMBOL, i);
		}
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(SpeakQlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(SpeakQlParser.GREATER_SYMBOL, i);
		}
		public TerminalNode BIT_AND_OP() { return getToken(SpeakQlParser.BIT_AND_OP, 0); }
		public TerminalNode BIT_XOR_OP() { return getToken(SpeakQlParser.BIT_XOR_OP, 0); }
		public TerminalNode BIT_OR_OP() { return getToken(SpeakQlParser.BIT_OR_OP, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterBitOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitBitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitBitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitOperatorContext bitOperator() throws RecognitionException {
		BitOperatorContext _localctx = new BitOperatorContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_bitOperator);
		try {
			setState(6805);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6798);
				match(LESS_SYMBOL);
				setState(6799);
				match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6800);
				match(GREATER_SYMBOL);
				setState(6801);
				match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 3);
				{
				setState(6802);
				match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				enterOuterAlt(_localctx, 4);
				{
				setState(6803);
				match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(6804);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(SpeakQlParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(SpeakQlParser.DIVIDE, 0); }
		public TerminalNode MODULE() { return getToken(SpeakQlParser.MODULE, 0); }
		public TerminalNode DIV() { return getToken(SpeakQlParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(SpeakQlParser.MOD, 0); }
		public TerminalNode PLUS() { return getToken(SpeakQlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SpeakQlParser.MINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitMathOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6807);
			_la = _input.LA(1);
			if ( !(((((_la - 1082)) & ~0x3f) == 0 && ((1L << (_la - 1082)) & ((1L << (STAR - 1082)) | (1L << (DIVIDE - 1082)) | (1L << (MODULE - 1082)) | (1L << (PLUS - 1082)) | (1L << (MINUS - 1082)) | (1L << (DIV - 1082)) | (1L << (MOD - 1082)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOperatorContext extends ParserRuleContext {
		public TerminalNode MINUS() { return getToken(SpeakQlParser.MINUS, 0); }
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(SpeakQlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(SpeakQlParser.GREATER_SYMBOL, i);
		}
		public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterJsonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitJsonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitJsonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOperatorContext jsonOperator() throws RecognitionException {
		JsonOperatorContext _localctx = new JsonOperatorContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_jsonOperator);
		try {
			setState(6814);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,986,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6809);
				match(MINUS);
				setState(6810);
				match(GREATER_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6811);
				match(MINUS);
				setState(6812);
				match(GREATER_SYMBOL);
				setState(6813);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameBaseContext extends ParserRuleContext {
		public TerminalNode ARMSCII8() { return getToken(SpeakQlParser.ARMSCII8, 0); }
		public TerminalNode ASCII() { return getToken(SpeakQlParser.ASCII, 0); }
		public TerminalNode BIG5() { return getToken(SpeakQlParser.BIG5, 0); }
		public TerminalNode BINARY() { return getToken(SpeakQlParser.BINARY, 0); }
		public TerminalNode CP1250() { return getToken(SpeakQlParser.CP1250, 0); }
		public TerminalNode CP1251() { return getToken(SpeakQlParser.CP1251, 0); }
		public TerminalNode CP1256() { return getToken(SpeakQlParser.CP1256, 0); }
		public TerminalNode CP1257() { return getToken(SpeakQlParser.CP1257, 0); }
		public TerminalNode CP850() { return getToken(SpeakQlParser.CP850, 0); }
		public TerminalNode CP852() { return getToken(SpeakQlParser.CP852, 0); }
		public TerminalNode CP866() { return getToken(SpeakQlParser.CP866, 0); }
		public TerminalNode CP932() { return getToken(SpeakQlParser.CP932, 0); }
		public TerminalNode DEC8() { return getToken(SpeakQlParser.DEC8, 0); }
		public TerminalNode EUCJPMS() { return getToken(SpeakQlParser.EUCJPMS, 0); }
		public TerminalNode EUCKR() { return getToken(SpeakQlParser.EUCKR, 0); }
		public TerminalNode GB18030() { return getToken(SpeakQlParser.GB18030, 0); }
		public TerminalNode GB2312() { return getToken(SpeakQlParser.GB2312, 0); }
		public TerminalNode GBK() { return getToken(SpeakQlParser.GBK, 0); }
		public TerminalNode GEOSTD8() { return getToken(SpeakQlParser.GEOSTD8, 0); }
		public TerminalNode GREEK() { return getToken(SpeakQlParser.GREEK, 0); }
		public TerminalNode HEBREW() { return getToken(SpeakQlParser.HEBREW, 0); }
		public TerminalNode HP8() { return getToken(SpeakQlParser.HP8, 0); }
		public TerminalNode KEYBCS2() { return getToken(SpeakQlParser.KEYBCS2, 0); }
		public TerminalNode KOI8R() { return getToken(SpeakQlParser.KOI8R, 0); }
		public TerminalNode KOI8U() { return getToken(SpeakQlParser.KOI8U, 0); }
		public TerminalNode LATIN1() { return getToken(SpeakQlParser.LATIN1, 0); }
		public TerminalNode LATIN2() { return getToken(SpeakQlParser.LATIN2, 0); }
		public TerminalNode LATIN5() { return getToken(SpeakQlParser.LATIN5, 0); }
		public TerminalNode LATIN7() { return getToken(SpeakQlParser.LATIN7, 0); }
		public TerminalNode MACCE() { return getToken(SpeakQlParser.MACCE, 0); }
		public TerminalNode MACROMAN() { return getToken(SpeakQlParser.MACROMAN, 0); }
		public TerminalNode SJIS() { return getToken(SpeakQlParser.SJIS, 0); }
		public TerminalNode SWE7() { return getToken(SpeakQlParser.SWE7, 0); }
		public TerminalNode TIS620() { return getToken(SpeakQlParser.TIS620, 0); }
		public TerminalNode UCS2() { return getToken(SpeakQlParser.UCS2, 0); }
		public TerminalNode UJIS() { return getToken(SpeakQlParser.UJIS, 0); }
		public TerminalNode UTF16() { return getToken(SpeakQlParser.UTF16, 0); }
		public TerminalNode UTF16LE() { return getToken(SpeakQlParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(SpeakQlParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(SpeakQlParser.UTF8, 0); }
		public TerminalNode UTF8MB3() { return getToken(SpeakQlParser.UTF8MB3, 0); }
		public TerminalNode UTF8MB4() { return getToken(SpeakQlParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterCharsetNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitCharsetNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitCharsetNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_charsetNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6816);
			_la = _input.LA(1);
			if ( !(_la==BINARY || ((((_la - 715)) & ~0x3f) == 0 && ((1L << (_la - 715)) & ((1L << (ARMSCII8 - 715)) | (1L << (ASCII - 715)) | (1L << (BIG5 - 715)) | (1L << (CP1250 - 715)) | (1L << (CP1251 - 715)) | (1L << (CP1256 - 715)) | (1L << (CP1257 - 715)) | (1L << (CP850 - 715)) | (1L << (CP852 - 715)) | (1L << (CP866 - 715)) | (1L << (CP932 - 715)) | (1L << (DEC8 - 715)) | (1L << (EUCJPMS - 715)) | (1L << (EUCKR - 715)) | (1L << (GB18030 - 715)) | (1L << (GB2312 - 715)) | (1L << (GBK - 715)) | (1L << (GEOSTD8 - 715)) | (1L << (GREEK - 715)) | (1L << (HEBREW - 715)) | (1L << (HP8 - 715)) | (1L << (KEYBCS2 - 715)) | (1L << (KOI8R - 715)) | (1L << (KOI8U - 715)) | (1L << (LATIN1 - 715)) | (1L << (LATIN2 - 715)) | (1L << (LATIN5 - 715)) | (1L << (LATIN7 - 715)) | (1L << (MACCE - 715)) | (1L << (MACROMAN - 715)) | (1L << (SJIS - 715)) | (1L << (SWE7 - 715)) | (1L << (TIS620 - 715)) | (1L << (UCS2 - 715)) | (1L << (UJIS - 715)) | (1L << (UTF16 - 715)) | (1L << (UTF16LE - 715)) | (1L << (UTF32 - 715)) | (1L << (UTF8 - 715)) | (1L << (UTF8MB3 - 715)) | (1L << (UTF8MB4 - 715)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelBaseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(SpeakQlParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(SpeakQlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(SpeakQlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(SpeakQlParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevelBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterTransactionLevelBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitTransactionLevelBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitTransactionLevelBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelBaseContext transactionLevelBase() throws RecognitionException {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_transactionLevelBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6818);
			_la = _input.LA(1);
			if ( !(((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (REPEATABLE - 768)) | (1L << (COMMITTED - 768)) | (1L << (UNCOMMITTED - 768)) | (1L << (SERIALIZABLE - 768)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesBaseContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(SpeakQlParser.TABLES, 0); }
		public TerminalNode ROUTINE() { return getToken(SpeakQlParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(SpeakQlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(SpeakQlParser.FILE, 0); }
		public TerminalNode PROCESS() { return getToken(SpeakQlParser.PROCESS, 0); }
		public TerminalNode RELOAD() { return getToken(SpeakQlParser.RELOAD, 0); }
		public TerminalNode SHUTDOWN() { return getToken(SpeakQlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(SpeakQlParser.SUPER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(SpeakQlParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegesBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterPrivilegesBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitPrivilegesBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitPrivilegesBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesBaseContext privilegesBase() throws RecognitionException {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_privilegesBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6820);
			_la = _input.LA(1);
			if ( !(((((_la - 674)) & ~0x3f) == 0 && ((1L << (_la - 674)) & ((1L << (TABLES - 674)) | (1L << (ROUTINE - 674)) | (1L << (EXECUTE - 674)) | (1L << (FILE - 674)) | (1L << (PROCESS - 674)) | (1L << (RELOAD - 674)) | (1L << (SHUTDOWN - 674)) | (1L << (SUPER - 674)) | (1L << (PRIVILEGES - 674)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeBaseContext extends ParserRuleContext {
		public TerminalNode QUARTER() { return getToken(SpeakQlParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(SpeakQlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(SpeakQlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(SpeakQlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(SpeakQlParser.MINUTE, 0); }
		public TerminalNode WEEK() { return getToken(SpeakQlParser.WEEK, 0); }
		public TerminalNode SECOND() { return getToken(SpeakQlParser.SECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(SpeakQlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterIntervalTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitIntervalTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitIntervalTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeBaseContext intervalTypeBase() throws RecognitionException {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_intervalTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6822);
			_la = _input.LA(1);
			if ( !(((((_la - 666)) & ~0x3f) == 0 && ((1L << (_la - 666)) & ((1L << (QUARTER - 666)) | (1L << (MONTH - 666)) | (1L << (DAY - 666)) | (1L << (HOUR - 666)) | (1L << (MINUTE - 666)) | (1L << (WEEK - 666)) | (1L << (SECOND - 666)) | (1L << (MICROSECOND - 666)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeBaseContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(SpeakQlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(SpeakQlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SpeakQlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(SpeakQlParser.DATETIME, 0); }
		public TerminalNode YEAR() { return getToken(SpeakQlParser.YEAR, 0); }
		public TerminalNode ENUM() { return getToken(SpeakQlParser.ENUM, 0); }
		public TerminalNode TEXT() { return getToken(SpeakQlParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterDataTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitDataTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitDataTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeBaseContext dataTypeBase() throws RecognitionException {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_dataTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6824);
			_la = _input.LA(1);
			if ( !(((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (DATETIME - 220)) | (1L << (YEAR - 220)) | (1L << (TEXT - 220)) | (1L << (ENUM - 220)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordsCanBeIdContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(SpeakQlParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(SpeakQlParser.ACTION, 0); }
		public TerminalNode AFTER() { return getToken(SpeakQlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(SpeakQlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(SpeakQlParser.ALGORITHM, 0); }
		public TerminalNode ANY() { return getToken(SpeakQlParser.ANY, 0); }
		public TerminalNode AT() { return getToken(SpeakQlParser.AT, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(SpeakQlParser.AUDIT_ADMIN, 0); }
		public TerminalNode AUTHORS() { return getToken(SpeakQlParser.AUTHORS, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(SpeakQlParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(SpeakQlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(SpeakQlParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG() { return getToken(SpeakQlParser.AVG, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(SpeakQlParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(SpeakQlParser.BACKUP_ADMIN, 0); }
		public TerminalNode BEGIN() { return getToken(SpeakQlParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(SpeakQlParser.BINLOG, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(SpeakQlParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode BIT() { return getToken(SpeakQlParser.BIT, 0); }
		public TerminalNode BIT_AND() { return getToken(SpeakQlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(SpeakQlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(SpeakQlParser.BIT_XOR, 0); }
		public TerminalNode BLOCK() { return getToken(SpeakQlParser.BLOCK, 0); }
		public TerminalNode BOOL() { return getToken(SpeakQlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(SpeakQlParser.BOOLEAN, 0); }
		public TerminalNode BTREE() { return getToken(SpeakQlParser.BTREE, 0); }
		public TerminalNode CACHE() { return getToken(SpeakQlParser.CACHE, 0); }
		public TerminalNode CASCADED() { return getToken(SpeakQlParser.CASCADED, 0); }
		public TerminalNode CHAIN() { return getToken(SpeakQlParser.CHAIN, 0); }
		public TerminalNode CHANGED() { return getToken(SpeakQlParser.CHANGED, 0); }
		public TerminalNode CHANNEL() { return getToken(SpeakQlParser.CHANNEL, 0); }
		public TerminalNode CHECKSUM() { return getToken(SpeakQlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(SpeakQlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(SpeakQlParser.CATALOG_NAME, 0); }
		public TerminalNode CIPHER() { return getToken(SpeakQlParser.CIPHER, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(SpeakQlParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLIENT() { return getToken(SpeakQlParser.CLIENT, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(SpeakQlParser.CLONE_ADMIN, 0); }
		public TerminalNode CLOSE() { return getToken(SpeakQlParser.CLOSE, 0); }
		public TerminalNode COALESCE() { return getToken(SpeakQlParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(SpeakQlParser.CODE, 0); }
		public TerminalNode COLUMNS() { return getToken(SpeakQlParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(SpeakQlParser.COLUMN_FORMAT, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(SpeakQlParser.COLUMN_NAME, 0); }
		public TerminalNode COMMENT() { return getToken(SpeakQlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(SpeakQlParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(SpeakQlParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(SpeakQlParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(SpeakQlParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(SpeakQlParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENT() { return getToken(SpeakQlParser.CONCURRENT, 0); }
		public TerminalNode CONNECT() { return getToken(SpeakQlParser.CONNECT, 0); }
		public TerminalNode CONNECTION() { return getToken(SpeakQlParser.CONNECTION, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(SpeakQlParser.CONNECTION_ADMIN, 0); }
		public TerminalNode CONSISTENT() { return getToken(SpeakQlParser.CONSISTENT, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(SpeakQlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(SpeakQlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(SpeakQlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONTAINS() { return getToken(SpeakQlParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(SpeakQlParser.CONTEXT, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(SpeakQlParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(SpeakQlParser.COPY, 0); }
		public TerminalNode COUNT() { return getToken(SpeakQlParser.COUNT, 0); }
		public TerminalNode CPU() { return getToken(SpeakQlParser.CPU, 0); }
		public TerminalNode CURRENT() { return getToken(SpeakQlParser.CURRENT, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(SpeakQlParser.CURSOR_NAME, 0); }
		public TerminalNode DATA() { return getToken(SpeakQlParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(SpeakQlParser.DATAFILE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(SpeakQlParser.DEALLOCATE, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(SpeakQlParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(SpeakQlParser.DEFINER, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(SpeakQlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DES_KEY_FILE() { return getToken(SpeakQlParser.DES_KEY_FILE, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(SpeakQlParser.DIAGNOSTICS, 0); }
		public TerminalNode DIRECTORY() { return getToken(SpeakQlParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(SpeakQlParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(SpeakQlParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(SpeakQlParser.DISK, 0); }
		public TerminalNode DO() { return getToken(SpeakQlParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(SpeakQlParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(SpeakQlParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(SpeakQlParser.DYNAMIC, 0); }
		public TerminalNode ENABLE() { return getToken(SpeakQlParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(SpeakQlParser.ENCRYPTION, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(SpeakQlParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode END() { return getToken(SpeakQlParser.END, 0); }
		public TerminalNode ENDS() { return getToken(SpeakQlParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(SpeakQlParser.ENGINE, 0); }
		public TerminalNode ENGINES() { return getToken(SpeakQlParser.ENGINES, 0); }
		public TerminalNode ERROR() { return getToken(SpeakQlParser.ERROR, 0); }
		public TerminalNode ERRORS() { return getToken(SpeakQlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(SpeakQlParser.ESCAPE, 0); }
		public TerminalNode EUR() { return getToken(SpeakQlParser.EUR, 0); }
		public TerminalNode EVEN() { return getToken(SpeakQlParser.EVEN, 0); }
		public TerminalNode EVENT() { return getToken(SpeakQlParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(SpeakQlParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(SpeakQlParser.EVERY, 0); }
		public TerminalNode EXCEPT() { return getToken(SpeakQlParser.EXCEPT, 0); }
		public TerminalNode EXCHANGE() { return getToken(SpeakQlParser.EXCHANGE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(SpeakQlParser.EXCLUSIVE, 0); }
		public TerminalNode EXPIRE() { return getToken(SpeakQlParser.EXPIRE, 0); }
		public TerminalNode EXPORT() { return getToken(SpeakQlParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(SpeakQlParser.EXTENDED, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(SpeakQlParser.EXTENT_SIZE, 0); }
		public TerminalNode FAST() { return getToken(SpeakQlParser.FAST, 0); }
		public TerminalNode FAULTS() { return getToken(SpeakQlParser.FAULTS, 0); }
		public TerminalNode FIELDS() { return getToken(SpeakQlParser.FIELDS, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(SpeakQlParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FILTER() { return getToken(SpeakQlParser.FILTER, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(SpeakQlParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(SpeakQlParser.FIREWALL_USER, 0); }
		public TerminalNode FIRST() { return getToken(SpeakQlParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(SpeakQlParser.FIXED, 0); }
		public TerminalNode FLUSH() { return getToken(SpeakQlParser.FLUSH, 0); }
		public TerminalNode FOLLOWS() { return getToken(SpeakQlParser.FOLLOWS, 0); }
		public TerminalNode FOUND() { return getToken(SpeakQlParser.FOUND, 0); }
		public TerminalNode FULL() { return getToken(SpeakQlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(SpeakQlParser.FUNCTION, 0); }
		public TerminalNode GENERAL() { return getToken(SpeakQlParser.GENERAL, 0); }
		public TerminalNode GLOBAL() { return getToken(SpeakQlParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(SpeakQlParser.GRANTS, 0); }
		public TerminalNode GROUP() { return getToken(SpeakQlParser.GROUP, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(SpeakQlParser.GROUP_CONCAT, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(SpeakQlParser.GROUP_REPLICATION, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(SpeakQlParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode HANDLER() { return getToken(SpeakQlParser.HANDLER, 0); }
		public TerminalNode HASH() { return getToken(SpeakQlParser.HASH, 0); }
		public TerminalNode HELP() { return getToken(SpeakQlParser.HELP, 0); }
		public TerminalNode HOST() { return getToken(SpeakQlParser.HOST, 0); }
		public TerminalNode HOSTS() { return getToken(SpeakQlParser.HOSTS, 0); }
		public TerminalNode IDENTIFIED() { return getToken(SpeakQlParser.IDENTIFIED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(SpeakQlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode IMPORT() { return getToken(SpeakQlParser.IMPORT, 0); }
		public TerminalNode INDEXES() { return getToken(SpeakQlParser.INDEXES, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(SpeakQlParser.INITIAL_SIZE, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode INPLACE() { return getToken(SpeakQlParser.INPLACE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(SpeakQlParser.INSERT_METHOD, 0); }
		public TerminalNode INSTALL() { return getToken(SpeakQlParser.INSTALL, 0); }
		public TerminalNode INSTANCE() { return getToken(SpeakQlParser.INSTANCE, 0); }
		public TerminalNode INTERNAL() { return getToken(SpeakQlParser.INTERNAL, 0); }
		public TerminalNode INVOKER() { return getToken(SpeakQlParser.INVOKER, 0); }
		public TerminalNode IO() { return getToken(SpeakQlParser.IO, 0); }
		public TerminalNode IO_THREAD() { return getToken(SpeakQlParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(SpeakQlParser.IPC, 0); }
		public TerminalNode ISO() { return getToken(SpeakQlParser.ISO, 0); }
		public TerminalNode ISOLATION() { return getToken(SpeakQlParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(SpeakQlParser.ISSUER, 0); }
		public TerminalNode JIS() { return getToken(SpeakQlParser.JIS, 0); }
		public TerminalNode JSON() { return getToken(SpeakQlParser.JSON, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(SpeakQlParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LANGUAGE() { return getToken(SpeakQlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(SpeakQlParser.LAST, 0); }
		public TerminalNode LEAVES() { return getToken(SpeakQlParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(SpeakQlParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(SpeakQlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(SpeakQlParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(SpeakQlParser.LOCAL, 0); }
		public TerminalNode LOGFILE() { return getToken(SpeakQlParser.LOGFILE, 0); }
		public TerminalNode LOGS() { return getToken(SpeakQlParser.LOGS, 0); }
		public TerminalNode MASTER() { return getToken(SpeakQlParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(SpeakQlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(SpeakQlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(SpeakQlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(SpeakQlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(SpeakQlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(SpeakQlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(SpeakQlParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(SpeakQlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PORT() { return getToken(SpeakQlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(SpeakQlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SSL() { return getToken(SpeakQlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(SpeakQlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(SpeakQlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(SpeakQlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(SpeakQlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(SpeakQlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(SpeakQlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(SpeakQlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(SpeakQlParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_USER() { return getToken(SpeakQlParser.MASTER_USER, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(SpeakQlParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX() { return getToken(SpeakQlParser.MAX, 0); }
		public TerminalNode MAX_ROWS() { return getToken(SpeakQlParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(SpeakQlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(SpeakQlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(SpeakQlParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEDIUM() { return getToken(SpeakQlParser.MEDIUM, 0); }
		public TerminalNode MEMBER() { return getToken(SpeakQlParser.MEMBER, 0); }
		public TerminalNode MEMORY() { return getToken(SpeakQlParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(SpeakQlParser.MERGE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(SpeakQlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MID() { return getToken(SpeakQlParser.MID, 0); }
		public TerminalNode MIGRATE() { return getToken(SpeakQlParser.MIGRATE, 0); }
		public TerminalNode MIN() { return getToken(SpeakQlParser.MIN, 0); }
		public TerminalNode MIN_ROWS() { return getToken(SpeakQlParser.MIN_ROWS, 0); }
		public TerminalNode MODE() { return getToken(SpeakQlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(SpeakQlParser.MODIFY, 0); }
		public TerminalNode MUTEX() { return getToken(SpeakQlParser.MUTEX, 0); }
		public TerminalNode MYSQL() { return getToken(SpeakQlParser.MYSQL, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(SpeakQlParser.MYSQL_ERRNO, 0); }
		public TerminalNode NAME() { return getToken(SpeakQlParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(SpeakQlParser.NAMES, 0); }
		public TerminalNode NCHAR() { return getToken(SpeakQlParser.NCHAR, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(SpeakQlParser.NDB_STORED_USER, 0); }
		public TerminalNode NEVER() { return getToken(SpeakQlParser.NEVER, 0); }
		public TerminalNode NEXT() { return getToken(SpeakQlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(SpeakQlParser.NO, 0); }
		public TerminalNode NODEGROUP() { return getToken(SpeakQlParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(SpeakQlParser.NONE, 0); }
		public TerminalNode NUMBER() { return getToken(SpeakQlParser.NUMBER, 0); }
		public TerminalNode OFFLINE() { return getToken(SpeakQlParser.OFFLINE, 0); }
		public TerminalNode ODBC() { return getToken(SpeakQlParser.ODBC, 0); }
		public TerminalNode OFFSET() { return getToken(SpeakQlParser.OFFSET, 0); }
		public TerminalNode OF() { return getToken(SpeakQlParser.OF, 0); }
		public TerminalNode OJ() { return getToken(SpeakQlParser.OJ, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(SpeakQlParser.OLD_PASSWORD, 0); }
		public TerminalNode ONE() { return getToken(SpeakQlParser.ONE, 0); }
		public TerminalNode ONLINE() { return getToken(SpeakQlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(SpeakQlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(SpeakQlParser.OPEN, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(SpeakQlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode OPTIONAL() { return getToken(SpeakQlParser.OPTIONAL, 0); }
		public TerminalNode OPTIONS() { return getToken(SpeakQlParser.OPTIONS, 0); }
		public TerminalNode ORDER() { return getToken(SpeakQlParser.ORDER, 0); }
		public TerminalNode OWNER() { return getToken(SpeakQlParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(SpeakQlParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(SpeakQlParser.PAGE, 0); }
		public TerminalNode PARSER() { return getToken(SpeakQlParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(SpeakQlParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(SpeakQlParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(SpeakQlParser.PARTITIONS, 0); }
		public TerminalNode PASSWORD() { return getToken(SpeakQlParser.PASSWORD, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode PHASE() { return getToken(SpeakQlParser.PHASE, 0); }
		public TerminalNode PLUGINS() { return getToken(SpeakQlParser.PLUGINS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(SpeakQlParser.PLUGIN_DIR, 0); }
		public TerminalNode PLUGIN() { return getToken(SpeakQlParser.PLUGIN, 0); }
		public TerminalNode PORT() { return getToken(SpeakQlParser.PORT, 0); }
		public TerminalNode PRECEDES() { return getToken(SpeakQlParser.PRECEDES, 0); }
		public TerminalNode PREPARE() { return getToken(SpeakQlParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(SpeakQlParser.PRESERVE, 0); }
		public TerminalNode PREV() { return getToken(SpeakQlParser.PREV, 0); }
		public TerminalNode PROCESSLIST() { return getToken(SpeakQlParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(SpeakQlParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(SpeakQlParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(SpeakQlParser.PROXY, 0); }
		public TerminalNode QUERY() { return getToken(SpeakQlParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(SpeakQlParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(SpeakQlParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(SpeakQlParser.RECOVER, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(SpeakQlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(SpeakQlParser.REDUNDANT, 0); }
		public TerminalNode RELAY() { return getToken(SpeakQlParser.RELAY, 0); }
		public TerminalNode RELAYLOG() { return getToken(SpeakQlParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(SpeakQlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(SpeakQlParser.RELAY_LOG_POS, 0); }
		public TerminalNode REMOVE() { return getToken(SpeakQlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(SpeakQlParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(SpeakQlParser.REPAIR, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(SpeakQlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(SpeakQlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(SpeakQlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(SpeakQlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(SpeakQlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(SpeakQlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(SpeakQlParser.REPLICATION, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(SpeakQlParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(SpeakQlParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESET() { return getToken(SpeakQlParser.RESET, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(SpeakQlParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(SpeakQlParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode RESUME() { return getToken(SpeakQlParser.RESUME, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(SpeakQlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNS() { return getToken(SpeakQlParser.RETURNS, 0); }
		public TerminalNode ROLE() { return getToken(SpeakQlParser.ROLE, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(SpeakQlParser.ROLE_ADMIN, 0); }
		public TerminalNode ROLLBACK() { return getToken(SpeakQlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(SpeakQlParser.ROLLUP, 0); }
		public TerminalNode ROTATE() { return getToken(SpeakQlParser.ROTATE, 0); }
		public TerminalNode ROW() { return getToken(SpeakQlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(SpeakQlParser.ROWS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(SpeakQlParser.ROW_FORMAT, 0); }
		public TerminalNode SAVEPOINT() { return getToken(SpeakQlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(SpeakQlParser.SCHEDULE, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(SpeakQlParser.SCHEMA_NAME, 0); }
		public TerminalNode SECURITY() { return getToken(SpeakQlParser.SECURITY, 0); }
		public TerminalNode SERIAL() { return getToken(SpeakQlParser.SERIAL, 0); }
		public TerminalNode SERVER() { return getToken(SpeakQlParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(SpeakQlParser.SESSION, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(SpeakQlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(SpeakQlParser.SET_USER_ID, 0); }
		public TerminalNode SHARE() { return getToken(SpeakQlParser.SHARE, 0); }
		public TerminalNode SHARED() { return getToken(SpeakQlParser.SHARED, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(SpeakQlParser.SHOW_ROUTINE, 0); }
		public TerminalNode SIGNED() { return getToken(SpeakQlParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(SpeakQlParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(SpeakQlParser.SLAVE, 0); }
		public TerminalNode SLOW() { return getToken(SpeakQlParser.SLOW, 0); }
		public TerminalNode SNAPSHOT() { return getToken(SpeakQlParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(SpeakQlParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(SpeakQlParser.SOME, 0); }
		public TerminalNode SONAME() { return getToken(SpeakQlParser.SONAME, 0); }
		public TerminalNode SOUNDS() { return getToken(SpeakQlParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(SpeakQlParser.SOURCE, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(SpeakQlParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(SpeakQlParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(SpeakQlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(SpeakQlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(SpeakQlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(SpeakQlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(SpeakQlParser.SQL_THREAD, 0); }
		public TerminalNode STACKED() { return getToken(SpeakQlParser.STACKED, 0); }
		public TerminalNode START() { return getToken(SpeakQlParser.START, 0); }
		public TerminalNode STARTS() { return getToken(SpeakQlParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(SpeakQlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(SpeakQlParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(SpeakQlParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(SpeakQlParser.STATUS, 0); }
		public TerminalNode STD() { return getToken(SpeakQlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(SpeakQlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(SpeakQlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(SpeakQlParser.STDDEV_SAMP, 0); }
		public TerminalNode STOP() { return getToken(SpeakQlParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(SpeakQlParser.STORAGE, 0); }
		public TerminalNode STRING() { return getToken(SpeakQlParser.STRING, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(SpeakQlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBJECT() { return getToken(SpeakQlParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(SpeakQlParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(SpeakQlParser.SUBPARTITIONS, 0); }
		public TerminalNode SUM() { return getToken(SpeakQlParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(SpeakQlParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(SpeakQlParser.SWAPS, 0); }
		public TerminalNode SWITCHES() { return getToken(SpeakQlParser.SWITCHES, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(SpeakQlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_NAME() { return getToken(SpeakQlParser.TABLE_NAME, 0); }
		public TerminalNode TABLESPACE() { return getToken(SpeakQlParser.TABLESPACE, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(SpeakQlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode TEMPORARY() { return getToken(SpeakQlParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(SpeakQlParser.TEMPTABLE, 0); }
		public TerminalNode THAN() { return getToken(SpeakQlParser.THAN, 0); }
		public TerminalNode TRADITIONAL() { return getToken(SpeakQlParser.TRADITIONAL, 0); }
		public TerminalNode TRANSACTION() { return getToken(SpeakQlParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONAL() { return getToken(SpeakQlParser.TRANSACTIONAL, 0); }
		public TerminalNode TRIGGERS() { return getToken(SpeakQlParser.TRIGGERS, 0); }
		public TerminalNode TRUNCATE() { return getToken(SpeakQlParser.TRUNCATE, 0); }
		public TerminalNode UNDEFINED() { return getToken(SpeakQlParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(SpeakQlParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(SpeakQlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNINSTALL() { return getToken(SpeakQlParser.UNINSTALL, 0); }
		public TerminalNode UNKNOWN() { return getToken(SpeakQlParser.UNKNOWN, 0); }
		public TerminalNode UNTIL() { return getToken(SpeakQlParser.UNTIL, 0); }
		public TerminalNode UPGRADE() { return getToken(SpeakQlParser.UPGRADE, 0); }
		public TerminalNode USA() { return getToken(SpeakQlParser.USA, 0); }
		public TerminalNode USER() { return getToken(SpeakQlParser.USER, 0); }
		public TerminalNode USE_FRM() { return getToken(SpeakQlParser.USE_FRM, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(SpeakQlParser.USER_RESOURCES, 0); }
		public TerminalNode VALIDATION() { return getToken(SpeakQlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(SpeakQlParser.VALUE, 0); }
		public TerminalNode VAR_POP() { return getToken(SpeakQlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(SpeakQlParser.VAR_SAMP, 0); }
		public TerminalNode VARIABLES() { return getToken(SpeakQlParser.VARIABLES, 0); }
		public TerminalNode VARIANCE() { return getToken(SpeakQlParser.VARIANCE, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(SpeakQlParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode VIEW() { return getToken(SpeakQlParser.VIEW, 0); }
		public TerminalNode WAIT() { return getToken(SpeakQlParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(SpeakQlParser.WARNINGS, 0); }
		public TerminalNode WITHOUT() { return getToken(SpeakQlParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(SpeakQlParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(SpeakQlParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(SpeakQlParser.X509, 0); }
		public TerminalNode XA() { return getToken(SpeakQlParser.XA, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(SpeakQlParser.XA_RECOVER_ADMIN, 0); }
		public TerminalNode XML() { return getToken(SpeakQlParser.XML, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywordsCanBeId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterKeywordsCanBeId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitKeywordsCanBeId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitKeywordsCanBeId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_keywordsCanBeId);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6826);
			_la = _input.LA(1);
			if ( !(((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (CURRENT - 48)) | (1L << (DIAGNOSTICS - 48)) | (1L << (EXCEPT - 48)) | (1L << (GROUP - 48)))) != 0) || ((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (NUMBER - 124)) | (1L << (ORDER - 124)) | (1L << (STACKED - 124)))) != 0) || ((((_la - 242)) & ~0x3f) == 0 && ((1L << (_la - 242)) & ((1L << (SERIAL - 242)) | (1L << (AVG - 242)) | (1L << (BIT_AND - 242)) | (1L << (BIT_OR - 242)) | (1L << (BIT_XOR - 242)) | (1L << (COUNT - 242)) | (1L << (GROUP_CONCAT - 242)) | (1L << (MAX - 242)) | (1L << (MIN - 242)) | (1L << (STD - 242)))) != 0) || ((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & ((1L << (STDDEV - 306)) | (1L << (STDDEV_POP - 306)) | (1L << (STDDEV_SAMP - 306)) | (1L << (SUM - 306)) | (1L << (VAR_POP - 306)) | (1L << (VAR_SAMP - 306)) | (1L << (VARIANCE - 306)) | (1L << (ACCOUNT - 306)) | (1L << (ACTION - 306)) | (1L << (AFTER - 306)) | (1L << (AGGREGATE - 306)) | (1L << (ALGORITHM - 306)) | (1L << (ANY - 306)) | (1L << (AT - 306)) | (1L << (AUTHORS - 306)) | (1L << (AUTOCOMMIT - 306)) | (1L << (AUTOEXTEND_SIZE - 306)) | (1L << (AUTO_INCREMENT - 306)) | (1L << (AVG_ROW_LENGTH - 306)) | (1L << (BEGIN - 306)) | (1L << (BINLOG - 306)) | (1L << (BIT - 306)) | (1L << (BLOCK - 306)) | (1L << (BOOL - 306)) | (1L << (BOOLEAN - 306)) | (1L << (BTREE - 306)) | (1L << (CACHE - 306)) | (1L << (CASCADED - 306)) | (1L << (CHAIN - 306)) | (1L << (CHANGED - 306)) | (1L << (CHANNEL - 306)) | (1L << (CHECKSUM - 306)) | (1L << (PAGE_CHECKSUM - 306)) | (1L << (CIPHER - 306)) | (1L << (CLASS_ORIGIN - 306)) | (1L << (CLIENT - 306)) | (1L << (CLOSE - 306)) | (1L << (COALESCE - 306)) | (1L << (CODE - 306)) | (1L << (COLUMNS - 306)) | (1L << (COLUMN_FORMAT - 306)) | (1L << (COLUMN_NAME - 306)) | (1L << (COMMENT - 306)) | (1L << (COMMIT - 306)) | (1L << (COMPACT - 306)))) != 0) || ((((_la - 370)) & ~0x3f) == 0 && ((1L << (_la - 370)) & ((1L << (COMPLETION - 370)) | (1L << (COMPRESSED - 370)) | (1L << (COMPRESSION - 370)) | (1L << (CONCURRENT - 370)) | (1L << (CONNECT - 370)) | (1L << (CONNECTION - 370)) | (1L << (CONSISTENT - 370)) | (1L << (CONSTRAINT_CATALOG - 370)) | (1L << (CONSTRAINT_SCHEMA - 370)) | (1L << (CONSTRAINT_NAME - 370)) | (1L << (CONTAINS - 370)) | (1L << (CONTEXT - 370)) | (1L << (CONTRIBUTORS - 370)) | (1L << (COPY - 370)) | (1L << (CPU - 370)) | (1L << (CURSOR_NAME - 370)) | (1L << (DATA - 370)) | (1L << (DATAFILE - 370)) | (1L << (DEALLOCATE - 370)) | (1L << (DEFAULT_AUTH - 370)) | (1L << (DEFINER - 370)) | (1L << (DELAY_KEY_WRITE - 370)) | (1L << (DES_KEY_FILE - 370)) | (1L << (DIRECTORY - 370)) | (1L << (DISABLE - 370)) | (1L << (DISCARD - 370)) | (1L << (DISK - 370)) | (1L << (DO - 370)) | (1L << (DUMPFILE - 370)) | (1L << (DUPLICATE - 370)) | (1L << (DYNAMIC - 370)) | (1L << (ENABLE - 370)) | (1L << (ENCRYPTION - 370)) | (1L << (END - 370)) | (1L << (ENDS - 370)) | (1L << (ENGINE - 370)) | (1L << (ENGINES - 370)) | (1L << (ERROR - 370)) | (1L << (ERRORS - 370)) | (1L << (ESCAPE - 370)) | (1L << (EVEN - 370)) | (1L << (EVENT - 370)) | (1L << (EVENTS - 370)) | (1L << (EVERY - 370)) | (1L << (EXCHANGE - 370)) | (1L << (EXCLUSIVE - 370)) | (1L << (EXPIRE - 370)) | (1L << (EXPORT - 370)) | (1L << (EXTENDED - 370)) | (1L << (EXTENT_SIZE - 370)) | (1L << (FAST - 370)) | (1L << (FAULTS - 370)) | (1L << (FIELDS - 370)) | (1L << (FILE_BLOCK_SIZE - 370)) | (1L << (FILTER - 370)) | (1L << (FIRST - 370)) | (1L << (FIXED - 370)) | (1L << (FLUSH - 370)) | (1L << (FOLLOWS - 370)) | (1L << (FOUND - 370)) | (1L << (FULL - 370)) | (1L << (FUNCTION - 370)) | (1L << (GENERAL - 370)))) != 0) || ((((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & ((1L << (GLOBAL - 434)) | (1L << (GRANTS - 434)) | (1L << (GROUP_REPLICATION - 434)) | (1L << (HANDLER - 434)) | (1L << (HASH - 434)) | (1L << (HELP - 434)) | (1L << (HOST - 434)) | (1L << (HOSTS - 434)) | (1L << (IDENTIFIED - 434)) | (1L << (IGNORE_SERVER_IDS - 434)) | (1L << (IMPORT - 434)) | (1L << (INDEXES - 434)) | (1L << (INITIAL_SIZE - 434)) | (1L << (INPLACE - 434)) | (1L << (INSERT_METHOD - 434)) | (1L << (INSTALL - 434)) | (1L << (INSTANCE - 434)) | (1L << (INVOKER - 434)) | (1L << (IO - 434)) | (1L << (IO_THREAD - 434)) | (1L << (IPC - 434)) | (1L << (ISOLATION - 434)) | (1L << (ISSUER - 434)) | (1L << (JSON - 434)) | (1L << (KEY_BLOCK_SIZE - 434)) | (1L << (LANGUAGE - 434)) | (1L << (LAST - 434)) | (1L << (LEAVES - 434)) | (1L << (LESS - 434)) | (1L << (LEVEL - 434)) | (1L << (LIST - 434)) | (1L << (LOCAL - 434)) | (1L << (LOGFILE - 434)) | (1L << (LOGS - 434)) | (1L << (MASTER - 434)) | (1L << (MASTER_AUTO_POSITION - 434)) | (1L << (MASTER_CONNECT_RETRY - 434)) | (1L << (MASTER_DELAY - 434)) | (1L << (MASTER_HEARTBEAT_PERIOD - 434)) | (1L << (MASTER_HOST - 434)) | (1L << (MASTER_LOG_FILE - 434)) | (1L << (MASTER_LOG_POS - 434)) | (1L << (MASTER_PASSWORD - 434)) | (1L << (MASTER_PORT - 434)) | (1L << (MASTER_RETRY_COUNT - 434)) | (1L << (MASTER_SSL - 434)) | (1L << (MASTER_SSL_CA - 434)) | (1L << (MASTER_SSL_CAPATH - 434)) | (1L << (MASTER_SSL_CERT - 434)) | (1L << (MASTER_SSL_CIPHER - 434)) | (1L << (MASTER_SSL_CRL - 434)) | (1L << (MASTER_SSL_CRLPATH - 434)) | (1L << (MASTER_SSL_KEY - 434)) | (1L << (MASTER_TLS_VERSION - 434)) | (1L << (MASTER_USER - 434)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 434)) | (1L << (MAX_QUERIES_PER_HOUR - 434)) | (1L << (MAX_ROWS - 434)) | (1L << (MAX_SIZE - 434)) | (1L << (MAX_UPDATES_PER_HOUR - 434)) | (1L << (MAX_USER_CONNECTIONS - 434)) | (1L << (MEDIUM - 434)) | (1L << (MEMBER - 434)))) != 0) || ((((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & ((1L << (MERGE - 498)) | (1L << (MESSAGE_TEXT - 498)) | (1L << (MID - 498)) | (1L << (MIGRATE - 498)) | (1L << (MIN_ROWS - 498)) | (1L << (MODE - 498)) | (1L << (MODIFY - 498)) | (1L << (MUTEX - 498)) | (1L << (MYSQL - 498)) | (1L << (MYSQL_ERRNO - 498)) | (1L << (NAME - 498)) | (1L << (NAMES - 498)) | (1L << (NCHAR - 498)) | (1L << (NEVER - 498)) | (1L << (NEXT - 498)) | (1L << (NO - 498)) | (1L << (NODEGROUP - 498)) | (1L << (NONE - 498)) | (1L << (ODBC - 498)) | (1L << (OFFLINE - 498)) | (1L << (OFFSET - 498)) | (1L << (OF - 498)) | (1L << (OJ - 498)) | (1L << (OLD_PASSWORD - 498)) | (1L << (ONE - 498)) | (1L << (ONLINE - 498)) | (1L << (ONLY - 498)) | (1L << (OPEN - 498)) | (1L << (OPTIMIZER_COSTS - 498)) | (1L << (OPTIONS - 498)) | (1L << (OWNER - 498)) | (1L << (PACK_KEYS - 498)) | (1L << (PAGE - 498)) | (1L << (PARSER - 498)) | (1L << (PARTIAL - 498)) | (1L << (PARTITIONING - 498)) | (1L << (PARTITIONS - 498)) | (1L << (PASSWORD - 498)) | (1L << (PHASE - 498)) | (1L << (PLUGIN - 498)) | (1L << (PLUGIN_DIR - 498)) | (1L << (PLUGINS - 498)) | (1L << (PORT - 498)) | (1L << (PRECEDES - 498)) | (1L << (PREPARE - 498)) | (1L << (PRESERVE - 498)) | (1L << (PREV - 498)) | (1L << (PROCESSLIST - 498)) | (1L << (PROFILE - 498)) | (1L << (PROFILES - 498)) | (1L << (PROXY - 498)) | (1L << (QUERY - 498)) | (1L << (QUICK - 498)) | (1L << (REBUILD - 498)) | (1L << (RECOVER - 498)) | (1L << (REDO_BUFFER_SIZE - 498)) | (1L << (REDUNDANT - 498)) | (1L << (RELAY - 498)) | (1L << (RELAY_LOG_FILE - 498)) | (1L << (RELAY_LOG_POS - 498)) | (1L << (RELAYLOG - 498)) | (1L << (REMOVE - 498)) | (1L << (REORGANIZE - 498)))) != 0) || ((((_la - 562)) & ~0x3f) == 0 && ((1L << (_la - 562)) & ((1L << (REPAIR - 562)) | (1L << (REPLICATE_DO_DB - 562)) | (1L << (REPLICATE_DO_TABLE - 562)) | (1L << (REPLICATE_IGNORE_DB - 562)) | (1L << (REPLICATE_IGNORE_TABLE - 562)) | (1L << (REPLICATE_REWRITE_DB - 562)) | (1L << (REPLICATE_WILD_DO_TABLE - 562)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 562)) | (1L << (REPLICATION - 562)) | (1L << (RESET - 562)) | (1L << (RESUME - 562)) | (1L << (RETURNED_SQLSTATE - 562)) | (1L << (RETURNS - 562)) | (1L << (ROLE - 562)) | (1L << (ROLLBACK - 562)) | (1L << (ROLLUP - 562)) | (1L << (ROTATE - 562)) | (1L << (ROW - 562)) | (1L << (ROWS - 562)) | (1L << (ROW_FORMAT - 562)) | (1L << (SAVEPOINT - 562)) | (1L << (SCHEDULE - 562)) | (1L << (SECURITY - 562)) | (1L << (SERVER - 562)) | (1L << (SESSION - 562)) | (1L << (SHARE - 562)) | (1L << (SHARED - 562)) | (1L << (SIGNED - 562)) | (1L << (SIMPLE - 562)) | (1L << (SLAVE - 562)) | (1L << (SLOW - 562)) | (1L << (SNAPSHOT - 562)) | (1L << (SOCKET - 562)) | (1L << (SOME - 562)) | (1L << (SONAME - 562)) | (1L << (SOUNDS - 562)) | (1L << (SOURCE - 562)) | (1L << (SQL_AFTER_GTIDS - 562)) | (1L << (SQL_AFTER_MTS_GAPS - 562)) | (1L << (SQL_BEFORE_GTIDS - 562)) | (1L << (SQL_BUFFER_RESULT - 562)) | (1L << (SQL_CACHE - 562)) | (1L << (SQL_NO_CACHE - 562)) | (1L << (SQL_THREAD - 562)) | (1L << (START - 562)) | (1L << (STARTS - 562)) | (1L << (STATS_AUTO_RECALC - 562)) | (1L << (STATS_PERSISTENT - 562)) | (1L << (STATS_SAMPLE_PAGES - 562)) | (1L << (STATUS - 562)) | (1L << (STOP - 562)) | (1L << (STORAGE - 562)) | (1L << (STRING - 562)) | (1L << (SUBCLASS_ORIGIN - 562)) | (1L << (SUBJECT - 562)) | (1L << (SUBPARTITION - 562)) | (1L << (SUBPARTITIONS - 562)) | (1L << (SUSPEND - 562)) | (1L << (SWAPS - 562)) | (1L << (SWITCHES - 562)) | (1L << (TABLE_NAME - 562)) | (1L << (TABLESPACE - 562)))) != 0) || ((((_la - 627)) & ~0x3f) == 0 && ((1L << (_la - 627)) & ((1L << (TEMPORARY - 627)) | (1L << (TEMPTABLE - 627)) | (1L << (THAN - 627)) | (1L << (TRADITIONAL - 627)) | (1L << (TRANSACTION - 627)) | (1L << (TRANSACTIONAL - 627)) | (1L << (TRIGGERS - 627)) | (1L << (TRUNCATE - 627)) | (1L << (UNDEFINED - 627)) | (1L << (UNDOFILE - 627)) | (1L << (UNDO_BUFFER_SIZE - 627)) | (1L << (UNINSTALL - 627)) | (1L << (UNKNOWN - 627)) | (1L << (UNTIL - 627)) | (1L << (UPGRADE - 627)) | (1L << (USER - 627)) | (1L << (USE_FRM - 627)) | (1L << (USER_RESOURCES - 627)) | (1L << (VALIDATION - 627)) | (1L << (VALUE - 627)) | (1L << (VARIABLES - 627)) | (1L << (VIEW - 627)) | (1L << (WAIT - 627)) | (1L << (WARNINGS - 627)) | (1L << (WITHOUT - 627)) | (1L << (WORK - 627)) | (1L << (WRAPPER - 627)) | (1L << (X509 - 627)) | (1L << (XA - 627)) | (1L << (XML - 627)) | (1L << (EUR - 627)) | (1L << (USA - 627)) | (1L << (JIS - 627)) | (1L << (ISO - 627)) | (1L << (INTERNAL - 627)) | (1L << (AUDIT_ADMIN - 627)) | (1L << (BACKUP_ADMIN - 627)) | (1L << (BINLOG_ADMIN - 627)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 627)) | (1L << (CLONE_ADMIN - 627)) | (1L << (CONNECTION_ADMIN - 627)) | (1L << (ENCRYPTION_KEY_ADMIN - 627)))) != 0) || ((((_la - 691)) & ~0x3f) == 0 && ((1L << (_la - 691)) & ((1L << (FIREWALL_ADMIN - 691)) | (1L << (FIREWALL_USER - 691)) | (1L << (GROUP_REPLICATION_ADMIN - 691)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 691)) | (1L << (NDB_STORED_USER - 691)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 691)) | (1L << (REPLICATION_APPLIER - 691)) | (1L << (REPLICATION_SLAVE_ADMIN - 691)) | (1L << (RESOURCE_GROUP_ADMIN - 691)) | (1L << (RESOURCE_GROUP_USER - 691)) | (1L << (ROLE_ADMIN - 691)) | (1L << (SESSION_VARIABLES_ADMIN - 691)) | (1L << (SET_USER_ID - 691)) | (1L << (SHOW_ROUTINE - 691)) | (1L << (SYSTEM_VARIABLES_ADMIN - 691)) | (1L << (TABLE_ENCRYPTION_ADMIN - 691)) | (1L << (VERSION_TOKEN_ADMIN - 691)) | (1L << (XA_RECOVER_ADMIN - 691)))) != 0) || _la==MEMORY || _la==CATALOG_NAME || _la==SCHEMA_NAME || _la==OPTIONAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameBaseContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(SpeakQlParser.ABS, 0); }
		public TerminalNode ACOS() { return getToken(SpeakQlParser.ACOS, 0); }
		public TerminalNode ADDDATE() { return getToken(SpeakQlParser.ADDDATE, 0); }
		public TerminalNode ADDTIME() { return getToken(SpeakQlParser.ADDTIME, 0); }
		public TerminalNode AES_DECRYPT() { return getToken(SpeakQlParser.AES_DECRYPT, 0); }
		public TerminalNode AES_ENCRYPT() { return getToken(SpeakQlParser.AES_ENCRYPT, 0); }
		public TerminalNode AREA() { return getToken(SpeakQlParser.AREA, 0); }
		public TerminalNode ASBINARY() { return getToken(SpeakQlParser.ASBINARY, 0); }
		public TerminalNode ASIN() { return getToken(SpeakQlParser.ASIN, 0); }
		public TerminalNode ASTEXT() { return getToken(SpeakQlParser.ASTEXT, 0); }
		public TerminalNode ASWKB() { return getToken(SpeakQlParser.ASWKB, 0); }
		public TerminalNode ASWKT() { return getToken(SpeakQlParser.ASWKT, 0); }
		public TerminalNode ASYMMETRIC_DECRYPT() { return getToken(SpeakQlParser.ASYMMETRIC_DECRYPT, 0); }
		public TerminalNode ASYMMETRIC_DERIVE() { return getToken(SpeakQlParser.ASYMMETRIC_DERIVE, 0); }
		public TerminalNode ASYMMETRIC_ENCRYPT() { return getToken(SpeakQlParser.ASYMMETRIC_ENCRYPT, 0); }
		public TerminalNode ASYMMETRIC_SIGN() { return getToken(SpeakQlParser.ASYMMETRIC_SIGN, 0); }
		public TerminalNode ASYMMETRIC_VERIFY() { return getToken(SpeakQlParser.ASYMMETRIC_VERIFY, 0); }
		public TerminalNode ATAN() { return getToken(SpeakQlParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(SpeakQlParser.ATAN2, 0); }
		public TerminalNode BENCHMARK() { return getToken(SpeakQlParser.BENCHMARK, 0); }
		public TerminalNode BIN() { return getToken(SpeakQlParser.BIN, 0); }
		public TerminalNode BIT_COUNT() { return getToken(SpeakQlParser.BIT_COUNT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(SpeakQlParser.BIT_LENGTH, 0); }
		public TerminalNode BUFFER() { return getToken(SpeakQlParser.BUFFER, 0); }
		public TerminalNode CEIL() { return getToken(SpeakQlParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(SpeakQlParser.CEILING, 0); }
		public TerminalNode CENTROID() { return getToken(SpeakQlParser.CENTROID, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(SpeakQlParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARSET() { return getToken(SpeakQlParser.CHARSET, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(SpeakQlParser.CHAR_LENGTH, 0); }
		public TerminalNode COERCIBILITY() { return getToken(SpeakQlParser.COERCIBILITY, 0); }
		public TerminalNode COLLATION() { return getToken(SpeakQlParser.COLLATION, 0); }
		public TerminalNode COMPRESS() { return getToken(SpeakQlParser.COMPRESS, 0); }
		public TerminalNode CONCAT() { return getToken(SpeakQlParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(SpeakQlParser.CONCAT_WS, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(SpeakQlParser.CONNECTION_ID, 0); }
		public TerminalNode CONV() { return getToken(SpeakQlParser.CONV, 0); }
		public TerminalNode CONVERT_TZ() { return getToken(SpeakQlParser.CONVERT_TZ, 0); }
		public TerminalNode COS() { return getToken(SpeakQlParser.COS, 0); }
		public TerminalNode COT() { return getToken(SpeakQlParser.COT, 0); }
		public TerminalNode COUNT() { return getToken(SpeakQlParser.COUNT, 0); }
		public TerminalNode CRC32() { return getToken(SpeakQlParser.CRC32, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return getToken(SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return getToken(SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		public TerminalNode CREATE_DH_PARAMETERS() { return getToken(SpeakQlParser.CREATE_DH_PARAMETERS, 0); }
		public TerminalNode CREATE_DIGEST() { return getToken(SpeakQlParser.CREATE_DIGEST, 0); }
		public TerminalNode CROSSES() { return getToken(SpeakQlParser.CROSSES, 0); }
		public TerminalNode DATABASE() { return getToken(SpeakQlParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(SpeakQlParser.DATE, 0); }
		public TerminalNode DATEDIFF() { return getToken(SpeakQlParser.DATEDIFF, 0); }
		public TerminalNode DATE_FORMAT() { return getToken(SpeakQlParser.DATE_FORMAT, 0); }
		public TerminalNode DAY() { return getToken(SpeakQlParser.DAY, 0); }
		public TerminalNode DAYNAME() { return getToken(SpeakQlParser.DAYNAME, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(SpeakQlParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(SpeakQlParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(SpeakQlParser.DAYOFYEAR, 0); }
		public TerminalNode DECODE() { return getToken(SpeakQlParser.DECODE, 0); }
		public TerminalNode DEGREES() { return getToken(SpeakQlParser.DEGREES, 0); }
		public TerminalNode DES_DECRYPT() { return getToken(SpeakQlParser.DES_DECRYPT, 0); }
		public TerminalNode DES_ENCRYPT() { return getToken(SpeakQlParser.DES_ENCRYPT, 0); }
		public TerminalNode DIMENSION() { return getToken(SpeakQlParser.DIMENSION, 0); }
		public TerminalNode DISJOINT() { return getToken(SpeakQlParser.DISJOINT, 0); }
		public TerminalNode ELT() { return getToken(SpeakQlParser.ELT, 0); }
		public TerminalNode ENCODE() { return getToken(SpeakQlParser.ENCODE, 0); }
		public TerminalNode ENCRYPT() { return getToken(SpeakQlParser.ENCRYPT, 0); }
		public TerminalNode ENDPOINT() { return getToken(SpeakQlParser.ENDPOINT, 0); }
		public TerminalNode ENVELOPE() { return getToken(SpeakQlParser.ENVELOPE, 0); }
		public TerminalNode EQUALS() { return getToken(SpeakQlParser.EQUALS, 0); }
		public TerminalNode EXP() { return getToken(SpeakQlParser.EXP, 0); }
		public TerminalNode EXPORT_SET() { return getToken(SpeakQlParser.EXPORT_SET, 0); }
		public TerminalNode EXTERIORRING() { return getToken(SpeakQlParser.EXTERIORRING, 0); }
		public TerminalNode EXTRACTVALUE() { return getToken(SpeakQlParser.EXTRACTVALUE, 0); }
		public TerminalNode FIELD() { return getToken(SpeakQlParser.FIELD, 0); }
		public TerminalNode FIND_IN_SET() { return getToken(SpeakQlParser.FIND_IN_SET, 0); }
		public TerminalNode FLOOR() { return getToken(SpeakQlParser.FLOOR, 0); }
		public TerminalNode FORMAT() { return getToken(SpeakQlParser.FORMAT, 0); }
		public TerminalNode FOUND_ROWS() { return getToken(SpeakQlParser.FOUND_ROWS, 0); }
		public TerminalNode FROM_BASE64() { return getToken(SpeakQlParser.FROM_BASE64, 0); }
		public TerminalNode FROM_DAYS() { return getToken(SpeakQlParser.FROM_DAYS, 0); }
		public TerminalNode FROM_UNIXTIME() { return getToken(SpeakQlParser.FROM_UNIXTIME, 0); }
		public TerminalNode GEOMCOLLFROMTEXT() { return getToken(SpeakQlParser.GEOMCOLLFROMTEXT, 0); }
		public TerminalNode GEOMCOLLFROMWKB() { return getToken(SpeakQlParser.GEOMCOLLFROMWKB, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(SpeakQlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return getToken(SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMWKB() { return getToken(SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode GEOMETRYFROMTEXT() { return getToken(SpeakQlParser.GEOMETRYFROMTEXT, 0); }
		public TerminalNode GEOMETRYFROMWKB() { return getToken(SpeakQlParser.GEOMETRYFROMWKB, 0); }
		public TerminalNode GEOMETRYN() { return getToken(SpeakQlParser.GEOMETRYN, 0); }
		public TerminalNode GEOMETRYTYPE() { return getToken(SpeakQlParser.GEOMETRYTYPE, 0); }
		public TerminalNode GEOMFROMTEXT() { return getToken(SpeakQlParser.GEOMFROMTEXT, 0); }
		public TerminalNode GEOMFROMWKB() { return getToken(SpeakQlParser.GEOMFROMWKB, 0); }
		public TerminalNode GET_FORMAT() { return getToken(SpeakQlParser.GET_FORMAT, 0); }
		public TerminalNode GET_LOCK() { return getToken(SpeakQlParser.GET_LOCK, 0); }
		public TerminalNode GLENGTH() { return getToken(SpeakQlParser.GLENGTH, 0); }
		public TerminalNode GREATEST() { return getToken(SpeakQlParser.GREATEST, 0); }
		public TerminalNode GTID_SUBSET() { return getToken(SpeakQlParser.GTID_SUBSET, 0); }
		public TerminalNode GTID_SUBTRACT() { return getToken(SpeakQlParser.GTID_SUBTRACT, 0); }
		public TerminalNode HEX() { return getToken(SpeakQlParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(SpeakQlParser.HOUR, 0); }
		public TerminalNode IFNULL() { return getToken(SpeakQlParser.IFNULL, 0); }
		public TerminalNode INET6_ATON() { return getToken(SpeakQlParser.INET6_ATON, 0); }
		public TerminalNode INET6_NTOA() { return getToken(SpeakQlParser.INET6_NTOA, 0); }
		public TerminalNode INET_ATON() { return getToken(SpeakQlParser.INET_ATON, 0); }
		public TerminalNode INET_NTOA() { return getToken(SpeakQlParser.INET_NTOA, 0); }
		public TerminalNode INSTR() { return getToken(SpeakQlParser.INSTR, 0); }
		public TerminalNode INTERIORRINGN() { return getToken(SpeakQlParser.INTERIORRINGN, 0); }
		public TerminalNode INTERSECTS() { return getToken(SpeakQlParser.INTERSECTS, 0); }
		public TerminalNode INVISIBLE() { return getToken(SpeakQlParser.INVISIBLE, 0); }
		public TerminalNode ISCLOSED() { return getToken(SpeakQlParser.ISCLOSED, 0); }
		public TerminalNode ISEMPTY() { return getToken(SpeakQlParser.ISEMPTY, 0); }
		public TerminalNode ISNULL() { return getToken(SpeakQlParser.ISNULL, 0); }
		public TerminalNode ISSIMPLE() { return getToken(SpeakQlParser.ISSIMPLE, 0); }
		public TerminalNode IS_FREE_LOCK() { return getToken(SpeakQlParser.IS_FREE_LOCK, 0); }
		public TerminalNode IS_IPV4() { return getToken(SpeakQlParser.IS_IPV4, 0); }
		public TerminalNode IS_IPV4_COMPAT() { return getToken(SpeakQlParser.IS_IPV4_COMPAT, 0); }
		public TerminalNode IS_IPV4_MAPPED() { return getToken(SpeakQlParser.IS_IPV4_MAPPED, 0); }
		public TerminalNode IS_IPV6() { return getToken(SpeakQlParser.IS_IPV6, 0); }
		public TerminalNode IS_USED_LOCK() { return getToken(SpeakQlParser.IS_USED_LOCK, 0); }
		public TerminalNode LAST_INSERT_ID() { return getToken(SpeakQlParser.LAST_INSERT_ID, 0); }
		public TerminalNode LCASE() { return getToken(SpeakQlParser.LCASE, 0); }
		public TerminalNode LEAST() { return getToken(SpeakQlParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(SpeakQlParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(SpeakQlParser.LENGTH, 0); }
		public TerminalNode LINEFROMTEXT() { return getToken(SpeakQlParser.LINEFROMTEXT, 0); }
		public TerminalNode LINEFROMWKB() { return getToken(SpeakQlParser.LINEFROMWKB, 0); }
		public TerminalNode LINESTRING() { return getToken(SpeakQlParser.LINESTRING, 0); }
		public TerminalNode LINESTRINGFROMTEXT() { return getToken(SpeakQlParser.LINESTRINGFROMTEXT, 0); }
		public TerminalNode LINESTRINGFROMWKB() { return getToken(SpeakQlParser.LINESTRINGFROMWKB, 0); }
		public TerminalNode LN() { return getToken(SpeakQlParser.LN, 0); }
		public TerminalNode LOAD_FILE() { return getToken(SpeakQlParser.LOAD_FILE, 0); }
		public TerminalNode LOCATE() { return getToken(SpeakQlParser.LOCATE, 0); }
		public TerminalNode LOG() { return getToken(SpeakQlParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(SpeakQlParser.LOG10, 0); }
		public TerminalNode LOG2() { return getToken(SpeakQlParser.LOG2, 0); }
		public TerminalNode LOWER() { return getToken(SpeakQlParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(SpeakQlParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(SpeakQlParser.LTRIM, 0); }
		public TerminalNode MAKEDATE() { return getToken(SpeakQlParser.MAKEDATE, 0); }
		public TerminalNode MAKETIME() { return getToken(SpeakQlParser.MAKETIME, 0); }
		public TerminalNode MAKE_SET() { return getToken(SpeakQlParser.MAKE_SET, 0); }
		public TerminalNode MASTER_POS_WAIT() { return getToken(SpeakQlParser.MASTER_POS_WAIT, 0); }
		public TerminalNode MBRCONTAINS() { return getToken(SpeakQlParser.MBRCONTAINS, 0); }
		public TerminalNode MBRDISJOINT() { return getToken(SpeakQlParser.MBRDISJOINT, 0); }
		public TerminalNode MBREQUAL() { return getToken(SpeakQlParser.MBREQUAL, 0); }
		public TerminalNode MBRINTERSECTS() { return getToken(SpeakQlParser.MBRINTERSECTS, 0); }
		public TerminalNode MBROVERLAPS() { return getToken(SpeakQlParser.MBROVERLAPS, 0); }
		public TerminalNode MBRTOUCHES() { return getToken(SpeakQlParser.MBRTOUCHES, 0); }
		public TerminalNode MBRWITHIN() { return getToken(SpeakQlParser.MBRWITHIN, 0); }
		public TerminalNode MD5() { return getToken(SpeakQlParser.MD5, 0); }
		public TerminalNode MICROSECOND() { return getToken(SpeakQlParser.MICROSECOND, 0); }
		public TerminalNode MINUTE() { return getToken(SpeakQlParser.MINUTE, 0); }
		public TerminalNode MLINEFROMTEXT() { return getToken(SpeakQlParser.MLINEFROMTEXT, 0); }
		public TerminalNode MLINEFROMWKB() { return getToken(SpeakQlParser.MLINEFROMWKB, 0); }
		public TerminalNode MOD() { return getToken(SpeakQlParser.MOD, 0); }
		public TerminalNode MONTH() { return getToken(SpeakQlParser.MONTH, 0); }
		public TerminalNode MONTHNAME() { return getToken(SpeakQlParser.MONTHNAME, 0); }
		public TerminalNode MPOINTFROMTEXT() { return getToken(SpeakQlParser.MPOINTFROMTEXT, 0); }
		public TerminalNode MPOINTFROMWKB() { return getToken(SpeakQlParser.MPOINTFROMWKB, 0); }
		public TerminalNode MPOLYFROMTEXT() { return getToken(SpeakQlParser.MPOLYFROMTEXT, 0); }
		public TerminalNode MPOLYFROMWKB() { return getToken(SpeakQlParser.MPOLYFROMWKB, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(SpeakQlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTILINESTRINGFROMTEXT() { return getToken(SpeakQlParser.MULTILINESTRINGFROMTEXT, 0); }
		public TerminalNode MULTILINESTRINGFROMWKB() { return getToken(SpeakQlParser.MULTILINESTRINGFROMWKB, 0); }
		public TerminalNode MULTIPOINT() { return getToken(SpeakQlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOINTFROMTEXT() { return getToken(SpeakQlParser.MULTIPOINTFROMTEXT, 0); }
		public TerminalNode MULTIPOINTFROMWKB() { return getToken(SpeakQlParser.MULTIPOINTFROMWKB, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(SpeakQlParser.MULTIPOLYGON, 0); }
		public TerminalNode MULTIPOLYGONFROMTEXT() { return getToken(SpeakQlParser.MULTIPOLYGONFROMTEXT, 0); }
		public TerminalNode MULTIPOLYGONFROMWKB() { return getToken(SpeakQlParser.MULTIPOLYGONFROMWKB, 0); }
		public TerminalNode NAME_CONST() { return getToken(SpeakQlParser.NAME_CONST, 0); }
		public TerminalNode NULLIF() { return getToken(SpeakQlParser.NULLIF, 0); }
		public TerminalNode NUMGEOMETRIES() { return getToken(SpeakQlParser.NUMGEOMETRIES, 0); }
		public TerminalNode NUMINTERIORRINGS() { return getToken(SpeakQlParser.NUMINTERIORRINGS, 0); }
		public TerminalNode NUMPOINTS() { return getToken(SpeakQlParser.NUMPOINTS, 0); }
		public TerminalNode OCT() { return getToken(SpeakQlParser.OCT, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(SpeakQlParser.OCTET_LENGTH, 0); }
		public TerminalNode ORD() { return getToken(SpeakQlParser.ORD, 0); }
		public TerminalNode OVERLAPS() { return getToken(SpeakQlParser.OVERLAPS, 0); }
		public TerminalNode PERIOD_ADD() { return getToken(SpeakQlParser.PERIOD_ADD, 0); }
		public TerminalNode PERIOD_DIFF() { return getToken(SpeakQlParser.PERIOD_DIFF, 0); }
		public TerminalNode PI() { return getToken(SpeakQlParser.PI, 0); }
		public TerminalNode POINT() { return getToken(SpeakQlParser.POINT, 0); }
		public TerminalNode POINTFROMTEXT() { return getToken(SpeakQlParser.POINTFROMTEXT, 0); }
		public TerminalNode POINTFROMWKB() { return getToken(SpeakQlParser.POINTFROMWKB, 0); }
		public TerminalNode POINTN() { return getToken(SpeakQlParser.POINTN, 0); }
		public TerminalNode POLYFROMTEXT() { return getToken(SpeakQlParser.POLYFROMTEXT, 0); }
		public TerminalNode POLYFROMWKB() { return getToken(SpeakQlParser.POLYFROMWKB, 0); }
		public TerminalNode POLYGON() { return getToken(SpeakQlParser.POLYGON, 0); }
		public TerminalNode POLYGONFROMTEXT() { return getToken(SpeakQlParser.POLYGONFROMTEXT, 0); }
		public TerminalNode POLYGONFROMWKB() { return getToken(SpeakQlParser.POLYGONFROMWKB, 0); }
		public TerminalNode POSITION() { return getToken(SpeakQlParser.POSITION, 0); }
		public TerminalNode POW() { return getToken(SpeakQlParser.POW, 0); }
		public TerminalNode POWER() { return getToken(SpeakQlParser.POWER, 0); }
		public TerminalNode QUARTER() { return getToken(SpeakQlParser.QUARTER, 0); }
		public TerminalNode QUOTE() { return getToken(SpeakQlParser.QUOTE, 0); }
		public TerminalNode RADIANS() { return getToken(SpeakQlParser.RADIANS, 0); }
		public TerminalNode RAND() { return getToken(SpeakQlParser.RAND, 0); }
		public TerminalNode RANDOM_BYTES() { return getToken(SpeakQlParser.RANDOM_BYTES, 0); }
		public TerminalNode RELEASE_LOCK() { return getToken(SpeakQlParser.RELEASE_LOCK, 0); }
		public TerminalNode REVERSE() { return getToken(SpeakQlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(SpeakQlParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(SpeakQlParser.ROUND, 0); }
		public TerminalNode ROW_COUNT() { return getToken(SpeakQlParser.ROW_COUNT, 0); }
		public TerminalNode RPAD() { return getToken(SpeakQlParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(SpeakQlParser.RTRIM, 0); }
		public TerminalNode SECOND() { return getToken(SpeakQlParser.SECOND, 0); }
		public TerminalNode SEC_TO_TIME() { return getToken(SpeakQlParser.SEC_TO_TIME, 0); }
		public TerminalNode SCHEMA() { return getToken(SpeakQlParser.SCHEMA, 0); }
		public TerminalNode SESSION_USER() { return getToken(SpeakQlParser.SESSION_USER, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(SpeakQlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SHA() { return getToken(SpeakQlParser.SHA, 0); }
		public TerminalNode SHA1() { return getToken(SpeakQlParser.SHA1, 0); }
		public TerminalNode SHA2() { return getToken(SpeakQlParser.SHA2, 0); }
		public TerminalNode SIGN() { return getToken(SpeakQlParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(SpeakQlParser.SIN, 0); }
		public TerminalNode SLEEP() { return getToken(SpeakQlParser.SLEEP, 0); }
		public TerminalNode SOUNDEX() { return getToken(SpeakQlParser.SOUNDEX, 0); }
		public TerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return getToken(SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		public TerminalNode SQRT() { return getToken(SpeakQlParser.SQRT, 0); }
		public TerminalNode SRID() { return getToken(SpeakQlParser.SRID, 0); }
		public TerminalNode STARTPOINT() { return getToken(SpeakQlParser.STARTPOINT, 0); }
		public TerminalNode STRCMP() { return getToken(SpeakQlParser.STRCMP, 0); }
		public TerminalNode STR_TO_DATE() { return getToken(SpeakQlParser.STR_TO_DATE, 0); }
		public TerminalNode ST_AREA() { return getToken(SpeakQlParser.ST_AREA, 0); }
		public TerminalNode ST_ASBINARY() { return getToken(SpeakQlParser.ST_ASBINARY, 0); }
		public TerminalNode ST_ASTEXT() { return getToken(SpeakQlParser.ST_ASTEXT, 0); }
		public TerminalNode ST_ASWKB() { return getToken(SpeakQlParser.ST_ASWKB, 0); }
		public TerminalNode ST_ASWKT() { return getToken(SpeakQlParser.ST_ASWKT, 0); }
		public TerminalNode ST_BUFFER() { return getToken(SpeakQlParser.ST_BUFFER, 0); }
		public TerminalNode ST_CENTROID() { return getToken(SpeakQlParser.ST_CENTROID, 0); }
		public TerminalNode ST_CONTAINS() { return getToken(SpeakQlParser.ST_CONTAINS, 0); }
		public TerminalNode ST_CROSSES() { return getToken(SpeakQlParser.ST_CROSSES, 0); }
		public TerminalNode ST_DIFFERENCE() { return getToken(SpeakQlParser.ST_DIFFERENCE, 0); }
		public TerminalNode ST_DIMENSION() { return getToken(SpeakQlParser.ST_DIMENSION, 0); }
		public TerminalNode ST_DISJOINT() { return getToken(SpeakQlParser.ST_DISJOINT, 0); }
		public TerminalNode ST_DISTANCE() { return getToken(SpeakQlParser.ST_DISTANCE, 0); }
		public TerminalNode ST_ENDPOINT() { return getToken(SpeakQlParser.ST_ENDPOINT, 0); }
		public TerminalNode ST_ENVELOPE() { return getToken(SpeakQlParser.ST_ENVELOPE, 0); }
		public TerminalNode ST_EQUALS() { return getToken(SpeakQlParser.ST_EQUALS, 0); }
		public TerminalNode ST_EXTERIORRING() { return getToken(SpeakQlParser.ST_EXTERIORRING, 0); }
		public TerminalNode ST_GEOMCOLLFROMTEXT() { return getToken(SpeakQlParser.ST_GEOMCOLLFROMTEXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMTXT() { return getToken(SpeakQlParser.ST_GEOMCOLLFROMTXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMWKB() { return getToken(SpeakQlParser.ST_GEOMCOLLFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return getToken(SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return getToken(SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYFROMTEXT() { return getToken(SpeakQlParser.ST_GEOMETRYFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYFROMWKB() { return getToken(SpeakQlParser.ST_GEOMETRYFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYN() { return getToken(SpeakQlParser.ST_GEOMETRYN, 0); }
		public TerminalNode ST_GEOMETRYTYPE() { return getToken(SpeakQlParser.ST_GEOMETRYTYPE, 0); }
		public TerminalNode ST_GEOMFROMTEXT() { return getToken(SpeakQlParser.ST_GEOMFROMTEXT, 0); }
		public TerminalNode ST_GEOMFROMWKB() { return getToken(SpeakQlParser.ST_GEOMFROMWKB, 0); }
		public TerminalNode ST_INTERIORRINGN() { return getToken(SpeakQlParser.ST_INTERIORRINGN, 0); }
		public TerminalNode ST_INTERSECTION() { return getToken(SpeakQlParser.ST_INTERSECTION, 0); }
		public TerminalNode ST_INTERSECTS() { return getToken(SpeakQlParser.ST_INTERSECTS, 0); }
		public TerminalNode ST_ISCLOSED() { return getToken(SpeakQlParser.ST_ISCLOSED, 0); }
		public TerminalNode ST_ISEMPTY() { return getToken(SpeakQlParser.ST_ISEMPTY, 0); }
		public TerminalNode ST_ISSIMPLE() { return getToken(SpeakQlParser.ST_ISSIMPLE, 0); }
		public TerminalNode ST_LINEFROMTEXT() { return getToken(SpeakQlParser.ST_LINEFROMTEXT, 0); }
		public TerminalNode ST_LINEFROMWKB() { return getToken(SpeakQlParser.ST_LINEFROMWKB, 0); }
		public TerminalNode ST_LINESTRINGFROMTEXT() { return getToken(SpeakQlParser.ST_LINESTRINGFROMTEXT, 0); }
		public TerminalNode ST_LINESTRINGFROMWKB() { return getToken(SpeakQlParser.ST_LINESTRINGFROMWKB, 0); }
		public TerminalNode ST_NUMGEOMETRIES() { return getToken(SpeakQlParser.ST_NUMGEOMETRIES, 0); }
		public TerminalNode ST_NUMINTERIORRING() { return getToken(SpeakQlParser.ST_NUMINTERIORRING, 0); }
		public TerminalNode ST_NUMINTERIORRINGS() { return getToken(SpeakQlParser.ST_NUMINTERIORRINGS, 0); }
		public TerminalNode ST_NUMPOINTS() { return getToken(SpeakQlParser.ST_NUMPOINTS, 0); }
		public TerminalNode ST_OVERLAPS() { return getToken(SpeakQlParser.ST_OVERLAPS, 0); }
		public TerminalNode ST_POINTFROMTEXT() { return getToken(SpeakQlParser.ST_POINTFROMTEXT, 0); }
		public TerminalNode ST_POINTFROMWKB() { return getToken(SpeakQlParser.ST_POINTFROMWKB, 0); }
		public TerminalNode ST_POINTN() { return getToken(SpeakQlParser.ST_POINTN, 0); }
		public TerminalNode ST_POLYFROMTEXT() { return getToken(SpeakQlParser.ST_POLYFROMTEXT, 0); }
		public TerminalNode ST_POLYFROMWKB() { return getToken(SpeakQlParser.ST_POLYFROMWKB, 0); }
		public TerminalNode ST_POLYGONFROMTEXT() { return getToken(SpeakQlParser.ST_POLYGONFROMTEXT, 0); }
		public TerminalNode ST_POLYGONFROMWKB() { return getToken(SpeakQlParser.ST_POLYGONFROMWKB, 0); }
		public TerminalNode ST_SRID() { return getToken(SpeakQlParser.ST_SRID, 0); }
		public TerminalNode ST_STARTPOINT() { return getToken(SpeakQlParser.ST_STARTPOINT, 0); }
		public TerminalNode ST_SYMDIFFERENCE() { return getToken(SpeakQlParser.ST_SYMDIFFERENCE, 0); }
		public TerminalNode ST_TOUCHES() { return getToken(SpeakQlParser.ST_TOUCHES, 0); }
		public TerminalNode ST_UNION() { return getToken(SpeakQlParser.ST_UNION, 0); }
		public TerminalNode ST_WITHIN() { return getToken(SpeakQlParser.ST_WITHIN, 0); }
		public TerminalNode ST_X() { return getToken(SpeakQlParser.ST_X, 0); }
		public TerminalNode ST_Y() { return getToken(SpeakQlParser.ST_Y, 0); }
		public TerminalNode SUBDATE() { return getToken(SpeakQlParser.SUBDATE, 0); }
		public TerminalNode SUBSTRING_INDEX() { return getToken(SpeakQlParser.SUBSTRING_INDEX, 0); }
		public TerminalNode SUBTIME() { return getToken(SpeakQlParser.SUBTIME, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(SpeakQlParser.SYSTEM_USER, 0); }
		public TerminalNode TAN() { return getToken(SpeakQlParser.TAN, 0); }
		public TerminalNode TIME() { return getToken(SpeakQlParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(SpeakQlParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SpeakQlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(SpeakQlParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(SpeakQlParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(SpeakQlParser.TIME_FORMAT, 0); }
		public TerminalNode TIME_TO_SEC() { return getToken(SpeakQlParser.TIME_TO_SEC, 0); }
		public TerminalNode TOUCHES() { return getToken(SpeakQlParser.TOUCHES, 0); }
		public TerminalNode TO_BASE64() { return getToken(SpeakQlParser.TO_BASE64, 0); }
		public TerminalNode TO_DAYS() { return getToken(SpeakQlParser.TO_DAYS, 0); }
		public TerminalNode TO_SECONDS() { return getToken(SpeakQlParser.TO_SECONDS, 0); }
		public TerminalNode UCASE() { return getToken(SpeakQlParser.UCASE, 0); }
		public TerminalNode UNCOMPRESS() { return getToken(SpeakQlParser.UNCOMPRESS, 0); }
		public TerminalNode UNCOMPRESSED_LENGTH() { return getToken(SpeakQlParser.UNCOMPRESSED_LENGTH, 0); }
		public TerminalNode UNHEX() { return getToken(SpeakQlParser.UNHEX, 0); }
		public TerminalNode UNIX_TIMESTAMP() { return getToken(SpeakQlParser.UNIX_TIMESTAMP, 0); }
		public TerminalNode UPDATEXML() { return getToken(SpeakQlParser.UPDATEXML, 0); }
		public TerminalNode UPPER() { return getToken(SpeakQlParser.UPPER, 0); }
		public TerminalNode UUID() { return getToken(SpeakQlParser.UUID, 0); }
		public TerminalNode UUID_SHORT() { return getToken(SpeakQlParser.UUID_SHORT, 0); }
		public TerminalNode VALIDATE_PASSWORD_STRENGTH() { return getToken(SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		public TerminalNode VERSION() { return getToken(SpeakQlParser.VERSION, 0); }
		public TerminalNode VISIBLE() { return getToken(SpeakQlParser.VISIBLE, 0); }
		public TerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return getToken(SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		public TerminalNode WEEK() { return getToken(SpeakQlParser.WEEK, 0); }
		public TerminalNode WEEKDAY() { return getToken(SpeakQlParser.WEEKDAY, 0); }
		public TerminalNode WEEKOFYEAR() { return getToken(SpeakQlParser.WEEKOFYEAR, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(SpeakQlParser.WEIGHT_STRING, 0); }
		public TerminalNode WITHIN() { return getToken(SpeakQlParser.WITHIN, 0); }
		public TerminalNode YEAR() { return getToken(SpeakQlParser.YEAR, 0); }
		public TerminalNode YEARWEEK() { return getToken(SpeakQlParser.YEARWEEK, 0); }
		public TerminalNode Y_FUNCTION() { return getToken(SpeakQlParser.Y_FUNCTION, 0); }
		public TerminalNode X_FUNCTION() { return getToken(SpeakQlParser.X_FUNCTION, 0); }
		public TerminalNode JSON_ARRAY() { return getToken(SpeakQlParser.JSON_ARRAY, 0); }
		public TerminalNode JSON_OBJECT() { return getToken(SpeakQlParser.JSON_OBJECT, 0); }
		public TerminalNode JSON_QUOTE() { return getToken(SpeakQlParser.JSON_QUOTE, 0); }
		public TerminalNode JSON_CONTAINS() { return getToken(SpeakQlParser.JSON_CONTAINS, 0); }
		public TerminalNode JSON_CONTAINS_PATH() { return getToken(SpeakQlParser.JSON_CONTAINS_PATH, 0); }
		public TerminalNode JSON_EXTRACT() { return getToken(SpeakQlParser.JSON_EXTRACT, 0); }
		public TerminalNode JSON_KEYS() { return getToken(SpeakQlParser.JSON_KEYS, 0); }
		public TerminalNode JSON_OVERLAPS() { return getToken(SpeakQlParser.JSON_OVERLAPS, 0); }
		public TerminalNode JSON_SEARCH() { return getToken(SpeakQlParser.JSON_SEARCH, 0); }
		public TerminalNode JSON_VALUE() { return getToken(SpeakQlParser.JSON_VALUE, 0); }
		public TerminalNode JSON_ARRAY_APPEND() { return getToken(SpeakQlParser.JSON_ARRAY_APPEND, 0); }
		public TerminalNode JSON_ARRAY_INSERT() { return getToken(SpeakQlParser.JSON_ARRAY_INSERT, 0); }
		public TerminalNode JSON_INSERT() { return getToken(SpeakQlParser.JSON_INSERT, 0); }
		public TerminalNode JSON_MERGE() { return getToken(SpeakQlParser.JSON_MERGE, 0); }
		public TerminalNode JSON_MERGE_PATCH() { return getToken(SpeakQlParser.JSON_MERGE_PATCH, 0); }
		public TerminalNode JSON_MERGE_PRESERVE() { return getToken(SpeakQlParser.JSON_MERGE_PRESERVE, 0); }
		public TerminalNode JSON_REMOVE() { return getToken(SpeakQlParser.JSON_REMOVE, 0); }
		public TerminalNode JSON_REPLACE() { return getToken(SpeakQlParser.JSON_REPLACE, 0); }
		public TerminalNode JSON_SET() { return getToken(SpeakQlParser.JSON_SET, 0); }
		public TerminalNode JSON_UNQUOTE() { return getToken(SpeakQlParser.JSON_UNQUOTE, 0); }
		public TerminalNode JSON_DEPTH() { return getToken(SpeakQlParser.JSON_DEPTH, 0); }
		public TerminalNode JSON_LENGTH() { return getToken(SpeakQlParser.JSON_LENGTH, 0); }
		public TerminalNode JSON_TYPE() { return getToken(SpeakQlParser.JSON_TYPE, 0); }
		public TerminalNode JSON_VALID() { return getToken(SpeakQlParser.JSON_VALID, 0); }
		public TerminalNode JSON_TABLE() { return getToken(SpeakQlParser.JSON_TABLE, 0); }
		public TerminalNode JSON_SCHEMA_VALID() { return getToken(SpeakQlParser.JSON_SCHEMA_VALID, 0); }
		public TerminalNode JSON_SCHEMA_VALIDATION_REPORT() { return getToken(SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, 0); }
		public TerminalNode JSON_PRETTY() { return getToken(SpeakQlParser.JSON_PRETTY, 0); }
		public TerminalNode JSON_STORAGE_FREE() { return getToken(SpeakQlParser.JSON_STORAGE_FREE, 0); }
		public TerminalNode JSON_STORAGE_SIZE() { return getToken(SpeakQlParser.JSON_STORAGE_SIZE, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(SpeakQlParser.JSON_ARRAYAGG, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(SpeakQlParser.JSON_OBJECTAGG, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).enterFunctionNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SpeakQlParserListener ) ((SpeakQlParserListener)listener).exitFunctionNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SpeakQlParserVisitor ) return ((SpeakQlParserVisitor<? extends T>)visitor).visitFunctionNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameBaseContext functionNameBase() throws RecognitionException {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_functionNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6828);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (LEFT - 106)) | (1L << (RIGHT - 106)) | (1L << (SCHEMA - 106)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (DATE - 220)) | (1L << (TIME - 220)) | (1L << (TIMESTAMP - 220)) | (1L << (YEAR - 220)) | (1L << (JSON_ARRAY - 220)) | (1L << (JSON_OBJECT - 220)) | (1L << (JSON_QUOTE - 220)) | (1L << (JSON_CONTAINS - 220)) | (1L << (JSON_CONTAINS_PATH - 220)) | (1L << (JSON_EXTRACT - 220)) | (1L << (JSON_KEYS - 220)) | (1L << (JSON_OVERLAPS - 220)) | (1L << (JSON_SEARCH - 220)) | (1L << (JSON_VALUE - 220)) | (1L << (JSON_ARRAY_APPEND - 220)) | (1L << (JSON_ARRAY_INSERT - 220)) | (1L << (JSON_INSERT - 220)) | (1L << (JSON_MERGE - 220)) | (1L << (JSON_MERGE_PATCH - 220)) | (1L << (JSON_MERGE_PRESERVE - 220)) | (1L << (JSON_REMOVE - 220)) | (1L << (JSON_REPLACE - 220)) | (1L << (JSON_SET - 220)) | (1L << (JSON_UNQUOTE - 220)) | (1L << (JSON_DEPTH - 220)) | (1L << (JSON_LENGTH - 220)) | (1L << (JSON_TYPE - 220)) | (1L << (JSON_VALID - 220)) | (1L << (JSON_TABLE - 220)) | (1L << (JSON_SCHEMA_VALID - 220)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1L << (JSON_PRETTY - 220)) | (1L << (JSON_STORAGE_FREE - 220)) | (1L << (JSON_STORAGE_SIZE - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (JSON_ARRAYAGG - 284)) | (1L << (JSON_OBJECTAGG - 284)) | (1L << (COUNT - 284)) | (1L << (POSITION - 284)))) != 0) || _la==INVISIBLE || ((((_la - 651)) & ~0x3f) == 0 && ((1L << (_la - 651)) & ((1L << (VISIBLE - 651)) | (1L << (QUARTER - 651)) | (1L << (MONTH - 651)) | (1L << (DAY - 651)) | (1L << (HOUR - 651)) | (1L << (MINUTE - 651)) | (1L << (WEEK - 651)) | (1L << (SECOND - 651)) | (1L << (MICROSECOND - 651)) | (1L << (SESSION_VARIABLES_ADMIN - 651)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (GEOMETRYCOLLECTION - 772)) | (1L << (LINESTRING - 772)) | (1L << (MULTILINESTRING - 772)) | (1L << (MULTIPOINT - 772)) | (1L << (MULTIPOLYGON - 772)) | (1L << (POINT - 772)) | (1L << (POLYGON - 772)) | (1L << (ABS - 772)) | (1L << (ACOS - 772)) | (1L << (ADDDATE - 772)) | (1L << (ADDTIME - 772)) | (1L << (AES_DECRYPT - 772)) | (1L << (AES_ENCRYPT - 772)) | (1L << (AREA - 772)) | (1L << (ASBINARY - 772)) | (1L << (ASIN - 772)) | (1L << (ASTEXT - 772)) | (1L << (ASWKB - 772)) | (1L << (ASWKT - 772)) | (1L << (ASYMMETRIC_DECRYPT - 772)) | (1L << (ASYMMETRIC_DERIVE - 772)) | (1L << (ASYMMETRIC_ENCRYPT - 772)) | (1L << (ASYMMETRIC_SIGN - 772)) | (1L << (ASYMMETRIC_VERIFY - 772)) | (1L << (ATAN - 772)) | (1L << (ATAN2 - 772)) | (1L << (BENCHMARK - 772)) | (1L << (BIN - 772)) | (1L << (BIT_COUNT - 772)) | (1L << (BIT_LENGTH - 772)) | (1L << (BUFFER - 772)) | (1L << (CEIL - 772)) | (1L << (CEILING - 772)) | (1L << (CENTROID - 772)) | (1L << (CHARACTER_LENGTH - 772)) | (1L << (CHARSET - 772)) | (1L << (CHAR_LENGTH - 772)) | (1L << (COERCIBILITY - 772)) | (1L << (COLLATION - 772)) | (1L << (COMPRESS - 772)) | (1L << (CONCAT - 772)) | (1L << (CONCAT_WS - 772)) | (1L << (CONNECTION_ID - 772)) | (1L << (CONV - 772)) | (1L << (CONVERT_TZ - 772)) | (1L << (COS - 772)) | (1L << (COT - 772)) | (1L << (CRC32 - 772)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 772)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 772)) | (1L << (CREATE_DH_PARAMETERS - 772)) | (1L << (CREATE_DIGEST - 772)) | (1L << (CROSSES - 772)) | (1L << (DATEDIFF - 772)) | (1L << (DATE_FORMAT - 772)) | (1L << (DAYNAME - 772)) | (1L << (DAYOFMONTH - 772)) | (1L << (DAYOFWEEK - 772)) | (1L << (DAYOFYEAR - 772)) | (1L << (DECODE - 772)) | (1L << (DEGREES - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (DES_DECRYPT - 836)) | (1L << (DES_ENCRYPT - 836)) | (1L << (DIMENSION - 836)) | (1L << (DISJOINT - 836)) | (1L << (ELT - 836)) | (1L << (ENCODE - 836)) | (1L << (ENCRYPT - 836)) | (1L << (ENDPOINT - 836)) | (1L << (ENVELOPE - 836)) | (1L << (EQUALS - 836)) | (1L << (EXP - 836)) | (1L << (EXPORT_SET - 836)) | (1L << (EXTERIORRING - 836)) | (1L << (EXTRACTVALUE - 836)) | (1L << (FIELD - 836)) | (1L << (FIND_IN_SET - 836)) | (1L << (FLOOR - 836)) | (1L << (FORMAT - 836)) | (1L << (FOUND_ROWS - 836)) | (1L << (FROM_BASE64 - 836)) | (1L << (FROM_DAYS - 836)) | (1L << (FROM_UNIXTIME - 836)) | (1L << (GEOMCOLLFROMTEXT - 836)) | (1L << (GEOMCOLLFROMWKB - 836)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (GEOMETRYFROMTEXT - 836)) | (1L << (GEOMETRYFROMWKB - 836)) | (1L << (GEOMETRYN - 836)) | (1L << (GEOMETRYTYPE - 836)) | (1L << (GEOMFROMTEXT - 836)) | (1L << (GEOMFROMWKB - 836)) | (1L << (GET_FORMAT - 836)) | (1L << (GET_LOCK - 836)) | (1L << (GLENGTH - 836)) | (1L << (GREATEST - 836)) | (1L << (GTID_SUBSET - 836)) | (1L << (GTID_SUBTRACT - 836)) | (1L << (HEX - 836)) | (1L << (IFNULL - 836)) | (1L << (INET6_ATON - 836)) | (1L << (INET6_NTOA - 836)) | (1L << (INET_ATON - 836)) | (1L << (INET_NTOA - 836)) | (1L << (INSTR - 836)) | (1L << (INTERIORRINGN - 836)) | (1L << (INTERSECTS - 836)) | (1L << (ISCLOSED - 836)) | (1L << (ISEMPTY - 836)) | (1L << (ISNULL - 836)) | (1L << (ISSIMPLE - 836)) | (1L << (IS_FREE_LOCK - 836)) | (1L << (IS_IPV4 - 836)) | (1L << (IS_IPV4_COMPAT - 836)) | (1L << (IS_IPV4_MAPPED - 836)) | (1L << (IS_IPV6 - 836)) | (1L << (IS_USED_LOCK - 836)) | (1L << (LAST_INSERT_ID - 836)) | (1L << (LCASE - 836)) | (1L << (LEAST - 836)) | (1L << (LENGTH - 836)) | (1L << (LINEFROMTEXT - 836)) | (1L << (LINEFROMWKB - 836)) | (1L << (LINESTRINGFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (LINESTRINGFROMWKB - 900)) | (1L << (LN - 900)) | (1L << (LOAD_FILE - 900)) | (1L << (LOCATE - 900)) | (1L << (LOG - 900)) | (1L << (LOG10 - 900)) | (1L << (LOG2 - 900)) | (1L << (LOWER - 900)) | (1L << (LPAD - 900)) | (1L << (LTRIM - 900)) | (1L << (MAKEDATE - 900)) | (1L << (MAKETIME - 900)) | (1L << (MAKE_SET - 900)) | (1L << (MASTER_POS_WAIT - 900)) | (1L << (MBRCONTAINS - 900)) | (1L << (MBRDISJOINT - 900)) | (1L << (MBREQUAL - 900)) | (1L << (MBRINTERSECTS - 900)) | (1L << (MBROVERLAPS - 900)) | (1L << (MBRTOUCHES - 900)) | (1L << (MBRWITHIN - 900)) | (1L << (MD5 - 900)) | (1L << (MLINEFROMTEXT - 900)) | (1L << (MLINEFROMWKB - 900)) | (1L << (MONTHNAME - 900)) | (1L << (MPOINTFROMTEXT - 900)) | (1L << (MPOINTFROMWKB - 900)) | (1L << (MPOLYFROMTEXT - 900)) | (1L << (MPOLYFROMWKB - 900)) | (1L << (MULTILINESTRINGFROMTEXT - 900)) | (1L << (MULTILINESTRINGFROMWKB - 900)) | (1L << (MULTIPOINTFROMTEXT - 900)) | (1L << (MULTIPOINTFROMWKB - 900)) | (1L << (MULTIPOLYGONFROMTEXT - 900)) | (1L << (MULTIPOLYGONFROMWKB - 900)) | (1L << (NAME_CONST - 900)) | (1L << (NULLIF - 900)) | (1L << (NUMGEOMETRIES - 900)) | (1L << (NUMINTERIORRINGS - 900)) | (1L << (NUMPOINTS - 900)) | (1L << (OCT - 900)) | (1L << (OCTET_LENGTH - 900)) | (1L << (ORD - 900)) | (1L << (OVERLAPS - 900)) | (1L << (PERIOD_ADD - 900)) | (1L << (PERIOD_DIFF - 900)) | (1L << (PI - 900)) | (1L << (POINTFROMTEXT - 900)) | (1L << (POINTFROMWKB - 900)) | (1L << (POINTN - 900)) | (1L << (POLYFROMTEXT - 900)) | (1L << (POLYFROMWKB - 900)) | (1L << (POLYGONFROMTEXT - 900)) | (1L << (POLYGONFROMWKB - 900)) | (1L << (POW - 900)) | (1L << (POWER - 900)) | (1L << (QUOTE - 900)) | (1L << (RADIANS - 900)) | (1L << (RAND - 900)) | (1L << (RANDOM_BYTES - 900)) | (1L << (RELEASE_LOCK - 900)) | (1L << (REVERSE - 900)) | (1L << (ROUND - 900)) | (1L << (ROW_COUNT - 900)))) != 0) || ((((_la - 964)) & ~0x3f) == 0 && ((1L << (_la - 964)) & ((1L << (RPAD - 964)) | (1L << (RTRIM - 964)) | (1L << (SEC_TO_TIME - 964)) | (1L << (SESSION_USER - 964)) | (1L << (SHA - 964)) | (1L << (SHA1 - 964)) | (1L << (SHA2 - 964)) | (1L << (SIGN - 964)) | (1L << (SIN - 964)) | (1L << (SLEEP - 964)) | (1L << (SOUNDEX - 964)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 964)) | (1L << (SQRT - 964)) | (1L << (SRID - 964)) | (1L << (STARTPOINT - 964)) | (1L << (STRCMP - 964)) | (1L << (STR_TO_DATE - 964)) | (1L << (ST_AREA - 964)) | (1L << (ST_ASBINARY - 964)) | (1L << (ST_ASTEXT - 964)) | (1L << (ST_ASWKB - 964)) | (1L << (ST_ASWKT - 964)) | (1L << (ST_BUFFER - 964)) | (1L << (ST_CENTROID - 964)) | (1L << (ST_CONTAINS - 964)) | (1L << (ST_CROSSES - 964)) | (1L << (ST_DIFFERENCE - 964)) | (1L << (ST_DIMENSION - 964)) | (1L << (ST_DISJOINT - 964)) | (1L << (ST_DISTANCE - 964)) | (1L << (ST_ENDPOINT - 964)) | (1L << (ST_ENVELOPE - 964)) | (1L << (ST_EQUALS - 964)) | (1L << (ST_EXTERIORRING - 964)) | (1L << (ST_GEOMCOLLFROMTEXT - 964)) | (1L << (ST_GEOMCOLLFROMTXT - 964)) | (1L << (ST_GEOMCOLLFROMWKB - 964)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 964)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 964)) | (1L << (ST_GEOMETRYFROMTEXT - 964)) | (1L << (ST_GEOMETRYFROMWKB - 964)) | (1L << (ST_GEOMETRYN - 964)) | (1L << (ST_GEOMETRYTYPE - 964)) | (1L << (ST_GEOMFROMTEXT - 964)) | (1L << (ST_GEOMFROMWKB - 964)) | (1L << (ST_INTERIORRINGN - 964)) | (1L << (ST_INTERSECTION - 964)) | (1L << (ST_INTERSECTS - 964)) | (1L << (ST_ISCLOSED - 964)) | (1L << (ST_ISEMPTY - 964)) | (1L << (ST_ISSIMPLE - 964)) | (1L << (ST_LINEFROMTEXT - 964)) | (1L << (ST_LINEFROMWKB - 964)) | (1L << (ST_LINESTRINGFROMTEXT - 964)) | (1L << (ST_LINESTRINGFROMWKB - 964)) | (1L << (ST_NUMGEOMETRIES - 964)) | (1L << (ST_NUMINTERIORRING - 964)) | (1L << (ST_NUMINTERIORRINGS - 964)) | (1L << (ST_NUMPOINTS - 964)) | (1L << (ST_OVERLAPS - 964)) | (1L << (ST_POINTFROMTEXT - 964)) | (1L << (ST_POINTFROMWKB - 964)) | (1L << (ST_POINTN - 964)))) != 0) || ((((_la - 1028)) & ~0x3f) == 0 && ((1L << (_la - 1028)) & ((1L << (ST_POLYFROMTEXT - 1028)) | (1L << (ST_POLYFROMWKB - 1028)) | (1L << (ST_POLYGONFROMTEXT - 1028)) | (1L << (ST_POLYGONFROMWKB - 1028)) | (1L << (ST_SRID - 1028)) | (1L << (ST_STARTPOINT - 1028)) | (1L << (ST_SYMDIFFERENCE - 1028)) | (1L << (ST_TOUCHES - 1028)) | (1L << (ST_UNION - 1028)) | (1L << (ST_WITHIN - 1028)) | (1L << (ST_X - 1028)) | (1L << (ST_Y - 1028)) | (1L << (SUBDATE - 1028)) | (1L << (SUBSTRING_INDEX - 1028)) | (1L << (SUBTIME - 1028)) | (1L << (SYSTEM_USER - 1028)) | (1L << (TAN - 1028)) | (1L << (TIMEDIFF - 1028)) | (1L << (TIMESTAMPADD - 1028)) | (1L << (TIMESTAMPDIFF - 1028)) | (1L << (TIME_FORMAT - 1028)) | (1L << (TIME_TO_SEC - 1028)) | (1L << (TOUCHES - 1028)) | (1L << (TO_BASE64 - 1028)) | (1L << (TO_DAYS - 1028)) | (1L << (TO_SECONDS - 1028)) | (1L << (UCASE - 1028)) | (1L << (UNCOMPRESS - 1028)) | (1L << (UNCOMPRESSED_LENGTH - 1028)) | (1L << (UNHEX - 1028)) | (1L << (UNIX_TIMESTAMP - 1028)) | (1L << (UPDATEXML - 1028)) | (1L << (UPPER - 1028)) | (1L << (UUID - 1028)) | (1L << (UUID_SHORT - 1028)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1028)) | (1L << (VERSION - 1028)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1028)) | (1L << (WEEKDAY - 1028)) | (1L << (WEEKOFYEAR - 1028)) | (1L << (WEIGHT_STRING - 1028)) | (1L << (WITHIN - 1028)) | (1L << (YEARWEEK - 1028)) | (1L << (Y_FUNCTION - 1028)) | (1L << (X_FUNCTION - 1028)) | (1L << (MOD - 1028)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 323:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 324:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 325:
			return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 8);
		case 2:
			return precpred(_ctx, 6);
		case 3:
			return precpred(_ctx, 5);
		case 4:
			return precpred(_ctx, 3);
		case 5:
			return precpred(_ctx, 10);
		case 6:
			return precpred(_ctx, 9);
		case 7:
			return precpred(_ctx, 7);
		case 8:
			return precpred(_ctx, 4);
		case 9:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 3);
		case 11:
			return precpred(_ctx, 2);
		case 12:
			return precpred(_ctx, 1);
		case 13:
			return precpred(_ctx, 12);
		}
		return true;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u046b\u1ab1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\3\2\5\2\u02aa\n\2\3\2\3\2\5\2\u02ae\n\2\3\2\3\2\3\3\3\3\3\3\5"+
		"\3\u02b5\n\3\3\3\5\3\u02b8\n\3\3\3\7\3\u02bb\n\3\f\3\16\3\u02be\13\3\3"+
		"\3\3\3\3\3\5\3\u02c3\n\3\3\3\5\3\u02c6\n\3\3\3\5\3\u02c9\n\3\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\5\4\u02d2\n\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u02f9\n\6\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0305\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b"+
		"\3\b\5\b\u0310\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t"+
		"\3\t\3\t\5\t\u0321\n\t\3\n\3\n\3\n\5\n\u0326\n\n\3\13\3\13\3\13\3\13\3"+
		"\13\3\13\3\13\3\13\3\13\3\13\5\13\u0332\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\5\f\u034d\n\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0356\n\r\3\16\3\16"+
		"\3\16\5\16\u035b\n\16\3\16\3\16\7\16\u035f\n\16\f\16\16\16\u0362\13\16"+
		"\3\17\3\17\5\17\u0366\n\17\3\17\3\17\5\17\u036a\n\17\3\17\3\17\3\17\3"+
		"\17\3\17\3\17\3\17\5\17\u0373\n\17\3\17\5\17\u0376\n\17\3\17\5\17\u0379"+
		"\n\17\3\17\3\17\5\17\u037d\n\17\3\17\3\17\3\17\3\20\3\20\5\20\u0384\n"+
		"\20\3\20\5\20\u0387\n\20\3\20\3\20\3\20\5\20\u038c\n\20\3\20\3\20\3\20"+
		"\3\20\7\20\u0392\n\20\f\20\16\20\u0395\13\20\3\20\3\20\5\20\u0399\n\20"+
		"\3\20\3\20\3\20\5\20\u039e\n\20\3\20\7\20\u03a1\n\20\f\20\16\20\u03a4"+
		"\13\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u03af\n\21\3"+
		"\21\5\21\u03b2\n\21\3\21\3\21\5\21\u03b6\n\21\3\21\5\21\u03b9\n\21\3\21"+
		"\3\21\5\21\u03bd\n\21\3\21\5\21\u03c0\n\21\3\21\3\21\5\21\u03c4\n\21\3"+
		"\21\5\21\u03c7\n\21\3\21\5\21\u03ca\n\21\3\21\3\21\5\21\u03ce\n\21\3\21"+
		"\5\21\u03d1\n\21\3\21\3\21\5\21\u03d5\n\21\3\21\3\21\3\22\3\22\5\22\u03db"+
		"\n\22\3\22\3\22\3\22\3\22\5\22\u03e1\n\22\3\22\3\22\7\22\u03e5\n\22\f"+
		"\22\16\22\u03e8\13\22\3\22\3\22\7\22\u03ec\n\22\f\22\16\22\u03ef\13\22"+
		"\3\22\3\22\3\23\3\23\5\23\u03f5\n\23\3\23\3\23\3\23\3\23\5\23\u03fb\n"+
		"\23\3\23\3\23\7\23\u03ff\n\23\f\23\16\23\u0402\13\23\3\23\3\23\3\23\3"+
		"\23\7\23\u0408\n\23\f\23\16\23\u040b\13\23\3\23\3\23\5\23\u040f\n\23\3"+
		"\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\7\24\u041d"+
		"\n\24\f\24\16\24\u0420\13\24\3\24\3\24\3\25\3\25\5\25\u0426\n\25\3\25"+
		"\3\25\5\25\u042a\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u0434"+
		"\n\25\3\25\3\25\5\25\u0438\n\25\3\25\3\25\5\25\u043c\n\25\3\25\3\25\5"+
		"\25\u0440\n\25\3\25\3\25\5\25\u0444\n\25\3\25\7\25\u0447\n\25\f\25\16"+
		"\25\u044a\13\25\5\25\u044c\n\25\3\25\5\25\u044f\n\25\3\25\5\25\u0452\n"+
		"\25\3\25\5\25\u0455\n\25\3\25\3\25\3\25\3\25\5\25\u045b\n\25\3\25\3\25"+
		"\5\25\u045f\n\25\3\25\3\25\3\25\3\25\5\25\u0465\n\25\3\25\7\25\u0468\n"+
		"\25\f\25\16\25\u046b\13\25\5\25\u046d\n\25\3\25\5\25\u0470\n\25\5\25\u0472"+
		"\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u047d\n\26\3\26"+
		"\3\26\5\26\u0481\n\26\3\26\5\26\u0484\n\26\3\27\3\27\3\27\3\27\3\27\3"+
		"\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u0492\n\27\3\27\5\27\u0495\n\27"+
		"\3\27\3\27\5\27\u0499\n\27\3\27\5\27\u049c\n\27\3\27\3\27\5\27\u04a0\n"+
		"\27\3\27\5\27\u04a3\n\27\3\27\3\27\5\27\u04a7\n\27\3\27\5\27\u04aa\n\27"+
		"\3\27\3\27\5\27\u04ae\n\27\3\27\5\27\u04b1\n\27\3\27\5\27\u04b4\n\27\3"+
		"\27\3\27\5\27\u04b8\n\27\3\27\5\27\u04bb\n\27\3\27\3\27\5\27\u04bf\n\27"+
		"\3\27\3\27\3\30\3\30\5\30\u04c5\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30"+
		"\3\30\3\30\3\30\3\30\5\30\u04d2\n\30\3\30\3\30\3\31\3\31\3\31\5\31\u04d9"+
		"\n\31\3\31\3\31\3\31\5\31\u04de\n\31\3\31\5\31\u04e1\n\31\3\31\3\31\3"+
		"\31\5\31\u04e6\n\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u04ee\n\31\3\31"+
		"\3\31\3\31\3\31\5\31\u04f4\n\31\3\31\3\31\5\31\u04f8\n\31\3\32\5\32\u04fb"+
		"\n\32\3\32\3\32\3\32\5\32\u0500\n\32\3\32\5\32\u0503\n\32\3\32\3\32\5"+
		"\32\u0507\n\32\3\32\5\32\u050a\n\32\3\32\3\32\5\32\u050e\n\32\3\32\5\32"+
		"\u0511\n\32\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u0519\n\33\5\33\u051b\n"+
		"\33\3\34\3\34\3\34\7\34\u0520\n\34\f\34\16\34\u0523\13\34\3\34\3\34\3"+
		"\34\5\34\u0528\n\34\3\34\3\34\3\34\3\34\7\34\u052e\n\34\f\34\16\34\u0531"+
		"\13\34\5\34\u0533\n\34\3\34\3\34\3\34\7\34\u0538\n\34\f\34\16\34\u053b"+
		"\13\34\5\34\u053d\n\34\5\34\u053f\n\34\3\35\3\35\3\35\3\35\5\35\u0545"+
		"\n\35\3\36\3\36\3\36\3\36\5\36\u054b\n\36\3\36\3\36\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u055c\n\37\3 \3 \3"+
		" \3 \3 \5 \u0563\n \3!\3!\3!\3\"\3\"\5\"\u056a\n\"\3\"\3\"\3\"\3\"\3\""+
		"\3\"\3\"\3\"\3\"\5\"\u0575\n\"\3#\5#\u0578\n#\3#\3#\3#\3$\3$\3$\3%\3%"+
		"\3%\3%\3%\5%\u0585\n%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0592\n%\3%"+
		"\3%\3%\5%\u0597\n%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u05a7"+
		"\n&\3\'\3\'\3\'\3\'\7\'\u05ad\n\'\f\'\16\'\u05b0\13\'\3\'\3\'\3(\3(\3"+
		"(\3(\3(\5(\u05b9\n(\3)\3)\7)\u05bd\n)\f)\16)\u05c0\13)\3*\3*\3*\3*\3*"+
		"\3*\3*\3*\3*\5*\u05cb\n*\3*\5*\u05ce\n*\3*\3*\3*\5*\u05d3\n*\3*\3*\3*"+
		"\3*\3*\3*\3*\3*\3*\3*\3*\5*\u05e0\n*\3*\3*\3*\3*\3*\5*\u05e7\n*\3*\3*"+
		"\3*\3*\3*\5*\u05ee\n*\5*\u05f0\n*\3*\3*\3*\3*\3*\5*\u05f7\n*\3+\3+\5+"+
		"\u05fb\n+\5+\u05fd\n+\3+\3+\3+\5+\u0602\n+\3+\5+\u0605\n+\3+\3+\7+\u0609"+
		"\n+\f+\16+\u060c\13+\3+\3+\5+\u0610\n+\5+\u0612\n+\3+\3+\5+\u0616\n+\3"+
		"+\5+\u0619\n+\3+\5+\u061c\n+\3+\3+\7+\u0620\n+\f+\16+\u0623\13+\3+\3+"+
		"\5+\u0627\n+\5+\u0629\n+\3+\3+\3+\5+\u062e\n+\3+\3+\3+\3+\3+\5+\u0635"+
		"\n+\5+\u0637\n+\3+\3+\3+\3+\3+\5+\u063e\n+\3,\3,\3,\5,\u0643\n,\3,\3,"+
		"\5,\u0647\n,\3,\5,\u064a\n,\3-\3-\3-\3-\3-\3-\5-\u0652\n-\3-\3-\3-\3-"+
		"\3-\3-\5-\u065a\n-\5-\u065c\n-\3.\3.\3.\3.\3.\3.\5.\u0664\n.\3/\3/\5/"+
		"\u0668\n/\3/\5/\u066b\n/\3/\3/\7/\u066f\n/\f/\16/\u0672\13/\3/\3/\5/\u0676"+
		"\n/\3/\5/\u0679\n/\3/\3/\7/\u067d\n/\f/\16/\u0680\13/\5/\u0682\n/\3\60"+
		"\3\60\5\60\u0686\n\60\3\60\5\60\u0689\n\60\3\60\3\60\5\60\u068d\n\60\3"+
		"\60\3\60\3\60\5\60\u0692\n\60\3\60\3\60\5\60\u0696\n\60\3\60\3\60\3\60"+
		"\5\60\u069b\n\60\3\60\5\60\u069e\n\60\3\60\3\60\5\60\u06a2\n\60\3\60\3"+
		"\60\5\60\u06a6\n\60\3\60\3\60\5\60\u06aa\n\60\3\60\3\60\5\60\u06ae\n\60"+
		"\3\60\3\60\3\60\5\60\u06b3\n\60\3\60\3\60\3\60\5\60\u06b8\n\60\3\60\3"+
		"\60\3\60\5\60\u06bd\n\60\3\60\3\60\3\60\3\60\5\60\u06c3\n\60\3\60\3\60"+
		"\3\60\5\60\u06c8\n\60\3\60\3\60\3\60\5\60\u06cd\n\60\3\60\3\60\3\60\3"+
		"\60\5\60\u06d3\n\60\3\60\3\60\3\60\5\60\u06d8\n\60\3\60\3\60\3\60\5\60"+
		"\u06dd\n\60\3\60\3\60\3\60\5\60\u06e2\n\60\3\60\3\60\3\60\5\60\u06e7\n"+
		"\60\3\60\3\60\3\60\5\60\u06ec\n\60\3\60\3\60\3\60\5\60\u06f1\n\60\3\60"+
		"\3\60\3\60\5\60\u06f6\n\60\3\60\3\60\3\60\5\60\u06fb\n\60\3\60\3\60\3"+
		"\60\5\60\u0700\n\60\3\60\3\60\3\60\5\60\u0705\n\60\3\60\3\60\3\60\3\60"+
		"\5\60\u070b\n\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u0713\n\60\3\60\3"+
		"\60\3\60\3\60\5\60\u0719\n\60\3\61\3\61\3\62\3\62\3\62\3\63\3\63\3\63"+
		"\3\63\3\63\5\63\u0725\n\63\3\63\3\63\3\63\3\63\3\63\5\63\u072c\n\63\5"+
		"\63\u072e\n\63\3\63\3\63\3\63\3\63\7\63\u0734\n\63\f\63\16\63\u0737\13"+
		"\63\3\63\3\63\5\63\u073b\n\63\3\64\5\64\u073e\n\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\5\64\u0746\n\64\3\64\3\64\3\64\3\64\5\64\u074c\n\64\3\64\3"+
		"\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u075c"+
		"\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0768\n\64"+
		"\5\64\u076a\n\64\3\65\5\65\u076d\n\65\3\65\3\65\3\65\3\65\3\65\3\65\5"+
		"\65\u0775\n\65\3\65\3\65\3\65\3\65\5\65\u077b\n\65\3\65\3\65\3\65\3\65"+
		"\5\65\u0781\n\65\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\7\66\u078c"+
		"\n\66\f\66\16\66\u078f\13\66\3\66\3\66\7\66\u0793\n\66\f\66\16\66\u0796"+
		"\13\66\3\66\3\66\3\66\3\66\7\66\u079c\n\66\f\66\16\66\u079f\13\66\3\66"+
		"\3\66\5\66\u07a3\n\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\7\66\u07ac\n"+
		"\66\f\66\16\66\u07af\13\66\3\66\3\66\3\66\3\66\7\66\u07b5\n\66\f\66\16"+
		"\66\u07b8\13\66\3\66\3\66\5\66\u07bc\n\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\7\66\u07c6\n\66\f\66\16\66\u07c9\13\66\3\66\3\66\7\66\u07cd"+
		"\n\66\f\66\16\66\u07d0\13\66\3\66\3\66\3\66\3\66\7\66\u07d6\n\66\f\66"+
		"\16\66\u07d9\13\66\3\66\3\66\5\66\u07dd\n\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\7\66\u07e7\n\66\f\66\16\66\u07ea\13\66\3\66\3\66\7\66"+
		"\u07ee\n\66\f\66\16\66\u07f1\13\66\3\66\3\66\3\66\3\66\7\66\u07f7\n\66"+
		"\f\66\16\66\u07fa\13\66\3\66\3\66\5\66\u07fe\n\66\3\66\3\66\3\66\7\66"+
		"\u0803\n\66\f\66\16\66\u0806\13\66\3\66\3\66\3\66\3\66\7\66\u080c\n\66"+
		"\f\66\16\66\u080f\13\66\3\66\3\66\5\66\u0813\n\66\5\66\u0815\n\66\3\67"+
		"\3\67\3\67\5\67\u081a\n\67\38\38\38\38\68\u0820\n8\r8\168\u0821\38\38"+
		"\39\39\39\79\u0829\n9\f9\169\u082c\139\3:\5:\u082f\n:\3:\5:\u0832\n:\3"+
		":\3:\5:\u0836\n:\3:\3:\3:\5:\u083b\n:\3:\3:\3:\3:\5:\u0841\n:\3:\3:\3"+
		":\3:\5:\u0847\n:\3:\3:\3:\5:\u084c\n:\3:\3:\3:\5:\u0851\n:\3:\3:\3:\5"+
		":\u0856\n:\3:\3:\3:\5:\u085b\n:\3:\5:\u085e\n:\3;\3;\3;\5;\u0863\n;\3"+
		";\6;\u0866\n;\r;\16;\u0867\3;\3;\3;\3;\3;\3;\3;\3;\5;\u0872\n;\3<\3<\5"+
		"<\u0876\n<\3<\3<\3<\3<\3<\5<\u087d\n<\3<\3<\3<\5<\u0882\n<\3<\5<\u0885"+
		"\n<\3<\3<\3<\5<\u088a\n<\3<\5<\u088d\n<\3<\3<\5<\u0891\n<\3<\3<\5<\u0895"+
		"\n<\3=\3=\3=\3=\7=\u089b\n=\f=\16=\u089e\13=\3>\3>\3>\3>\3>\3>\3>\3?\3"+
		"?\3?\3?\3?\3?\3?\3?\3?\5?\u08b0\n?\3?\5?\u08b3\n?\3?\5?\u08b6\n?\3?\3"+
		"?\5?\u08ba\n?\3?\3?\3@\3@\3@\3@\7@\u08c2\n@\f@\16@\u08c5\13@\3A\3A\3A"+
		"\3A\3A\3A\3A\3A\7A\u08cf\nA\fA\16A\u08d2\13A\3A\3A\3B\3B\5B\u08d8\nB\3"+
		"B\5B\u08db\nB\3B\3B\3B\3B\3B\7B\u08e2\nB\fB\16B\u08e5\13B\5B\u08e7\nB"+
		"\3B\5B\u08ea\nB\3C\3C\3C\3C\3C\3C\3C\3C\3C\5C\u08f5\nC\3C\5C\u08f8\nC"+
		"\3C\3C\5C\u08fc\nC\3C\3C\3D\3D\3D\3D\5D\u0904\nD\3D\5D\u0907\nD\3D\3D"+
		"\3D\5D\u090c\nD\3D\3D\3D\3D\3D\3D\5D\u0914\nD\3D\3D\3D\3D\5D\u091a\nD"+
		"\3D\3D\5D\u091e\nD\3E\3E\5E\u0922\nE\3E\7E\u0925\nE\fE\16E\u0928\13E\3"+
		"E\3E\5E\u092c\nE\3E\3E\3E\3E\3E\5E\u0933\nE\3E\3E\5E\u0937\nE\3E\3E\3"+
		"E\3E\3E\3E\3E\7E\u0940\nE\fE\16E\u0943\13E\3E\3E\3E\3E\3E\5E\u094a\nE"+
		"\3E\5E\u094d\nE\3E\3E\7E\u0951\nE\fE\16E\u0954\13E\3E\3E\3E\5E\u0959\n"+
		"E\5E\u095b\nE\3E\3E\3E\5E\u0960\nE\3E\5E\u0963\nE\3E\3E\7E\u0967\nE\f"+
		"E\16E\u096a\13E\3E\3E\3E\5E\u096f\nE\5E\u0971\nE\3E\3E\5E\u0975\nE\3E"+
		"\5E\u0978\nE\3E\5E\u097b\nE\3E\3E\7E\u097f\nE\fE\16E\u0982\13E\3E\3E\3"+
		"E\5E\u0987\nE\3E\5E\u098a\nE\3E\3E\7E\u098e\nE\fE\16E\u0991\13E\3E\3E"+
		"\3E\5E\u0996\nE\5E\u0998\nE\3E\3E\3E\5E\u099d\nE\3E\3E\3E\3E\3E\3E\5E"+
		"\u09a5\nE\5E\u09a7\nE\3E\3E\3E\3E\3E\3E\3E\5E\u09b0\nE\3E\3E\3E\5E\u09b5"+
		"\nE\3E\3E\3E\3E\3E\3E\5E\u09bd\nE\3E\3E\5E\u09c1\nE\3E\3E\3E\3E\3E\3E"+
		"\5E\u09c9\nE\3E\3E\3E\3E\3E\3E\3E\3E\5E\u09d3\nE\3E\3E\3E\5E\u09d8\nE"+
		"\3E\3E\3E\3E\3E\5E\u09df\nE\3E\3E\5E\u09e3\nE\3E\3E\5E\u09e7\nE\3E\3E"+
		"\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E"+
		"\3E\3E\3E\3E\3E\5E\u0a07\nE\3E\3E\5E\u0a0b\nE\3E\3E\3E\3E\3E\3E\3E\3E"+
		"\3E\3E\5E\u0a17\nE\3E\5E\u0a1a\nE\3E\3E\3E\3E\3E\3E\3E\5E\u0a23\nE\3E"+
		"\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\7E\u0a32\nE\fE\16E\u0a35\13E\3E\3"+
		"E\3E\3E\3E\3E\3E\3E\3E\5E\u0a40\nE\3E\3E\3E\3E\3E\5E\u0a47\nE\3E\3E\3"+
		"E\3E\3E\5E\u0a4e\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\7E\u0a5b\nE\fE\16"+
		"E\u0a5e\13E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u0a6a\nE\3E\3E\3E\3E\5E\u0a70"+
		"\nE\3E\3E\3E\3E\5E\u0a76\nE\3E\3E\3E\3E\5E\u0a7c\nE\3E\3E\3E\3E\5E\u0a82"+
		"\nE\3E\3E\3E\3E\5E\u0a88\nE\3E\3E\3E\3E\5E\u0a8e\nE\3F\3F\3F\5F\u0a93"+
		"\nF\3F\3F\3G\3G\3G\5G\u0a9a\nG\3G\3G\3H\3H\3H\5H\u0aa1\nH\3H\3H\3H\3H"+
		"\3H\5H\u0aa8\nH\3H\3H\3H\5H\u0aad\nH\3H\7H\u0ab0\nH\fH\16H\u0ab3\13H\3"+
		"I\3I\3I\3I\3I\3I\3I\3I\3J\3J\3J\5J\u0ac0\nJ\3J\3J\3K\3K\3K\5K\u0ac7\n"+
		"K\3K\3K\3L\3L\3L\5L\u0ace\nL\3L\3L\3M\3M\5M\u0ad4\nM\3M\3M\5M\u0ad8\n"+
		"M\3M\3M\5M\u0adc\nM\3N\3N\3N\3N\3N\5N\u0ae3\nN\3N\5N\u0ae6\nN\3O\3O\3"+
		"O\5O\u0aeb\nO\3O\3O\3P\3P\3P\5P\u0af2\nP\3P\3P\3P\7P\u0af7\nP\fP\16P\u0afa"+
		"\13P\3P\5P\u0afd\nP\3Q\3Q\3Q\3Q\3Q\7Q\u0b04\nQ\fQ\16Q\u0b07\13Q\3R\3R"+
		"\3R\3R\3S\3S\5S\u0b0f\nS\3S\3S\3T\3T\3T\3T\3T\5T\u0b18\nT\3T\5T\u0b1b"+
		"\nT\3U\3U\5U\u0b1f\nU\3V\3V\3V\3W\3W\3W\3W\5W\u0b28\nW\3X\3X\5X\u0b2c"+
		"\nX\3X\5X\u0b2f\nX\3X\5X\u0b32\nX\3X\3X\3X\3X\5X\u0b38\nX\3X\5X\u0b3b"+
		"\nX\3X\3X\3X\3X\5X\u0b41\nX\3X\3X\3X\3X\3X\7X\u0b48\nX\fX\16X\u0b4b\13"+
		"X\5X\u0b4d\nX\3X\3X\3X\3X\3X\3X\3X\7X\u0b56\nX\fX\16X\u0b59\13X\5X\u0b5b"+
		"\nX\3Y\3Y\3Y\5Y\u0b60\nY\3Y\5Y\u0b63\nY\3Y\3Y\3Y\5Y\u0b68\nY\3Y\3Y\3Y"+
		"\3Y\3Y\3Y\3Y\3Y\5Y\u0b72\nY\3Y\3Y\3Y\5Y\u0b77\nY\3Y\3Y\6Y\u0b7b\nY\rY"+
		"\16Y\u0b7c\5Y\u0b7f\nY\3Y\3Y\6Y\u0b83\nY\rY\16Y\u0b84\5Y\u0b87\nY\3Y\3"+
		"Y\3Y\3Y\5Y\u0b8d\nY\3Y\3Y\3Y\3Y\7Y\u0b93\nY\fY\16Y\u0b96\13Y\3Y\3Y\5Y"+
		"\u0b9a\nY\3Y\3Y\3Y\3Y\7Y\u0ba0\nY\fY\16Y\u0ba3\13Y\5Y\u0ba5\nY\3Z\3Z\3"+
		"Z\5Z\u0baa\nZ\3Z\5Z\u0bad\nZ\3Z\3Z\3Z\5Z\u0bb2\nZ\3Z\3Z\3Z\3Z\3Z\3Z\5"+
		"Z\u0bba\nZ\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0bc2\nZ\3Z\3Z\3Z\3Z\5Z\u0bc8\nZ\3Z\3"+
		"Z\3Z\3Z\7Z\u0bce\nZ\fZ\16Z\u0bd1\13Z\3Z\3Z\5Z\u0bd5\nZ\3Z\3Z\3Z\3Z\7Z"+
		"\u0bdb\nZ\fZ\16Z\u0bde\13Z\5Z\u0be0\nZ\3[\3[\5[\u0be4\n[\3[\5[\u0be7\n"+
		"[\3[\3[\3[\3[\3[\3[\5[\u0bef\n[\3[\3[\3[\3[\5[\u0bf5\n[\3[\3[\3[\3[\3"+
		"[\7[\u0bfc\n[\f[\16[\u0bff\13[\5[\u0c01\n[\3\\\3\\\5\\\u0c05\n\\\3\\\3"+
		"\\\5\\\u0c09\n\\\3\\\3\\\6\\\u0c0d\n\\\r\\\16\\\u0c0e\3\\\3\\\5\\\u0c13"+
		"\n\\\3\\\3\\\5\\\u0c17\n\\\5\\\u0c19\n\\\3\\\5\\\u0c1c\n\\\3\\\5\\\u0c1f"+
		"\n\\\3\\\5\\\u0c22\n\\\3\\\3\\\6\\\u0c26\n\\\r\\\16\\\u0c27\3\\\3\\\5"+
		"\\\u0c2c\n\\\3\\\5\\\u0c2f\n\\\3\\\5\\\u0c32\n\\\3\\\5\\\u0c35\n\\\3\\"+
		"\5\\\u0c38\n\\\5\\\u0c3a\n\\\3]\3]\5]\u0c3e\n]\3^\3^\3^\3^\5^\u0c44\n"+
		"^\3^\3^\3^\3^\5^\u0c4a\n^\3^\7^\u0c4d\n^\f^\16^\u0c50\13^\5^\u0c52\n^"+
		"\3_\3_\3_\3_\5_\u0c58\n_\3`\3`\5`\u0c5c\n`\3a\3a\3a\3a\3a\3a\5a\u0c64"+
		"\na\3b\3b\5b\u0c68\nb\3b\5b\u0c6b\nb\3b\5b\u0c6e\nb\3b\3b\3b\3b\3b\3b"+
		"\3b\5b\u0c77\nb\3b\3b\5b\u0c7b\nb\3b\5b\u0c7e\nb\3b\3b\5b\u0c82\nb\3c"+
		"\3c\5c\u0c86\nc\3c\5c\u0c89\nc\3c\5c\u0c8c\nc\3c\3c\3c\5c\u0c91\nc\3c"+
		"\3c\3c\3c\5c\u0c97\nc\7c\u0c99\nc\fc\16c\u0c9c\13c\3c\3c\3c\3c\3c\3c\3"+
		"c\5c\u0ca5\nc\3c\3c\3c\3c\5c\u0cab\nc\7c\u0cad\nc\fc\16c\u0cb0\13c\3c"+
		"\3c\3c\5c\u0cb5\nc\3c\3c\5c\u0cb9\nc\3d\3d\3d\3d\5d\u0cbf\nd\3d\5d\u0cc2"+
		"\nd\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\5e\u0cce\ne\3e\3e\5e\u0cd2\ne\3e\3e"+
		"\5e\u0cd6\ne\3f\3f\3f\3f\3f\3f\5f\u0cde\nf\3f\3f\5f\u0ce2\nf\3g\3g\3g"+
		"\3g\3h\3h\5h\u0cea\nh\3h\5h\u0ced\nh\3h\3h\5h\u0cf1\nh\3h\5h\u0cf4\nh"+
		"\3h\3h\3h\3h\7h\u0cfa\nh\fh\16h\u0cfd\13h\3h\3h\5h\u0d01\nh\3h\5h\u0d04"+
		"\nh\3h\5h\u0d07\nh\3i\3i\5i\u0d0b\ni\3i\5i\u0d0e\ni\3i\3i\3i\3i\3i\7i"+
		"\u0d15\ni\fi\16i\u0d18\13i\3i\3i\5i\u0d1c\ni\3j\3j\3j\3j\3j\7j\u0d23\n"+
		"j\fj\16j\u0d26\13j\3k\3k\5k\u0d2a\nk\3l\3l\3l\7l\u0d2f\nl\fl\16l\u0d32"+
		"\13l\3m\3m\7m\u0d36\nm\fm\16m\u0d39\13m\3m\3m\3m\7m\u0d3e\nm\fm\16m\u0d41"+
		"\13m\3m\3m\5m\u0d45\nm\3n\3n\3n\3n\3n\3n\5n\u0d4d\nn\3n\5n\u0d50\nn\3"+
		"n\5n\u0d53\nn\3n\3n\3n\7n\u0d58\nn\fn\16n\u0d5b\13n\5n\u0d5d\nn\3n\3n"+
		"\3n\3n\3n\5n\u0d64\nn\3n\5n\u0d67\nn\3n\3n\3n\3n\3n\3n\5n\u0d6f\nn\3o"+
		"\3o\3o\3o\5o\u0d75\no\3o\3o\3o\3o\3p\3p\3p\3p\3p\5p\u0d80\np\3q\5q\u0d83"+
		"\nq\3q\3q\3q\3q\3q\3q\3q\3q\3q\5q\u0d8e\nq\3q\3q\3q\3q\5q\u0d94\nq\3q"+
		"\3q\5q\u0d98\nq\3q\3q\3q\3q\3q\3q\3q\3q\3q\5q\u0da3\nq\3q\3q\3q\5q\u0da8"+
		"\nq\5q\u0daa\nq\3q\3q\3q\5q\u0daf\nq\3r\3r\3s\3s\3s\3s\3s\3s\3s\3s\5s"+
		"\u0dbb\ns\3t\3t\3t\3t\3t\3t\3t\3t\5t\u0dc5\nt\3u\3u\3u\3u\3u\3u\3u\3u"+
		"\5u\u0dcf\nu\3v\5v\u0dd2\nv\3v\5v\u0dd5\nv\3v\5v\u0dd8\nv\3v\5v\u0ddb"+
		"\nv\3v\5v\u0dde\nv\3v\5v\u0de1\nv\3v\5v\u0de4\nv\3v\5v\u0de7\nv\3v\5v"+
		"\u0dea\nv\3v\5v\u0ded\nv\3v\5v\u0df0\nv\5v\u0df2\nv\3w\3w\7w\u0df6\nw"+
		"\fw\16w\u0df9\13w\3w\3w\5w\u0dfd\nw\3w\3w\7w\u0e01\nw\fw\16w\u0e04\13"+
		"w\3w\3w\5w\u0e08\nw\3x\5x\u0e0b\nx\3y\3y\3z\3z\3{\3{\7{\u0e13\n{\f{\16"+
		"{\u0e16\13{\3{\3{\5{\u0e1a\n{\3{\5{\u0e1d\n{\3{\5{\u0e20\n{\3{\5{\u0e23"+
		"\n{\3{\5{\u0e26\n{\3{\5{\u0e29\n{\3|\3|\5|\u0e2d\n|\3|\3|\3}\3}\5}\u0e33"+
		"\n}\3}\3}\5}\u0e37\n}\3~\3~\3~\3~\3~\3~\3~\3~\5~\u0e41\n~\3\177\3\177"+
		"\5\177\u0e45\n\177\3\177\3\177\3\177\7\177\u0e4a\n\177\f\177\16\177\u0e4d"+
		"\13\177\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\5\u0081\u0e57\n\u0081\3\u0081\5\u0081\u0e5a\n\u0081\3\u0081\3\u0081\5"+
		"\u0081\u0e5e\n\u0081\3\u0081\5\u0081\u0e61\n\u0081\3\u0081\3\u0081\5\u0081"+
		"\u0e65\n\u0081\3\u0081\3\u0081\5\u0081\u0e69\n\u0081\3\u0081\5\u0081\u0e6c"+
		"\n\u0081\5\u0081\u0e6e\n\u0081\3\u0082\3\u0082\3\u0082\3\u0082\7\u0082"+
		"\u0e74\n\u0082\f\u0082\16\u0082\u0e77\13\u0082\3\u0082\3\u0082\3\u0082"+
		"\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0e82\n\u0082"+
		"\3\u0082\3\u0082\6\u0082\u0e86\n\u0082\r\u0082\16\u0082\u0e87\5\u0082"+
		"\u0e8a\n\u0082\3\u0082\3\u0082\6\u0082\u0e8e\n\u0082\r\u0082\16\u0082"+
		"\u0e8f\5\u0082\u0e92\n\u0082\5\u0082\u0e94\n\u0082\3\u0083\3\u0083\3\u0083"+
		"\3\u0083\5\u0083\u0e9a\n\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083"+
		"\3\u0083\5\u0083\u0ea2\n\u0083\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084"+
		"\3\u0084\5\u0084\u0eaa\n\u0084\3\u0085\3\u0085\3\u0085\5\u0085\u0eaf\n"+
		"\u0085\3\u0085\3\u0085\5\u0085\u0eb3\n\u0085\3\u0086\3\u0086\3\u0087\3"+
		"\u0087\3\u0087\3\u0087\3\u0087\7\u0087\u0ebc\n\u0087\f\u0087\16\u0087"+
		"\u0ebf\13\u0087\3\u0087\3\u0087\5\u0087\u0ec3\n\u0087\3\u0088\3\u0088"+
		"\3\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\7\u0089\u0ed5\n\u0089\f\u0089"+
		"\16\u0089\u0ed8\13\u0089\3\u008a\3\u008a\5\u008a\u0edc\n\u008a\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\5\u008b\u0ee2\n\u008b\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\5\u008b\u0ee9\n\u008b\3\u008c\3\u008c\3\u008c\5\u008c"+
		"\u0eee\n\u008c\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\7\u008d\u0ef5\n"+
		"\u008d\f\u008d\16\u008d\u0ef8\13\u008d\5\u008d\u0efa\n\u008d\3\u008e\3"+
		"\u008e\5\u008e\u0efe\n\u008e\3\u008f\3\u008f\5\u008f\u0f02\n\u008f\3\u008f"+
		"\3\u008f\5\u008f\u0f06\n\u008f\3\u008f\5\u008f\u0f09\n\u008f\3\u008f\5"+
		"\u008f\u0f0c\n\u008f\3\u008f\5\u008f\u0f0f\n\u008f\3\u0090\3\u0090\5\u0090"+
		"\u0f13\n\u0090\3\u0090\3\u0090\5\u0090\u0f17\n\u0090\3\u0090\5\u0090\u0f1a"+
		"\n\u0090\3\u0090\5\u0090\u0f1d\n\u0090\3\u0090\5\u0090\u0f20\n\u0090\3"+
		"\u0091\3\u0091\3\u0091\3\u0092\3\u0092\5\u0092\u0f27\n\u0092\3\u0092\3"+
		"\u0092\5\u0092\u0f2b\n\u0092\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093\3"+
		"\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\7\u0094\u0f38\n\u0094\f"+
		"\u0094\16\u0094\u0f3b\13\u0094\3\u0095\3\u0095\3\u0095\3\u0096\3\u0096"+
		"\3\u0096\3\u0096\3\u0096\3\u0097\3\u0097\5\u0097\u0f47\n\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\7\u0097\u0f4d\n\u0097\f\u0097\16\u0097\u0f50"+
		"\13\u0097\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098"+
		"\u0f59\n\u0098\3\u0099\3\u0099\5\u0099\u0f5d\n\u0099\3\u0099\5\u0099\u0f60"+
		"\n\u0099\3\u0099\3\u0099\3\u009a\3\u009a\5\u009a\u0f66\n\u009a\3\u009a"+
		"\5\u009a\u0f69\n\u009a\3\u009a\5\u009a\u0f6c\n\u009a\3\u009b\3\u009b\3"+
		"\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0f75\n\u009b\3\u009c\3"+
		"\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0f7e\n\u009c\3"+
		"\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\7\u009d\u0f86\n\u009d\f"+
		"\u009d\16\u009d\u0f89\13\u009d\3\u009d\5\u009d\u0f8c\n\u009d\3\u009e\3"+
		"\u009e\3\u009e\3\u009e\3\u009e\3\u009e\7\u009e\u0f94\n\u009e\f\u009e\16"+
		"\u009e\u0f97\13\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\5\u009f\u0fa0\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1"+
		"\3\u00a1\5\u00a1\u0fa8\n\u00a1\3\u00a1\5\u00a1\u0fab\n\u00a1\3\u00a2\3"+
		"\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0fb2\n\u00a2\f\u00a2\16\u00a2"+
		"\u0fb5\13\u00a2\5\u00a2\u0fb7\n\u00a2\3\u00a2\3\u00a2\5\u00a2\u0fbb\n"+
		"\u00a2\3\u00a2\7\u00a2\u0fbe\n\u00a2\f\u00a2\16\u00a2\u0fc1\13\u00a2\3"+
		"\u00a2\5\u00a2\u0fc4\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\7"+
		"\u00a3\u0fcb\n\u00a3\f\u00a3\16\u00a3\u0fce\13\u00a3\5\u00a3\u0fd0\n\u00a3"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\7\u00a6\u0fed\n\u00a6\f\u00a6\16\u00a6\u0ff0\13\u00a6\5\u00a6\u0ff2\n"+
		"\u00a6\3\u00a6\5\u00a6\u0ff5\n\u00a6\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3"+
		"\u00a9\3\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\7\u00ab\u102b\n\u00ab\f\u00ab\16\u00ab\u102e"+
		"\13\u00ab\3\u00ab\3\u00ab\5\u00ab\u1032\n\u00ab\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u104e\n\u00ae\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\5\u00af\u105c\n\u00af\3\u00b0\3\u00b0\3\u00b0\7\u00b0"+
		"\u1061\n\u00b0\f\u00b0\16\u00b0\u1064\13\u00b0\3\u00b0\5\u00b0\u1067\n"+
		"\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u106d\n\u00b1\3\u00b2\3"+
		"\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u1075\n\u00b2\5\u00b2\u1077"+
		"\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\5\u00b4\u1082\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u108c\n\u00b6\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\5\u00b7\u1093\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\5\u00b8\u1099\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba"+
		"\5\u00ba\u10a1\n\u00ba\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u10a6\n\u00bb\3"+
		"\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u10ac\n\u00bb\f\u00bb\16\u00bb"+
		"\u10af\13\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u10b4\n\u00bb\f\u00bb"+
		"\16\u00bb\u10b7\13\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u10bc\n\u00bb"+
		"\f\u00bb\16\u00bb\u10bf\13\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u10c4"+
		"\n\u00bb\f\u00bb\16\u00bb\u10c7\13\u00bb\3\u00bb\7\u00bb\u10ca\n\u00bb"+
		"\f\u00bb\16\u00bb\u10cd\13\u00bb\5\u00bb\u10cf\n\u00bb\3\u00bb\3\u00bb"+
		"\5\u00bb\u10d3\n\u00bb\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u10d8\n\u00bc\3"+
		"\u00bc\6\u00bc\u10db\n\u00bc\r\u00bc\16\u00bc\u10dc\3\u00bc\3\u00bc\6"+
		"\u00bc\u10e1\n\u00bc\r\u00bc\16\u00bc\u10e2\5\u00bc\u10e5\n\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\6\u00bd\u10ee\n\u00bd"+
		"\r\u00bd\16\u00bd\u10ef\3\u00bd\7\u00bd\u10f3\n\u00bd\f\u00bd\16\u00bd"+
		"\u10f6\13\u00bd\3\u00bd\3\u00bd\6\u00bd\u10fa\n\u00bd\r\u00bd\16\u00bd"+
		"\u10fb\5\u00bd\u10fe\n\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00be\3\u00be\3"+
		"\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u110c\n"+
		"\u00c0\3\u00c0\3\u00c0\6\u00c0\u1110\n\u00c0\r\u00c0\16\u00c0\u1111\3"+
		"\u00c0\3\u00c0\3\u00c0\5\u00c0\u1117\n\u00c0\3\u00c1\3\u00c1\3\u00c1\5"+
		"\u00c1\u111c\n\u00c1\3\u00c1\3\u00c1\6\u00c1\u1120\n\u00c1\r\u00c1\16"+
		"\u00c1\u1121\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u1129\n\u00c1"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u1131\n\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\6\u00c3\u1137\n\u00c3\r\u00c3\16\u00c3"+
		"\u1138\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u113e\n\u00c3\3\u00c4\3\u00c4\3"+
		"\u00c4\3\u00c4\5\u00c4\u1144\n\u00c4\3\u00c4\5\u00c4\u1147\n\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u114f\n\u00c4\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u1156\n\u00c5\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u115f\n\u00c6\3\u00c6"+
		"\5\u00c6\u1162\n\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8\u1171"+
		"\n\u00c8\f\u00c8\16\u00c8\u1174\13\u00c8\3\u00c8\3\u00c8\3\u00c9\3\u00c9"+
		"\3\u00c9\5\u00c9\u117b\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\5\u00c9\u1183\n\u00c9\3\u00ca\3\u00ca\5\u00ca\u1187\n\u00ca\3"+
		"\u00ca\3\u00ca\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u118e\n\u00cb\3\u00cb\3"+
		"\u00cb\6\u00cb\u1192\n\u00cb\r\u00cb\16\u00cb\u1193\3\u00cc\3\u00cc\3"+
		"\u00cc\3\u00cc\6\u00cc\u119a\n\u00cc\r\u00cc\16\u00cc\u119b\3\u00cd\3"+
		"\u00cd\3\u00cd\3\u00cd\3\u00cd\7\u00cd\u11a3\n\u00cd\f\u00cd\16\u00cd"+
		"\u11a6\13\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u11ab\n\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\7\u00cd\u11b0\n\u00cd\f\u00cd\16\u00cd\u11b3\13\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u11b9\n\u00cd\3\u00cd\7\u00cd"+
		"\u11bc\n\u00cd\f\u00cd\16\u00cd\u11bf\13\u00cd\5\u00cd\u11c1\n\u00cd\5"+
		"\u00cd\u11c3\n\u00cd\3\u00cd\3\u00cd\6\u00cd\u11c7\n\u00cd\r\u00cd\16"+
		"\u00cd\u11c8\5\u00cd\u11cb\n\u00cd\3\u00cd\3\u00cd\7\u00cd\u11cf\n\u00cd"+
		"\f\u00cd\16\u00cd\u11d2\13\u00cd\5\u00cd\u11d4\n\u00cd\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\7\u00ce\u11db\n\u00ce\f\u00ce\16\u00ce\u11de"+
		"\13\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u11e3\n\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\7\u00ce\u11e8\n\u00ce\f\u00ce\16\u00ce\u11eb\13\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u11f1\n\u00ce\3\u00ce\7\u00ce\u11f4\n"+
		"\u00ce\f\u00ce\16\u00ce\u11f7\13\u00ce\5\u00ce\u11f9\n\u00ce\5\u00ce\u11fb"+
		"\n\u00ce\3\u00ce\3\u00ce\6\u00ce\u11ff\n\u00ce\r\u00ce\16\u00ce\u1200"+
		"\5\u00ce\u1203\n\u00ce\3\u00ce\3\u00ce\7\u00ce\u1207\n\u00ce\f\u00ce\16"+
		"\u00ce\u120a\13\u00ce\5\u00ce\u120c\n\u00ce\3\u00cf\3\u00cf\3\u00cf\5"+
		"\u00cf\u1211\n\u00cf\3\u00cf\3\u00cf\3\u00cf\7\u00cf\u1216\n\u00cf\f\u00cf"+
		"\16\u00cf\u1219\13\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\7\u00d0\u121f"+
		"\n\u00d0\f\u00d0\16\u00d0\u1222\13\u00d0\3\u00d0\3\u00d0\5\u00d0\u1226"+
		"\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\7\u00d0\u122d\n\u00d0"+
		"\f\u00d0\16\u00d0\u1230\13\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0"+
		"\u1236\n\u00d0\3\u00d0\7\u00d0\u1239\n\u00d0\f\u00d0\16\u00d0\u123c\13"+
		"\u00d0\5\u00d0\u123e\n\u00d0\5\u00d0\u1240\n\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\7\u00d0\u1246\n\u00d0\f\u00d0\16\u00d0\u1249\13\u00d0\5\u00d0"+
		"\u124b\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0"+
		"\u1253\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\7\u00d0\u1259\n\u00d0\f"+
		"\u00d0\16\u00d0\u125c\13\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u1261\n"+
		"\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u1266\n\u00d0\7\u00d0\u1268\n\u00d0"+
		"\f\u00d0\16\u00d0\u126b\13\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u1270"+
		"\n\u00d0\5\u00d0\u1272\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\7\u00d1\u127b\n\u00d1\f\u00d1\16\u00d1\u127e\13\u00d1"+
		"\5\u00d1\u1280\n\u00d1\3\u00d1\3\u00d1\3\u00d1\7\u00d1\u1285\n\u00d1\f"+
		"\u00d1\16\u00d1\u1288\13\u00d1\5\u00d1\u128a\n\u00d1\3\u00d2\3\u00d2\3"+
		"\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\7\u00d2\u1294\n\u00d2\f"+
		"\u00d2\16\u00d2\u1297\13\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u129c\n"+
		"\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\7\u00d3\u12a3\n\u00d3\f"+
		"\u00d3\16\u00d3\u12a6\13\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\7\u00d4"+
		"\u12ac\n\u00d4\f\u00d4\16\u00d4\u12af\13\u00d4\3\u00d4\3\u00d4\5\u00d4"+
		"\u12b3\n\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\7\u00d4\u12ba\n"+
		"\u00d4\f\u00d4\16\u00d4\u12bd\13\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4"+
		"\u12c2\n\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\7\u00d4\u12cb\n\u00d4\f\u00d4\16\u00d4\u12ce\13\u00d4\3\u00d4\3\u00d4"+
		"\3\u00d4\3\u00d4\7\u00d4\u12d4\n\u00d4\f\u00d4\16\u00d4\u12d7\13\u00d4"+
		"\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u12dc\n\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\5\u00d4\u12e1\n\u00d4\7\u00d4\u12e3\n\u00d4\f\u00d4\16\u00d4\u12e6\13"+
		"\u00d4\5\u00d4\u12e8\n\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3"+
		"\u00d5\3\u00d5\3\u00d5\7\u00d5\u12f2\n\u00d5\f\u00d5\16\u00d5\u12f5\13"+
		"\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u12fb\n\u00d6\3\u00d6\3"+
		"\u00d6\3\u00d6\5\u00d6\u1300\n\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d8\3"+
		"\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8"+
		"\5\u00d8\u130f\n\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8"+
		"\u1316\n\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8"+
		"\u131e\n\u00d8\3\u00d8\5\u00d8\u1321\n\u00d8\3\u00d9\3\u00d9\3\u00d9\3"+
		"\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u132b\n\u00d9\3\u00da\3"+
		"\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\5\u00da\u1335\n"+
		"\u00da\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db"+
		"\5\u00db\u133f\n\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\5\u00dd\u1349\n\u00dd\3\u00de\3\u00de\5\u00de\u134d\n"+
		"\u00de\3\u00de\3\u00de\5\u00de\u1351\n\u00de\3\u00de\3\u00de\3\u00de\3"+
		"\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u135b\n\u00de\3\u00de\3"+
		"\u00de\3\u00de\5\u00de\u1360\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3"+
		"\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u139a"+
		"\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df"+
		"\u13ac\n\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e1\3\u00e1\5\u00e1"+
		"\u13b4\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\7\u00e1\u13be\n\u00e1\f\u00e1\16\u00e1\u13c1\13\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u13c7\n\u00e1\5\u00e1\u13c9\n\u00e1\3"+
		"\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\7\u00e1\u13d1\n\u00e1\f"+
		"\u00e1\16\u00e1\u13d4\13\u00e1\5\u00e1\u13d6\n\u00e1\3\u00e2\3\u00e2\3"+
		"\u00e2\3\u00e2\7\u00e2\u13dc\n\u00e2\f\u00e2\16\u00e2\u13df\13\u00e2\3"+
		"\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u13e5\n\u00e3\3\u00e4\3\u00e4\5"+
		"\u00e4\u13e9\n\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e5\3\u00e5\5\u00e5\u13f0"+
		"\n\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u13f5\n\u00e5\3\u00e5\5\u00e5"+
		"\u13f8\n\u00e5\3\u00e5\5\u00e5\u13fb\n\u00e5\3\u00e6\3\u00e6\3\u00e6\3"+
		"\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u1404\n\u00e6\3\u00e7\3\u00e7\5"+
		"\u00e7\u1408\n\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3"+
		"\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\7\u00ea\u1424\n\u00ea\f\u00ea\16\u00ea\u1427\13\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u142d\n\u00ea\3\u00ea\3\u00ea"+
		"\5\u00ea\u1431\n\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea"+
		"\u1438\n\u00ea\3\u00ea\5\u00ea\u143b\n\u00ea\3\u00ea\3\u00ea\3\u00ea\3"+
		"\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\7\u00ea\u1449\n\u00ea\f\u00ea\16\u00ea\u144c\13\u00ea\5\u00ea\u144e\n"+
		"\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb"+
		"\5\u00eb\u1458\n\u00eb\3\u00eb\3\u00eb\5\u00eb\u145c\n\u00eb\3\u00eb\3"+
		"\u00eb\3\u00eb\3\u00eb\5\u00eb\u1462\n\u00eb\3\u00eb\5\u00eb\u1465\n\u00eb"+
		"\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u146a\n\u00eb\3\u00eb\3\u00eb\5\u00eb"+
		"\u146e\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u1475\n"+
		"\u00eb\3\u00eb\5\u00eb\u1478\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5"+
		"\u00eb\u147e\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3"+
		"\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb"+
		"\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u1496"+
		"\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb"+
		"\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u14a3\n\u00eb\3\u00eb\5\u00eb\u14a6\n"+
		"\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb"+
		"\5\u00eb\u14b0\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb"+
		"\5\u00eb\u14b8\n\u00eb\3\u00eb\3\u00eb\5\u00eb\u14bc\n\u00eb\3\u00eb\3"+
		"\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u14c3\n\u00eb\3\u00eb\5\u00eb\u14c6"+
		"\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\7\u00eb\u14cd\n\u00eb"+
		"\f\u00eb\16\u00eb\u14d0\13\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u14d5"+
		"\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u14db\n\u00eb\3\u00eb"+
		"\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u14e5"+
		"\n\u00eb\5\u00eb\u14e7\n\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec"+
		"\u14ed\n\u00ec\3\u00ec\5\u00ec\u14f0\n\u00ec\3\u00ec\5\u00ec\u14f3\n\u00ec"+
		"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\5\u00ed\u14ff\n\u00ed\3\u00ed\5\u00ed\u1502\n\u00ed\3\u00ee\3"+
		"\u00ee\3\u00ee\3\u00ee\5\u00ee\u1508\n\u00ee\3\u00ef\5\u00ef\u150b\n\u00ef"+
		"\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u1513\n\u00ef"+
		"\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u151b\n\u00ef"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u1521\n\u00f0\3\u00f0\3\u00f0"+
		"\5\u00f0\u1525\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u1533\n\u00f1"+
		"\3\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\7\u00f3"+
		"\u153d\n\u00f3\f\u00f3\16\u00f3\u1540\13\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\5\u00f3\u1546\n\u00f3\3\u00f3\5\u00f3\u1549\n\u00f3\3\u00f3\3"+
		"\u00f3\3\u00f3\3\u00f4\3\u00f4\5\u00f4\u1550\n\u00f4\3\u00f4\3\u00f4\3"+
		"\u00f4\7\u00f4\u1555\n\u00f4\f\u00f4\16\u00f4\u1558\13\u00f4\3\u00f5\3"+
		"\u00f5\5\u00f5\u155c\n\u00f5\3\u00f5\6\u00f5\u155f\n\u00f5\r\u00f5\16"+
		"\u00f5\u1560\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\7"+
		"\u00f6\u156a\n\u00f6\f\u00f6\16\u00f6\u156d\13\u00f6\3\u00f7\3\u00f7\3"+
		"\u00f7\3\u00f7\3\u00f8\3\u00f8\3\u00f9\3\u00f9\5\u00f9\u1577\n\u00f9\3"+
		"\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u157d\n\u00f9\3\u00fa\3\u00fa\3"+
		"\u00fa\5\u00fa\u1582\n\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3"+
		"\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u158f\n\u00fa\5"+
		"\u00fa\u1591\n\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u1596\n\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\5\u00fa\u159b\n\u00fa\5\u00fa\u159d\n\u00fa\3\u00fb\3"+
		"\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u15a4\n\u00fb\3\u00fc\3\u00fc\3"+
		"\u00fc\3\u00fc\3\u00fc\5\u00fc\u15ab\n\u00fc\3\u00fc\5\u00fc\u15ae\n\u00fc"+
		"\3\u00fc\5\u00fc\u15b1\n\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc"+
		"\u15b7\n\u00fc\3\u00fc\3\u00fc\5\u00fc\u15bb\n\u00fc\3\u00fd\3\u00fd\3"+
		"\u00fd\3\u00fd\5\u00fd\u15c1\n\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5"+
		"\u00fe\u15c7\n\u00fe\3\u00fe\3\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u0100\3"+
		"\u0100\3\u0100\3\u0101\3\u0101\3\u0101\5\u0101\u15d4\n\u0101\3\u0101\3"+
		"\u0101\3\u0101\5\u0101\u15d9\n\u0101\3\u0101\3\u0101\3\u0101\3\u0101\7"+
		"\u0101\u15df\n\u0101\f\u0101\16\u0101\u15e2\13\u0101\5\u0101\u15e4\n\u0101"+
		"\3\u0102\3\u0102\3\u0102\5\u0102\u15e9\n\u0102\3\u0102\3\u0102\3\u0102"+
		"\5\u0102\u15ee\n\u0102\3\u0102\3\u0102\3\u0102\3\u0102\7\u0102\u15f4\n"+
		"\u0102\f\u0102\16\u0102\u15f7\13\u0102\5\u0102\u15f9\n\u0102\3\u0103\3"+
		"\u0103\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u1601\n\u0103\3\u0104\3"+
		"\u0104\5\u0104\u1605\n\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3"+
		"\u0104\3\u0104\3\u0104\3\u0104\7\u0104\u1610\n\u0104\f\u0104\16\u0104"+
		"\u1613\13\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1618\n\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\7\u0104\u1622"+
		"\n\u0104\f\u0104\16\u0104\u1625\13\u0104\5\u0104\u1627\n\u0104\3\u0105"+
		"\3\u0105\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u1630\n\u0106"+
		"\3\u0106\3\u0106\3\u0106\5\u0106\u1635\n\u0106\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\5\u0107\u163b\n\u0107\3\u0108\3\u0108\3\u0109\3\u0109\3\u0109"+
		"\5\u0109\u1642\n\u0109\5\u0109\u1644\n\u0109\3\u0109\3\u0109\3\u0109\5"+
		"\u0109\u1649\n\u0109\5\u0109\u164b\n\u0109\3\u010a\3\u010a\5\u010a\u164f"+
		"\n\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u1655\n\u010a\3\u010a"+
		"\5\u010a\u1658\n\u010a\3\u010a\5\u010a\u165b\n\u010a\3\u010b\3\u010b\3"+
		"\u010c\3\u010c\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u1665\n\u010d\3"+
		"\u010e\3\u010e\5\u010e\u1669\n\u010e\3\u010f\3\u010f\3\u0110\3\u0110\3"+
		"\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\3\u0110\3\u0110\3\u0110\6\u0110\u167b\n\u0110\r\u0110\16\u0110\u167c"+
		"\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u1684\n\u0111\5\u0111"+
		"\u1686\n\u0111\3\u0112\3\u0112\3\u0112\6\u0112\u168b\n\u0112\r\u0112\16"+
		"\u0112\u168c\5\u0112\u168f\n\u0112\3\u0113\3\u0113\5\u0113\u1693\n\u0113"+
		"\3\u0114\3\u0114\3\u0114\5\u0114\u1698\n\u0114\3\u0115\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u16a3\n\u0115"+
		"\3\u0116\3\u0116\3\u0116\5\u0116\u16a8\n\u0116\3\u0117\3\u0117\3\u0118"+
		"\3\u0118\5\u0118\u16ae\n\u0118\3\u0119\5\u0119\u16b1\n\u0119\3\u0119\3"+
		"\u0119\5\u0119\u16b5\n\u0119\3\u0119\6\u0119\u16b8\n\u0119\r\u0119\16"+
		"\u0119\u16b9\3\u0119\5\u0119\u16bd\n\u0119\3\u0119\3\u0119\5\u0119\u16c1"+
		"\n\u0119\3\u0119\3\u0119\5\u0119\u16c5\n\u0119\5\u0119\u16c7\n\u0119\3"+
		"\u011a\3\u011a\3\u011b\5\u011b\u16cc\n\u011b\3\u011b\3\u011b\3\u011c\5"+
		"\u011c\u16d1\n\u011c\3\u011c\3\u011c\3\u011d\3\u011d\3\u011d\3\u011d\3"+
		"\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u16de\n\u011d\3\u011d\5"+
		"\u011d\u16e1\n\u011d\3\u011e\3\u011e\5\u011e\u16e5\n\u011e\3\u011e\5\u011e"+
		"\u16e8\n\u011e\3\u011e\5\u011e\u16eb\n\u011e\3\u011e\3\u011e\3\u011e\5"+
		"\u011e\u16f0\n\u011e\3\u011e\5\u011e\u16f3\n\u011e\3\u011e\3\u011e\3\u011e"+
		"\5\u011e\u16f8\n\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u16fd\n\u011e\3"+
		"\u011e\5\u011e\u1700\n\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u1705\n\u011e"+
		"\3\u011e\5\u011e\u1708\n\u011e\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e"+
		"\u170e\n\u011e\3\u011e\5\u011e\u1711\n\u011e\3\u011e\3\u011e\5\u011e\u1715"+
		"\n\u011e\3\u011e\5\u011e\u1718\n\u011e\3\u011e\5\u011e\u171b\n\u011e\3"+
		"\u011e\3\u011e\5\u011e\u171f\n\u011e\3\u011e\5\u011e\u1722\n\u011e\3\u011e"+
		"\5\u011e\u1725\n\u011e\3\u011e\3\u011e\5\u011e\u1729\n\u011e\3\u011e\5"+
		"\u011e\u172c\n\u011e\3\u011e\5\u011e\u172f\n\u011e\3\u011e\5\u011e\u1732"+
		"\n\u011e\3\u011e\3\u011e\5\u011e\u1736\n\u011e\3\u011e\5\u011e\u1739\n"+
		"\u011e\3\u011e\5\u011e\u173c\n\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u1741"+
		"\n\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u1746\n\u011e\3\u011e\3\u011e"+
		"\3\u011e\5\u011e\u174b\n\u011e\3\u011e\5\u011e\u174e\n\u011e\3\u011e\3"+
		"\u011e\3\u011e\5\u011e\u1753\n\u011e\3\u011e\5\u011e\u1756\n\u011e\3\u011e"+
		"\3\u011e\3\u011e\5\u011e\u175b\n\u011e\3\u011e\5\u011e\u175e\n\u011e\3"+
		"\u011e\3\u011e\5\u011e\u1762\n\u011e\3\u011e\3\u011e\5\u011e\u1766\n\u011e"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\7\u011f\u176c\n\u011f\f\u011f\16\u011f"+
		"\u176f\13\u011f\3\u011f\3\u011f\3\u0120\3\u0120\5\u0120\u1775\n\u0120"+
		"\3\u0120\3\u0120\5\u0120\u1779\n\u0120\3\u0120\3\u0120\3\u0120\5\u0120"+
		"\u177e\n\u0120\3\u0120\5\u0120\u1781\n\u0120\3\u0120\3\u0120\3\u0120\5"+
		"\u0120\u1786\n\u0120\3\u0120\3\u0120\5\u0120\u178a\n\u0120\3\u0120\3\u0120"+
		"\5\u0120\u178e\n\u0120\3\u0121\3\u0121\3\u0121\3\u0121\3\u0122\3\u0122"+
		"\3\u0122\3\u0122\3\u0122\3\u0122\3\u0123\3\u0123\3\u0123\3\u0123\5\u0123"+
		"\u179e\n\u0123\3\u0123\3\u0123\3\u0124\3\u0124\3\u0124\7\u0124\u17a5\n"+
		"\u0124\f\u0124\16\u0124\u17a8\13\u0124\3\u0125\3\u0125\3\u0125\7\u0125"+
		"\u17ad\n\u0125\f\u0125\16\u0125\u17b0\13\u0125\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\7\u0126\u17b6\n\u0126\f\u0126\16\u0126\u17b9\13\u0126\3\u0126"+
		"\3\u0126\3\u0127\3\u0127\3\u0127\7\u0127\u17c0\n\u0127\f\u0127\16\u0127"+
		"\u17c3\13\u0127\3\u0128\3\u0128\3\u0128\7\u0128\u17c8\n\u0128\f\u0128"+
		"\16\u0128\u17cb\13\u0128\3\u0129\3\u0129\3\u0129\7\u0129\u17d0\n\u0129"+
		"\f\u0129\16\u0129\u17d3\13\u0129\3\u012a\3\u012a\3\u012a\7\u012a\u17d8"+
		"\n\u012a\f\u012a\16\u012a\u17db\13\u012a\3\u012b\3\u012b\3\u012b\7\u012b"+
		"\u17e0\n\u012b\f\u012b\16\u012b\u17e3\13\u012b\3\u012c\3\u012c\5\u012c"+
		"\u17e7\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c"+
		"\u17ef\n\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u17f4\n\u012c\3\u012d\3"+
		"\u012d\3\u012d\5\u012d\u17f9\n\u012d\3\u012d\5\u012d\u17fc\n\u012d\3\u012d"+
		"\3\u012d\3\u012d\5\u012d\u1801\n\u012d\3\u012d\5\u012d\u1804\n\u012d\3"+
		"\u012e\3\u012e\5\u012e\u1808\n\u012e\3\u012f\3\u012f\3\u012f\3\u0130\3"+
		"\u0130\3\u0130\3\u0130\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\5\u0131\u1817\n\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131"+
		"\u181e\n\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u1823\n\u0131\3\u0132\3"+
		"\u0132\3\u0132\5\u0132\u1828\n\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3"+
		"\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132"+
		"\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132"+
		"\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\6\u0132\u1847"+
		"\n\u0132\r\u0132\16\u0132\u1848\3\u0132\3\u0132\5\u0132\u184d\n\u0132"+
		"\3\u0132\3\u0132\3\u0132\3\u0132\6\u0132\u1853\n\u0132\r\u0132\16\u0132"+
		"\u1854\3\u0132\3\u0132\5\u0132\u1859\n\u0132\3\u0132\3\u0132\3\u0132\3"+
		"\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u1862\n\u0132\3\u0132\3\u0132\3"+
		"\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u186a\n\u0132\3\u0132\3\u0132\3"+
		"\u0132\5\u0132\u186f\n\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3"+
		"\u0132\5\u0132\u1877\n\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u187c\n\u0132"+
		"\3\u0132\3\u0132\3\u0132\5\u0132\u1881\n\u0132\5\u0132\u1883\n\u0132\3"+
		"\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u188c\n"+
		"\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u1891\n\u0132\3\u0132\3\u0132\3"+
		"\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u1899\n\u0132\3\u0132\3\u0132\3"+
		"\u0132\5\u0132\u189e\n\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3"+
		"\u0132\5\u0132\u18a6\n\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3"+
		"\u0132\5\u0132\u18ae\n\u0132\3\u0132\5\u0132\u18b1\n\u0132\3\u0132\3\u0132"+
		"\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u18bb\n\u0132"+
		"\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132"+
		"\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u18cd"+
		"\n\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u18d3\n\u0132\3\u0132"+
		"\3\u0132\5\u0132\u18d7\n\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132"+
		"\u18dd\n\u0132\3\u0132\3\u0132\5\u0132\u18e1\n\u0132\3\u0132\3\u0132\5"+
		"\u0132\u18e5\n\u0132\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0134\3"+
		"\u0134\3\u0134\3\u0134\7\u0134\u18f0\n\u0134\f\u0134\16\u0134\u18f3\13"+
		"\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u18fa\n\u0134\3"+
		"\u0135\3\u0135\5\u0135\u18fe\n\u0135\3\u0136\3\u0136\3\u0136\5\u0136\u1903"+
		"\n\u0136\3\u0136\3\u0136\3\u0136\5\u0136\u1908\n\u0136\3\u0136\3\u0136"+
		"\3\u0136\3\u0136\5\u0136\u190e\n\u0136\3\u0136\3\u0136\3\u0136\5\u0136"+
		"\u1913\n\u0136\3\u0136\3\u0136\5\u0136\u1917\n\u0136\3\u0136\3\u0136\3"+
		"\u0136\5\u0136\u191c\n\u0136\3\u0136\3\u0136\3\u0136\5\u0136\u1921\n\u0136"+
		"\3\u0136\3\u0136\3\u0136\5\u0136\u1926\n\u0136\3\u0136\3\u0136\3\u0136"+
		"\3\u0136\3\u0136\3\u0136\7\u0136\u192e\n\u0136\f\u0136\16\u0136\u1931"+
		"\13\u0136\5\u0136\u1933\n\u0136\3\u0136\3\u0136\5\u0136\u1937\n\u0136"+
		"\3\u0136\3\u0136\5\u0136\u193b\n\u0136\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\5\u0137\u1942\n\u0137\3\u0137\3\u0137\5\u0137\u1946\n\u0137\3"+
		"\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\5\u0137\u1963\n\u0137\3\u0138\3\u0138\3\u0138\5\u0138\u1968\n\u0138\3"+
		"\u0138\3\u0138\5\u0138\u196c\n\u0138\3\u0139\5\u0139\u196f\n\u0139\3\u0139"+
		"\5\u0139\u1972\n\u0139\3\u0139\5\u0139\u1975\n\u0139\3\u0139\5\u0139\u1978"+
		"\n\u0139\3\u013a\3\u013a\3\u013b\3\u013b\3\u013b\3\u013c\3\u013c\3\u013d"+
		"\3\u013d\5\u013d\u1983\n\u013d\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1991"+
		"\n\u013f\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\7\u0140\u1998\n\u0140"+
		"\f\u0140\16\u0140\u199b\13\u0140\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141"+
		"\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141"+
		"\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141"+
		"\5\u0141\u19b4\n\u0141\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0143"+
		"\3\u0143\3\u0143\3\u0143\5\u0143\u19bf\n\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\5\u0143\u19c6\n\u0143\7\u0143\u19c8\n\u0143\f\u0143\16"+
		"\u0143\u19cb\13\u0143\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u19d1\n"+
		"\u0144\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u19d9\n"+
		"\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u19de\n\u0145\3\u0145\3\u0145\3"+
		"\u0145\3\u0145\7\u0145\u19e4\n\u0145\f\u0145\16\u0145\u19e7\13\u0145\3"+
		"\u0146\3\u0146\3\u0146\5\u0146\u19ec\n\u0146\3\u0146\3\u0146\3\u0146\3"+
		"\u0146\3\u0146\3\u0146\3\u0146\3\u0146\5\u0146\u19f6\n\u0146\3\u0146\3"+
		"\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146"+
		"\3\u0146\5\u0146\u1a03\n\u0146\3\u0146\3\u0146\3\u0146\3\u0146\5\u0146"+
		"\u1a09\n\u0146\3\u0146\3\u0146\3\u0146\3\u0146\5\u0146\u1a0f\n\u0146\3"+
		"\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146"+
		"\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\5\u0146\u1a1f\n\u0146\3\u0146"+
		"\3\u0146\3\u0146\3\u0146\5\u0146\u1a25\n\u0146\3\u0146\3\u0146\3\u0146"+
		"\3\u0146\3\u0146\3\u0146\3\u0146\7\u0146\u1a2e\n\u0146\f\u0146\16\u0146"+
		"\u1a31\13\u0146\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\7\u0147\u1a41"+
		"\n\u0147\f\u0147\16\u0147\u1a44\13\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\6\u0147\u1a4d\n\u0147\r\u0147\16\u0147\u1a4e"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u1a60\n\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\7\u0147\u1a71\n\u0147"+
		"\f\u0147\16\u0147\u1a74\13\u0147\3\u0148\3\u0148\3\u0149\3\u0149\3\u0149"+
		"\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149"+
		"\3\u0149\3\u0149\5\u0149\u1a86\n\u0149\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\5\u014a\u1a8f\n\u014a\3\u014b\3\u014b\3\u014b"+
		"\3\u014b\3\u014b\3\u014b\3\u014b\5\u014b\u1a98\n\u014b\3\u014c\3\u014c"+
		"\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\5\u014d\u1aa1\n\u014d\3\u014e"+
		"\3\u014e\3\u014f\3\u014f\3\u0150\3\u0150\3\u0151\3\u0151\3\u0152\3\u0152"+
		"\3\u0153\3\u0153\3\u0154\3\u0154\3\u0154\2\5\u0288\u028a\u028c\u0155\2"+
		"\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJL"+
		"NPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e"+
		"\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6"+
		"\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be"+
		"\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6"+
		"\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee"+
		"\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106"+
		"\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e"+
		"\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136"+
		"\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e"+
		"\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166"+
		"\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e"+
		"\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196"+
		"\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae"+
		"\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6"+
		"\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de"+
		"\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6"+
		"\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e"+
		"\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226"+
		"\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e"+
		"\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256"+
		"\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e"+
		"\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286"+
		"\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e"+
		"\u02a0\u02a2\u02a4\u02a6\2\u008c\4\2\65\65\u009e\u009e\4\2\u0207\u0207"+
		"\u020d\u020d\5\2RR\u00a5\u00a5\u00ba\u00ba\5\288\u0181\u0181\u01c1\u01c1"+
		"\6\288\u01a1\u01a1\u0205\u0205\u024f\u024f\4\2\u01fc\u01fc\u045b\u045b"+
		"\4\2[[\u0095\u0095\4\2\36\36\u0150\u0150\5\2::aa\u00bd\u00bd\4\2\u01af"+
		"\u01af\u021f\u021f\5\2\u01f4\u01f4\u0276\u0276\u027e\u027e\4\2\u0188\u0188"+
		"\u01c6\u01c6\4\2\u0162\u0162\u01d4\u01d4\4\2\u0160\u0160\u01b8\u01b8\5"+
		"\2\\\\``\u0085\u0085\5\288\u0192\u0192\u01ac\u01ac\5\288\u018e\u018e\u02fb"+
		"\u02fb\4\2\u0269\u0269\u028c\u028c\4\2]]gg\5\2\u01b1\u01b1\u0216\u0216"+
		"\u0251\u0251\4\2RR\u00a5\u00a5\3\2\u0166\u0167\3\2\u0451\u0452\4\2\u045b"+
		"\u045b\u0463\u0463\5\2\u01ab\u01ab\u01cf\u01cf\u0203\u0203\4\288\u0451"+
		"\u0452\t\288\u0173\u0173\u0175\u0175\u0192\u0192\u01ac\u01ac\u022d\u022d"+
		"\u0463\u0463\4\2\u01fc\u01fc\u0206\u0206\3\2\u0452\u0453\4\2\25\25AA\4"+
		"\2))--\4\2\u01c5\u01c5\u028d\u028d\4\2\34\34\u00b4\u00b4\4\2\u00c5\u00c5"+
		"\u0291\u0291\4\2$$\u0098\u0098\5\299XXtt\4\2tt\u0177\u0177\4\2\u016e\u016e"+
		"\u01a8\u01a8\4\2pp\u0247\u0247\4\299tt\4\2\26\26??\4\2\u00c1\u00c1\u0289"+
		"\u0289\6\2\u01ab\u01ab\u01cf\u01cf\u0202\u0202\u0223\u0223\4\2\u01ab\u01ab"+
		"\u0202\u0202\4\2\35\35;;\5\2OO[[\u00bf\u00bf\4\2\61\61__\4\2ll\u009c\u009c"+
		"\4\2\16\24ff\4\2\7\13\u00a0\u00a0\4\2\26\26?@\3\2\u025e\u025f\4\2\32\32"+
		"\u044e\u044e\4\2\f\rQQ\4\2\u01b4\u01b4\u024d\u024d\4\2\u00e7\u00e7\u01d7"+
		"\u01d7\7\2uu\u01dc\u01dd\u01df\u01df\u01e3\u01eb\u022f\u022f\6\2\u01d9"+
		"\u01da\u01de\u01de\u01e0\u01e1\u0230\u0230\5\2vv\u01d8\u01d8\u01e2\u01e2"+
		"\4\2\u01c8\u01c8\u0260\u0260\4\2\u025a\u025a\u025c\u025c\4\2\u015a\u015a"+
		"\u0261\u0261\4\2ff\u023e\u023e\4\2AA\u0186\u0186\5\2..JJ\u00b8\u00b8\5"+
		"\2\u008b\u008b\u00b1\u00b1\u01b2\u01b2\4\2rr\u00bb\u00bb\4\2\u016a\u016a"+
		"\u0252\u0252\4\2\66\66\u028b\u028b\4\2||\u01d4\u01d4\4\2\u01a4\u01a4\u0229"+
		"\u0229\4\2\u00b1\u00b1\u02a4\u02a4\6\2\u00d3\u00d3\u00d5\u00d5\u00db\u00db"+
		"\u026a\u026a\4\2\u0433\u0433\u0443\u0443\4\2\u015b\u015b\u0231\u0231\4"+
		"\2QQ\\\\\b\2\u008b\u008b\u00b1\u00b1\u00b6\u00b6\u019d\u019d\u01b2\u01b2"+
		"\u028b\u028b\4\2\u01fb\u01fb\u0266\u0266\4\2\u019a\u019a\u028f\u028f\4"+
		"\2\u008b\u008b\u01b2\u01b2\5\2]]hh\u01bf\u01bf\5\2\u01b4\u01b4\u01d4\u01d4"+
		"\u024d\u024d\4\2\u0266\u0266\u028a\u028a\4\2\u0179\u0179\u0228\u0228\b"+
		"\2\u00e7\u00e7\u0197\u0197\u0199\u0199\u01b3\u01b3\u022e\u022e\u0253\u0253"+
		"\4\2;<KK\5\2\u01a4\u01a4\u0218\u0218\u0357\u0357\4\2\u01cc\u01cc\u0278"+
		"\u0278\f\2\u0169\u0169\u0170\u0170\u017b\u017d\u0183\u0183\u01f5\u01f5"+
		"\u01fd\u01fd\u026b\u026b\u0272\u0272\u0327\u0327\u03cd\u03cd\4\2\62\62"+
		"\u00ae\u00ae\4\2~~\u03c5\u03c5\r\2\u0169\u0169\u0170\u0170\u017b\u017d"+
		"\u0183\u0183\u01f5\u01f5\u01fd\u01fd\u023f\u023f\u026b\u026b\u0272\u0272"+
		"\u0327\u0327\u03cd\u03cd\5\2\u045b\u045b\u0463\u0463\u0465\u0465\3\2\u0467"+
		"\u0468\6\2\u0178\u0178\u02f6\u0301\u045b\u045b\u0463\u0464\5\2\u0451\u0453"+
		"\u045c\u045c\u045e\u045e\4\2LL\u00b7\u00b7\4\2}}\u045f\u045f\7\2((\u00e3"+
		"\u00e5\u00ec\u00ec\u00ee\u00f1\u0200\u0200\4\2((\u00e4\u00e4\4\2((\u00e3"+
		"\u00e3\3\2\u00c9\u00d4\4\2\u00bc\u00bc\u0250\u0250\4\2\u00d8\u00dd\u01ac"+
		"\u01ac\b\2\u00de\u00de\u00e9\u00e9\u00eb\u00eb\u00ed\u00ed\u00f4\u00f4"+
		"\u015e\u015f\6\2\u00df\u00e2\u00e7\u00e8\u00ea\u00ea\u015c\u015c\4\2\u00a1"+
		"\u00a1\u00f2\u00f2\4\2\u01cc\u01cc\u0306\u030e\4\2\u00e7\u00e7\u0200\u0200"+
		"\5\2\u00de\u00df\u00e1\u00e1\u01cc\u01cc\4\2\u013d\u013e\u0144\u0144\4"+
		"\2\63\63\u013b\u013e\3\2\u0147\u0148\5\2  jj\u00b5\u00b5\4\2\u00e3\u00e3"+
		"\u00e7\u00e7\4\2\u00de\u00df\u00e1\u00e1\5\2\35\35;;\u03c3\u03c3\5\2\u0120"+
		"\u0120\u012c\u012d\u0137\u0137\5\2\u0121\u0123\u0133\u0136\u0138\u013a"+
		"\4\2\u0129\u0129\u012b\u012b\4\2\u0127\u0127\u012a\u012a\4\2\u0125\u0126"+
		"\u0130\u0132\4\2\u008d\u008d\u0247\u0247\4\2\u01ae\u01ae\u0220\u0220\4"+
		"\2\u020b\u020b\u0219\u0219\4\2{{\u0446\u0446\5\2LL\u00b7\u00b7\u0282\u0282"+
		"\4\2\u0091\u0091\u009d\u009d\5\2\26\26\u0153\u0153\u0256\u0256\5\2{{\u043f"+
		"\u0440\u0446\u0447\3\2\u043c\u0442\4\2\u00e7\u00e7\u02cd\u02f5\3\2\u0302"+
		"\u0305\3\2\u02a4\u02ac\3\2\u029c\u02a3\5\2\u00de\u00e2\u00ef\u00ef\u00f2"+
		"\u00f2 \2\62\62>>HHVV~~\u0084\u0084\u00ae\u00ae\u00f4\u00f4\u0120\u0124"+
		"\u0128\u0128\u012c\u012d\u0133\u013a\u014e\u01ad\u01af\u01c4\u01c6\u021f"+
		"\u0221\u023f\u0241\u0268\u026a\u0273\u0275\u027c\u027e\u028b\u028e\u028f"+
		"\u0291\u029b\u02ae\u02b6\u02bb\u02bc\u02be\u02c4\u02c6\u02cc\u02fb\u02fb"+
		"\u0327\u0327\u03cd\u03cd\u046b\u046b\24\2\65\65ll\u009c\u009c\u009e\u009e"+
		"\u00de\u00e0\u00e2\u00e2\u0100\u011f\u0124\u0124\u0146\u0146\u01c5\u01c5"+
		"\u028d\u028d\u029c\u02a3\u02c6\u02c6\u0306\u0306\u0309\u0326\u0328\u03cc"+
		"\u03ce\u0432\u0442\u0442\2\u1f55\2\u02a9\3\2\2\2\4\u02bc\3\2\2\2\6\u02d1"+
		"\3\2\2\2\b\u02d3\3\2\2\2\n\u02f8\3\2\2\2\f\u0304\3\2\2\2\16\u030f\3\2"+
		"\2\2\20\u0320\3\2\2\2\22\u0325\3\2\2\2\24\u0331\3\2\2\2\26\u034c\3\2\2"+
		"\2\30\u0355\3\2\2\2\32\u0357\3\2\2\2\34\u0363\3\2\2\2\36\u0381\3\2\2\2"+
		" \u03a5\3\2\2\2\"\u03d8\3\2\2\2$\u03f2\3\2\2\2&\u0410\3\2\2\2(\u0471\3"+
		"\2\2\2*\u0473\3\2\2\2,\u0485\3\2\2\2.\u04c2\3\2\2\2\60\u04d5\3\2\2\2\62"+
		"\u0510\3\2\2\2\64\u0512\3\2\2\2\66\u053e\3\2\2\28\u0544\3\2\2\2:\u0546"+
		"\3\2\2\2<\u055b\3\2\2\2>\u0562\3\2\2\2@\u0564\3\2\2\2B\u0574\3\2\2\2D"+
		"\u0577\3\2\2\2F\u057c\3\2\2\2H\u0596\3\2\2\2J\u05a6\3\2\2\2L\u05a8\3\2"+
		"\2\2N\u05b8\3\2\2\2P\u05ba\3\2\2\2R\u05f6\3\2\2\2T\u063d\3\2\2\2V\u063f"+
		"\3\2\2\2X\u065b\3\2\2\2Z\u0663\3\2\2\2\\\u0681\3\2\2\2^\u0718\3\2\2\2"+
		"`\u071a\3\2\2\2b\u071c\3\2\2\2d\u071f\3\2\2\2f\u0769\3\2\2\2h\u0780\3"+
		"\2\2\2j\u0814\3\2\2\2l\u0819\3\2\2\2n\u081b\3\2\2\2p\u0825\3\2\2\2r\u085d"+
		"\3\2\2\2t\u0871\3\2\2\2v\u0873\3\2\2\2x\u0896\3\2\2\2z\u089f\3\2\2\2|"+
		"\u08a6\3\2\2\2~\u08bd\3\2\2\2\u0080\u08c6\3\2\2\2\u0082\u08d5\3\2\2\2"+
		"\u0084\u08eb\3\2\2\2\u0086\u08ff\3\2\2\2\u0088\u0a8d\3\2\2\2\u008a\u0a8f"+
		"\3\2\2\2\u008c\u0a96\3\2\2\2\u008e\u0a9d\3\2\2\2\u0090\u0ab4\3\2\2\2\u0092"+
		"\u0abc\3\2\2\2\u0094\u0ac3\3\2\2\2\u0096\u0aca\3\2\2\2\u0098\u0ad1\3\2"+
		"\2\2\u009a\u0add\3\2\2\2\u009c\u0ae7\3\2\2\2\u009e\u0aee\3\2\2\2\u00a0"+
		"\u0afe\3\2\2\2\u00a2\u0b08\3\2\2\2\u00a4\u0b0c\3\2\2\2\u00a6\u0b12\3\2"+
		"\2\2\u00a8\u0b1e\3\2\2\2\u00aa\u0b20\3\2\2\2\u00ac\u0b27\3\2\2\2\u00ae"+
		"\u0b29\3\2\2\2\u00b0\u0b5c\3\2\2\2\u00b2\u0ba6\3\2\2\2\u00b4\u0be1\3\2"+
		"\2\2\u00b6\u0c39\3\2\2\2\u00b8\u0c3d\3\2\2\2\u00ba\u0c51\3\2\2\2\u00bc"+
		"\u0c53\3\2\2\2\u00be\u0c5b\3\2\2\2\u00c0\u0c63\3\2\2\2\u00c2\u0c65\3\2"+
		"\2\2\u00c4\u0c83\3\2\2\2\u00c6\u0cba\3\2\2\2\u00c8\u0cc3\3\2\2\2\u00ca"+
		"\u0cd7\3\2\2\2\u00cc\u0ce3\3\2\2\2\u00ce\u0ce7\3\2\2\2\u00d0\u0d08\3\2"+
		"\2\2\u00d2\u0d1d\3\2\2\2\u00d4\u0d27\3\2\2\2\u00d6\u0d2b\3\2\2\2\u00d8"+
		"\u0d44\3\2\2\2\u00da\u0d6e\3\2\2\2\u00dc\u0d70\3\2\2\2\u00de\u0d7f\3\2"+
		"\2\2\u00e0\u0dae\3\2\2\2\u00e2\u0db0\3\2\2\2\u00e4\u0dba\3\2\2\2\u00e6"+
		"\u0dc4\3\2\2\2\u00e8\u0dce\3\2\2\2\u00ea\u0df1\3\2\2\2\u00ec\u0e07\3\2"+
		"\2\2\u00ee\u0e0a\3\2\2\2\u00f0\u0e0c\3\2\2\2\u00f2\u0e0e\3\2\2\2\u00f4"+
		"\u0e10\3\2\2\2\u00f6\u0e2a\3\2\2\2\u00f8\u0e30\3\2\2\2\u00fa\u0e40\3\2"+
		"\2\2\u00fc\u0e44\3\2\2\2\u00fe\u0e4e\3\2\2\2\u0100\u0e6d\3\2\2\2\u0102"+
		"\u0e93\3\2\2\2\u0104\u0ea1\3\2\2\2\u0106\u0ea9\3\2\2\2\u0108\u0eae\3\2"+
		"\2\2\u010a\u0eb4\3\2\2\2\u010c\u0eb6\3\2\2\2\u010e\u0ec4\3\2\2\2\u0110"+
		"\u0ec7\3\2\2\2\u0112\u0ed9\3\2\2\2\u0114\u0edd\3\2\2\2\u0116\u0eed\3\2"+
		"\2\2\u0118\u0eef\3\2\2\2\u011a\u0efb\3\2\2\2\u011c\u0eff\3\2\2\2\u011e"+
		"\u0f10\3\2\2\2\u0120\u0f21\3\2\2\2\u0122\u0f24\3\2\2\2\u0124\u0f2e\3\2"+
		"\2\2\u0126\u0f32\3\2\2\2\u0128\u0f3c\3\2\2\2\u012a\u0f3f\3\2\2\2\u012c"+
		"\u0f44\3\2\2\2\u012e\u0f58\3\2\2\2\u0130\u0f5a\3\2\2\2\u0132\u0f6b\3\2"+
		"\2\2\u0134\u0f74\3\2\2\2\u0136\u0f7d\3\2\2\2\u0138\u0f7f\3\2\2\2\u013a"+
		"\u0f8d\3\2\2\2\u013c\u0f98\3\2\2\2\u013e\u0fa1\3\2\2\2\u0140\u0fa4\3\2"+
		"\2\2\u0142\u0fac\3\2\2\2\u0144\u0fc5\3\2\2\2\u0146\u0fd1\3\2\2\2\u0148"+
		"\u0fd4\3\2\2\2\u014a\u0ff4\3\2\2\2\u014c\u0ff6\3\2\2\2\u014e\u0ff8\3\2"+
		"\2\2\u0150\u0ffa\3\2\2\2\u0152\u0ffc\3\2\2\2\u0154\u1031\3\2\2\2\u0156"+
		"\u1033\3\2\2\2\u0158\u1039\3\2\2\2\u015a\u104d\3\2\2\2\u015c\u105b\3\2"+
		"\2\2\u015e\u1066\3\2\2\2\u0160\u1068\3\2\2\2\u0162\u106e\3\2\2\2\u0164"+
		"\u1078\3\2\2\2\u0166\u107c\3\2\2\2\u0168\u1083\3\2\2\2\u016a\u1087\3\2"+
		"\2\2\u016c\u108d\3\2\2\2\u016e\u1094\3\2\2\2\u0170\u109a\3\2\2\2\u0172"+
		"\u10a0\3\2\2\2\u0174\u10a5\3\2\2\2\u0176\u10d4\3\2\2\2\u0178\u10e9\3\2"+
		"\2\2\u017a\u1102\3\2\2\2\u017c\u1105\3\2\2\2\u017e\u110b\3\2\2\2\u0180"+
		"\u111b\3\2\2\2\u0182\u112a\3\2\2\2\u0184\u1130\3\2\2\2\u0186\u114e\3\2"+
		"\2\2\u0188\u1150\3\2\2\2\u018a\u1157\3\2\2\2\u018c\u1163\3\2\2\2\u018e"+
		"\u1169\3\2\2\2\u0190\u1182\3\2\2\2\u0192\u1186\3\2\2\2\u0194\u118a\3\2"+
		"\2\2\u0196\u1195\3\2\2\2\u0198\u11d3\3\2\2\2\u019a\u120b\3\2\2\2\u019c"+
		"\u120d\3\2\2\2\u019e\u1271\3\2\2\2\u01a0\u1289\3\2\2\2\u01a2\u128b\3\2"+
		"\2\2\u01a4\u129d\3\2\2\2\u01a6\u12e7\3\2\2\2\u01a8\u12e9\3\2\2\2\u01aa"+
		"\u12f6\3\2\2\2\u01ac\u1301\3\2\2\2\u01ae\u1320\3\2\2\2\u01b0\u132a\3\2"+
		"\2\2\u01b2\u1334\3\2\2\2\u01b4\u1336\3\2\2\2\u01b6\u1340\3\2\2\2\u01b8"+
		"\u1343\3\2\2\2\u01ba\u1399\3\2\2\2\u01bc\u13ab\3\2\2\2\u01be\u13ad\3\2"+
		"\2\2\u01c0\u13b1\3\2\2\2\u01c2\u13d7\3\2\2\2\u01c4\u13e0\3\2\2\2\u01c6"+
		"\u13e6\3\2\2\2\u01c8\u13ed\3\2\2\2\u01ca\u1403\3\2\2\2\u01cc\u1405\3\2"+
		"\2\2\u01ce\u1410\3\2\2\2\u01d0\u1416\3\2\2\2\u01d2\u144d\3\2\2\2\u01d4"+
		"\u14e6\3\2\2\2\u01d6\u14f2\3\2\2\2\u01d8\u1501\3\2\2\2\u01da\u1507\3\2"+
		"\2\2\u01dc\u151a\3\2\2\2\u01de\u1524\3\2\2\2\u01e0\u1532\3\2\2\2\u01e2"+
		"\u1534\3\2\2\2\u01e4\u1537\3\2\2\2\u01e6\u154d\3\2\2\2\u01e8\u1559\3\2"+
		"\2\2\u01ea\u1562\3\2\2\2\u01ec\u156e\3\2\2\2\u01ee\u1572\3\2\2\2\u01f0"+
		"\u1574\3\2\2\2\u01f2\u159c\3\2\2\2\u01f4\u15a3\3\2\2\2\u01f6\u15a5\3\2"+
		"\2\2\u01f8\u15bc\3\2\2\2\u01fa\u15c2\3\2\2\2\u01fc\u15ca\3\2\2\2\u01fe"+
		"\u15cd\3\2\2\2\u0200\u15d0\3\2\2\2\u0202\u15e5\3\2\2\2\u0204\u15fa\3\2"+
		"\2\2\u0206\u1602\3\2\2\2\u0208\u1628\3\2\2\2\u020a\u1634\3\2\2\2\u020c"+
		"\u1636\3\2\2\2\u020e\u163c\3\2\2\2\u0210\u164a\3\2\2\2\u0212\u1657\3\2"+
		"\2\2\u0214\u165c\3\2\2\2\u0216\u165e\3\2\2\2\u0218\u1664\3\2\2\2\u021a"+
		"\u1668\3\2\2\2\u021c\u166a\3\2\2\2\u021e\u166c\3\2\2\2\u0220\u167e\3\2"+
		"\2\2\u0222\u168e\3\2\2\2\u0224\u1692\3\2\2\2\u0226\u1697\3\2\2\2\u0228"+
		"\u16a2\3\2\2\2\u022a\u16a7\3\2\2\2\u022c\u16a9\3\2\2\2\u022e\u16ad\3\2"+
		"\2\2\u0230\u16c6\3\2\2\2\u0232\u16c8\3\2\2\2\u0234\u16cb\3\2\2\2\u0236"+
		"\u16d0\3\2\2\2\u0238\u16e0\3\2\2\2\u023a\u1765\3\2\2\2\u023c\u1767\3\2"+
		"\2\2\u023e\u178d\3\2\2\2\u0240\u178f\3\2\2\2\u0242\u1793\3\2\2\2\u0244"+
		"\u1799\3\2\2\2\u0246\u17a1\3\2\2\2\u0248\u17a9\3\2\2\2\u024a\u17b1\3\2"+
		"\2\2\u024c\u17bc\3\2\2\2\u024e\u17c4\3\2\2\2\u0250\u17cc\3\2\2\2\u0252"+
		"\u17d4\3\2\2\2\u0254\u17dc\3\2\2\2\u0256\u17ee\3\2\2\2\u0258\u1803\3\2"+
		"\2\2\u025a\u1807\3\2\2\2\u025c\u1809\3\2\2\2\u025e\u180c\3\2\2\2\u0260"+
		"\u1822\3\2\2\2\u0262\u18e4\3\2\2\2\u0264\u18e6\3\2\2\2\u0266\u18f9\3\2"+
		"\2\2\u0268\u18fb\3\2\2\2\u026a\u193a\3\2\2\2\u026c\u1962\3\2\2\2\u026e"+
		"\u1964\3\2\2\2\u0270\u196e\3\2\2\2\u0272\u1979\3\2\2\2\u0274\u197b\3\2"+
		"\2\2\u0276\u197e\3\2\2\2\u0278\u1982\3\2\2\2\u027a\u1984\3\2\2\2\u027c"+
		"\u1990\3\2\2\2\u027e\u1992\3\2\2\2\u0280\u19b3\3\2\2\2\u0282\u19b5\3\2"+
		"\2\2\u0284\u19be\3\2\2\2\u0286\u19d0\3\2\2\2\u0288\u19dd\3\2\2\2\u028a"+
		"\u19e8\3\2\2\2\u028c\u1a5f\3\2\2\2\u028e\u1a75\3\2\2\2\u0290\u1a85\3\2"+
		"\2\2\u0292\u1a8e\3\2\2\2\u0294\u1a97\3\2\2\2\u0296\u1a99\3\2\2\2\u0298"+
		"\u1aa0\3\2\2\2\u029a\u1aa2\3\2\2\2\u029c\u1aa4\3\2\2\2\u029e\u1aa6\3\2"+
		"\2\2\u02a0\u1aa8\3\2\2\2\u02a2\u1aaa\3\2\2\2\u02a4\u1aac\3\2\2\2\u02a6"+
		"\u1aae\3\2\2\2\u02a8\u02aa\5\4\3\2\u02a9\u02a8\3\2\2\2\u02a9\u02aa\3\2"+
		"\2\2\u02aa\u02ad\3\2\2\2\u02ab\u02ac\7\u0440\2\2\u02ac\u02ae\7\u0440\2"+
		"\2\u02ad\u02ab\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b0"+
		"\7\2\2\3\u02b0\3\3\2\2\2\u02b1\u02b4\5\6\4\2\u02b2\u02b3\7\u0440\2\2\u02b3"+
		"\u02b5\7\u0440\2\2\u02b4\u02b2\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b7"+
		"\3\2\2\2\u02b6\u02b8\7\u044f\2\2\u02b7\u02b6\3\2\2\2\u02b7\u02b8\3\2\2"+
		"\2\u02b8\u02bb\3\2\2\2\u02b9\u02bb\5\b\5\2\u02ba\u02b1\3\2\2\2\u02ba\u02b9"+
		"\3\2\2\2\u02bb\u02be\3\2\2\2\u02bc\u02ba\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd"+
		"\u02c8\3\2\2\2\u02be\u02bc\3\2\2\2\u02bf\u02c5\5\6\4\2\u02c0\u02c1\7\u0440"+
		"\2\2\u02c1\u02c3\7\u0440\2\2\u02c2\u02c0\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3"+
		"\u02c4\3\2\2\2\u02c4\u02c6\7\u044f\2\2\u02c5\u02c2\3\2\2\2\u02c5\u02c6"+
		"\3\2\2\2\u02c6\u02c9\3\2\2\2\u02c7\u02c9\5\b\5\2\u02c8\u02bf\3\2\2\2\u02c8"+
		"\u02c7\3\2\2\2\u02c9\5\3\2\2\2\u02ca\u02d2\5\n\6\2\u02cb\u02d2\5\f\7\2"+
		"\u02cc\u02d2\5\16\b\2\u02cd\u02d2\5\20\t\2\u02ce\u02d2\5\22\n\2\u02cf"+
		"\u02d2\5\26\f\2\u02d0\u02d2\5\30\r\2\u02d1\u02ca\3\2\2\2\u02d1\u02cb\3"+
		"\2\2\2\u02d1\u02cc\3\2\2\2\u02d1\u02cd\3\2\2\2\u02d1\u02ce\3\2\2\2\u02d1"+
		"\u02cf\3\2\2\2\u02d1\u02d0\3\2\2\2\u02d2\7\3\2\2\2\u02d3\u02d4\7\u044f"+
		"\2\2\u02d4\t\3\2\2\2\u02d5\u02f9\5\32\16\2\u02d6\u02f9\5\34\17\2\u02d7"+
		"\u02f9\5\36\20\2\u02d8\u02f9\5 \21\2\u02d9\u02f9\5\"\22\2\u02da\u02f9"+
		"\5$\23\2\u02db\u02f9\5&\24\2\u02dc\u02f9\5(\25\2\u02dd\u02f9\5*\26\2\u02de"+
		"\u02f9\5,\27\2\u02df\u02f9\5.\30\2\u02e0\u02f9\5\60\31\2\u02e1\u02f9\5"+
		"t;\2\u02e2\u02f9\5v<\2\u02e3\u02f9\5x=\2\u02e4\u02f9\5z>\2\u02e5\u02f9"+
		"\5|?\2\u02e6\u02f9\5~@\2\u02e7\u02f9\5\u0080A\2\u02e8\u02f9\5\u0082B\2"+
		"\u02e9\u02f9\5\u0084C\2\u02ea\u02f9\5\u0086D\2\u02eb\u02f9\5\u008aF\2"+
		"\u02ec\u02f9\5\u008cG\2\u02ed\u02f9\5\u008eH\2\u02ee\u02f9\5\u0090I\2"+
		"\u02ef\u02f9\5\u0092J\2\u02f0\u02f9\5\u0094K\2\u02f1\u02f9\5\u0096L\2"+
		"\u02f2\u02f9\5\u0098M\2\u02f3\u02f9\5\u009aN\2\u02f4\u02f9\5\u009cO\2"+
		"\u02f5\u02f9\5\u009eP\2\u02f6\u02f9\5\u00a0Q\2\u02f7\u02f9\5\u00a4S\2"+
		"\u02f8\u02d5\3\2\2\2\u02f8\u02d6\3\2\2\2\u02f8\u02d7\3\2\2\2\u02f8\u02d8"+
		"\3\2\2\2\u02f8\u02d9\3\2\2\2\u02f8\u02da\3\2\2\2\u02f8\u02db\3\2\2\2\u02f8"+
		"\u02dc\3\2\2\2\u02f8\u02dd\3\2\2\2\u02f8\u02de\3\2\2\2\u02f8\u02df\3\2"+
		"\2\2\u02f8\u02e0\3\2\2\2\u02f8\u02e1\3\2\2\2\u02f8\u02e2\3\2\2\2\u02f8"+
		"\u02e3\3\2\2\2\u02f8\u02e4\3\2\2\2\u02f8\u02e5\3\2\2\2\u02f8\u02e6\3\2"+
		"\2\2\u02f8\u02e7\3\2\2\2\u02f8\u02e8\3\2\2\2\u02f8\u02e9\3\2\2\2\u02f8"+
		"\u02ea\3\2\2\2\u02f8\u02eb\3\2\2\2\u02f8\u02ec\3\2\2\2\u02f8\u02ed\3\2"+
		"\2\2\u02f8\u02ee\3\2\2\2\u02f8\u02ef\3\2\2\2\u02f8\u02f0\3\2\2\2\u02f8"+
		"\u02f1\3\2\2\2\u02f8\u02f2\3\2\2\2\u02f8\u02f3\3\2\2\2\u02f8\u02f4\3\2"+
		"\2\2\u02f8\u02f5\3\2\2\2\u02f8\u02f6\3\2\2\2\u02f8\u02f7\3\2\2\2\u02f9"+
		"\13\3\2\2\2\u02fa\u0305\5\u00b6\\\2\u02fb\u0305\5\u00aeX\2\u02fc\u0305"+
		"\5\u00b8]\2\u02fd\u0305\5\u00a8U\2\u02fe\u0305\5\u00b4[\2\u02ff\u0305"+
		"\5\u00a6T\2\u0300\u0305\5\u00b0Y\2\u0301\u0305\5\u00b2Z\2\u0302\u0305"+
		"\5\u00aaV\2\u0303\u0305\5\u00acW\2\u0304\u02fa\3\2\2\2\u0304\u02fb\3\2"+
		"\2\2\u0304\u02fc\3\2\2\2\u0304\u02fd\3\2\2\2\u0304\u02fe\3\2\2\2\u0304"+
		"\u02ff\3\2\2\2\u0304\u0300\3\2\2\2\u0304\u0301\3\2\2\2\u0304\u0302\3\2"+
		"\2\2\u0304\u0303\3\2\2\2\u0305\r\3\2\2\2\u0306\u0310\5\u0118\u008d\2\u0307"+
		"\u0310\5\u011a\u008e\2\u0308\u0310\5\u011c\u008f\2\u0309\u0310\5\u011e"+
		"\u0090\2\u030a\u0310\5\u0120\u0091\2\u030b\u0310\5\u0122\u0092\2\u030c"+
		"\u0310\5\u0124\u0093\2\u030d\u0310\5\u0126\u0094\2\u030e\u0310\5\u0128"+
		"\u0095\2\u030f\u0306\3\2\2\2\u030f\u0307\3\2\2\2\u030f\u0308\3\2\2\2\u030f"+
		"\u0309\3\2\2\2\u030f\u030a\3\2\2\2\u030f\u030b\3\2\2\2\u030f\u030c\3\2"+
		"\2\2\u030f\u030d\3\2\2\2\u030f\u030e\3\2\2\2\u0310\17\3\2\2\2\u0311\u0321"+
		"\5\u0138\u009d\2\u0312\u0321\5\u013a\u009e\2\u0313\u0321\5\u013c\u009f"+
		"\2\u0314\u0321\5\u013e\u00a0\2\u0315\u0321\5\u0140\u00a1\2\u0316\u0321"+
		"\5\u0142\u00a2\2\u0317\u0321\5\u0144\u00a3\2\u0318\u0321\5\u0146\u00a4"+
		"\2\u0319\u0321\5\u0148\u00a5\2\u031a\u0321\5\u0160\u00b1\2\u031b\u0321"+
		"\5\u0162\u00b2\2\u031c\u0321\5\u0164\u00b3\2\u031d\u0321\5\u0166\u00b4"+
		"\2\u031e\u0321\5\u0168\u00b5\2\u031f\u0321\5\u016a\u00b6\2\u0320\u0311"+
		"\3\2\2\2\u0320\u0312\3\2\2\2\u0320\u0313\3\2\2\2\u0320\u0314\3\2\2\2\u0320"+
		"\u0315\3\2\2\2\u0320\u0316\3\2\2\2\u0320\u0317\3\2\2\2\u0320\u0318\3\2"+
		"\2\2\u0320\u0319\3\2\2\2\u0320\u031a\3\2\2\2\u0320\u031b\3\2\2\2\u0320"+
		"\u031c\3\2\2\2\u0320\u031d\3\2\2\2\u0320\u031e\3\2\2\2\u0320\u031f\3\2"+
		"\2\2\u0321\21\3\2\2\2\u0322\u0326\5\u016c\u00b7\2\u0323\u0326\5\u016e"+
		"\u00b8\2\u0324\u0326\5\u0170\u00b9\2\u0325\u0322\3\2\2\2\u0325\u0323\3"+
		"\2\2\2\u0325\u0324\3\2\2\2\u0326\23\3\2\2\2\u0327\u0332\5\u0174\u00bb"+
		"\2\u0328\u0332\5\u0176\u00bc\2\u0329\u0332\5\u0178\u00bd\2\u032a\u0332"+
		"\5\u017c\u00bf\2\u032b\u0332\5\u017e\u00c0\2\u032c\u0332\5\u0180\u00c1"+
		"\2\u032d\u0332\5\u0184\u00c3\2\u032e\u0332\5\u017a\u00be\2\u032f\u0332"+
		"\5\u0182\u00c2\2\u0330\u0332\5\u0186\u00c4\2\u0331\u0327\3\2\2\2\u0331"+
		"\u0328\3\2\2\2\u0331\u0329\3\2\2\2\u0331\u032a\3\2\2\2\u0331\u032b\3\2"+
		"\2\2\u0331\u032c\3\2\2\2\u0331\u032d\3\2\2\2\u0331\u032e\3\2\2\2\u0331"+
		"\u032f\3\2\2\2\u0331\u0330\3\2\2\2\u0332\25\3\2\2\2\u0333\u034d\5\u0198"+
		"\u00cd\2\u0334\u034d\5\u019a\u00ce\2\u0335\u034d\5\u019c\u00cf\2\u0336"+
		"\u034d\5\u019e\u00d0\2\u0337\u034d\5\u01a2\u00d2\2\u0338\u034d\5\u01a4"+
		"\u00d3\2\u0339\u034d\5\u01a6\u00d4\2\u033a\u034d\5\u01a8\u00d5\2\u033b"+
		"\u034d\5\u01c0\u00e1\2\u033c\u034d\5\u01c2\u00e2\2\u033d\u034d\5\u01c4"+
		"\u00e3\2\u033e\u034d\5\u01c6\u00e4\2\u033f\u034d\5\u01c8\u00e5\2\u0340"+
		"\u034d\5\u01cc\u00e7\2\u0341\u034d\5\u01ce\u00e8\2\u0342\u034d\5\u01d0"+
		"\u00e9\2\u0343\u034d\5\u01d2\u00ea\2\u0344\u034d\5\u01d4\u00eb\2\u0345"+
		"\u034d\5\u01e2\u00f2\2\u0346\u034d\5\u01e4\u00f3\2\u0347\u034d\5\u01e6"+
		"\u00f4\2\u0348\u034d\5\u01e8\u00f5\2\u0349\u034d\5\u01ea\u00f6\2\u034a"+
		"\u034d\5\u01ec\u00f7\2\u034b\u034d\5\u01ee\u00f8\2\u034c\u0333\3\2\2\2"+
		"\u034c\u0334\3\2\2\2\u034c\u0335\3\2\2\2\u034c\u0336\3\2\2\2\u034c\u0337"+
		"\3\2\2\2\u034c\u0338\3\2\2\2\u034c\u0339\3\2\2\2\u034c\u033a\3\2\2\2\u034c"+
		"\u033b\3\2\2\2\u034c\u033c\3\2\2\2\u034c\u033d\3\2\2\2\u034c\u033e\3\2"+
		"\2\2\u034c\u033f\3\2\2\2\u034c\u0340\3\2\2\2\u034c\u0341\3\2\2\2\u034c"+
		"\u0342\3\2\2\2\u034c\u0343\3\2\2\2\u034c\u0344\3\2\2\2\u034c\u0345\3\2"+
		"\2\2\u034c\u0346\3\2\2\2\u034c\u0347\3\2\2\2\u034c\u0348\3\2\2\2\u034c"+
		"\u0349\3\2\2\2\u034c\u034a\3\2\2\2\u034c\u034b\3\2\2\2\u034d\27\3\2\2"+
		"\2\u034e\u0356\5\u01f8\u00fd\2\u034f\u0356\5\u01fa\u00fe\2\u0350\u0356"+
		"\5\u01fc\u00ff\2\u0351\u0356\5\u01fe\u0100\2\u0352\u0356\5\u0200\u0101"+
		"\2\u0353\u0356\5\u0202\u0102\2\u0354\u0356\5\u0206\u0104\2\u0355\u034e"+
		"\3\2\2\2\u0355\u034f\3\2\2\2\u0355\u0350\3\2\2\2\u0355\u0351\3\2\2\2\u0355"+
		"\u0352\3\2\2\2\u0355\u0353\3\2\2\2\u0355\u0354\3\2\2\2\u0356\31\3\2\2"+
		"\2\u0357\u0358\7\60\2\2\u0358\u035a\t\2\2\2\u0359\u035b\5\u025e\u0130"+
		"\2\u035a\u0359\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u0360"+
		"\5\u0226\u0114\2\u035d\u035f\5\62\32\2\u035e\u035d\3\2\2\2\u035f\u0362"+
		"\3\2\2\2\u0360\u035e\3\2\2\2\u0360\u0361\3\2\2\2\u0361\33\3\2\2\2\u0362"+
		"\u0360\3\2\2\2\u0363\u0365\7\60\2\2\u0364\u0366\5\64\33\2\u0365\u0364"+
		"\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0369\7\u019d\2"+
		"\2\u0368\u036a\5\u025e\u0130\2\u0369\u0368\3\2\2\2\u0369\u036a\3\2\2\2"+
		"\u036a\u036b\3\2\2\2\u036b\u036c\5\u020c\u0107\2\u036c\u036d\7\177\2\2"+
		"\u036d\u036e\7\u024a\2\2\u036e\u0375\5\66\34\2\u036f\u0370\7\177\2\2\u0370"+
		"\u0372\7\u0174\2\2\u0371\u0373\7{\2\2\u0372\u0371\3\2\2\2\u0372\u0373"+
		"\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0376\7\u0222\2\2\u0375\u036f\3\2\2"+
		"\2\u0375\u0376\3\2\2\2\u0376\u0378\3\2\2\2\u0377\u0379\5> \2\u0378\u0377"+
		"\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037c\3\2\2\2\u037a\u037b\7\u0171\2"+
		"\2\u037b\u037d\7\u045b\2\2\u037c\u037a\3\2\2\2\u037c\u037d\3\2\2\2\u037d"+
		"\u037e\3\2\2\2\u037e\u037f\7\u018f\2\2\u037f\u0380\5\u0172\u00ba\2\u0380"+
		"\35\3\2\2\2\u0381\u0383\7\60\2\2\u0382\u0384\t\3\2\2\u0383\u0382\3\2\2"+
		"\2\u0383\u0384\3\2\2\2\u0384\u0386\3\2\2\2\u0385\u0387\t\4\2\2\u0386\u0385"+
		"\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u0389\7]\2\2\u0389"+
		"\u038b\5\u0226\u0114\2\u038a\u038c\5@!\2\u038b\u038a\3\2\2\2\u038b\u038c"+
		"\3\2\2\2\u038c\u038d\3\2\2\2\u038d\u038e\7\177\2\2\u038e\u038f\5\u020e"+
		"\u0108\2\u038f\u0393\5\u024a\u0126\2\u0390\u0392\5B\"\2\u0391\u0390\3"+
		"\2\2\2\u0392\u0395\3\2\2\2\u0393\u0391\3\2\2\2\u0393\u0394\3\2\2\2\u0394"+
		"\u03a2\3\2\2\2\u0395\u0393\3\2\2\2\u0396\u0398\7\u0152\2\2\u0397\u0399"+
		"\7\u0443\2\2\u0398\u0397\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u039a\3\2\2"+
		"\2\u039a\u03a1\t\5\2\2\u039b\u039d\7r\2\2\u039c\u039e\7\u0443\2\2\u039d"+
		"\u039c\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a1\t\6"+
		"\2\2\u03a0\u0396\3\2\2\2\u03a0\u039b\3\2\2\2\u03a1\u03a4\3\2\2\2\u03a2"+
		"\u03a0\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\37\3\2\2\2\u03a4\u03a2\3\2\2"+
		"\2\u03a5\u03a6\7\60\2\2\u03a6\u03a7\7\u01d5\2\2\u03a7\u03a8\7V\2\2\u03a8"+
		"\u03a9\5\u0226\u0114\2\u03a9\u03aa\7\25\2\2\u03aa\u03ab\7\u027f\2\2\u03ab"+
		"\u03b1\7\u045b\2\2\u03ac\u03ae\7\u01c0\2\2\u03ad\u03af\7\u0443\2\2\u03ae"+
		"\u03ad\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b2\5\u022e"+
		"\u0118\2\u03b1\u03ac\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b8\3\2\2\2\u03b3"+
		"\u03b5\7\u0280\2\2\u03b4\u03b6\7\u0443\2\2\u03b5\u03b4\3\2\2\2\u03b5\u03b6"+
		"\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b7\u03b9\5\u022e\u0118\2\u03b8\u03b3\3"+
		"\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03bf\3\2\2\2\u03ba\u03bc\7\u022c\2\2"+
		"\u03bb\u03bd\7\u0443\2\2\u03bc\u03bb\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd"+
		"\u03be\3\2\2\2\u03be\u03c0\5\u022e\u0118\2\u03bf\u03ba\3\2\2\2\u03bf\u03c0"+
		"\3\2\2\2\u03c0\u03c6\3\2\2\2\u03c1\u03c3\7\u0204\2\2\u03c2\u03c4\7\u0443"+
		"\2\2\u03c3\u03c2\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5"+
		"\u03c7\5\u0226\u0114\2\u03c6\u03c1\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03c9"+
		"\3\2\2\2\u03c8\u03ca\7\u028e\2\2\u03c9\u03c8\3\2\2\2\u03c9\u03ca\3\2\2"+
		"\2\u03ca\u03d0\3\2\2\2\u03cb\u03cd\7\u0171\2\2\u03cc\u03ce\7\u0443\2\2"+
		"\u03cd\u03cc\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03cf\3\2\2\2\u03cf\u03d1"+
		"\7\u045b\2\2\u03d0\u03cb\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d2\3\2\2"+
		"\2\u03d2\u03d4\7\u0197\2\2\u03d3\u03d5\7\u0443\2\2\u03d4\u03d3\3\2\2\2"+
		"\u03d4\u03d5\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6\u03d7\5\u021c\u010f\2\u03d7"+
		"!\3\2\2\2\u03d8\u03da\7\60\2\2\u03d9\u03db\5\64\33\2\u03da\u03d9\3\2\2"+
		"\2\u03da\u03db\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u03dd\7\u008b\2\2\u03dd"+
		"\u03de\5\u020c\u0107\2\u03de\u03e0\7\u044c\2\2\u03df\u03e1\5D#\2\u03e0"+
		"\u03df\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e6\3\2\2\2\u03e2\u03e3\7\u044e"+
		"\2\2\u03e3\u03e5\5D#\2\u03e4\u03e2\3\2\2\2\u03e5\u03e8\3\2\2\2\u03e6\u03e4"+
		"\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7\u03e9\3\2\2\2\u03e8\u03e6\3\2\2\2\u03e9"+
		"\u03ed\7\u044d\2\2\u03ea\u03ec\5H%\2\u03eb\u03ea\3\2\2\2\u03ec\u03ef\3"+
		"\2\2\2\u03ed\u03eb\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee\u03f0\3\2\2\2\u03ef"+
		"\u03ed\3\2\2\2\u03f0\u03f1\5\u0172\u00ba\2\u03f1#\3\2\2\2\u03f2\u03f4"+
		"\7\60\2\2\u03f3\u03f5\5\64\33\2\u03f4\u03f3\3\2\2\2\u03f4\u03f5\3\2\2"+
		"\2\u03f5\u03f6\3\2\2\2\u03f6\u03f7\7\u01b2\2\2\u03f7\u03f8\5\u020c\u0107"+
		"\2\u03f8\u03fa\7\u044c\2\2\u03f9\u03fb\5F$\2\u03fa\u03f9\3\2\2\2\u03fa"+
		"\u03fb\3\2\2\2\u03fb\u0400\3\2\2\2\u03fc\u03fd\7\u044e\2\2\u03fd\u03ff"+
		"\5F$\2\u03fe\u03fc\3\2\2\2\u03ff\u0402\3\2\2\2\u0400\u03fe\3\2\2\2\u0400"+
		"\u0401\3\2\2\2\u0401\u0403\3\2\2\2\u0402\u0400\3\2\2\2\u0403\u0404\7\u044d"+
		"\2\2\u0404\u0405\7\u0241\2\2\u0405\u0409\5\u023a\u011e\2\u0406\u0408\5"+
		"H%\2\u0407\u0406\3\2\2\2\u0408\u040b\3\2\2\2\u0409\u0407\3\2\2\2\u0409"+
		"\u040a\3\2\2\2\u040a\u040e\3\2\2\2\u040b\u0409\3\2\2\2\u040c\u040f\5\u0172"+
		"\u00ba\2\u040d\u040f\5\u0182\u00c2\2\u040e\u040c\3\2\2\2\u040e\u040d\3"+
		"\2\2\2\u040f%\3\2\2\2\u0410\u0411\7\60\2\2\u0411\u0412\7\u024c\2\2\u0412"+
		"\u0413\5\u0226\u0114\2\u0413\u0414\7P\2\2\u0414\u0415\7\u0184\2\2\u0415"+
		"\u0416\7\u0293\2\2\u0416\u0417\t\7\2\2\u0417\u0418\7\u0211\2\2\u0418\u0419"+
		"\7\u044c\2\2\u0419\u041e\5J&\2\u041a\u041b\7\u044e\2\2\u041b\u041d\5J"+
		"&\2\u041c\u041a\3\2\2\2\u041d\u0420\3\2\2\2\u041e\u041c\3\2\2\2\u041e"+
		"\u041f\3\2\2\2\u041f\u0421\3\2\2\2\u0420\u041e\3\2\2\2\u0421\u0422\7\u044d"+
		"\2\2\u0422\'\3\2\2\2\u0423\u0425\7\60\2\2\u0424\u0426\7\u0275\2\2\u0425"+
		"\u0424\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u0427\3\2\2\2\u0427\u0429\7\u00b1"+
		"\2\2\u0428\u042a\5\u025e\u0130\2\u0429\u0428\3\2\2\2\u0429\u042a\3\2\2"+
		"\2\u042a\u042b\3\2\2\2\u042b\u0433\5\u020e\u0108\2\u042c\u042d\7m\2\2"+
		"\u042d\u0434\5\u020e\u0108\2\u042e\u042f\7\u044c\2\2\u042f\u0430\7m\2"+
		"\2\u0430\u0431\5\u020e\u0108\2\u0431\u0432\7\u044d\2\2\u0432\u0434\3\2"+
		"\2\2\u0433\u042c\3\2\2\2\u0433\u042e\3\2\2\2\u0434\u0472\3\2\2\2\u0435"+
		"\u0437\7\60\2\2\u0436\u0438\7\u0275\2\2\u0437\u0436\3\2\2\2\u0437\u0438"+
		"\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043b\7\u00b1\2\2\u043a\u043c\5\u025e"+
		"\u0130\2\u043b\u043a\3\2\2\2\u043b\u043c\3\2\2\2\u043c\u043d\3\2\2\2\u043d"+
		"\u043f\5\u020e\u0108\2\u043e\u0440\5L\'\2\u043f\u043e\3\2\2\2\u043f\u0440"+
		"\3\2\2\2\u0440\u044b\3\2\2\2\u0441\u0448\5^\60\2\u0442\u0444\7\u044e\2"+
		"\2\u0443\u0442\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0445\3\2\2\2\u0445\u0447"+
		"\5^\60\2\u0446\u0443\3\2\2\2\u0447\u044a\3\2\2\2\u0448\u0446\3\2\2\2\u0448"+
		"\u0449\3\2\2\2\u0449\u044c\3\2\2\2\u044a\u0448\3\2\2\2\u044b\u0441\3\2"+
		"\2\2\u044b\u044c\3\2\2\2\u044c\u044e\3\2\2\2\u044d\u044f\5d\63\2\u044e"+
		"\u044d\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u0451\3\2\2\2\u0450\u0452\t\b"+
		"\2\2\u0451\u0450\3\2\2\2\u0451\u0452\3\2\2\2\u0452\u0454\3\2\2\2";
	private static final String _serializedATNSegment1 =
		"\u0453\u0455\7\34\2\2\u0454\u0453\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u0456"+
		"\3\2\2\2\u0456\u0457\5\u00b6\\\2\u0457\u0472\3\2\2\2\u0458\u045a\7\60"+
		"\2\2\u0459\u045b\7\u0275\2\2\u045a\u0459\3\2\2\2\u045a\u045b\3\2\2\2\u045b"+
		"\u045c\3\2\2\2\u045c\u045e\7\u00b1\2\2\u045d\u045f\5\u025e\u0130\2\u045e"+
		"\u045d\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u0460\3\2\2\2\u0460\u0461\5\u020e"+
		"\u0108\2\u0461\u046c\5L\'\2\u0462\u0469\5^\60\2\u0463\u0465\7\u044e\2"+
		"\2\u0464\u0463\3\2\2\2\u0464\u0465\3\2\2\2\u0465\u0466\3\2\2\2\u0466\u0468"+
		"\5^\60\2\u0467\u0464\3\2\2\2\u0468\u046b\3\2\2\2\u0469\u0467\3\2\2\2\u0469"+
		"\u046a\3\2\2\2\u046a\u046d\3\2\2\2\u046b\u0469\3\2\2\2\u046c\u0462\3\2"+
		"\2\2\u046c\u046d\3\2\2\2\u046d\u046f\3\2\2\2\u046e\u0470\5d\63\2\u046f"+
		"\u046e\3\2\2\2\u046f\u0470\3\2\2\2\u0470\u0472\3\2\2\2\u0471\u0423\3\2"+
		"\2\2\u0471\u0435\3\2\2\2\u0471\u0458\3\2\2\2\u0472)\3\2\2\2\u0473\u0474"+
		"\7\60\2\2\u0474\u0475\7\u0273\2\2\u0475\u0476\5\u0226\u0114\2\u0476\u0477"+
		"\7\25\2\2\u0477\u0478\7\u0185\2\2\u0478\u047c\7\u045b\2\2\u0479\u047a"+
		"\7\u01a9\2\2\u047a\u047b\7\u0443\2\2\u047b\u047d\5\u022e\u0118\2\u047c"+
		"\u0479\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u0483\3\2\2\2\u047e\u0480\7\u0197"+
		"\2\2\u047f\u0481\7\u0443\2\2\u0480\u047f\3\2\2\2\u0480\u0481\3\2\2\2\u0481"+
		"\u0482\3\2\2\2\u0482\u0484\5\u021c\u010f\2\u0483\u047e\3\2\2\2\u0483\u0484"+
		"\3\2\2\2\u0484+\3\2\2\2\u0485\u0486\7\60\2\2\u0486\u0487\7\u0273\2\2\u0487"+
		"\u0488\5\u0226\u0114\2\u0488\u0489\7\25\2\2\u0489\u048a\7\u0185\2\2\u048a"+
		"\u048b\7\u045b\2\2\u048b\u048c\7\u00bf\2\2\u048c\u048d\7\u01d5\2\2\u048d"+
		"\u048e\7V\2\2\u048e\u0494\5\u0226\u0114\2\u048f\u0491\7\u01a5\2\2\u0490"+
		"\u0492\7\u0443\2\2\u0491\u0490\3\2\2\2\u0491\u0492\3\2\2\2\u0492\u0493"+
		"\3\2\2\2\u0493\u0495\5\u022e\u0118\2\u0494\u048f\3\2\2\2\u0494\u0495\3"+
		"\2\2\2\u0495\u049b\3\2\2\2\u0496\u0498\7\u01c0\2\2\u0497\u0499\7\u0443"+
		"\2\2\u0498\u0497\3\2\2\2\u0498\u0499\3\2\2\2\u0499\u049a\3\2\2\2\u049a"+
		"\u049c\5\u022e\u0118\2\u049b\u0496\3\2\2\2\u049b\u049c\3\2\2\2\u049c\u04a2"+
		"\3\2\2\2\u049d\u049f\7\u0157\2\2\u049e\u04a0\7\u0443\2\2\u049f\u049e\3"+
		"\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a3\5\u022e\u0118"+
		"\2\u04a2\u049d\3\2\2\2\u04a2\u04a3\3\2\2\2\u04a3\u04a9\3\2\2\2\u04a4\u04a6"+
		"\7\u01ef\2\2\u04a5\u04a7\7\u0443\2\2\u04a6\u04a5\3\2\2\2\u04a6\u04a7\3"+
		"\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04aa\5\u022e\u0118\2\u04a9\u04a4\3\2"+
		"\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04b0\3\2\2\2\u04ab\u04ad\7\u0204\2\2\u04ac"+
		"\u04ae\7\u0443\2\2\u04ad\u04ac\3\2\2\2\u04ad\u04ae\3\2\2\2\u04ae\u04af"+
		"\3\2\2\2\u04af\u04b1\5\u0226\u0114\2\u04b0\u04ab\3\2\2\2\u04b0\u04b1\3"+
		"\2\2\2\u04b1\u04b3\3\2\2\2\u04b2\u04b4\7\u028e\2\2\u04b3\u04b2\3\2\2\2"+
		"\u04b3\u04b4\3\2\2\2\u04b4\u04ba\3\2\2\2\u04b5\u04b7\7\u0171\2\2\u04b6"+
		"\u04b8\7\u0443\2\2\u04b7\u04b6\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8\u04b9"+
		"\3\2\2\2\u04b9\u04bb\7\u045b\2\2\u04ba\u04b5\3\2\2\2\u04ba\u04bb\3\2\2"+
		"\2\u04bb\u04bc\3\2\2\2\u04bc\u04be\7\u0197\2\2\u04bd\u04bf\7\u0443\2\2"+
		"\u04be\u04bd\3\2\2\2\u04be\u04bf\3\2\2\2\u04bf\u04c0\3\2\2\2\u04c0\u04c1"+
		"\5\u021c\u010f\2\u04c1-\3\2\2\2\u04c2\u04c4\7\60\2\2\u04c3\u04c5\5\64"+
		"\33\2\u04c4\u04c3\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04c6\3\2\2\2\u04c6"+
		"\u04c7\7\u00b6\2\2\u04c7\u04c8\5\u020c\u0107\2\u04c8\u04c9\t\t\2\2\u04c9"+
		"\u04ca\t\n\2\2\u04ca\u04cb\7\177\2\2\u04cb\u04cc\5\u020e\u0108\2\u04cc"+
		"\u04cd\7N\2\2\u04cd\u04ce\7B\2\2\u04ce\u04d1\7\u0246\2\2\u04cf\u04d0\t"+
		"\13\2\2\u04d0\u04d2\5\u020c\u0107\2\u04d1\u04cf\3\2\2\2\u04d1\u04d2\3"+
		"\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d4\5\u0172\u00ba\2\u04d4/\3\2\2\2"+
		"\u04d5\u04d8\7\60\2\2\u04d6\u04d7\7\u0083\2\2\u04d7\u04d9\7\u0095\2\2"+
		"\u04d8\u04d6\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04dd\3\2\2\2\u04da\u04db"+
		"\7\u0152\2\2\u04db\u04dc\7\u0443\2\2\u04dc\u04de\t\f\2\2\u04dd\u04da\3"+
		"\2\2\2\u04dd\u04de\3\2\2\2\u04de\u04e0\3\2\2\2\u04df\u04e1\5\64\33\2\u04e0"+
		"\u04df\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1\u04e5\3\2\2\2\u04e2\u04e3\7\u00a6"+
		"\2\2\u04e3\u04e4\7\u024b\2\2\u04e4\u04e6\t\r\2\2\u04e5\u04e2\3\2\2\2\u04e5"+
		"\u04e6\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7\u04e8\7\u028b\2\2\u04e8\u04ed"+
		"\5\u020c\u0107\2\u04e9\u04ea\7\u044c\2\2\u04ea\u04eb\5\u0246\u0124\2\u04eb"+
		"\u04ec\7\u044d\2\2\u04ec\u04ee\3\2\2\2\u04ed\u04e9\3\2\2\2\u04ed\u04ee"+
		"\3\2\2\2\u04ee\u04ef\3\2\2\2\u04ef\u04f0\7\34\2\2\u04f0\u04f7\5\u00b6"+
		"\\\2\u04f1\u04f3\7\u00c5\2\2\u04f2\u04f4\t\16\2\2\u04f3\u04f2\3\2\2\2"+
		"\u04f3\u04f4\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u04f6\7)\2\2\u04f6\u04f8"+
		"\7\u0081\2\2\u04f7\u04f1\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8\61\3\2\2\2"+
		"\u04f9\u04fb\78\2\2\u04fa\u04f9\3\2\2\2\u04fa\u04fb\3\2\2\2\u04fb\u04ff"+
		"\3\2\2\2\u04fc\u04fd\7(\2\2\u04fd\u0500\7\u00a1\2\2\u04fe\u0500\7\u032c"+
		"\2\2\u04ff\u04fc\3\2\2\2\u04ff\u04fe\3\2\2\2\u0500\u0502\3\2\2\2\u0501"+
		"\u0503\7\u0443\2\2\u0502\u0501\3\2\2\2\u0502\u0503\3\2\2\2\u0503\u0506"+
		"\3\2\2\2\u0504\u0507\5\u0218\u010d\2\u0505\u0507\78\2\2\u0506\u0504\3"+
		"\2\2\2\u0506\u0505\3\2\2\2\u0507\u0511\3\2\2\2\u0508\u050a\78\2\2\u0509"+
		"\u0508\3\2\2\2\u0509\u050a\3\2\2\2\u050a\u050b\3\2\2\2\u050b\u050d\7*"+
		"\2\2\u050c\u050e\7\u0443\2\2\u050d\u050c\3\2\2\2\u050d\u050e\3\2\2\2\u050e"+
		"\u050f\3\2\2\2\u050f\u0511\5\u021a\u010e\2\u0510\u04fa\3\2\2\2\u0510\u0509"+
		"\3\2\2\2\u0511\63\3\2\2\2\u0512\u0513\7\u0188\2\2\u0513\u051a\7\u0443"+
		"\2\2\u0514\u051b\5\u0214\u010b\2\u0515\u0518\7\63\2\2\u0516\u0517\7\u044c"+
		"\2\2\u0517\u0519\7\u044d\2\2\u0518\u0516\3\2\2\2\u0518\u0519\3\2\2\2\u0519"+
		"\u051b\3\2\2\2\u051a\u0514\3\2\2\2\u051a\u0515\3\2\2\2\u051b\65\3\2\2"+
		"\2\u051c\u051d\7\u0154\2\2\u051d\u0521\58\35\2\u051e\u0520\5:\36\2\u051f"+
		"\u051e\3\2\2\2\u0520\u0523\3\2\2\2\u0521\u051f\3\2\2\2\u0521\u0522\3\2"+
		"\2\2\u0522\u053f\3\2\2\2\u0523\u0521\3\2\2\2\u0524\u0527\7\u019f\2\2\u0525"+
		"\u0528\5\u022c\u0117\2\u0526\u0528\5\u0288\u0145\2\u0527\u0525\3\2\2\2"+
		"\u0527\u0526\3\2\2\2\u0528\u0529\3\2\2\2\u0529\u0532\5<\37\2\u052a\u052b"+
		"\7\u0262\2\2\u052b\u052f\58\35\2\u052c\u052e\5:\36\2\u052d\u052c\3\2\2"+
		"\2\u052e\u0531\3\2\2\2\u052f\u052d\3\2\2\2\u052f\u0530\3\2\2\2\u0530\u0533"+
		"\3\2\2\2\u0531\u052f\3\2\2\2\u0532\u052a\3\2\2\2\u0532\u0533\3\2\2\2\u0533"+
		"\u053c\3\2\2\2\u0534\u0535\7\u0196\2\2\u0535\u0539\58\35\2\u0536\u0538"+
		"\5:\36\2\u0537\u0536\3\2\2\2\u0538\u053b\3\2\2\2\u0539\u0537\3\2\2\2\u0539"+
		"\u053a\3\2\2\2\u053a\u053d\3\2\2\2\u053b\u0539\3\2\2\2\u053c\u0534\3\2"+
		"\2\2\u053c\u053d\3\2\2\2\u053d\u053f\3\2\2\2\u053e\u051c\3\2\2\2\u053e"+
		"\u0524\3\2\2\2\u053f\67\3\2\2\2\u0540\u0545\7\u013d\2\2\u0541\u0545\5"+
		"\u0230\u0119\2\u0542\u0545\5\u022c\u0117\2\u0543\u0545\5\u0288\u0145\2"+
		"\u0544\u0540\3\2\2\2\u0544\u0541\3\2\2\2\u0544\u0542\3\2\2\2\u0544\u0543"+
		"\3\2\2\2\u05459\3\2\2\2\u0546\u0547\7\u043f\2\2\u0547\u054a\7b\2\2\u0548"+
		"\u054b\5\u022c\u0117\2\u0549\u054b\5\u0288\u0145\2\u054a\u0548\3\2\2\2"+
		"\u054a\u0549\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u054d\5<\37\2\u054d;\3"+
		"\2\2\2\u054e\u055c\5\u02a0\u0151\2\u054f\u055c\7\u00e2\2\2\u0550\u055c"+
		"\7\u00f5\2\2\u0551\u055c\7\u00f6\2\2\u0552\u055c\7\u00f7\2\2\u0553\u055c"+
		"\7\u00f8\2\2\u0554\u055c\7\u00f9\2\2\u0555\u055c\7\u00fa\2\2\u0556\u055c"+
		"\7\u00fb\2\2\u0557\u055c\7\u00fc\2\2\u0558\u055c\7\u00fd\2\2\u0559\u055c"+
		"\7\u00fe\2\2\u055a\u055c\7\u00ff\2\2\u055b\u054e\3\2\2\2\u055b\u054f\3"+
		"\2\2\2\u055b\u0550\3\2\2\2\u055b\u0551\3\2\2\2\u055b\u0552\3\2\2\2\u055b"+
		"\u0553\3\2\2\2\u055b\u0554\3\2\2\2\u055b\u0555\3\2\2\2\u055b\u0556\3\2"+
		"\2\2\u055b\u0557\3\2\2\2\u055b\u0558\3\2\2\2\u055b\u0559\3\2\2\2\u055b"+
		"\u055a\3\2\2\2\u055c=\3\2\2\2\u055d\u0563\7\u0193\2\2\u055e\u0563\7\u018c"+
		"\2\2\u055f\u0560\7\u018c\2\2\u0560\u0561\7\177\2\2\u0561\u0563\7\u0252"+
		"\2\2\u0562\u055d\3\2\2\2\u0562\u055e\3\2\2\2\u0562\u055f\3\2\2\2\u0563"+
		"?\3\2\2\2\u0564\u0565\7\u00c0\2\2\u0565\u0566\t\17\2\2\u0566A\3\2\2\2"+
		"\u0567\u0569\7\u01cd\2\2\u0568\u056a\7\u0443\2\2\u0569\u0568\3\2\2\2\u0569"+
		"\u056a\3\2\2\2\u056a\u056b\3\2\2\2\u056b\u0575\5\u022e\u0118\2\u056c\u0575"+
		"\5@!\2\u056d\u056e\7\u00c5\2\2\u056e\u056f\7\u0215\2\2\u056f\u0575\5\u0226"+
		"\u0114\2\u0570\u0571\7\u0171\2\2\u0571\u0575\7\u045b\2\2\u0572\u0575\7"+
		"\u01c5\2\2\u0573\u0575\7\u028d\2\2\u0574\u0567\3\2\2\2\u0574\u056c\3\2"+
		"\2\2\u0574\u056d\3\2\2\2\u0574\u0570\3\2\2\2\u0574\u0572\3\2\2\2\u0574"+
		"\u0573\3\2\2\2\u0575C\3\2\2\2\u0576\u0578\t\20\2\2\u0577\u0576\3\2\2\2"+
		"\u0577\u0578\3\2\2\2\u0578\u0579\3\2\2\2\u0579\u057a\5\u0226\u0114\2\u057a"+
		"\u057b\5\u023a\u011e\2\u057bE\3\2\2\2\u057c\u057d\5\u0226\u0114\2\u057d"+
		"\u057e\5\u023a\u011e\2\u057eG\3\2\2\2\u057f\u0580\7\u0171\2\2\u0580\u0597"+
		"\7\u045b\2\2\u0581\u0582\7\u01ce\2\2\u0582\u0597\7\u00a6\2\2\u0583\u0585"+
		"\7{\2\2\u0584\u0583\3\2\2\2\u0584\u0585\3\2\2\2\u0585\u0586\3\2\2\2\u0586"+
		"\u0597\7=\2\2\u0587\u0588\7\u017e\2\2\u0588\u0592\7\u00a6\2\2\u0589\u058a"+
		"\7\u0203\2\2\u058a\u0592\7\u00a6\2\2\u058b\u058c\7\u008f\2\2\u058c\u058d"+
		"\7\u00a6\2\2\u058d\u0592\7\u0184\2\2\u058e\u058f\7y\2\2\u058f\u0590\7"+
		"\u00a6\2\2\u0590\u0592\7\u0184\2\2\u0591\u0587\3\2\2\2\u0591\u0589\3\2"+
		"\2\2\u0591\u058b\3\2\2\2\u0591\u058e\3\2\2\2\u0592\u0597\3\2\2\2\u0593"+
		"\u0594\7\u00a6\2\2\u0594\u0595\7\u024b\2\2\u0595\u0597\t\r\2\2\u0596\u057f"+
		"\3\2\2\2\u0596\u0581\3\2\2\2\u0596\u0584\3\2\2\2\u0596\u0591\3\2\2\2\u0596"+
		"\u0593\3\2\2\2\u0597I\3\2\2\2\u0598\u0599\7\u01ba\2\2\u0599\u05a7\7\u045b"+
		"\2\2\u059a\u059b\7\65\2\2\u059b\u05a7\7\u045b\2\2\u059c\u059d\7\u0285"+
		"\2\2\u059d\u05a7\7\u045b\2\2\u059e\u059f\7\u0219\2\2\u059f\u05a7\7\u045b"+
		"\2\2\u05a0\u05a1\7\u0255\2\2\u05a1\u05a7\7\u045b\2\2\u05a2\u05a3\7\u0212"+
		"\2\2\u05a3\u05a7\7\u045b\2\2\u05a4\u05a5\7\u021e\2\2\u05a5\u05a7\5\u022c"+
		"\u0117\2\u05a6\u0598\3\2\2\2\u05a6\u059a\3\2\2\2\u05a6\u059c\3\2\2\2\u05a6"+
		"\u059e\3\2\2\2\u05a6\u05a0\3\2\2\2\u05a6\u05a2\3\2\2\2\u05a6\u05a4\3\2"+
		"\2\2\u05a7K\3\2\2\2\u05a8\u05a9\7\u044c\2\2\u05a9\u05ae\5N(\2\u05aa\u05ab"+
		"\7\u044e\2\2\u05ab\u05ad\5N(\2\u05ac\u05aa\3\2\2\2\u05ad\u05b0\3\2\2\2"+
		"\u05ae\u05ac\3\2\2\2\u05ae\u05af\3\2\2\2\u05af\u05b1\3\2\2\2\u05b0\u05ae"+
		"\3\2\2\2\u05b1\u05b2\7\u044d\2\2\u05b2M\3\2\2\2\u05b3\u05b4\5\u0226\u0114"+
		"\2\u05b4\u05b5\5P)\2\u05b5\u05b9\3\2\2\2\u05b6\u05b9\5T+\2\u05b7\u05b9"+
		"\5\\/\2\u05b8\u05b3\3\2\2\2\u05b8\u05b6\3\2\2\2\u05b8\u05b7\3\2\2\2\u05b9"+
		"O\3\2\2\2\u05ba\u05be\5\u023a\u011e\2\u05bb\u05bd\5R*\2\u05bc\u05bb\3"+
		"\2\2\2\u05bd\u05c0\3\2\2\2\u05be\u05bc\3\2\2\2\u05be\u05bf\3\2\2\2\u05bf"+
		"Q\3\2\2\2\u05c0\u05be\3\2\2\2\u05c1\u05f7\5\u0236\u011c\2\u05c2\u05c3"+
		"\78\2\2\u05c3\u05f7\5\u0256\u012c\2\u05c4\u05f7\7\u028d\2\2\u05c5\u05f7"+
		"\7\u01c5\2\2\u05c6\u05cb\7\u0158\2\2\u05c7\u05c8\7\177\2\2\u05c8\u05c9"+
		"\7\u00bd\2\2\u05c9\u05cb\5\u0258\u012d\2\u05ca\u05c6\3\2\2\2\u05ca\u05c7"+
		"\3\2\2\2\u05cb\u05f7\3\2\2\2\u05cc\u05ce\7\u008a\2\2\u05cd\u05cc\3\2\2"+
		"\2\u05cd\u05ce\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf\u05f7\7g\2\2\u05d0\u05d2"+
		"\7\u00ba\2\2\u05d1\u05d3\7g\2\2\u05d2\u05d1\3\2\2\2\u05d2\u05d3\3\2\2"+
		"\2\u05d3\u05f7\3\2\2\2\u05d4\u05d5\7\u0171\2\2\u05d5\u05f7\7\u045b\2\2"+
		"\u05d6\u05d7\7\u016f\2\2\u05d7\u05f7\t\21\2\2\u05d8\u05d9\7\u0268\2\2"+
		"\u05d9\u05f7\t\22\2\2\u05da\u05f7\5V,\2\u05db\u05dc\7*\2\2\u05dc\u05f7"+
		"\5\u021a\u010e\2\u05dd\u05de\7S\2\2\u05de\u05e0\7\30\2\2\u05df\u05dd\3"+
		"\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05e1\3\2\2\2\u05e1\u05e2\7\34\2\2\u05e2"+
		"\u05e3\7\u044c\2\2\u05e3\u05e4\5\u0288\u0145\2\u05e4\u05e6\7\u044d\2\2"+
		"\u05e5\u05e7\t\23\2\2\u05e6\u05e5\3\2\2\2\u05e6\u05e7\3\2\2\2\u05e7\u05f7"+
		"\3\2\2\2\u05e8\u05e9\7\u00f4\2\2\u05e9\u05ea\78\2\2\u05ea\u05f7\7\u0289"+
		"\2\2\u05eb\u05ed\7-\2\2\u05ec\u05ee\5\u0226\u0114\2\u05ed\u05ec\3\2\2"+
		"\2\u05ed\u05ee\3\2\2\2\u05ee\u05f0\3\2\2\2\u05ef\u05eb\3\2\2\2\u05ef\u05f0"+
		"\3\2\2\2\u05f0\u05f1\3\2\2\2\u05f1\u05f2\7)\2\2\u05f2\u05f3\7\u044c\2"+
		"\2\u05f3\u05f4\5\u0288\u0145\2\u05f4\u05f5\7\u044d\2\2\u05f5\u05f7\3\2"+
		"\2\2\u05f6\u05c1\3\2\2\2\u05f6\u05c2\3\2\2\2\u05f6\u05c4\3\2\2\2\u05f6"+
		"\u05c5\3\2\2\2\u05f6\u05ca\3\2\2\2\u05f6\u05cd\3\2\2\2\u05f6\u05d0\3\2"+
		"\2\2\u05f6\u05d4\3\2\2\2\u05f6\u05d6\3\2\2\2\u05f6\u05d8\3\2\2\2\u05f6"+
		"\u05da\3\2\2\2\u05f6\u05db\3\2\2\2\u05f6\u05df\3\2\2\2\u05f6\u05e8\3\2"+
		"\2\2\u05f6\u05ef\3\2\2\2\u05f7S\3\2\2\2\u05f8\u05fa\7-\2\2\u05f9\u05fb"+
		"\5\u0226\u0114\2\u05fa\u05f9\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb\u05fd\3"+
		"\2\2\2\u05fc\u05f8\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd\u05fe\3\2\2\2\u05fe"+
		"\u05ff\7\u008a\2\2\u05ff\u0601\7g\2\2\u0600\u0602\5\u0226\u0114\2\u0601"+
		"\u0600\3\2\2\2\u0601\u0602\3\2\2\2\u0602\u0604\3\2\2\2\u0603\u0605\5@"+
		"!\2\u0604\u0603\3\2\2\2\u0604\u0605\3\2\2\2\u0605\u0606\3\2\2\2\u0606"+
		"\u060a\5\u024a\u0126\2\u0607\u0609\5B\"\2\u0608\u0607\3\2\2\2\u0609\u060c"+
		"\3\2\2\2\u060a\u0608\3\2\2\2\u060a\u060b\3\2\2\2\u060b\u063e\3\2\2\2\u060c"+
		"\u060a\3\2\2\2\u060d\u060f\7-\2\2\u060e\u0610\5\u0226\u0114\2\u060f\u060e"+
		"\3\2\2\2\u060f\u0610\3\2\2\2\u0610\u0612\3\2\2\2\u0611\u060d\3\2\2\2\u0611"+
		"\u0612\3\2\2\2\u0612\u0613\3\2\2\2\u0613\u0615\7\u00ba\2\2\u0614\u0616"+
		"\t\24\2\2\u0615\u0614\3\2\2\2\u0615\u0616\3\2\2\2\u0616\u0618\3\2\2\2"+
		"\u0617\u0619\5\u0226\u0114\2\u0618\u0617\3\2\2\2\u0618\u0619\3\2\2\2\u0619"+
		"\u061b\3\2\2\2\u061a\u061c\5@!\2\u061b\u061a\3\2\2\2\u061b\u061c\3\2\2"+
		"\2\u061c\u061d\3\2\2\2\u061d\u0621\5\u024a\u0126\2\u061e\u0620\5B\"\2"+
		"\u061f\u061e\3\2\2\2\u0620\u0623\3\2\2\2\u0621\u061f\3\2\2\2\u0621\u0622"+
		"\3\2\2\2\u0622\u063e\3\2\2\2\u0623\u0621\3\2\2\2\u0624\u0626\7-\2\2\u0625"+
		"\u0627\5\u0226\u0114\2\u0626\u0625\3\2\2\2\u0626\u0627\3\2\2\2\u0627\u0629"+
		"\3\2\2\2\u0628\u0624\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u062a\3\2\2\2\u062a"+
		"\u062b\7P\2\2\u062b\u062d\7g\2\2\u062c\u062e\5\u0226\u0114\2\u062d\u062c"+
		"\3\2\2\2\u062d\u062e\3\2\2\2\u062e\u062f\3\2\2\2\u062f\u0630\5\u024a\u0126"+
		"\2\u0630\u0631\5V,\2\u0631\u063e\3\2\2\2\u0632\u0634\7-\2\2\u0633\u0635"+
		"\5\u0226\u0114\2\u0634\u0633\3\2\2\2\u0634\u0635\3\2\2\2\u0635\u0637\3"+
		"\2\2\2\u0636\u0632\3\2\2\2\u0636\u0637\3\2\2\2\u0637\u0638\3\2\2\2\u0638"+
		"\u0639\7)\2\2\u0639\u063a\7\u044c\2\2\u063a\u063b\5\u0288\u0145\2\u063b"+
		"\u063c\7\u044d\2\2\u063c\u063e\3\2\2\2\u063d\u05fc\3\2\2\2\u063d\u0611"+
		"\3\2\2\2\u063d\u0628\3\2\2\2\u063d\u0636\3\2\2\2\u063eU\3\2\2\2\u063f"+
		"\u0640\7\u0090\2\2\u0640\u0642\5\u020e\u0108\2\u0641\u0643\5\u024a\u0126"+
		"\2\u0642\u0641\3\2\2\2\u0642\u0643\3\2\2\2\u0643\u0646\3\2\2\2\u0644\u0645"+
		"\7w\2\2\u0645\u0647\t\25\2\2\u0646\u0644\3\2\2\2\u0646\u0647\3\2\2\2\u0647"+
		"\u0649\3\2\2\2\u0648\u064a\5X-\2\u0649\u0648\3\2\2\2\u0649\u064a\3\2\2"+
		"\2\u064aW\3\2\2\2\u064b\u064c\7\177\2\2\u064c\u064d\7:\2\2\u064d\u0651"+
		"\5Z.\2\u064e\u064f\7\177\2\2\u064f\u0650\7\u00bd\2\2\u0650\u0652\5Z.\2"+
		"\u0651\u064e\3\2\2\2\u0651\u0652\3\2\2\2\u0652\u065c\3\2\2\2\u0653\u0654"+
		"\7\177\2\2\u0654\u0655\7\u00bd\2\2\u0655\u0659\5Z.\2\u0656\u0657\7\177"+
		"\2\2\u0657\u0658\7:\2\2\u0658\u065a\5Z.\2\u0659\u0656\3\2\2\2\u0659\u065a"+
		"\3\2\2\2\u065a\u065c\3\2\2\2\u065b\u064b\3\2\2\2\u065b\u0653\3\2\2\2\u065c"+
		"Y\3\2\2\2\u065d\u0664\7\u0098\2\2\u065e\u0664\7$\2\2\u065f\u0660\7\u00a1"+
		"\2\2\u0660\u0664\7}\2\2\u0661\u0662\7\u0203\2\2\u0662\u0664\7\u014f\2"+
		"\2\u0663\u065d\3\2\2\2\u0663\u065e\3\2\2\2\u0663\u065f\3\2\2\2\u0663\u0661"+
		"\3\2\2\2\u0664[\3\2\2\2\u0665\u0667\t\24\2\2\u0666\u0668\5\u0226\u0114"+
		"\2\u0667\u0666\3\2\2\2\u0667\u0668\3\2\2\2\u0668\u066a\3\2\2\2\u0669\u066b"+
		"\5@!\2\u066a\u0669\3\2\2\2\u066a\u066b\3\2\2\2\u066b\u066c\3\2\2\2\u066c"+
		"\u0670\5\u024a\u0126\2\u066d\u066f\5B\"\2\u066e\u066d\3\2\2\2\u066f\u0672"+
		"\3\2\2\2\u0670\u066e\3\2\2\2\u0670\u0671\3\2\2\2\u0671\u0682\3\2\2\2\u0672"+
		"\u0670\3\2\2\2\u0673\u0675\t\26\2\2\u0674\u0676\t\24\2\2\u0675\u0674\3"+
		"\2\2\2\u0675\u0676\3\2\2\2\u0676\u0678\3\2\2\2\u0677\u0679\5\u0226\u0114"+
		"\2\u0678\u0677\3\2\2\2\u0678\u0679\3\2\2\2\u0679\u067a\3\2\2\2\u067a\u067e"+
		"\5\u024a\u0126\2\u067b\u067d\5B\"\2\u067c\u067b\3\2\2\2\u067d\u0680\3"+
		"\2\2\2\u067e\u067c\3\2\2\2\u067e\u067f\3\2\2\2\u067f\u0682\3\2\2\2\u0680"+
		"\u067e\3\2\2\2\u0681\u0665\3\2\2\2\u0681\u0673\3\2\2\2\u0682]\3\2\2\2"+
		"\u0683\u0685\7\u0197\2\2\u0684\u0686\7\u0443\2\2\u0685\u0684\3\2\2\2\u0685"+
		"\u0686\3\2\2\2\u0686\u0688\3\2\2\2\u0687\u0689\5\u021c\u010f\2\u0688\u0687"+
		"\3\2\2\2\u0688\u0689\3\2\2\2\u0689\u0719\3\2\2\2\u068a\u068c\7\u0158\2"+
		"\2\u068b\u068d\7\u0443\2\2\u068c\u068b\3\2\2\2\u068c\u068d\3\2\2\2\u068d"+
		"\u068e\3\2\2\2\u068e\u0719\5\u022c\u0117\2\u068f\u0691\7\u0159\2\2\u0690"+
		"\u0692\7\u0443\2\2\u0691\u0690\3\2\2\2\u0691\u0692\3\2\2\2\u0692\u0693"+
		"\3\2\2\2\u0693\u0719\5\u022c\u0117\2\u0694\u0696\78\2\2\u0695\u0694\3"+
		"\2\2\2\u0695\u0696\3\2\2\2\u0696\u069a\3\2\2\2\u0697\u0698\7(\2\2\u0698"+
		"\u069b\7\u00a1\2\2\u0699\u069b\7\u032c\2\2\u069a\u0697\3\2\2\2\u069a\u0699"+
		"\3\2\2\2\u069b\u069d\3\2\2\2\u069c\u069e\7\u0443\2\2\u069d\u069c\3\2\2"+
		"\2\u069d\u069e\3\2\2\2\u069e\u06a1\3\2\2\2\u069f\u06a2\5\u0218\u010d\2"+
		"\u06a0\u06a2\78\2\2\u06a1\u069f\3\2\2\2\u06a1\u06a0\3\2\2\2\u06a2\u0719"+
		"\3\2\2\2\u06a3\u06a5\t\27\2\2\u06a4\u06a6\7\u0443\2\2\u06a5\u06a4\3\2"+
		"\2\2\u06a5\u06a6\3\2\2\2\u06a6\u06a7\3\2\2\2\u06a7\u0719\t\30\2\2\u06a8"+
		"\u06aa\78\2\2\u06a9\u06a8\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u06ab\3\2"+
		"\2\2\u06ab\u06ad\7*\2\2\u06ac\u06ae\7\u0443\2\2\u06ad\u06ac\3\2\2\2\u06ad"+
		"\u06ae\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u0719\5\u021a\u010e\2\u06b0\u06b2"+
		"\7\u0171\2\2\u06b1\u06b3\7\u0443\2\2\u06b2\u06b1\3\2\2\2\u06b2\u06b3\3"+
		"\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u0719\7\u045b\2\2\u06b5\u06b7\7\u0176"+
		"\2\2\u06b6\u06b8\7\u0443\2\2\u06b7\u06b6\3\2\2\2\u06b7\u06b8\3\2\2\2\u06b8"+
		"\u06b9\3\2\2\2\u06b9\u0719\t\31\2\2\u06ba\u06bc\7\u0179\2\2\u06bb\u06bd"+
		"\7\u0443\2\2\u06bc\u06bb\3\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u06be\3\2\2"+
		"\2\u06be\u0719\7\u045b\2\2\u06bf\u06c0\7\u0184\2\2\u06c0\u06c2\7\u018b"+
		"\2\2\u06c1\u06c3\7\u0443\2\2\u06c2\u06c1\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3"+
		"\u06c4\3\2\2\2\u06c4\u0719\7\u045b\2\2\u06c5\u06c7\7\u0189\2\2\u06c6\u06c8"+
		"\7\u0443\2\2\u06c7\u06c6\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8\u06c9\3\2\2"+
		"\2\u06c9\u0719\t\30\2\2\u06ca\u06cc\7\u0194\2\2\u06cb\u06cd\7\u0443\2"+
		"\2\u06cc\u06cb\3\2\2\2\u06cc\u06cd\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u0719"+
		"\7\u045b\2\2\u06cf\u06d0\7]\2\2\u06d0\u06d2\7\u018b\2\2\u06d1\u06d3\7"+
		"\u0443\2\2\u06d2\u06d1\3\2\2\2\u06d2\u06d3\3\2\2\2\u06d3\u06d4\3\2\2\2"+
		"\u06d4\u0719\7\u045b\2\2\u06d5\u06d7\7\u01c2\2\2\u06d6\u06d8\7\u0443\2"+
		"\2\u06d7\u06d6\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u0719"+
		"\t\32\2\2\u06da\u06dc\7\u01cd\2\2\u06db\u06dd\7\u0443\2\2\u06dc\u06db"+
		"\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u06de\3\2\2\2\u06de\u0719\5\u022e\u0118"+
		"\2\u06df\u06e1\7\u01ee\2\2\u06e0\u06e2\7\u0443\2\2\u06e1\u06e0\3\2\2\2"+
		"\u06e1\u06e2\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3\u0719\5\u022c\u0117\2\u06e4"+
		"\u06e6\7\u01f8\2\2\u06e5\u06e7\7\u0443\2\2\u06e6\u06e5\3\2\2\2\u06e6\u06e7"+
		"\3\2\2\2\u06e7\u06e8\3\2\2\2\u06e8\u0719\5\u022c\u0117\2\u06e9\u06eb\7"+
		"\u0213\2\2\u06ea\u06ec\7\u0443\2\2\u06eb\u06ea\3\2\2\2\u06eb\u06ec\3\2"+
		"\2\2\u06ec\u06ed\3\2\2\2\u06ed\u0719\t\33\2\2\u06ee\u06f0\7\u0219\2\2"+
		"\u06ef\u06f1\7\u0443\2\2\u06f0\u06ef\3\2\2\2\u06f0\u06f1\3\2\2\2\u06f1"+
		"\u06f2\3\2\2\2\u06f2\u0719\7\u045b\2\2\u06f3\u06f5\7\u0248\2\2\u06f4\u06f6"+
		"\7\u0443\2\2\u06f5\u06f4\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6\u06f7\3\2\2"+
		"\2\u06f7\u0719\t\34\2\2\u06f8\u06fa\7\u0263\2\2\u06f9\u06fb\7\u0443\2"+
		"\2\u06fa\u06f9\3\2\2\2\u06fa\u06fb\3\2\2\2\u06fb\u06fc\3\2\2\2\u06fc\u0719"+
		"\t\33\2\2\u06fd\u06ff\7\u0264\2\2\u06fe\u0700\7\u0443\2\2\u06ff\u06fe"+
		"\3\2\2\2\u06ff\u0700\3\2\2\2\u0700\u0701\3\2\2\2\u0701\u0719\t\33\2\2"+
		"\u0702\u0704\7\u0265\2\2\u0703\u0705\7\u0443\2\2\u0704\u0703\3\2\2\2\u0704"+
		"\u0705\3\2\2\2\u0705\u0706\3\2\2\2\u0706\u0719\5\u022c\u0117\2\u0707\u0708"+
		"\7\u0273\2\2\u0708\u070a\5\u0226\u0114\2\u0709\u070b\5b\62\2\u070a\u0709"+
		"\3\2\2\2\u070a\u070b\3\2\2\2\u070b\u0719\3\2\2\2\u070c\u070d\7\u0274\2"+
		"\2\u070d\u070e\7\u0443\2\2\u070e\u0719\5`\61\2\u070f\u0719\5b\62\2\u0710"+
		"\u0712\7\u00b9\2\2\u0711\u0713\7\u0443\2\2\u0712\u0711\3\2\2\2\u0712\u0713"+
		"\3\2\2\2\u0713\u0714\3\2\2\2\u0714\u0715\7\u044c\2\2\u0715\u0716\5\u0248"+
		"\u0125\2\u0716\u0717\7\u044d\2\2\u0717\u0719\3\2\2\2\u0718\u0683\3\2\2"+
		"\2\u0718\u068a\3\2\2\2\u0718\u068f\3\2\2\2\u0718\u0695\3\2\2\2\u0718\u06a3"+
		"\3\2\2\2\u0718\u06a9\3\2\2\2\u0718\u06b0\3\2\2\2\u0718\u06b5\3\2\2\2\u0718"+
		"\u06ba\3\2\2\2\u0718\u06bf\3\2\2\2\u0718\u06c5\3\2\2\2\u0718\u06ca\3\2"+
		"\2\2\u0718\u06cf\3\2\2\2\u0718\u06d5\3\2\2\2\u0718\u06da\3\2\2\2\u0718"+
		"\u06df\3\2\2\2\u0718\u06e4\3\2\2\2\u0718\u06e9\3\2\2\2\u0718\u06ee\3\2"+
		"\2\2\u0718\u06f3\3\2\2\2\u0718\u06f8\3\2\2\2\u0718\u06fd\3\2\2\2\u0718"+
		"\u0702\3\2\2\2\u0718\u0707\3\2\2\2\u0718\u070c\3\2\2\2\u0718\u070f\3\2"+
		"\2\2\u0718\u0710\3\2\2\2\u0719_\3\2\2\2\u071a\u071b\t\35\2\2\u071ba\3"+
		"\2\2\2\u071c\u071d\7\u0268\2\2\u071d\u071e\t\22\2\2\u071ec\3\2\2\2\u071f"+
		"\u0720\7\u0089\2\2\u0720\u0721\7\"\2\2\u0721\u0724\5f\64\2\u0722\u0723"+
		"\7\u0218\2\2\u0723\u0725\5\u022c\u0117\2\u0724\u0722\3\2\2\2\u0724\u0725"+
		"\3\2\2\2\u0725\u072d\3\2\2\2\u0726\u0727\7\u026d\2\2\u0727\u0728\7\"\2"+
		"\2\u0728\u072b\5h\65\2\u0729\u072a\7\u026e\2\2\u072a\u072c\5\u022c\u0117"+
		"\2\u072b\u0729\3\2\2\2\u072b\u072c\3\2\2\2\u072c\u072e\3\2\2\2\u072d\u0726"+
		"\3\2\2\2\u072d\u072e\3\2\2\2\u072e\u073a\3\2\2\2\u072f\u0730\7\u044c\2"+
		"\2\u0730\u0735\5j\66\2\u0731\u0732\7\u044e\2\2\u0732\u0734\5j\66\2\u0733"+
		"\u0731\3\2\2\2\u0734\u0737\3\2\2\2\u0735\u0733\3\2\2\2\u0735\u0736\3\2"+
		"\2\2\u0736\u0738\3\2\2\2\u0737\u0735\3\2\2\2\u0738\u0739\7\u044d\2\2\u0739"+
		"\u073b\3\2\2\2\u073a\u072f\3\2\2\2\u073a\u073b\3\2\2\2\u073be\3\2\2\2"+
		"\u073c\u073e\7o\2\2\u073d\u073c\3\2\2\2\u073d\u073e\3\2\2\2\u073e\u073f"+
		"\3\2\2\2\u073f\u0740\7\u01b8\2\2\u0740\u0741\7\u044c\2\2\u0741\u0742\5"+
		"\u0288\u0145\2\u0742\u0743\7\u044d\2\2\u0743\u076a\3\2\2\2\u0744\u0746"+
		"\7o\2\2\u0745\u0744\3\2\2\2\u0745\u0746\3\2\2\2\u0746\u0747\3\2\2\2\u0747"+
		"\u074b\7g\2\2\u0748\u0749\7\u0152\2\2\u0749\u074a\7\u0443\2\2\u074a\u074c"+
		"\t\36\2\2\u074b\u0748\3\2\2\2\u074b\u074c\3\2\2\2\u074c\u074d\3\2\2\2"+
		"\u074d\u074e\7\u044c\2\2\u074e\u074f\5\u0246\u0124\2\u074f\u0750\7\u044d"+
		"\2\2\u0750\u076a\3\2\2\2\u0751\u075b\7\u008d\2\2\u0752\u0753\7\u044c\2"+
		"\2\u0753\u0754\5\u0288\u0145\2\u0754\u0755\7\u044d\2\2\u0755\u075c\3\2"+
		"\2\2\u0756\u0757\7\u016e\2\2\u0757\u0758\7\u044c\2\2\u0758\u0759\5\u0246"+
		"\u0124\2\u0759\u075a\7\u044d\2\2\u075a\u075c\3\2\2\2\u075b\u0752\3\2\2"+
		"\2\u075b\u0756\3\2\2\2\u075c\u076a\3\2\2\2\u075d\u0767\7\u01d3\2\2\u075e"+
		"\u075f\7\u044c\2\2\u075f\u0760\5\u0288\u0145\2\u0760\u0761\7\u044d\2\2"+
		"\u0761\u0768\3\2\2\2\u0762\u0763\7\u016e\2\2\u0763\u0764\7\u044c\2\2\u0764"+
		"\u0765\5\u0246\u0124\2\u0765\u0766\7\u044d\2\2\u0766\u0768\3\2\2\2\u0767"+
		"\u075e\3\2\2\2\u0767\u0762\3\2\2\2\u0768\u076a\3\2\2\2\u0769\u073d\3\2"+
		"\2\2\u0769\u0745\3\2\2\2\u0769\u0751\3\2\2\2\u0769\u075d\3\2\2\2\u076a"+
		"g\3\2\2\2\u076b\u076d\7o\2\2\u076c\u076b\3\2\2\2\u076c\u076d\3\2\2\2\u076d"+
		"\u076e\3\2\2\2\u076e\u076f\7\u01b8\2\2\u076f\u0770\7\u044c\2\2\u0770\u0771"+
		"\5\u0288\u0145\2\u0771\u0772\7\u044d\2\2\u0772\u0781\3\2\2\2\u0773\u0775"+
		"\7o\2\2\u0774\u0773\3\2\2\2\u0774\u0775\3\2\2\2\u0775\u0776\3\2\2\2\u0776"+
		"\u077a\7g\2\2\u0777\u0778\7\u0152\2\2\u0778\u0779\7\u0443\2\2\u0779\u077b"+
		"\t\36\2\2\u077a\u0777\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u077c\3\2\2\2"+
		"\u077c\u077d\7\u044c\2\2\u077d\u077e\5\u0246\u0124\2\u077e\u077f\7\u044d"+
		"\2\2\u077f\u0781\3\2\2\2\u0780\u076c\3\2\2\2\u0780\u0774\3\2\2\2\u0781"+
		"i\3\2\2\2\u0782\u0783\7\u0089\2\2\u0783\u0784\5\u0226\u0114\2\u0784\u0785"+
		"\7\u00c1\2\2\u0785\u0786\7\u01d1\2\2\u0786\u0787\7\u0277\2\2\u0787\u0788"+
		"\7\u044c\2\2\u0788\u078d\5l\67\2\u0789\u078a\7\u044e\2\2\u078a\u078c\5"+
		"l\67\2\u078b\u0789\3\2\2\2\u078c\u078f\3\2\2\2\u078d\u078b\3\2\2\2\u078d"+
		"\u078e\3\2\2\2\u078e\u0790\3\2\2\2\u078f\u078d\3\2\2\2\u0790\u0794\7\u044d"+
		"\2\2\u0791\u0793\5r:\2\u0792\u0791\3\2\2\2\u0793\u0796\3\2\2\2\u0794\u0792"+
		"\3\2\2\2\u0794\u0795\3\2\2\2\u0795\u07a2\3\2\2\2\u0796\u0794\3\2\2\2\u0797"+
		"\u0798\7\u044c\2\2\u0798\u079d\5p9\2\u0799\u079a\7\u044e\2\2\u079a\u079c"+
		"\5p9\2\u079b\u0799\3\2\2\2\u079c\u079f\3\2\2\2\u079d\u079b\3\2\2\2\u079d"+
		"\u079e\3\2\2\2\u079e\u07a0\3\2\2\2\u079f\u079d\3\2\2\2\u07a0\u07a1\7\u044d"+
		"\2\2\u07a1\u07a3\3\2\2\2\u07a2\u0797\3\2\2\2\u07a2\u07a3\3\2\2\2\u07a3"+
		"\u0815\3\2\2\2\u07a4\u07a5\7\u0089\2\2\u07a5\u07a6\5\u0226\u0114\2\u07a6"+
		"\u07a7\7\u00c1\2\2\u07a7\u07a8\7\u01d1\2\2\u07a8\u07a9\7\u0277\2\2\u07a9"+
		"\u07ad\5l\67\2\u07aa\u07ac\5r:\2\u07ab\u07aa\3\2\2\2\u07ac\u07af\3\2\2"+
		"\2\u07ad\u07ab\3\2\2\2\u07ad\u07ae\3\2\2\2\u07ae\u07bb\3\2\2\2\u07af\u07ad"+
		"\3\2\2\2\u07b0\u07b1\7\u044c\2\2\u07b1\u07b6\5p9\2\u07b2\u07b3\7\u044e"+
		"\2\2\u07b3\u07b5\5p9\2\u07b4\u07b2\3\2\2\2\u07b5\u07b8\3\2\2\2\u07b6\u07b4"+
		"\3\2\2\2\u07b6\u07b7\3\2\2\2\u07b7\u07b9\3\2\2\2\u07b8\u07b6\3\2\2\2\u07b9"+
		"\u07ba\7\u044d\2\2\u07ba\u07bc\3\2\2\2\u07bb\u07b0\3\2\2\2\u07bb\u07bc"+
		"\3\2\2\2\u07bc\u0815\3\2\2\2\u07bd\u07be\7\u0089\2\2\u07be\u07bf\5\u0226"+
		"\u0114\2\u07bf\u07c0\7\u00c1\2\2\u07c0\u07c1\7\\\2\2\u07c1\u07c2\7\u044c"+
		"\2\2\u07c2\u07c7\5l\67\2\u07c3\u07c4\7\u044e\2\2\u07c4\u07c6\5l\67\2\u07c5"+
		"\u07c3\3\2\2\2\u07c6\u07c9\3\2\2\2\u07c7\u07c5\3\2\2\2\u07c7\u07c8\3\2"+
		"\2\2\u07c8\u07ca\3\2\2\2\u07c9\u07c7\3\2\2\2\u07ca\u07ce\7\u044d\2\2\u07cb"+
		"\u07cd\5r:\2\u07cc\u07cb\3\2\2\2\u07cd\u07d0\3\2\2\2\u07ce\u07cc\3\2\2"+
		"\2\u07ce\u07cf\3\2\2\2\u07cf\u07dc\3\2\2\2\u07d0\u07ce\3\2\2\2\u07d1\u07d2"+
		"\7\u044c\2\2\u07d2\u07d7\5p9\2\u07d3\u07d4\7\u044e\2\2\u07d4\u07d6\5p"+
		"9\2\u07d5\u07d3\3\2\2\2\u07d6\u07d9\3\2\2\2\u07d7\u07d5\3\2\2\2\u07d7"+
		"\u07d8\3\2\2\2\u07d8\u07da\3\2\2\2\u07d9\u07d7\3\2\2\2\u07da\u07db\7\u044d"+
		"\2\2\u07db\u07dd\3\2\2\2\u07dc\u07d1\3\2\2\2\u07dc\u07dd\3\2\2\2\u07dd"+
		"\u0815\3\2\2\2\u07de\u07df\7\u0089\2\2\u07df\u07e0\5\u0226\u0114\2\u07e0"+
		"\u07e1\7\u00c1\2\2\u07e1\u07e2\7\\\2\2\u07e2\u07e3\7\u044c\2\2\u07e3\u07e8"+
		"\5n8\2\u07e4\u07e5\7\u044e\2\2\u07e5\u07e7\5n8\2\u07e6\u07e4\3\2\2\2\u07e7"+
		"\u07ea\3\2\2\2\u07e8\u07e6\3\2\2\2\u07e8\u07e9\3\2\2\2\u07e9\u07eb\3\2"+
		"\2\2\u07ea\u07e8\3\2\2\2\u07eb\u07ef\7\u044d\2\2\u07ec\u07ee\5r:\2\u07ed"+
		"\u07ec\3\2\2\2\u07ee\u07f1\3\2\2\2\u07ef\u07ed\3\2\2\2\u07ef\u07f0\3\2"+
		"\2\2\u07f0\u07fd\3\2\2\2\u07f1\u07ef\3\2\2\2\u07f2\u07f3\7\u044c\2\2\u07f3"+
		"\u07f8\5p9\2\u07f4\u07f5\7\u044e\2\2\u07f5\u07f7\5p9\2\u07f6\u07f4\3\2"+
		"\2\2\u07f7\u07fa\3\2\2\2\u07f8\u07f6\3\2\2\2\u07f8\u07f9\3\2\2\2\u07f9"+
		"\u07fb\3\2\2\2\u07fa\u07f8\3\2\2\2\u07fb\u07fc\7\u044d\2\2\u07fc\u07fe"+
		"\3\2\2\2\u07fd\u07f2\3\2\2\2\u07fd\u07fe\3\2\2\2\u07fe\u0815\3\2\2\2\u07ff"+
		"\u0800\7\u0089\2\2\u0800\u0804\5\u0226\u0114\2\u0801\u0803\5r:\2\u0802"+
		"\u0801\3\2\2\2\u0803\u0806\3\2\2\2\u0804\u0802\3\2\2\2\u0804\u0805\3\2"+
		"\2\2\u0805\u0812\3\2\2\2\u0806\u0804\3\2\2\2\u0807\u0808\7\u044c\2\2\u0808"+
		"\u080d\5p9\2\u0809\u080a\7\u044e\2\2\u080a\u080c\5p9\2\u080b\u0809\3\2"+
		"\2\2\u080c\u080f\3\2\2\2\u080d\u080b\3\2\2\2\u080d\u080e\3\2\2\2\u080e"+
		"\u0810\3\2\2\2\u080f\u080d\3\2\2\2\u0810\u0811\7\u044d\2\2\u0811\u0813"+
		"\3\2\2\2\u0812\u0807\3\2\2\2\u0812\u0813\3\2\2\2\u0813\u0815\3\2\2\2\u0814"+
		"\u0782\3\2\2\2\u0814\u07a4\3\2\2\2\u0814\u07bd\3\2\2\2\u0814\u07de\3\2"+
		"\2\2\u0814\u07ff\3\2\2\2\u0815k\3\2\2\2\u0816\u081a\5\u0238\u011d\2\u0817"+
		"\u081a\5\u0288\u0145\2\u0818\u081a\7x\2\2\u0819\u0816\3\2\2\2\u0819\u0817"+
		"\3\2\2\2\u0819\u0818\3\2\2\2\u081am\3\2\2\2\u081b\u081c\7\u044c\2\2\u081c"+
		"\u081f\5l\67\2\u081d\u081e\7\u044e\2\2\u081e\u0820\5l\67\2\u081f\u081d"+
		"\3\2\2\2\u0820\u0821\3\2\2\2\u0821\u081f\3\2\2\2\u0821\u0822\3\2\2\2\u0822"+
		"\u0823\3\2\2\2\u0823\u0824\7\u044d\2\2\u0824o\3\2\2\2\u0825\u0826\7\u026d"+
		"\2\2\u0826\u082a\5\u0226\u0114\2\u0827\u0829\5r:\2\u0828\u0827\3\2\2\2"+
		"\u0829\u082c\3\2\2\2\u082a\u0828\3\2\2\2\u082a\u082b\3\2\2\2\u082bq\3"+
		"\2\2\2\u082c\u082a\3\2\2\2\u082d\u082f\78\2\2\u082e\u082d\3\2\2\2\u082e"+
		"\u082f\3\2\2\2\u082f\u0831\3\2\2\2\u0830\u0832\7\u0268\2\2\u0831\u0830"+
		"\3\2\2\2\u0831\u0832\3\2\2\2\u0832\u0833\3\2\2\2\u0833\u0835\7\u0197\2"+
		"\2\u0834\u0836\7\u0443\2\2\u0835\u0834\3\2\2\2\u0835\u0836\3\2\2\2\u0836"+
		"\u0837\3\2\2\2\u0837\u085e\5\u021c\u010f\2\u0838\u083a\7\u0171\2\2\u0839"+
		"\u083b\7\u0443\2\2\u083a\u0839\3\2\2\2\u083a\u083b\3\2\2\2\u083b\u083c"+
		"\3\2\2\2\u083c\u085e\7\u045b\2\2\u083d\u083e\7\u0184\2\2\u083e\u0840\7"+
		"\u018b\2\2\u083f\u0841\7\u0443\2\2\u0840\u083f\3\2\2\2\u0840\u0841\3\2"+
		"\2\2\u0841\u0842\3\2\2\2\u0842\u085e\7\u045b\2\2\u0843\u0844\7]\2\2\u0844"+
		"\u0846\7\u018b\2\2\u0845\u0847\7\u0443\2\2\u0846\u0845\3\2\2\2\u0846\u0847"+
		"\3\2\2\2\u0847\u0848\3\2\2\2\u0848\u085e\7\u045b\2\2\u0849\u084b\7\u01ee"+
		"\2\2\u084a\u084c\7\u0443\2\2\u084b\u084a\3\2\2\2\u084b\u084c\3\2\2\2\u084c"+
		"\u084d\3\2\2\2\u084d\u085e\5\u022c\u0117\2\u084e\u0850\7\u01f8\2\2\u084f"+
		"\u0851\7\u0443\2\2\u0850\u084f\3\2\2\2\u0850\u0851\3\2\2\2\u0851\u0852"+
		"\3\2\2\2\u0852\u085e\5\u022c\u0117\2\u0853\u0855\7\u0273\2\2\u0854\u0856"+
		"\7\u0443\2\2\u0855\u0854\3\2\2\2\u0855\u0856\3\2\2\2\u0856\u0857\3\2\2"+
		"\2\u0857\u085e\5\u0226\u0114\2\u0858\u085a\7\u0204\2\2\u0859\u085b\7\u0443"+
		"\2\2\u085a\u0859\3\2\2\2\u085a\u085b\3\2\2\2\u085b\u085c\3\2\2\2\u085c"+
		"\u085e\5\u0226\u0114\2\u085d\u082e\3\2\2\2\u085d\u0838\3\2\2\2\u085d\u083d"+
		"\3\2\2\2\u085d\u0843\3\2\2\2\u085d\u0849\3\2\2\2\u085d\u084e\3\2\2\2\u085d"+
		"\u0853\3\2\2\2\u085d\u0858\3\2\2\2\u085es\3\2\2\2\u085f\u0860\7\27\2\2"+
		"\u0860\u0862\t\2\2\2\u0861\u0863\5\u0226\u0114\2\u0862\u0861\3\2\2\2\u0862"+
		"\u0863\3\2\2\2\u0863\u0865\3\2\2\2\u0864\u0866\5\62\32\2\u0865\u0864\3"+
		"\2\2\2\u0866\u0867\3\2\2\2\u0867\u0865\3\2\2\2\u0867\u0868\3\2\2\2\u0868"+
		"\u0872\3\2\2\2\u0869\u086a\7\27\2\2\u086a\u086b\t\2\2\2\u086b\u086c\5"+
		"\u0226\u0114\2\u086c\u086d\7\u0284\2\2\u086d\u086e\7\u0184\2\2\u086e\u086f"+
		"\7\u018b\2\2\u086f\u0870\7\u01fe\2\2\u0870\u0872\3\2\2\2\u0871\u085f\3"+
		"\2\2\2\u0871\u0869\3\2\2\2\u0872u\3\2\2\2\u0873\u0875\7\27\2\2\u0874\u0876"+
		"\5\64\33\2\u0875\u0874\3\2\2\2\u0875\u0876\3\2\2\2\u0876\u0877\3\2\2\2"+
		"\u0877\u0878\7\u019d\2\2\u0878\u087c\5\u020c\u0107\2\u0879\u087a\7\177"+
		"\2\2\u087a\u087b\7\u024a\2\2\u087b\u087d\5\66\34\2\u087c\u0879\3\2\2\2"+
		"\u087c\u087d\3\2\2\2\u087d\u0884\3\2\2\2\u087e\u087f\7\177\2\2\u087f\u0881"+
		"\7\u0174\2\2\u0880\u0882\7{\2\2\u0881\u0880\3\2\2\2\u0881\u0882\3\2\2"+
		"\2\u0882\u0883\3\2\2\2\u0883\u0885\7\u0222\2\2\u0884\u087e\3\2\2\2\u0884"+
		"\u0885\3\2\2\2\u0885\u0889\3\2\2\2\u0886\u0887\7\u0093\2\2\u0887\u0888"+
		"\7\u00b4\2\2\u0888\u088a\5\u020c\u0107\2\u0889\u0886\3\2\2\2\u0889\u088a"+
		"\3\2\2\2\u088a\u088c\3\2\2\2\u088b\u088d\5> \2\u088c\u088b\3\2\2\2\u088c"+
		"\u088d\3\2\2\2\u088d\u0890\3\2\2\2\u088e\u088f\7\u0171\2\2\u088f\u0891"+
		"\7\u045b\2\2\u0890\u088e\3\2\2\2\u0890\u0891\3\2\2\2\u0891\u0894\3\2\2"+
		"\2\u0892\u0893\7\u018f\2\2\u0893\u0895\5\u0172\u00ba\2\u0894\u0892\3\2"+
		"\2\2\u0894\u0895\3\2\2\2\u0895w\3\2\2\2\u0896\u0897\7\27\2\2\u0897\u0898"+
		"\7\u01b2\2\2\u0898\u089c\5\u020c\u0107\2\u0899\u089b\5H%\2\u089a\u0899"+
		"\3\2\2\2\u089b\u089e\3\2\2\2\u089c\u089a\3\2\2\2\u089c\u089d\3\2\2\2\u089d"+
		"y\3\2\2\2\u089e\u089c\3\2\2\2\u089f\u08a0\7\27\2\2\u08a0\u08a1\7\u01c4"+
		"\2\2\u08a1\u08a2\7\u0245\2\2\u08a2\u08a3\7\u02fa\2\2\u08a3\u08a4\7\u01d7"+
		"\2\2\u08a4\u08a5\7g\2\2\u08a5{\3\2\2\2\u08a6\u08a7\7\27\2\2\u08a7\u08a8"+
		"\7\u01d5\2\2\u08a8\u08a9\7V\2\2\u08a9\u08aa\5\u0226\u0114\2\u08aa\u08ab"+
		"\7\25\2\2\u08ab\u08ac\7\u027f\2\2\u08ac\u08b2\7\u045b\2\2\u08ad\u08af"+
		"\7\u01c0\2\2\u08ae\u08b0\7\u0443\2\2\u08af\u08ae\3\2\2\2\u08af\u08b0\3"+
		"\2\2\2\u08b0\u08b1\3\2\2\2\u08b1\u08b3\5\u022e\u0118\2\u08b2\u08ad\3\2"+
		"\2\2\u08b2\u08b3\3\2\2\2\u08b3\u08b5\3\2\2\2\u08b4\u08b6\7\u028e\2\2\u08b5"+
		"\u08b4\3\2\2\2\u08b5\u08b6\3\2\2\2\u08b6\u08b7\3\2\2\2\u08b7\u08b9\7\u0197"+
		"\2\2\u08b8\u08ba\7\u0443\2\2\u08b9\u08b8\3\2\2\2\u08b9\u08ba\3\2\2\2\u08ba"+
		"\u08bb\3\2\2\2\u08bb\u08bc\5\u021c\u010f\2\u08bc}\3\2\2\2\u08bd\u08be"+
		"\7\27\2\2\u08be\u08bf\7\u008b\2\2\u08bf\u08c3\5\u020c\u0107\2\u08c0\u08c2"+
		"\5H%\2\u08c1\u08c0\3\2\2\2\u08c2\u08c5\3\2\2\2\u08c3\u08c1\3\2\2\2\u08c3"+
		"\u08c4\3\2\2\2\u08c4\177\3\2\2\2\u08c5\u08c3\3\2\2\2\u08c6\u08c7\7\27"+
		"\2\2\u08c7\u08c8\7\u024c\2\2\u08c8\u08c9\5\u0226\u0114\2\u08c9\u08ca\7"+
		"\u0211\2\2\u08ca\u08cb\7\u044c\2\2\u08cb\u08d0\5J&\2\u08cc\u08cd\7\u044e"+
		"\2\2\u08cd\u08cf\5J&\2\u08ce\u08cc\3\2\2\2\u08cf\u08d2\3\2\2\2\u08d0\u08ce"+
		"\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1\u08d3\3\2\2\2\u08d2\u08d0\3\2\2\2\u08d3"+
		"\u08d4\7\u044d\2\2\u08d4\u0081\3\2\2\2\u08d5\u08d7\7\27\2\2\u08d6\u08d8"+
		"\t\3\2\2\u08d7\u08d6\3\2\2\2\u08d7\u08d8\3\2\2\2\u08d8\u08da\3\2\2\2\u08d9"+
		"\u08db\7[\2\2\u08da\u08d9\3\2\2\2\u08da\u08db\3\2\2\2\u08db\u08dc\3\2"+
		"\2\2\u08dc\u08dd\7\u00b1\2\2\u08dd\u08e6\5\u020e\u0108\2\u08de\u08e3\5"+
		"\u0088E\2\u08df\u08e0\7\u044e\2\2\u08e0\u08e2\5\u0088E\2\u08e1\u08df\3"+
		"\2\2\2\u08e2\u08e5\3\2\2\2\u08e3\u08e1\3\2\2\2\u08e3\u08e4\3\2\2\2\u08e4"+
		"\u08e7\3\2\2\2\u08e5\u08e3\3\2\2\2\u08e6\u08de\3\2\2\2\u08e6\u08e7\3\2"+
		"\2\2\u08e7\u08e9\3\2\2\2\u08e8\u08ea\5d\63\2\u08e9\u08e8\3\2\2\2\u08e9"+
		"\u08ea\3\2\2\2\u08ea\u0083\3\2\2\2\u08eb\u08ec\7\27\2\2\u08ec\u08ed\7"+
		"\u0273\2\2\u08ed\u08ee\5\u0226\u0114\2\u08ee\u08ef\t\37\2\2\u08ef\u08f0"+
		"\7\u0185\2\2\u08f0\u08f4\7\u045b\2\2\u08f1\u08f2\7\u01c0\2\2\u08f2\u08f3"+
		"\7\u0443\2\2\u08f3\u08f5\5\u022e\u0118\2\u08f4\u08f1\3\2\2\2\u08f4\u08f5"+
		"\3\2\2\2\u08f5\u08f7\3\2\2\2\u08f6\u08f8\7\u028e\2\2\u08f7\u08f6\3\2\2"+
		"\2\u08f7\u08f8\3\2\2\2\u08f8\u08f9\3\2\2\2\u08f9\u08fb\7\u0197\2\2\u08fa"+
		"\u08fc\7\u0443\2\2\u08fb\u08fa\3\2\2\2\u08fb\u08fc\3\2\2\2\u08fc\u08fd"+
		"\3\2\2\2\u08fd\u08fe\5\u021c\u010f\2\u08fe\u0085\3\2\2\2\u08ff\u0903\7"+
		"\27\2\2\u0900\u0901\7\u0152\2\2\u0901\u0902\7\u0443\2\2\u0902\u0904\t"+
		"\f\2\2\u0903\u0900\3\2\2\2\u0903\u0904\3\2\2\2\u0904\u0906\3\2\2\2\u0905"+
		"\u0907\5\64\33\2\u0906\u0905\3\2\2\2\u0906\u0907\3\2\2\2\u0907\u090b\3"+
		"\2\2\2\u0908\u0909\7\u00a6\2\2\u0909\u090a\7\u024b\2\2\u090a\u090c\t\r"+
		"\2\2\u090b\u0908\3\2\2\2\u090b\u090c\3\2\2\2\u090c\u090d\3\2\2\2\u090d"+
		"\u090e\7\u028b\2\2\u090e\u0913\5\u020c\u0107\2\u090f\u0910\7\u044c\2\2"+
		"\u0910\u0911\5\u0246\u0124\2\u0911\u0912\7\u044d\2\2\u0912\u0914\3\2\2"+
		"\2\u0913\u090f\3\2\2\2\u0913\u0914\3\2\2\2\u0914\u0915\3\2\2\2\u0915\u0916"+
		"\7\34\2\2\u0916\u091d\5\u00b6\\\2\u0917\u0919\7\u00c5\2\2\u0918\u091a"+
		"\t\16\2\2\u0919\u0918\3\2\2\2\u0919\u091a\3\2\2\2\u091a\u091b\3\2\2\2"+
		"\u091b\u091c\7)\2\2\u091c\u091e\7\u0081\2\2\u091d\u0917\3\2\2\2\u091d"+
		"\u091e\3\2\2\2\u091e\u0087\3\2\2\2\u091f\u0926\5^\60\2\u0920\u0922\7\u044e"+
		"\2\2\u0921\u0920\3\2\2\2\u0921\u0922\3\2\2\2\u0922\u0923\3\2\2\2\u0923"+
		"\u0925\5^\60\2\u0924\u0921\3\2\2\2\u0925\u0928\3\2\2\2\u0926\u0924\3\2"+
		"\2\2\u0926\u0927\3\2\2\2\u0927\u0a8e\3\2\2\2\u0928\u0926\3\2\2\2\u0929"+
		"\u092b\7\25\2\2\u092a\u092c\7+\2\2\u092b\u092a\3\2\2\2\u092b\u092c\3\2"+
		"\2\2\u092c\u092d\3\2\2\2\u092d\u092e\5\u0226\u0114\2\u092e\u0932\5P)\2"+
		"\u092f\u0933\7\u01ab\2\2\u0930\u0931\7\u0150\2\2\u0931\u0933\5\u0226\u0114"+
		"\2\u0932\u092f\3\2\2\2\u0932\u0930\3\2\2\2\u0932\u0933\3\2\2\2\u0933\u0a8e"+
		"\3\2\2\2\u0934\u0936\7\25\2\2\u0935\u0937\7+\2\2\u0936\u0935\3\2\2\2\u0936"+
		"\u0937\3\2\2\2\u0937\u0938\3\2\2\2\u0938\u0939\7\u044c\2\2\u0939\u093a"+
		"\5\u0226\u0114\2\u093a\u0941\5P)\2\u093b\u093c\7\u044e\2\2\u093c\u093d"+
		"\5\u0226\u0114\2\u093d\u093e\5P)\2\u093e\u0940\3\2\2\2\u093f\u093b\3\2"+
		"\2\2\u0940\u0943\3\2\2\2\u0941\u093f\3\2\2\2\u0941\u0942\3\2\2\2\u0942"+
		"\u0944\3\2\2\2\u0943\u0941\3\2\2\2\u0944\u0945\7\u044d\2\2\u0945\u0a8e"+
		"\3\2\2\2\u0946\u0947\7\25\2\2\u0947\u0949\t\24\2\2\u0948\u094a\5\u0226"+
		"\u0114\2\u0949\u0948\3\2\2\2\u0949\u094a\3\2\2\2\u094a\u094c\3\2\2\2\u094b"+
		"\u094d\5@!\2\u094c\u094b\3\2\2\2\u094c\u094d\3\2\2\2\u094d\u094e\3\2\2"+
		"\2\u094e\u0952\5\u024a\u0126\2\u094f\u0951\5B\"\2\u0950\u094f\3\2\2\2"+
		"\u0951\u0954\3\2\2\2\u0952\u0950\3\2\2\2\u0952\u0953\3\2\2\2\u0953\u0a8e"+
		"\3\2\2\2\u0954\u0952\3\2\2\2\u0955\u095a\7\25\2\2\u0956\u0958\7-\2\2\u0957"+
		"\u0959\5\u0226\u0114\2\u0958\u0957\3\2\2\2\u0958\u0959\3\2\2\2\u0959\u095b"+
		"\3\2\2\2\u095a\u0956\3\2\2\2\u095a\u095b\3\2\2\2\u095b\u095c\3\2\2\2\u095c"+
		"\u095d\7\u008a\2\2\u095d\u095f\7g\2\2\u095e\u0960\5\u0226\u0114\2\u095f"+
		"\u095e\3\2\2\2\u095f\u0960\3\2\2\2\u0960\u0962\3\2\2\2\u0961\u0963\5@"+
		"!\2\u0962\u0961\3\2\2\2\u0962\u0963\3\2\2\2\u0963\u0964\3\2\2\2\u0964"+
		"\u0968\5\u024a\u0126\2\u0965\u0967\5B\"\2\u0966\u0965\3\2\2\2\u0967\u096a"+
		"\3\2\2\2\u0968\u0966\3\2\2\2\u0968\u0969\3\2\2\2\u0969\u0a8e\3\2\2\2\u096a"+
		"\u0968\3\2\2\2\u096b\u0970\7\25\2\2\u096c\u096e\7-\2\2\u096d\u096f\5\u0226"+
		"\u0114\2\u096e\u096d\3\2\2\2\u096e\u096f\3\2\2\2\u096f\u0971\3\2\2\2\u0970"+
		"\u096c\3\2\2\2\u0970\u0971\3\2\2\2\u0971\u0972\3\2\2\2\u0972\u0974\7\u00ba"+
		"\2\2\u0973\u0975\t\24\2\2\u0974\u0973\3\2\2\2\u0974\u0975\3\2\2\2\u0975"+
		"\u0977\3\2\2\2\u0976\u0978\5\u0226\u0114\2\u0977\u0976\3\2\2\2\u0977\u0978"+
		"\3\2\2\2\u0978\u097a\3\2\2\2\u0979\u097b\5@!\2\u097a\u0979\3\2\2\2\u097a"+
		"\u097b\3\2\2\2\u097b\u097c\3\2\2\2\u097c\u0980\5\u024a\u0126\2\u097d\u097f"+
		"\5B\"\2\u097e\u097d\3\2\2\2\u097f\u0982\3\2\2\2\u0980\u097e\3\2\2\2\u0980"+
		"\u0981\3\2\2\2\u0981\u0a8e\3\2\2\2\u0982\u0980\3\2\2\2\u0983\u0984\7\25"+
		"\2\2\u0984\u0986\t\26\2\2\u0985\u0987\t\24\2\2\u0986\u0985\3\2\2\2\u0986"+
		"\u0987\3\2\2\2\u0987\u0989\3\2\2\2\u0988\u098a\5\u0226\u0114\2\u0989\u0988"+
		"\3\2\2\2\u0989\u098a\3\2\2\2\u098a\u098b\3\2\2\2\u098b\u098f\5\u024a\u0126"+
		"\2\u098c\u098e\5B\"\2\u098d\u098c\3\2\2\2\u098e\u0991\3\2\2\2\u098f\u098d"+
		"\3\2\2\2\u098f\u0990\3\2\2\2\u0990\u0a8e\3\2\2\2\u0991\u098f\3\2\2\2\u0992"+
		"\u0997\7\25\2\2\u0993\u0995\7-\2\2\u0994\u0996\5\u0226\u0114\2\u0995\u0994"+
		"\3\2\2\2\u0995\u0996\3\2\2\2\u0996\u0998\3\2\2\2\u0997\u0993\3\2\2\2\u0997"+
		"\u0998\3\2\2\2\u0998\u0999\3\2\2\2\u0999\u099a\7P\2\2\u099a\u099c\7g\2"+
		"\2\u099b\u099d\5\u0226\u0114\2\u099c\u099b\3\2\2\2\u099c\u099d\3\2\2\2"+
		"\u099d\u099e\3\2\2\2\u099e\u099f\5\u024a\u0126\2\u099f\u09a0\5V,\2\u09a0"+
		"\u0a8e\3\2\2\2\u09a1\u09a6\7\25\2\2\u09a2\u09a4\7-\2\2\u09a3\u09a5\5\u0226"+
		"\u0114\2\u09a4\u09a3\3\2\2\2\u09a4\u09a5\3\2\2\2\u09a5\u09a7\3\2\2\2\u09a6"+
		"\u09a2\3\2\2\2\u09a6\u09a7\3\2\2\2\u09a7\u09a8\3\2\2\2\u09a8\u09a9\7)"+
		"\2\2\u09a9\u09aa\7\u044c\2\2\u09aa\u09ab\5\u0288\u0145\2\u09ab\u09ac\7"+
		"\u044d\2\2\u09ac\u0a8e\3\2\2\2\u09ad\u09af\7\u0152\2\2\u09ae\u09b0\7\u0443"+
		"\2\2\u09af\u09ae\3\2\2\2\u09af\u09b0\3\2\2\2\u09b0\u09b1\3\2\2\2\u09b1"+
		"\u0a8e\t\5\2\2\u09b2\u09b4\7\27\2\2\u09b3\u09b5\7+\2\2\u09b4\u09b3\3\2"+
		"\2\2\u09b4\u09b5\3\2\2\2\u09b5\u09b6\3\2\2\2\u09b6\u09bc\5\u0226\u0114"+
		"\2\u09b7\u09b8\7\u00a1\2\2\u09b8\u09b9\78\2\2\u09b9\u09bd\5\u0256\u012c"+
		"\2\u09ba\u09bb\7A\2\2\u09bb\u09bd\78\2\2\u09bc\u09b7\3\2\2\2\u09bc\u09ba"+
		"\3\2\2\2\u09bd\u0a8e\3\2\2\2\u09be\u09c0\7\'\2\2\u09bf\u09c1\7+\2\2\u09c0"+
		"\u09bf\3\2\2\2\u09c0\u09c1\3\2\2\2\u09c1\u09c2\3\2\2\2\u09c2\u09c3\5\u0226"+
		"\u0114\2\u09c3\u09c4\5\u0226\u0114\2\u09c4\u09c8\5P)\2\u09c5\u09c9\7\u01ab"+
		"\2\2\u09c6\u09c7\7\u0150\2\2\u09c7\u09c9\5\u0226\u0114\2\u09c8\u09c5\3"+
		"\2\2\2\u09c8\u09c6\3\2\2\2\u09c8\u09c9\3\2\2\2\u09c9\u0a8e\3\2\2\2\u09ca"+
		"\u09cb\7\u0093\2\2\u09cb\u09cc\7+\2\2\u09cc\u09cd\5\u0226\u0114\2\u09cd"+
		"\u09ce\7\u00b4\2\2\u09ce\u09cf\5\u0226\u0114\2\u09cf\u0a8e\3\2\2\2\u09d0"+
		"\u09d2\7r\2\2\u09d1\u09d3\7\u0443\2\2\u09d2\u09d1\3\2\2\2\u09d2\u09d3"+
		"\3\2\2\2\u09d3\u09d4\3\2\2\2\u09d4\u0a8e\t\6\2\2\u09d5\u09d7\7\u01fa\2"+
		"\2\u09d6\u09d8\7+\2\2\u09d7\u09d6\3\2\2\2\u09d7\u09d8\3\2\2\2\u09d8\u09d9"+
		"\3\2\2\2\u09d9\u09da\5\u0226\u0114\2\u09da\u09de\5P)\2\u09db\u09df\7\u01ab"+
		"\2\2\u09dc\u09dd\7\u0150\2\2\u09dd\u09df\5\u0226\u0114\2\u09de\u09db\3"+
		"\2\2\2\u09de\u09dc\3\2\2\2\u09de\u09df\3\2\2\2\u09df\u0a8e\3\2\2\2\u09e0"+
		"\u09e2\7A\2\2\u09e1\u09e3\7+\2\2\u09e2\u09e1\3\2\2\2\u09e2\u09e3\3\2\2"+
		"\2\u09e3\u09e4\3\2\2\2\u09e4\u09e6\5\u0226\u0114\2\u09e5\u09e7\7\u0098"+
		"\2\2\u09e6\u09e5\3\2\2\2\u09e6\u09e7\3\2\2\2\u09e7\u0a8e\3\2\2\2\u09e8"+
		"\u09e9\7A\2\2\u09e9\u09ea\t \2\2\u09ea\u0a8e\5\u0226\u0114\2\u09eb\u09ec"+
		"\7A\2\2\u09ec\u09ed\7\u008a\2\2\u09ed\u0a8e\7g\2\2\u09ee\u09ef\7\u0093"+
		"\2\2\u09ef\u09f0\t\24\2\2\u09f0\u09f1\5\u0226\u0114\2\u09f1\u09f2\7\u00b4"+
		"\2\2\u09f2\u09f3\5\u0226\u0114\2\u09f3\u0a8e\3\2\2\2\u09f4\u09f5\7\27"+
		"\2\2\u09f5\u09f6\7]\2\2\u09f6\u09f7\5\u0226\u0114\2\u09f7\u09f8\t!\2\2"+
		"\u09f8\u0a8e\3\2\2\2\u09f9\u09fa\7A\2\2\u09fa\u09fb\t\24\2\2\u09fb\u0a8e"+
		"\5\u0226\u0114\2\u09fc\u09fd\7A\2\2\u09fd\u09fe\7P\2\2\u09fe\u09ff\7g"+
		"\2\2\u09ff\u0a8e\5\u0226\u0114\2\u0a00\u0a01\7\u018c\2\2\u0a01\u0a8e\7"+
		"h\2\2\u0a02\u0a03\7\u0193\2\2\u0a03\u0a8e\7h\2\2\u0a04\u0a06\7\u0093\2"+
		"\2\u0a05\u0a07\t\"\2\2\u0a06\u0a05\3\2\2\2\u0a06\u0a07\3\2\2\2\u0a07\u0a0a"+
		"\3\2\2\2\u0a08\u0a0b\5\u0226\u0114\2\u0a09\u0a0b\5\u020c\u0107\2\u0a0a"+
		"\u0a08\3\2\2\2\u0a0a\u0a09\3\2\2\2\u0a0b\u0a8e\3\2\2\2\u0a0c\u0a0d\7\u0084"+
		"\2\2\u0a0d\u0a0e\7\"\2\2\u0a0e\u0a8e\5\u0246\u0124\2\u0a0f\u0a10\7/\2"+
		"\2\u0a10\u0a11\7\u00b4\2\2\u0a11\u0a12\7(\2\2\u0a12\u0a13\7\u00a1\2\2"+
		"\u0a13\u0a16\5\u0218\u010d\2\u0a14\u0a15\7*\2\2\u0a15\u0a17\5\u021a\u010e"+
		"\2\u0a16\u0a14\3\2\2\2\u0a16\u0a17\3\2\2\2\u0a17\u0a8e\3\2\2\2\u0a18\u0a1a"+
		"\78\2\2\u0a19\u0a18\3\2\2\2\u0a19\u0a1a\3\2\2\2\u0a1a\u0a1b\3\2\2\2\u0a1b"+
		"\u0a1c\7(\2\2\u0a1c\u0a1d\7\u00a1\2\2\u0a1d\u0a1e\7\u0443\2\2\u0a1e\u0a22"+
		"\5\u0218\u010d\2\u0a1f\u0a20\7*\2\2\u0a20\u0a21\7\u0443\2\2\u0a21\u0a23"+
		"\5\u021a\u010e\2\u0a22\u0a1f\3\2\2\2\u0a22\u0a23\3\2\2\2\u0a23\u0a8e\3"+
		"\2\2\2\u0a24\u0a25\7\u018d\2\2\u0a25\u0a8e\7\u0273\2\2\u0a26\u0a27\7\u01be"+
		"\2\2\u0a27\u0a8e\7\u0273\2\2\u0a28\u0a8e\7O\2\2\u0a29\u0a2a\t#\2\2\u0a2a"+
		"\u0a8e\7\u0288\2\2\u0a2b\u0a2c\7\25\2\2\u0a2c\u0a2d\7\u0089\2\2\u0a2d"+
		"\u0a2e\7\u044c\2\2\u0a2e\u0a33\5j\66\2\u0a2f\u0a30\7\u044e\2\2\u0a30\u0a32"+
		"\5j\66\2\u0a31\u0a2f\3\2\2\2\u0a32\u0a35\3\2\2\2\u0a33\u0a31\3\2\2\2\u0a33"+
		"\u0a34\3\2\2\2\u0a34\u0a36\3\2\2\2\u0a35\u0a33\3\2\2\2\u0a36\u0a37\7\u044d"+
		"\2\2\u0a37\u0a8e\3\2\2\2\u0a38\u0a39\7A\2\2\u0a39\u0a3a\7\u0089\2\2\u0a3a"+
		"\u0a8e\5\u0246\u0124\2\u0a3b\u0a3c\7\u018d\2\2\u0a3c\u0a3f\7\u0089\2\2"+
		"\u0a3d\u0a40\5\u0246\u0124\2\u0a3e\u0a40\7\26\2\2\u0a3f\u0a3d\3\2\2\2"+
		"\u0a3f\u0a3e\3\2\2\2\u0a40\u0a41\3\2\2\2\u0a41\u0a8e\7\u0273\2\2\u0a42"+
		"\u0a43\7\u01be\2\2\u0a43\u0a46\7\u0089\2\2\u0a44\u0a47\5\u0246\u0124\2"+
		"\u0a45\u0a47\7\26\2\2\u0a46\u0a44\3\2\2\2\u0a46\u0a45\3\2\2\2\u0a47\u0a48"+
		"\3\2\2\2\u0a48\u0a8e\7\u0273\2\2\u0a49\u0a4a\7\u027c\2\2\u0a4a\u0a4d\7"+
		"\u0089\2\2\u0a4b\u0a4e\5\u0246\u0124\2\u0a4c\u0a4e\7\26\2\2\u0a4d\u0a4b"+
		"\3\2\2\2\u0a4d\u0a4c\3\2\2\2\u0a4e\u0a8e\3\2\2\2\u0a4f\u0a50\7\u016c\2"+
		"\2\u0a50\u0a51\7\u0089\2\2\u0a51\u0a8e\5\u022c\u0117\2\u0a52\u0a53\7\u0233"+
		"\2\2\u0a53\u0a54\7\u0089\2\2\u0a54\u0a55\5\u0246\u0124\2\u0a55\u0a56\7"+
		"c\2\2\u0a56\u0a57\7\u044c\2\2\u0a57\u0a5c\5j\66\2\u0a58\u0a59\7\u044e"+
		"\2\2\u0a59\u0a5b\5j\66\2\u0a5a\u0a58\3\2\2\2\u0a5b\u0a5e\3\2\2\2\u0a5c"+
		"\u0a5a\3\2\2\2\u0a5c\u0a5d\3\2\2\2\u0a5d\u0a5f\3\2\2\2\u0a5e\u0a5c\3\2"+
		"\2\2\u0a5f\u0a60\7\u044d\2\2\u0a60\u0a8e\3\2\2\2\u0a61\u0a62\7\u01a0\2"+
		"\2\u0a62\u0a63\7\u0089\2\2\u0a63\u0a64\5\u0226\u0114\2\u0a64\u0a65\7\u00c5"+
		"\2\2\u0a65\u0a66\7\u00b1\2\2\u0a66\u0a69\5\u020e\u0108\2\u0a67\u0a68\t"+
		"#\2\2\u0a68\u0a6a\7\u0288\2\2\u0a69\u0a67\3\2\2\2\u0a69\u0a6a\3\2\2\2"+
		"\u0a6a\u0a8e\3\2\2\2\u0a6b\u0a6c\7\31\2\2\u0a6c\u0a6f\7\u0089\2\2\u0a6d"+
		"\u0a70\5\u0246\u0124\2\u0a6e\u0a70\7\26\2\2\u0a6f\u0a6d\3\2\2\2\u0a6f"+
		"\u0a6e\3\2\2\2\u0a70\u0a8e\3\2\2\2\u0a71\u0a72\7)\2\2\u0a72\u0a75\7\u0089"+
		"\2\2\u0a73\u0a76\5\u0246\u0124\2\u0a74\u0a76\7\26\2\2\u0a75\u0a73\3\2"+
		"\2\2\u0a75\u0a74\3\2\2\2\u0a76\u0a8e\3\2\2\2\u0a77\u0a78\7\u0080\2\2\u0a78"+
		"\u0a7b\7\u0089\2\2\u0a79\u0a7c\5\u0246\u0124\2\u0a7a\u0a7c\7\26\2\2\u0a7b"+
		"\u0a79\3\2\2\2\u0a7b\u0a7a\3\2\2\2\u0a7c\u0a8e\3\2\2\2\u0a7d\u0a7e\7\u022a"+
		"\2\2\u0a7e\u0a81\7\u0089\2\2\u0a7f\u0a82\5\u0246\u0124\2\u0a80\u0a82\7"+
		"\26\2\2\u0a81\u0a7f\3\2\2\2\u0a81\u0a80\3\2\2\2\u0a82\u0a8e\3\2\2\2\u0a83"+
		"\u0a84\7\u0234\2\2\u0a84\u0a87\7\u0089\2\2\u0a85\u0a88\5\u0246\u0124\2"+
		"\u0a86\u0a88\7\26\2\2\u0a87\u0a85\3\2\2\2\u0a87\u0a86\3\2\2\2\u0a88\u0a8e"+
		"\3\2\2\2\u0a89\u0a8a\7\u0232\2\2\u0a8a\u0a8e\7\u0217\2\2\u0a8b\u0a8c\7"+
		"\u0284\2\2\u0a8c\u0a8e\7\u0217\2\2\u0a8d\u091f\3\2\2\2\u0a8d\u0929\3\2"+
		"\2\2\u0a8d\u0934\3\2\2\2\u0a8d\u0946\3\2\2\2\u0a8d\u0955\3\2\2\2\u0a8d"+
		"\u096b\3\2\2\2\u0a8d\u0983\3\2\2\2\u0a8d\u0992\3\2\2\2\u0a8d\u09a1\3\2"+
		"\2\2\u0a8d\u09ad\3\2\2\2\u0a8d\u09b2\3\2\2\2\u0a8d\u09be\3\2\2\2\u0a8d"+
		"\u09ca\3\2\2\2\u0a8d\u09d0\3\2\2\2\u0a8d\u09d5\3\2\2\2\u0a8d\u09e0\3\2"+
		"\2\2\u0a8d\u09e8\3\2\2\2\u0a8d\u09eb\3\2\2\2\u0a8d\u09ee\3\2\2\2\u0a8d"+
		"\u09f4\3\2\2\2\u0a8d\u09f9\3\2\2\2\u0a8d\u09fc\3\2\2\2\u0a8d\u0a00\3\2"+
		"\2\2\u0a8d\u0a02\3\2\2\2\u0a8d\u0a04\3\2\2\2\u0a8d\u0a0c\3\2\2\2\u0a8d"+
		"\u0a0f\3\2\2\2\u0a8d\u0a19\3\2\2\2\u0a8d\u0a24\3\2\2\2\u0a8d\u0a26\3\2"+
		"\2\2\u0a8d\u0a28\3\2\2\2\u0a8d\u0a29\3\2\2\2\u0a8d\u0a2b\3\2\2\2\u0a8d"+
		"\u0a38\3\2\2\2\u0a8d\u0a3b\3\2\2\2\u0a8d\u0a42\3\2\2\2\u0a8d\u0a49\3\2"+
		"\2\2\u0a8d\u0a4f\3\2\2\2\u0a8d\u0a52\3\2\2\2\u0a8d\u0a61\3\2\2\2\u0a8d"+
		"\u0a6b\3\2\2\2\u0a8d\u0a71\3\2\2\2\u0a8d\u0a77\3\2\2\2\u0a8d\u0a7d\3\2"+
		"\2\2\u0a8d\u0a83\3\2\2\2\u0a8d\u0a89\3\2\2\2\u0a8d\u0a8b\3\2\2\2\u0a8e"+
		"\u0089\3\2\2\2\u0a8f\u0a90\7A\2\2\u0a90\u0a92\t\2\2\2\u0a91\u0a93\5\u025c"+
		"\u012f\2\u0a92\u0a91\3\2\2\2\u0a92\u0a93\3\2\2\2\u0a93\u0a94\3\2\2\2\u0a94"+
		"\u0a95\5\u0226\u0114\2\u0a95\u008b\3\2\2\2\u0a96\u0a97\7A\2\2\u0a97\u0a99"+
		"\7\u019d\2\2\u0a98\u0a9a\5\u025c\u012f\2\u0a99\u0a98\3\2\2\2\u0a99\u0a9a"+
		"\3\2\2\2\u0a9a\u0a9b\3\2\2\2\u0a9b\u0a9c\5\u020c\u0107\2\u0a9c\u008d\3"+
		"\2\2\2\u0a9d\u0a9e\7A\2\2\u0a9e\u0aa0\7]\2\2\u0a9f\u0aa1\t\3\2\2\u0aa0"+
		"\u0a9f\3\2\2\2\u0aa0\u0aa1\3\2\2\2\u0aa1\u0aa2\3\2\2\2\u0aa2\u0aa3\5\u0226"+
		"\u0114\2\u0aa3\u0aa4\7\177\2\2\u0aa4\u0ab1\5\u020e\u0108\2\u0aa5\u0aa7"+
		"\7\u0152\2\2\u0aa6\u0aa8\7\u0443\2\2\u0aa7\u0aa6\3\2\2\2\u0aa7\u0aa8\3"+
		"\2\2\2\u0aa8\u0aa9\3\2\2\2\u0aa9\u0ab0\t\5\2\2\u0aaa\u0aac\7r\2\2\u0aab"+
		"\u0aad\7\u0443\2\2\u0aac\u0aab\3\2\2\2\u0aac\u0aad\3\2\2\2\u0aad\u0aae"+
		"\3\2\2\2\u0aae\u0ab0\t\6\2\2\u0aaf\u0aa5\3\2\2\2\u0aaf\u0aaa\3\2\2\2\u0ab0"+
		"\u0ab3\3\2\2\2\u0ab1\u0aaf\3\2\2\2\u0ab1\u0ab2\3\2\2\2\u0ab2\u008f\3\2"+
		"\2\2\u0ab3\u0ab1\3\2\2\2\u0ab4\u0ab5\7A\2\2\u0ab5\u0ab6\7\u01d5\2\2\u0ab6"+
		"\u0ab7\7V\2\2\u0ab7\u0ab8\5\u0226\u0114\2\u0ab8\u0ab9\7\u0197\2\2\u0ab9"+
		"\u0aba\7\u0443\2\2\u0aba\u0abb\5\u021c\u010f\2\u0abb\u0091\3\2\2\2\u0abc"+
		"\u0abd\7A\2\2\u0abd\u0abf\7\u008b\2\2\u0abe\u0ac0\5\u025c\u012f\2\u0abf"+
		"\u0abe\3\2\2\2\u0abf\u0ac0\3\2\2\2\u0ac0\u0ac1\3\2\2\2\u0ac1\u0ac2\5\u020c"+
		"\u0107\2\u0ac2\u0093\3\2\2\2\u0ac3\u0ac4\7A\2\2\u0ac4\u0ac6\7\u01b2\2"+
		"\2\u0ac5\u0ac7\5\u025c\u012f\2\u0ac6\u0ac5\3\2\2\2\u0ac6\u0ac7\3\2\2\2"+
		"\u0ac7\u0ac8\3\2\2\2\u0ac8\u0ac9\5\u020c\u0107\2\u0ac9\u0095\3\2\2\2\u0aca"+
		"\u0acb\7A\2\2\u0acb\u0acd\7\u024c\2\2\u0acc\u0ace\5\u025c\u012f\2\u0acd"+
		"\u0acc\3\2\2\2\u0acd\u0ace\3\2\2\2\u0ace\u0acf\3\2\2\2\u0acf\u0ad0\5\u0226"+
		"\u0114\2\u0ad0\u0097\3\2\2\2\u0ad1\u0ad3\7A\2\2\u0ad2\u0ad4\7\u0275\2"+
		"\2\u0ad3\u0ad2\3\2\2\2\u0ad3\u0ad4\3\2\2\2\u0ad4\u0ad5\3\2\2\2\u0ad5\u0ad7"+
		"\7\u00b1\2\2\u0ad6\u0ad8\5\u025c\u012f\2\u0ad7\u0ad6\3\2\2\2\u0ad7\u0ad8"+
		"\3\2\2\2\u0ad8\u0ad9\3\2\2\2\u0ad9\u0adb\5\u0248\u0125\2\u0ada\u0adc\t"+
		"$\2\2\u0adb\u0ada\3\2\2\2\u0adb\u0adc\3\2\2\2\u0adc\u0099\3\2\2\2\u0add"+
		"\u0ade\7A\2\2\u0ade\u0adf\7\u0273\2\2\u0adf\u0ae5\5\u0226\u0114\2\u0ae0"+
		"\u0ae2\7\u0197\2\2\u0ae1\u0ae3\7\u0443\2\2\u0ae2\u0ae1\3\2\2\2\u0ae2\u0ae3"+
		"\3\2\2\2\u0ae3\u0ae4\3\2\2\2\u0ae4\u0ae6\5\u021c\u010f\2\u0ae5\u0ae0\3"+
		"\2\2\2\u0ae5\u0ae6\3\2\2\2\u0ae6\u009b\3\2\2\2\u0ae7\u0ae8\7A\2\2\u0ae8"+
		"\u0aea\7\u00b6\2\2\u0ae9\u0aeb\5\u025c\u012f\2\u0aea\u0ae9\3\2\2\2\u0aea"+
		"\u0aeb\3\2\2\2\u0aeb\u0aec\3\2\2\2\u0aec\u0aed\5\u020c\u0107\2\u0aed\u009d"+
		"\3\2\2\2\u0aee\u0aef\7A\2\2\u0aef\u0af1\7\u028b\2\2\u0af0\u0af2\5\u025c"+
		"\u012f\2\u0af1\u0af0\3\2\2\2\u0af1\u0af2\3\2\2\2\u0af2\u0af3\3\2\2\2\u0af3"+
		"\u0af8\5\u020c\u0107\2\u0af4\u0af5\7\u044e\2\2\u0af5\u0af7\5\u020c\u0107"+
		"\2\u0af6\u0af4\3\2\2\2\u0af7\u0afa\3\2\2\2\u0af8\u0af6\3\2\2\2\u0af8\u0af9"+
		"\3\2\2\2\u0af9\u0afc\3\2\2\2\u0afa\u0af8\3\2\2\2\u0afb\u0afd\t$\2\2\u0afc"+
		"\u0afb\3\2\2\2\u0afc\u0afd\3\2\2\2\u0afd\u009f\3\2\2\2\u0afe\u0aff\7\u0093"+
		"\2\2\u0aff\u0b00\7\u00b1\2\2\u0b00\u0b05\5\u00a2R\2\u0b01\u0b02\7\u044e"+
		"\2\2\u0b02\u0b04\5\u00a2R\2\u0b03\u0b01\3\2\2\2\u0b04\u0b07\3\2\2\2\u0b05"+
		"\u0b03\3\2\2\2\u0b05\u0b06\3\2\2\2\u0b06\u00a1\3\2\2\2\u0b07\u0b05\3\2"+
		"\2\2\u0b08\u0b09\5\u020e\u0108\2\u0b09\u0b0a\7\u00b4\2\2\u0b0a\u0b0b\5"+
		"\u020e\u0108\2\u0b0b\u00a3\3\2\2\2\u0b0c\u0b0e\7\u027c\2\2\u0b0d\u0b0f"+
		"\7\u00b1\2\2\u0b0e\u0b0d\3\2\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f\u0b10\3\2\2"+
		"\2\u0b10\u0b11\5\u020e\u0108\2\u0b11\u00a5\3\2\2\2\u0b12\u0b13\7#\2\2"+
		"\u0b13\u0b1a\5\u020c\u0107\2\u0b14\u0b17\7\u044c\2\2\u0b15\u0b18\5\u0250"+
		"\u0129\2\u0b16\u0b18\5\u024c\u0127\2\u0b17\u0b15\3\2\2\2\u0b17\u0b16\3"+
		"\2\2\2\u0b17\u0b18\3\2\2\2\u0b18\u0b19\3\2\2\2\u0b19\u0b1b\7\u044d\2\2"+
		"\u0b1a\u0b14\3\2\2\2\u0b1a\u0b1b\3\2\2\2\u0b1b\u00a7\3\2\2\2\u0b1c\u0b1f"+
		"\5\u00c2b\2\u0b1d\u0b1f\5\u00c4c\2\u0b1e\u0b1c\3\2\2\2\u0b1e\u0b1d\3\2"+
		"\2\2\u0b1f\u00a9\3\2\2\2\u0b20\u0b21\7\u018f\2\2\u0b21\u0b22\5\u024c\u0127"+
		"\2\u0b22\u00ab\3\2\2\2\u0b23\u0b28\5\u00c6d\2\u0b24\u0b28\5\u00c8e\2\u0b25"+
		"\u0b28\5\u00caf\2\u0b26\u0b28\5\u00ccg\2\u0b27\u0b23\3\2\2\2\u0b27\u0b24"+
		"\3\2\2\2\u0b27\u0b25\3\2\2\2\u0b27\u0b26\3\2\2\2\u0b28\u00ad\3\2\2\2\u0b29"+
		"\u0b2b\7a\2\2\u0b2a\u0b2c\t%\2\2\u0b2b\u0b2a\3\2\2\2\u0b2b\u0b2c\3\2\2"+
		"\2\u0b2c\u0b2e\3\2\2\2\u0b2d\u0b2f\7[\2\2\u0b2e\u0b2d\3\2\2\2\u0b2e\u0b2f"+
		"\3\2\2\2\u0b2f\u0b31\3\2\2\2\u0b30\u0b32\7c\2\2\u0b31\u0b30\3\2\2\2\u0b31"+
		"\u0b32\3\2\2\2\u0b32\u0b33\3\2\2\2\u0b33\u0b3a\5\u020e\u0108\2\u0b34\u0b35"+
		"\7\u0089\2\2\u0b35\u0b37\7\u044c\2\2\u0b36\u0b38\5\u0246\u0124\2\u0b37"+
		"\u0b36\3\2\2\2\u0b37\u0b38\3\2\2\2\u0b38\u0b39\3\2\2\2\u0b39\u0b3b\7\u044d"+
		"\2\2\u0b3a\u0b34\3\2\2\2\u0b3a\u0b3b\3\2\2\2\u0b3b\u0b4c\3\2\2\2\u0b3c"+
		"\u0b3d\7\u044c\2\2\u0b3d\u0b3e\5\u0246\u0124\2\u0b3e\u0b3f\7\u044d\2\2"+
		"\u0b3f\u0b41\3\2\2\2\u0b40\u0b3c\3\2\2\2\u0b40\u0b41\3\2\2\2\u0b41\u0b42"+
		"\3\2\2\2\u0b42\u0b4d\5\u00ba^\2\u0b43\u0b44\7\u00a1\2\2\u0b44\u0b49\5"+
		"\u00bc_\2\u0b45\u0b46\7\u044e\2\2\u0b46\u0b48\5\u00bc_\2\u0b47\u0b45\3"+
		"\2\2\2\u0b48\u0b4b\3\2\2\2\u0b49\u0b47\3\2\2\2\u0b49\u0b4a\3\2\2\2\u0b4a"+
		"\u0b4d\3\2\2\2\u0b4b\u0b49\3\2\2\2\u0b4c\u0b40\3\2\2\2\u0b4c\u0b43\3\2"+
		"\2\2\u0b4d\u0b5a\3\2\2\2\u0b4e\u0b4f\7\177\2\2\u0b4f\u0b50\7\u0191\2\2"+
		"\u0b50\u0b51\7g\2\2\u0b51\u0b52\7\u00bd\2\2\u0b52\u0b57\5\u00bc_\2\u0b53"+
		"\u0b54\7\u044e\2\2\u0b54\u0b56\5\u00bc_\2\u0b55\u0b53\3\2\2\2\u0b56\u0b59"+
		"\3\2\2\2\u0b57\u0b55\3\2\2\2\u0b57\u0b58\3\2\2\2\u0b58\u0b5b\3\2\2\2\u0b59"+
		"\u0b57\3\2\2\2\u0b5a\u0b4e\3\2\2\2\u0b5a\u0b5b\3\2\2\2\u0b5b\u00af\3\2"+
		"\2\2\u0b5c\u0b5d\7q\2\2\u0b5d\u0b5f\7\u0184\2\2\u0b5e\u0b60\t&\2\2\u0b5f"+
		"\u0b5e\3\2\2\2\u0b5f\u0b60\3\2\2\2\u0b60\u0b62\3\2\2\2\u0b61\u0b63\7\u01d4"+
		"\2\2\u0b62\u0b61\3\2\2\2\u0b62\u0b63\3\2\2\2\u0b63\u0b64\3\2\2\2\u0b64"+
		"\u0b65\7^\2\2\u0b65\u0b67\7\u045b\2\2\u0b66\u0b68\t\b\2\2\u0b67\u0b66"+
		"\3\2\2\2\u0b67\u0b68\3\2\2\2\u0b68\u0b69\3\2\2\2\u0b69\u0b6a\7c\2\2\u0b6a"+
		"\u0b6b\7\u00b1\2\2\u0b6b\u0b71\5\u020e\u0108\2\u0b6c\u0b6d\7\u0089\2\2"+
		"\u0b6d\u0b6e\7\u044c\2\2\u0b6e\u0b6f\5\u0246\u0124\2\u0b6f\u0b70\7\u044d"+
		"\2\2\u0b70\u0b72\3\2\2\2\u0b71\u0b6c\3\2\2\2\u0b71\u0b72\3\2\2\2\u0b72"+
		"\u0b76\3\2\2\2\u0b73\u0b74\7(\2\2\u0b74\u0b75\7\u00a1\2\2\u0b75\u0b77"+
		"\5\u0218\u010d\2\u0b76\u0b73\3\2\2\2\u0b76\u0b77\3\2\2\2\u0b77\u0b7e\3"+
		"\2\2\2\u0b78\u0b7a\t\'\2\2\u0b79\u0b7b\5\u0104\u0083\2\u0b7a\u0b79\3\2"+
		"\2\2\u0b7b\u0b7c\3\2\2\2\u0b7c\u0b7a\3\2\2\2\u0b7c\u0b7d\3\2\2\2\u0b7d"+
		"\u0b7f\3\2\2\2\u0b7e\u0b78\3\2\2\2\u0b7e\u0b7f\3\2\2\2\u0b7f\u0b86\3\2"+
		"\2\2\u0b80\u0b82\7p\2\2\u0b81\u0b83\5\u0106\u0084\2\u0b82\u0b81\3\2\2"+
		"\2\u0b83\u0b84\3\2\2\2\u0b84\u0b82\3\2\2\2\u0b84\u0b85\3\2\2\2\u0b85\u0b87"+
		"\3\2\2\2\u0b86\u0b80\3\2\2\2\u0b86\u0b87\3\2\2\2\u0b87\u0b8c\3\2\2\2\u0b88"+
		"\u0b89\7[\2\2\u0b89\u0b8a\5\u022c\u0117\2\u0b8a\u0b8b\t(\2\2\u0b8b\u0b8d"+
		"\3\2\2\2\u0b8c\u0b88\3\2\2\2\u0b8c\u0b8d\3\2\2\2\u0b8d\u0b99\3\2\2\2\u0b8e"+
		"\u0b8f\7\u044c\2\2\u0b8f\u0b94\5\u00be`\2\u0b90\u0b91\7\u044e\2\2\u0b91"+
		"\u0b93\5\u00be`\2\u0b92\u0b90\3\2\2\2\u0b93\u0b96\3\2\2\2\u0b94\u0b92"+
		"\3\2\2\2\u0b94\u0b95\3\2\2\2\u0b95\u0b97\3\2\2\2\u0b96\u0b94\3\2\2\2\u0b97"+
		"\u0b98\7\u044d\2\2\u0b98\u0b9a\3\2\2\2\u0b99\u0b8e\3\2\2\2\u0b99\u0b9a"+
		"\3\2\2\2\u0b9a\u0ba4\3\2\2\2\u0b9b\u0b9c\7\u00a1\2\2\u0b9c\u0ba1\5\u00bc"+
		"_\2\u0b9d\u0b9e\7\u044e\2\2\u0b9e\u0ba0\5\u00bc_\2\u0b9f\u0b9d\3\2\2\2"+
		"\u0ba0\u0ba3\3\2\2\2\u0ba1\u0b9f\3\2\2\2\u0ba1\u0ba2\3\2\2\2\u0ba2\u0ba5"+
		"\3\2\2\2\u0ba3\u0ba1\3\2\2\2\u0ba4\u0b9b\3\2\2\2\u0ba4\u0ba5\3\2\2\2\u0ba5"+
		"\u00b1\3\2\2\2\u0ba6\u0ba7\7q\2\2\u0ba7\u0ba9\7\u0296\2\2\u0ba8\u0baa"+
		"\t&\2\2\u0ba9\u0ba8\3\2\2\2\u0ba9\u0baa\3\2\2\2\u0baa\u0bac\3\2\2\2\u0bab"+
		"\u0bad\7\u01d4\2\2\u0bac\u0bab\3\2\2\2\u0bac\u0bad\3\2\2\2\u0bad\u0bae"+
		"\3\2\2\2\u0bae\u0baf\7^\2\2\u0baf\u0bb1\7\u045b\2\2\u0bb0\u0bb2\t\b\2"+
		"\2\u0bb1\u0bb0\3\2\2\2\u0bb1\u0bb2\3\2\2\2\u0bb2\u0bb3\3\2\2\2\u0bb3\u0bb4"+
		"\7c\2\2\u0bb4\u0bb5\7\u00b1\2\2\u0bb5\u0bb9\5\u020e\u0108\2\u0bb6\u0bb7"+
		"\7(\2\2\u0bb7\u0bb8\7\u00a1\2\2\u0bb8\u0bba\5\u0218\u010d\2\u0bb9\u0bb6"+
		"\3\2\2\2\u0bb9\u0bba\3\2\2\2\u0bba\u0bc1\3\2\2\2\u0bbb\u0bbc\7\u0247\2"+
		"\2\u0bbc\u0bbd\7\u01bc\2\2\u0bbd\u0bbe\7\"\2\2\u0bbe\u0bbf\7\u0445\2\2"+
		"\u0bbf\u0bc0\7\u045b\2\2\u0bc0\u0bc2\7\u0444\2\2\u0bc1\u0bbb\3\2\2\2\u0bc1"+
		"\u0bc2\3\2\2\2\u0bc2\u0bc7\3\2\2\2\u0bc3\u0bc4\7[\2\2\u0bc4\u0bc5\5\u022c"+
		"\u0117\2\u0bc5\u0bc6\t(\2\2\u0bc6\u0bc8\3\2\2\2\u0bc7\u0bc3\3\2\2\2\u0bc7"+
		"\u0bc8\3\2\2\2\u0bc8\u0bd4\3\2\2\2\u0bc9\u0bca\7\u044c\2\2\u0bca\u0bcf"+
		"\5\u00be`\2\u0bcb\u0bcc\7\u044e\2\2\u0bcc\u0bce\5\u00be`\2\u0bcd\u0bcb"+
		"\3\2\2\2\u0bce\u0bd1\3\2\2\2\u0bcf\u0bcd\3\2\2\2\u0bcf\u0bd0\3\2\2\2\u0bd0"+
		"\u0bd2\3\2\2\2\u0bd1\u0bcf\3\2\2\2\u0bd2\u0bd3\7\u044d\2\2\u0bd3\u0bd5"+
		"\3\2\2\2\u0bd4\u0bc9\3\2\2\2\u0bd4\u0bd5\3\2\2\2\u0bd5\u0bdf\3\2\2\2\u0bd6"+
		"\u0bd7\7\u00a1\2\2\u0bd7\u0bdc\5\u00bc_\2\u0bd8\u0bd9\7\u044e\2\2\u0bd9"+
		"\u0bdb\5\u00bc_\2\u0bda\u0bd8\3\2\2\2\u0bdb\u0bde\3\2\2\2\u0bdc\u0bda"+
		"\3\2\2\2\u0bdc\u0bdd\3\2\2\2\u0bdd\u0be0\3\2\2\2\u0bde\u0bdc\3\2\2\2\u0bdf"+
		"\u0bd6\3\2\2\2\u0bdf\u0be0\3\2\2\2\u0be0\u00b3\3\2\2\2\u0be1\u0be3\7\u0095"+
		"\2\2\u0be2\u0be4\t)\2\2\u0be3\u0be2\3\2\2\2\u0be3\u0be4\3\2\2\2\u0be4"+
		"\u0be6\3\2\2\2\u0be5\u0be7\7c\2\2\u0be6\u0be5\3\2\2\2\u0be6\u0be7\3\2"+
		"\2\2\u0be7\u0be8\3\2\2\2\u0be8\u0bee\5\u020e\u0108\2\u0be9\u0bea\7\u0089"+
		"\2\2\u0bea\u0beb\7\u044c\2\2\u0beb\u0bec\5\u0246\u0124\2\u0bec\u0bed\7"+
		"\u044d\2\2\u0bed\u0bef\3\2\2\2\u0bee\u0be9\3\2\2\2\u0bee\u0bef\3\2\2\2"+
		"\u0bef\u0c00\3\2\2\2\u0bf0\u0bf1\7\u044c\2\2\u0bf1\u0bf2\5\u0246\u0124"+
		"\2\u0bf2\u0bf3\7\u044d\2\2\u0bf3\u0bf5\3\2\2\2\u0bf4\u0bf0\3\2\2\2\u0bf4"+
		"\u0bf5\3\2\2\2\u0bf5\u0bf6\3\2\2\2\u0bf6\u0c01\5\u00ba^\2\u0bf7\u0bf8"+
		"\7\u00a1\2\2\u0bf8\u0bfd\5\u00bc_\2\u0bf9\u0bfa\7\u044e\2\2\u0bfa\u0bfc"+
		"\5\u00bc_\2\u0bfb\u0bf9\3\2\2\2\u0bfc\u0bff\3\2\2\2\u0bfd\u0bfb\3\2\2"+
		"\2\u0bfd\u0bfe\3\2\2\2\u0bfe\u0c01\3\2\2\2\u0bff\u0bfd\3\2\2\2\u0c00\u0bf4"+
		"\3\2\2\2\u0c00\u0bf7\3\2\2\2\u0c01\u00b5\3\2\2\2\u0c02\u0c04\5\u00e8u"+
		"\2\u0c03\u0c05\5\u00c0a\2\u0c04\u0c03\3\2\2\2\u0c04\u0c05\3\2\2\2\u0c05"+
		"\u0c3a\3\2\2\2\u0c06\u0c08\5\u00e4s\2\u0c07\u0c09\5\u00c0a\2\u0c08\u0c07"+
		"\3\2\2\2\u0c08\u0c09\3\2\2\2\u0c09\u0c3a\3\2\2\2\u0c0a\u0c0c\5\u00f4{"+
		"\2\u0c0b\u0c0d\5\u00f8}\2\u0c0c\u0c0b\3\2\2\2\u0c0d\u0c0e\3\2\2\2\u0c0e"+
		"\u0c0c\3\2\2\2\u0c0e\u0c0f\3\2\2\2\u0c0f\u0c18\3\2\2\2\u0c10\u0c12\7\u00b9"+
		"\2\2\u0c11\u0c13\t*\2\2\u0c12\u0c11\3\2\2\2\u0c12\u0c13\3\2\2\2\u0c13"+
		"\u0c16\3\2\2\2\u0c14\u0c17\5\u00e8u\2\u0c15\u0c17\5\u00e4s\2\u0c16\u0c14"+
		"\3\2\2\2\u0c16\u0c15\3\2\2\2\u0c17\u0c19\3\2\2\2\u0c18\u0c10\3\2\2\2\u0c18"+
		"\u0c19\3\2\2\2\u0c19\u0c1b\3\2\2\2\u0c1a\u0c1c\5\u00d2j\2\u0c1b\u0c1a"+
		"\3\2\2\2\u0c1b\u0c1c\3\2\2\2\u0c1c\u0c1e\3\2\2\2\u0c1d\u0c1f\5\u0114\u008b"+
		"\2\u0c1e\u0c1d\3\2\2\2\u0c1e\u0c1f\3\2\2\2\u0c1f\u0c21\3\2\2\2\u0c20\u0c22"+
		"\5\u00c0a\2\u0c21\u0c20\3\2\2\2\u0c21\u0c22\3\2\2\2\u0c22\u0c3a\3\2\2"+
		"\2\u0c23\u0c25\5\u00e6t\2\u0c24\u0c26\5\u00f6|\2\u0c25\u0c24\3\2\2\2\u0c26"+
		"\u0c27\3\2\2\2\u0c27\u0c25\3\2\2\2\u0c27\u0c28\3\2\2\2\u0c28\u0c2e\3\2"+
		"\2\2\u0c29\u0c2b\7\u00b9\2\2\u0c2a\u0c2c\t*\2\2\u0c2b\u0c2a\3\2\2\2\u0c2b"+
		"\u0c2c\3\2\2\2\u0c2c\u0c2d\3\2\2\2\u0c2d\u0c2f\5\u00e4s\2\u0c2e\u0c29"+
		"\3\2\2\2\u0c2e\u0c2f\3\2\2\2\u0c2f\u0c31\3\2\2\2\u0c30\u0c32\5\u00d2j"+
		"\2\u0c31\u0c30\3\2\2\2\u0c31\u0c32\3\2\2\2\u0c32\u0c34\3\2\2\2\u0c33\u0c35"+
		"\5\u0114\u008b\2\u0c34\u0c33\3\2\2\2\u0c34\u0c35\3\2\2\2\u0c35\u0c37\3"+
		"\2\2\2\u0c36\u0c38\5\u00c0a\2\u0c37\u0c36\3\2\2\2\u0c37\u0c38\3\2\2\2"+
		"\u0c38\u0c3a\3\2\2\2\u0c39\u0c02\3\2\2\2\u0c39\u0c06\3\2\2\2\u0c39\u0c0a"+
		"\3\2\2\2\u0c39\u0c23\3\2\2\2\u0c3a\u00b7\3\2\2\2\u0c3b\u0c3e\5\u00ceh"+
		"\2\u0c3c\u0c3e\5\u00d0i\2\u0c3d\u0c3b\3\2\2\2\u0c3d\u0c3c\3\2\2\2\u0c3e"+
		"\u00b9\3\2\2\2\u0c3f\u0c52\5\u00b6\\\2\u0c40\u0c41\t+\2\2\u0c41\u0c43"+
		"\7\u044c\2\2\u0c42\u0c44\5\u024e\u0128\2\u0c43\u0c42\3\2\2\2\u0c43\u0c44"+
		"\3\2\2\2\u0c44\u0c45\3\2\2\2\u0c45\u0c4e\7\u044d\2\2\u0c46\u0c47\7\u044e"+
		"\2\2\u0c47\u0c49\7\u044c\2\2\u0c48\u0c4a\5\u024e\u0128\2\u0c49\u0c48\3"+
		"\2\2\2\u0c49\u0c4a\3\2\2\2\u0c4a\u0c4b\3\2\2\2\u0c4b\u0c4d\7\u044d\2\2"+
		"\u0c4c\u0c46\3\2\2\2\u0c4d\u0c50\3\2\2\2\u0c4e\u0c4c\3\2\2\2\u0c4e\u0c4f"+
		"\3\2\2\2\u0c4f\u0c52\3\2\2\2\u0c50\u0c4e\3\2\2\2\u0c51\u0c3f\3\2\2\2\u0c51"+
		"\u0c40\3\2\2\2\u0c52\u00bb\3\2\2\2\u0c53\u0c54\5\u0210\u0109\2\u0c54\u0c57"+
		"\7\u0443\2\2\u0c55\u0c58\5\u0288\u0145\2\u0c56\u0c58\78\2\2\u0c57\u0c55"+
		"\3\2\2\2\u0c57\u0c56\3\2\2\2\u0c58\u00bd\3\2\2\2\u0c59\u0c5c\5\u0226\u0114"+
		"\2\u0c5a\u0c5c\7\u0467\2\2\u0c5b\u0c59\3\2\2\2\u0c5b\u0c5a\3\2\2\2\u0c5c"+
		"\u00bf\3\2\2\2\u0c5d\u0c5e\7N\2\2\u0c5e\u0c64\7\u00bd\2\2\u0c5f\u0c60"+
		"\7r\2\2\u0c60\u0c61\7\\\2\2\u0c61\u0c62\7\u024e\2\2\u0c62\u0c64\7\u01f9"+
		"\2\2\u0c63\u0c5d\3\2\2\2\u0c63\u0c5f\3\2\2\2\u0c64\u00c1\3\2\2\2\u0c65"+
		"\u0c67\7:\2\2\u0c66\u0c68\7t\2\2\u0c67\u0c66\3\2\2\2\u0c67\u0c68\3\2\2"+
		"\2\u0c68\u0c6a\3\2\2\2\u0c69\u0c6b\7\u0229\2\2\u0c6a\u0c69\3\2\2\2\u0c6a"+
		"\u0c6b\3\2\2\2\u0c6b\u0c6d\3\2\2\2\u0c6c\u0c6e\7[\2\2\u0c6d\u0c6c\3\2"+
		"\2\2\u0c6d\u0c6e\3\2\2\2\u0c6e\u0c6f\3\2\2\2\u0c6f\u0c70\7Q\2\2\u0c70"+
		"\u0c76\5\u020e\u0108\2\u0c71\u0c72\7\u0089\2\2\u0c72\u0c73\7\u044c\2\2"+
		"\u0c73\u0c74\5\u0246\u0124\2\u0c74\u0c75\7\u044d\2\2\u0c75\u0c77\3\2\2"+
		"\2\u0c76\u0c71\3\2\2\2\u0c76\u0c77\3\2\2\2\u0c77\u0c7a\3\2\2\2\u0c78\u0c79"+
		"\7\u00c3\2\2\u0c79\u0c7b\5\u0288\u0145\2\u0c7a\u0c78\3\2\2\2\u0c7a\u0c7b"+
		"\3\2\2\2\u0c7b\u0c7d\3\2\2\2\u0c7c\u0c7e\5\u00d2j\2\u0c7d\u0c7c\3\2\2"+
		"\2\u0c7d\u0c7e\3\2\2\2\u0c7e\u0c81\3\2\2\2\u0c7f\u0c80\7n\2\2\u0c80\u0c82"+
		"\5\u0116\u008c\2\u0c81\u0c7f\3\2\2\2\u0c81\u0c82\3\2\2\2\u0c82\u00c3\3"+
		"\2\2\2\u0c83\u0c85\7:\2\2\u0c84\u0c86\7t\2\2\u0c85\u0c84\3\2\2\2\u0c85"+
		"\u0c86\3\2\2\2\u0c86\u0c88\3\2\2\2\u0c87\u0c89\7\u0229\2\2\u0c88\u0c87"+
		"\3\2\2\2\u0c88\u0c89\3\2\2\2\u0c89\u0c8b\3\2\2\2\u0c8a\u0c8c\7[\2\2\u0c8b"+
		"\u0c8a\3\2\2\2\u0c8b\u0c8c\3\2\2\2\u0c8c\u0cb4\3\2\2\2\u0c8d\u0c90\5\u020e"+
		"\u0108\2\u0c8e\u0c8f\7\u044b\2\2\u0c8f\u0c91\7\u043c\2\2\u0c90\u0c8e\3"+
		"\2\2\2\u0c90\u0c91\3\2\2\2\u0c91\u0c9a\3\2\2\2\u0c92\u0c93\7\u044e\2\2"+
		"\u0c93\u0c96\5\u020e\u0108\2\u0c94\u0c95\7\u044b\2\2\u0c95\u0c97\7\u043c"+
		"\2\2\u0c96\u0c94\3\2\2\2\u0c96\u0c97\3\2\2\2\u0c97\u0c99\3\2\2\2\u0c98"+
		"\u0c92\3\2\2\2\u0c99\u0c9c\3\2\2\2\u0c9a\u0c98\3\2\2\2\u0c9a\u0c9b\3\2"+
		"\2\2\u0c9b\u0c9d\3\2\2\2\u0c9c\u0c9a\3\2\2\2\u0c9d\u0c9e\7Q\2\2\u0c9e"+
		"\u0c9f\5\u00d6l\2\u0c9f\u0cb5\3\2\2\2\u0ca0\u0ca1\7Q\2\2\u0ca1\u0ca4\5"+
		"\u020e\u0108\2\u0ca2\u0ca3\7\u044b\2\2\u0ca3\u0ca5\7\u043c\2\2\u0ca4\u0ca2"+
		"\3\2\2\2\u0ca4\u0ca5\3\2\2\2\u0ca5\u0cae\3\2\2\2\u0ca6\u0ca7\7\u044e\2"+
		"\2\u0ca7\u0caa\5\u020e\u0108\2\u0ca8\u0ca9\7\u044b\2\2\u0ca9\u0cab\7\u043c"+
		"\2\2\u0caa\u0ca8\3\2\2\2\u0caa\u0cab\3\2\2\2\u0cab\u0cad\3\2\2\2\u0cac"+
		"\u0ca6\3\2\2\2\u0cad\u0cb0\3\2\2\2\u0cae\u0cac\3\2\2\2\u0cae\u0caf\3\2"+
		"\2\2\u0caf\u0cb1\3\2\2\2\u0cb0\u0cae\3\2\2\2\u0cb1\u0cb2\7\u00c0\2\2\u0cb2"+
		"\u0cb3\5\u00d6l\2\u0cb3\u0cb5\3\2\2\2\u0cb4\u0c8d\3\2\2\2\u0cb4\u0ca0"+
		"\3\2\2\2\u0cb5\u0cb8\3\2\2\2\u0cb6\u0cb7\7\u00c3\2\2\u0cb7\u0cb9\5\u0288"+
		"\u0145\2\u0cb8\u0cb6\3\2\2\2\u0cb8\u0cb9\3\2\2\2\u0cb9\u00c5\3\2\2\2\u0cba"+
		"\u0cbb\7\u01b7\2\2\u0cbb\u0cbc\5\u020e\u0108\2\u0cbc\u0cc1\7\u020f\2\2"+
		"\u0cbd\u0cbf\7\34\2\2\u0cbe\u0cbd\3\2\2\2\u0cbe\u0cbf\3\2\2\2\u0cbf\u0cc0"+
		"\3\2\2\2\u0cc0\u0cc2\5\u0226\u0114\2\u0cc1\u0cbe\3\2\2\2\u0cc1\u0cc2\3"+
		"\2\2\2\u0cc2\u00c7\3\2\2\2\u0cc3\u0cc4\7\u01b7\2\2\u0cc4\u0cc5\5\u020e"+
		"\u0108\2\u0cc5\u0cc6\7\u008e\2\2\u0cc6\u0ccd\5\u0226\u0114\2\u0cc7\u0cc8"+
		"\5\u0290\u0149\2\u0cc8\u0cc9\7\u044c\2\2\u0cc9\u0cca\5\u0250\u0129\2\u0cca"+
		"\u0ccb\7\u044d\2\2\u0ccb\u0cce\3\2\2\2\u0ccc\u0cce\t,\2\2\u0ccd\u0cc7"+
		"\3\2\2\2\u0ccd\u0ccc\3\2\2\2\u0cce\u0cd1\3\2\2\2\u0ccf\u0cd0\7\u00c3\2"+
		"\2\u0cd0\u0cd2\5\u0288\u0145\2\u0cd1\u0ccf\3\2\2\2\u0cd1\u0cd2\3\2\2\2"+
		"\u0cd2\u0cd5\3\2\2\2\u0cd3\u0cd4\7n\2\2\u0cd4\u0cd6\5\u0116\u008c\2\u0cd5"+
		"\u0cd3\3\2\2\2\u0cd5\u0cd6\3\2\2\2\u0cd6\u00c9\3\2\2\2\u0cd7\u0cd8\7\u01b7"+
		"\2\2\u0cd8\u0cd9\5\u020e\u0108\2\u0cd9\u0cda\7\u008e\2\2\u0cda\u0cdd\t"+
		"-\2\2\u0cdb\u0cdc\7\u00c3\2\2\u0cdc\u0cde\5\u0288\u0145\2\u0cdd\u0cdb"+
		"\3\2\2\2\u0cdd\u0cde\3\2\2\2\u0cde\u0ce1\3\2\2\2\u0cdf\u0ce0\7n\2\2\u0ce0"+
		"\u0ce2\5\u0116\u008c\2\u0ce1\u0cdf\3\2\2\2\u0ce1\u0ce2\3\2\2\2\u0ce2\u00cb"+
		"\3\2\2\2\u0ce3\u0ce4\7\u01b7\2\2\u0ce4\u0ce5\5\u020e\u0108\2\u0ce5\u0ce6"+
		"\7\u016b\2\2\u0ce6\u00cd\3\2\2\2\u0ce7\u0ce9\7\u00bd\2\2\u0ce8\u0cea\7"+
		"t\2\2\u0ce9\u0ce8\3\2\2\2\u0ce9\u0cea\3\2\2\2\u0cea\u0cec\3\2\2\2\u0ceb"+
		"\u0ced\7[\2\2\u0cec\u0ceb\3\2\2\2\u0cec\u0ced\3\2\2\2\u0ced\u0cee\3\2"+
		"\2\2\u0cee\u0cf3\5\u020e\u0108\2\u0cef\u0cf1\7\34\2\2\u0cf0\u0cef\3\2"+
		"\2\2\u0cf0\u0cf1\3\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u0cf4\5\u0226\u0114"+
		"\2\u0cf3\u0cf0\3\2\2\2\u0cf3\u0cf4\3\2\2\2\u0cf4\u0cf5\3\2\2\2\u0cf5\u0cf6"+
		"\7\u00a1\2\2\u0cf6\u0cfb\5\u00bc_\2\u0cf7\u0cf8\7\u044e\2\2\u0cf8\u0cfa"+
		"\5\u00bc_\2\u0cf9\u0cf7\3\2\2\2\u0cfa\u0cfd\3\2\2\2\u0cfb\u0cf9\3\2\2"+
		"\2\u0cfb\u0cfc\3\2\2\2\u0cfc\u0d00\3\2\2\2\u0cfd\u0cfb\3\2\2\2\u0cfe\u0cff"+
		"\7\u00c3\2\2\u0cff\u0d01\5\u0288\u0145\2\u0d00\u0cfe\3\2\2\2\u0d00\u0d01"+
		"\3\2\2\2\u0d01\u0d03\3\2\2\2\u0d02\u0d04\5\u00d2j\2\u0d03\u0d02\3\2\2"+
		"\2\u0d03\u0d04\3\2\2\2\u0d04\u0d06\3\2\2\2\u0d05\u0d07\5\u0114\u008b\2"+
		"\u0d06\u0d05\3\2\2\2\u0d06\u0d07\3\2\2\2\u0d07\u00cf\3\2\2\2\u0d08\u0d0a"+
		"\7\u00bd\2\2\u0d09\u0d0b\7t\2\2\u0d0a\u0d09\3\2\2\2\u0d0a\u0d0b\3\2\2"+
		"\2\u0d0b\u0d0d\3\2\2\2\u0d0c\u0d0e\7[\2\2\u0d0d\u0d0c\3\2\2\2\u0d0d\u0d0e"+
		"\3\2\2\2\u0d0e\u0d0f\3\2\2\2\u0d0f\u0d10\5\u00d6l\2\u0d10\u0d11\7\u00a1"+
		"\2\2\u0d11\u0d16\5\u00bc_\2\u0d12\u0d13\7\u044e\2\2\u0d13\u0d15\5\u00bc"+
		"_\2\u0d14\u0d12\3\2\2\2\u0d15\u0d18\3\2\2\2\u0d16\u0d14\3\2\2\2\u0d16"+
		"\u0d17\3\2\2\2\u0d17\u0d1b\3\2\2\2\u0d18\u0d16\3\2\2\2\u0d19\u0d1a\7\u00c3"+
		"\2\2\u0d1a\u0d1c\5\u0288\u0145\2\u0d1b\u0d19\3\2\2\2\u0d1b\u0d1c\3\2\2"+
		"\2\u0d1c\u00d1\3\2\2\2\u0d1d\u0d1e\7\u0084\2\2\u0d1e\u0d1f\7\"\2\2\u0d1f"+
		"\u0d24\5\u00d4k\2\u0d20\u0d21\7\u044e\2\2\u0d21\u0d23\5\u00d4k\2\u0d22"+
		"\u0d20\3\2\2\2\u0d23\u0d26\3\2\2\2\u0d24\u0d22\3\2\2\2\u0d24\u0d25\3\2"+
		"\2\2\u0d25\u00d3\3\2\2\2\u0d26\u0d24\3\2\2\2\u0d27\u0d29\5\u0288\u0145"+
		"\2\u0d28\u0d2a\t.\2\2\u0d29\u0d28\3\2\2\2\u0d29\u0d2a\3\2\2\2\u0d2a\u00d5"+
		"\3\2\2\2\u0d2b\u0d30\5\u00d8m\2\u0d2c\u0d2d\7\u044e\2\2\u0d2d\u0d2f\5"+
		"\u00d8m\2\u0d2e\u0d2c\3\2\2\2\u0d2f\u0d32\3\2\2\2\u0d30\u0d2e\3\2\2\2"+
		"\u0d30\u0d31\3\2\2\2\u0d31\u00d7\3\2\2\2\u0d32\u0d30\3\2\2\2\u0d33\u0d37"+
		"\5\u00dan\2\u0d34\u0d36\5\u00e0q\2\u0d35\u0d34\3\2\2\2\u0d36\u0d39\3\2"+
		"\2\2\u0d37\u0d35\3\2\2\2\u0d37\u0d38\3\2\2\2\u0d38\u0d45\3\2\2\2\u0d39"+
		"\u0d37\3\2\2\2\u0d3a\u0d3b\7\u044c\2\2\u0d3b\u0d3f\5\u00dan\2\u0d3c\u0d3e"+
		"\5\u00e0q\2\u0d3d\u0d3c\3\2\2\2\u0d3e\u0d41\3\2\2\2\u0d3f\u0d3d\3\2\2"+
		"\2\u0d3f\u0d40\3\2\2\2\u0d40\u0d42\3\2\2\2\u0d41\u0d3f\3\2\2\2\u0d42\u0d43"+
		"\7\u044d\2\2\u0d43\u0d45\3\2\2\2\u0d44\u0d33\3\2\2\2\u0d44\u0d3a\3\2\2"+
		"\2\u0d45\u00d9\3\2\2\2\u0d46\u0d4c\5\u020e\u0108\2\u0d47\u0d48\7\u0089"+
		"\2\2\u0d48\u0d49\7\u044c\2\2\u0d49\u0d4a\5\u0246\u0124\2\u0d4a\u0d4b\7"+
		"\u044d\2\2\u0d4b\u0d4d\3\2\2\2\u0d4c\u0d47\3\2\2\2\u0d4c\u0d4d\3\2\2\2"+
		"\u0d4d\u0d52\3\2\2\2\u0d4e\u0d50\7\34\2\2\u0d4f\u0d4e\3\2\2\2\u0d4f\u0d50"+
		"\3\2\2\2\u0d50\u0d51\3\2\2\2\u0d51\u0d53\5\u0226\u0114\2\u0d52\u0d4f\3"+
		"\2\2\2\u0d52\u0d53\3\2\2\2\u0d53\u0d5c\3\2\2\2\u0d54\u0d59\5\u00dco\2"+
		"\u0d55\u0d56\7\u044e\2\2\u0d56\u0d58\5\u00dco\2\u0d57\u0d55\3\2\2\2\u0d58"+
		"\u0d5b\3\2\2\2\u0d59\u0d57\3\2\2\2\u0d59\u0d5a\3\2\2\2\u0d5a\u0d5d\3\2"+
		"\2\2\u0d5b\u0d59\3\2\2\2\u0d5c\u0d54\3\2\2\2\u0d5c\u0d5d\3\2\2\2\u0d5d"+
		"\u0d6f\3\2\2\2\u0d5e\u0d64\5\u00b6\\\2\u0d5f\u0d60\7\u044c\2\2\u0d60\u0d61"+
		"\5\u00b6\\\2\u0d61\u0d62\7\u044d\2\2\u0d62\u0d64\3\2\2\2\u0d63\u0d5e\3"+
		"\2\2\2\u0d63\u0d5f\3\2\2\2\u0d64\u0d66\3\2\2\2\u0d65\u0d67\7\34\2\2\u0d66"+
		"\u0d65\3\2\2\2\u0d66\u0d67\3\2\2\2\u0d67\u0d68\3\2\2\2\u0d68\u0d69\5\u0226"+
		"\u0114\2\u0d69\u0d6f\3\2\2\2\u0d6a\u0d6b\7\u044c\2\2\u0d6b\u0d6c\5\u00d6"+
		"l\2\u0d6c\u0d6d\7\u044d\2\2\u0d6d\u0d6f\3\2\2\2\u0d6e\u0d46\3\2\2\2\u0d6e"+
		"\u0d63\3\2\2\2\u0d6e\u0d6a\3\2\2\2\u0d6f\u00db\3\2\2\2\u0d70\u0d71\t/"+
		"\2\2\u0d71\u0d74\t\24\2\2\u0d72\u0d73\7N\2\2\u0d73\u0d75\5\u00dep\2\u0d74"+
		"\u0d72\3\2\2\2\u0d74\u0d75\3\2\2\2\u0d75\u0d76\3\2\2\2\u0d76\u0d77\7\u044c"+
		"\2\2\u0d77\u0d78\5\u0246\u0124\2\u0d78\u0d79\7\u044d\2\2\u0d79\u00dd\3"+
		"\2\2\2\u0d7a\u0d80\7f\2\2\u0d7b\u0d7c\7\u0084\2\2\u0d7c\u0d80\7\"\2\2"+
		"\u0d7d\u0d7e\7V\2\2\u0d7e\u0d80\7\"\2\2\u0d7f\u0d7a\3\2\2\2\u0d7f\u0d7b"+
		"\3\2\2\2\u0d7f\u0d7d\3\2\2\2\u0d80\u00df\3\2\2\2\u0d81\u0d83\t\60\2\2"+
		"\u0d82\u0d81\3\2\2\2\u0d82\u0d83\3\2\2\2\u0d83\u0d84\3\2\2\2\u0d84\u0d85"+
		"\5\u00e2r\2\u0d85\u0d8d\5\u00dan\2\u0d86\u0d87\7\177\2\2\u0d87\u0d8e\5"+
		"\u0288\u0145\2\u0d88\u0d89\7\u00c0\2\2\u0d89\u0d8a\7\u044c\2\2\u0d8a\u0d8b"+
		"\5\u0246\u0124\2\u0d8b\u0d8c\7\u044d\2\2\u0d8c\u0d8e\3\2\2\2\u0d8d\u0d86"+
		"\3\2\2\2\u0d8d\u0d88\3\2\2\2\u0d8d\u0d8e\3\2\2\2\u0d8e\u0daf\3\2\2\2\u0d8f"+
		"\u0d90\7\u00b0\2\2\u0d90\u0d93\5\u00dan\2\u0d91\u0d92\7\177\2\2\u0d92"+
		"\u0d94\5\u0288\u0145\2\u0d93\u0d91\3\2\2\2\u0d93\u0d94\3\2\2\2\u0d94\u0daf"+
		"\3\2\2\2\u0d95\u0d97\t\61\2\2\u0d96\u0d98\7\u0087\2\2\u0d97\u0d96\3\2"+
		"\2\2\u0d97\u0d98\3\2\2\2\u0d98\u0d99\3\2\2\2\u0d99\u0d9a\5\u00e2r\2\u0d9a"+
		"\u0da2\5\u00dan\2\u0d9b\u0d9c\7\177\2\2\u0d9c\u0da3\5\u0288\u0145\2\u0d9d"+
		"\u0d9e\7\u00c0\2\2\u0d9e\u0d9f\7\u044c\2\2\u0d9f\u0da0\5\u0246\u0124\2"+
		"\u0da0\u0da1\7\u044d\2\2\u0da1\u0da3\3\2\2\2\u0da2\u0d9b\3\2\2\2\u0da2"+
		"\u0d9d\3\2\2\2\u0da3\u0daf\3\2\2\2\u0da4\u0da9\7z\2\2\u0da5\u0da7\t\61"+
		"\2\2\u0da6\u0da8\7\u0087\2\2\u0da7\u0da6\3\2\2\2\u0da7\u0da8\3\2\2\2\u0da8"+
		"\u0daa\3\2\2\2\u0da9\u0da5\3\2\2\2\u0da9\u0daa\3\2\2\2\u0daa\u0dab\3\2"+
		"\2\2\u0dab\u0dac\5\u00e2r\2\u0dac\u0dad\5\u00dan\2\u0dad\u0daf\3\2\2\2"+
		"\u0dae\u0d82\3\2\2\2\u0dae\u0d8f\3\2\2\2\u0dae\u0d95\3\2\2\2\u0dae\u0da4"+
		"\3\2\2\2\u0daf\u00e1\3\2\2\2\u0db0\u0db1\t\62\2\2\u0db1\u00e3\3\2\2\2"+
		"\u0db2\u0db3\7\u044c\2\2\u0db3\u0db4\5\u00e8u\2\u0db4\u0db5\7\u044d\2"+
		"\2\u0db5\u0dbb\3\2\2\2\u0db6\u0db7\7\u044c\2\2\u0db7\u0db8\5\u00e4s\2"+
		"\u0db8\u0db9\7\u044d\2\2\u0db9\u0dbb\3\2\2\2\u0dba\u0db2\3\2\2\2\u0dba"+
		"\u0db6\3\2\2\2\u0dbb\u00e5\3\2\2\2\u0dbc\u0dbd\7\u044c\2\2\u0dbd\u0dbe"+
		"\5\u00f4{\2\u0dbe\u0dbf\7\u044d\2\2\u0dbf\u0dc5\3\2\2\2\u0dc0\u0dc1\7"+
		"\u044c\2\2\u0dc1\u0dc2\5\u00e6t\2\u0dc2\u0dc3\7\u044d\2\2\u0dc3\u0dc5"+
		"\3\2\2\2\u0dc4\u0dbc\3\2\2\2\u0dc4\u0dc0\3\2\2\2\u0dc5\u00e7\3\2\2\2\u0dc6"+
		"\u0dc7\5\u00ecw\2\u0dc7\u0dc8\5\u00eex\2\u0dc8\u0dc9\5\u00eav\2\u0dc9"+
		"\u0dcf\3\2\2\2\u0dca\u0dcb\5\u00eex\2\u0dcb\u0dcc\5\u00ecw\2\u0dcc\u0dcd"+
		"\5\u00eav\2\u0dcd\u0dcf\3\2\2\2\u0dce\u0dc6\3\2\2\2\u0dce\u0dca\3\2\2"+
		"\2\u0dcf\u00e9\3\2\2\2\u0dd0\u0dd2\5\u010c\u0087\2\u0dd1\u0dd0\3\2\2\2"+
		"\u0dd1\u0dd2\3\2\2\2\u0dd2\u0dd4\3\2\2\2\u0dd3\u0dd5\5\u010e\u0088\2\u0dd4"+
		"\u0dd3\3\2\2\2\u0dd4\u0dd5\3\2\2\2\u0dd5\u0dd7\3\2\2\2\u0dd6\u0dd8\5\u0110"+
		"\u0089\2\u0dd7\u0dd6\3\2\2\2\u0dd7\u0dd8\3\2\2\2\u0dd8\u0dda\3\2\2\2\u0dd9"+
		"\u0ddb\5\u00d2j\2\u0dda\u0dd9\3\2\2\2\u0dda\u0ddb\3\2\2\2\u0ddb\u0ddd"+
		"\3\2\2\2\u0ddc\u0dde\5\u0114\u008b\2\u0ddd\u0ddc\3\2\2\2\u0ddd\u0dde\3"+
		"\2\2\2\u0dde\u0df2\3\2\2\2\u0ddf\u0de1\5\u010c\u0087\2\u0de0\u0ddf\3\2"+
		"\2\2\u0de0\u0de1\3\2\2\2\u0de1\u0de3\3\2\2\2\u0de2\u0de4\5\u010e\u0088"+
		"\2\u0de3\u0de2\3\2\2\2\u0de3\u0de4\3\2\2\2\u0de4\u0de6\3\2\2\2\u0de5\u0de7"+
		"\5\u0110\u0089\2\u0de6\u0de5\3\2\2\2\u0de6\u0de7\3\2\2\2\u0de7\u0de9\3"+
		"\2\2\2\u0de8\u0dea\5\u00d2j\2\u0de9\u0de8\3\2\2\2\u0de9\u0dea\3\2\2\2"+
		"\u0dea\u0dec\3\2\2\2\u0deb\u0ded\5\u0114\u008b\2\u0dec\u0deb\3\2\2\2\u0dec"+
		"\u0ded\3\2\2\2\u0ded\u0def\3\2\2\2\u0dee\u0df0\5\u0102\u0082\2\u0def\u0dee"+
		"\3\2\2\2\u0def\u0df0\3\2\2\2\u0df0\u0df2\3\2\2\2\u0df1\u0dd1\3\2\2\2\u0df1"+
		"\u0de0\3\2\2\2\u0df2\u00eb\3\2\2\2\u0df3\u0df7\5\u00f0y\2\u0df4\u0df6"+
		"\5\u00fa~\2\u0df5\u0df4\3\2\2\2\u0df6\u0df9\3\2\2\2\u0df7\u0df5\3\2\2"+
		"\2\u0df7\u0df8\3\2\2\2\u0df8\u0dfa\3\2\2\2\u0df9\u0df7\3\2\2\2\u0dfa\u0dfc"+
		"\5\u00fc\177\2\u0dfb\u0dfd\5\u0102\u0082\2\u0dfc\u0dfb\3\2\2\2\u0dfc\u0dfd"+
		"\3\2\2\2\u0dfd\u0e08\3\2\2\2\u0dfe\u0e02\5\u00f0y\2\u0dff\u0e01\5\u00fa"+
		"~\2\u0e00\u0dff\3\2\2\2\u0e01\u0e04\3\2\2\2\u0e02\u0e00\3\2\2\2\u0e02"+
		"\u0e03\3\2\2\2\u0e03\u0e05\3\2\2\2\u0e04\u0e02\3\2\2\2\u0e05\u0e06\5\u00fc"+
		"\177\2\u0e06\u0e08\3\2\2\2\u0e07\u0df3\3\2\2\2\u0e07\u0dfe\3\2\2\2\u0e08"+
		"\u00ed\3\2\2\2\u0e09\u0e0b\5\u0108\u0085\2\u0e0a\u0e09\3\2\2\2\u0e0a\u0e0b"+
		"\3\2\2\2\u0e0b\u00ef\3\2\2\2\u0e0c\u0e0d\5\u00f2z\2\u0e0d\u00f1\3\2\2"+
		"\2\u0e0e\u0e0f\t\63\2\2\u0e0f\u00f3\3\2\2\2\u0e10\u0e14\7\u00a0\2\2\u0e11"+
		"\u0e13\5\u00fa~\2\u0e12\u0e11\3\2\2\2\u0e13\u0e16\3\2\2\2\u0e14\u0e12"+
		"\3\2\2\2\u0e14\u0e15\3\2\2\2\u0e15\u0e17\3\2\2\2\u0e16\u0e14\3\2\2\2\u0e17"+
		"\u0e19\5\u00fc\177\2\u0e18\u0e1a\5\u0108\u0085\2\u0e19\u0e18\3\2\2\2\u0e19"+
		"\u0e1a\3\2\2\2\u0e1a\u0e1c\3\2\2\2\u0e1b\u0e1d\5\u010c\u0087\2\u0e1c\u0e1b"+
		"\3\2\2\2\u0e1c\u0e1d\3\2\2\2\u0e1d\u0e1f\3\2\2\2\u0e1e\u0e20\5\u010e\u0088"+
		"\2\u0e1f\u0e1e\3\2\2\2\u0e1f\u0e20\3\2\2\2\u0e20\u0e22\3\2\2\2\u0e21\u0e23"+
		"\5\u0110\u0089\2\u0e22\u0e21\3\2\2\2\u0e22\u0e23\3\2\2\2\u0e23\u0e25\3"+
		"\2\2\2\u0e24\u0e26\5\u00d2j\2\u0e25\u0e24\3\2\2\2\u0e25\u0e26\3\2\2\2"+
		"\u0e26\u0e28\3\2\2\2\u0e27\u0e29\5\u0114\u008b\2\u0e28\u0e27\3\2\2\2\u0e28"+
		"\u0e29\3\2\2\2\u0e29\u00f5\3\2\2\2\u0e2a\u0e2c\7\u00b9\2\2\u0e2b\u0e2d"+
		"\t*\2\2\u0e2c\u0e2b\3\2\2\2\u0e2c\u0e2d\3\2\2\2\u0e2d\u0e2e\3\2\2\2\u0e2e"+
		"\u0e2f\5\u00e6t\2\u0e2f\u00f7\3\2\2\2\u0e30\u0e32\7\u00b9\2\2\u0e31\u0e33"+
		"\t*\2\2\u0e32\u0e31\3\2\2\2\u0e32\u0e33\3\2\2\2\u0e33\u0e36\3\2\2\2\u0e34"+
		"\u0e37\5\u00f4{\2\u0e35\u0e37\5\u00e6t\2\u0e36\u0e34\3\2\2\2\u0e36\u0e35"+
		"\3\2\2\2\u0e37\u00f9\3\2\2\2\u0e38\u0e41\t\64\2\2\u0e39\u0e41\7X\2\2\u0e3a"+
		"\u0e41\7\u00b0\2\2\u0e3b\u0e41\7\u00ac\2\2\u0e3c\u0e41\7\u00aa\2\2\u0e3d"+
		"\u0e41\7\u025d\2\2\u0e3e\u0e41\t\65\2\2\u0e3f\u0e41\7\u00ab\2\2\u0e40"+
		"\u0e38\3\2\2\2\u0e40\u0e39\3\2\2\2\u0e40\u0e3a\3\2\2\2\u0e40\u0e3b\3\2"+
		"\2\2\u0e40\u0e3c\3\2\2\2\u0e40\u0e3d\3\2\2\2\u0e40\u0e3e\3\2\2\2\u0e40"+
		"\u0e3f\3\2\2\2\u0e41\u00fb\3\2\2\2\u0e42\u0e45\7\u043c\2\2\u0e43\u0e45"+
		"\5\u0100\u0081\2\u0e44\u0e42\3\2\2\2\u0e44\u0e43\3\2\2\2\u0e45\u0e4b\3"+
		"\2\2\2\u0e46\u0e47\5\u00fe\u0080\2\u0e47\u0e48\5\u0100\u0081\2\u0e48\u0e4a"+
		"\3\2\2\2\u0e49\u0e46\3\2\2\2\u0e4a\u0e4d\3\2\2\2\u0e4b\u0e49\3\2\2\2\u0e4b"+
		"\u0e4c\3\2\2\2\u0e4c\u00fd\3\2\2\2\u0e4d\u0e4b\3\2\2\2\u0e4e\u0e4f\t\66"+
		"\2\2\u0e4f\u00ff\3\2\2\2\u0e50\u0e51\5\u020c\u0107\2\u0e51\u0e52\7\u044b"+
		"\2\2\u0e52\u0e53\7\u043c\2\2\u0e53\u0e6e\3\2\2\2\u0e54\u0e59\5\u0210\u0109"+
		"\2\u0e55\u0e57\7\34\2\2\u0e56\u0e55\3\2\2\2\u0e56\u0e57\3\2\2\2\u0e57"+
		"\u0e58\3\2\2\2\u0e58\u0e5a\5\u0226\u0114\2\u0e59\u0e56\3\2\2\2\u0e59\u0e5a"+
		"\3\2\2\2\u0e5a\u0e6e\3\2\2\2\u0e5b\u0e60\5\u0260\u0131\2\u0e5c\u0e5e\7"+
		"\34\2\2\u0e5d\u0e5c\3\2\2\2\u0e5d\u0e5e\3\2\2\2\u0e5e\u0e5f\3\2\2\2\u0e5f"+
		"\u0e61\5\u0226\u0114\2\u0e60\u0e5d\3\2\2\2\u0e60\u0e61\3\2\2\2\u0e61\u0e6e"+
		"\3\2\2\2\u0e62\u0e63\7\u0467\2\2\u0e63\u0e65\7\u0433\2\2\u0e64\u0e62\3"+
		"\2\2\2\u0e64\u0e65\3\2\2\2\u0e65\u0e66\3\2\2\2\u0e66\u0e6b\5\u0288\u0145"+
		"\2\u0e67\u0e69\7\34\2\2\u0e68\u0e67\3\2\2\2\u0e68\u0e69\3\2\2\2\u0e69"+
		"\u0e6a\3\2\2\2\u0e6a\u0e6c\5\u0226\u0114\2\u0e6b\u0e68\3\2\2\2\u0e6b\u0e6c"+
		"\3\2\2\2\u0e6c\u0e6e\3\2\2\2\u0e6d\u0e50\3\2\2\2\u0e6d\u0e54\3\2\2\2\u0e6d"+
		"\u0e5b\3\2\2\2\u0e6d\u0e64\3\2\2\2\u0e6e\u0101\3\2\2\2\u0e6f\u0e70\7c"+
		"\2\2\u0e70\u0e75\5\u00be`\2\u0e71\u0e72\7\u044e\2\2\u0e72\u0e74\5\u00be"+
		"`\2\u0e73\u0e71\3\2\2\2\u0e74\u0e77\3\2\2\2\u0e75\u0e73\3\2\2\2\u0e75"+
		"\u0e76\3\2\2\2\u0e76\u0e94\3\2\2\2\u0e77\u0e75\3\2\2\2\u0e78\u0e79\7c"+
		"\2\2\u0e79\u0e7a\7\u0190\2\2\u0e7a\u0e94\7\u045b\2\2\u0e7b\u0e7c\7c\2"+
		"\2\u0e7c\u0e7d\7\u0088\2\2\u0e7d\u0e81\7\u045b\2\2\u0e7e\u0e7f\7(\2\2"+
		"\u0e7f\u0e80\7\u00a1\2\2\u0e80\u0e82\5\u0218\u010d\2\u0e81\u0e7e\3\2\2"+
		"\2\u0e81\u0e82\3\2\2\2\u0e82\u0e89\3\2\2\2\u0e83\u0e85\t\'\2\2\u0e84\u0e86"+
		"\5\u0104\u0083\2\u0e85\u0e84\3\2\2\2\u0e86\u0e87\3\2\2\2\u0e87\u0e85\3"+
		"\2\2\2\u0e87\u0e88\3\2\2\2\u0e88\u0e8a\3\2\2\2\u0e89\u0e83\3\2\2\2\u0e89"+
		"\u0e8a\3\2\2\2\u0e8a\u0e91\3\2\2\2\u0e8b\u0e8d\7p\2\2\u0e8c\u0e8e\5\u0106"+
		"\u0084\2\u0e8d\u0e8c\3\2\2\2\u0e8e\u0e8f\3\2\2\2\u0e8f\u0e8d\3\2\2\2\u0e8f"+
		"\u0e90\3\2\2\2\u0e90\u0e92\3\2\2\2\u0e91\u0e8b\3\2\2\2\u0e91\u0e92\3\2"+
		"\2\2\u0e92\u0e94\3\2\2\2\u0e93\u0e6f\3\2\2\2\u0e93\u0e78\3\2\2\2\u0e93"+
		"\u0e7b\3\2\2\2\u0e94\u0103\3\2\2\2\u0e95\u0e96\7\u00b2\2\2\u0e96\u0e97"+
		"\7\"\2\2\u0e97\u0ea2\7\u045b\2\2\u0e98\u0e9a\7\u0082\2\2\u0e99\u0e98\3"+
		"\2\2\2\u0e99\u0e9a\3\2\2\2\u0e9a\u0e9b\3\2\2\2\u0e9b\u0e9c\7F\2\2\u0e9c"+
		"\u0e9d\7\"\2\2\u0e9d\u0ea2\7\u045b\2\2\u0e9e\u0e9f\7G\2\2\u0e9f\u0ea0"+
		"\7\"\2\2\u0ea0\u0ea2\7\u045b\2\2\u0ea1\u0e95\3\2\2\2\u0ea1\u0e99\3\2\2"+
		"\2\u0ea1\u0e9e\3\2\2\2\u0ea2\u0105\3\2\2\2\u0ea3\u0ea4\7\u00af\2\2\u0ea4"+
		"\u0ea5\7\"\2\2\u0ea5\u0eaa\7\u045b\2\2\u0ea6\u0ea7\7\u00b2\2\2\u0ea7\u0ea8"+
		"\7\"\2\2\u0ea8\u0eaa\7\u045b\2\2\u0ea9\u0ea3\3\2\2\2\u0ea9\u0ea6\3\2\2"+
		"\2\u0eaa\u0107\3\2\2\2\u0eab\u0eac\5\u010a\u0086\2\u0eac\u0ead\5\u00d6"+
		"l\2\u0ead\u0eaf\3\2\2\2\u0eae\u0eab\3\2\2\2\u0eae\u0eaf\3\2\2\2\u0eaf"+
		"\u0eb2\3\2\2\2\u0eb0\u0eb1\7\u00c3\2\2\u0eb1\u0eb3\5\u0288\u0145\2\u0eb2"+
		"\u0eb0\3\2\2\2\u0eb2\u0eb3\3\2\2\2\u0eb3\u0109\3\2\2\2\u0eb4\u0eb5\t\67"+
		"\2\2\u0eb5\u010b\3\2\2\2\u0eb6\u0eb7\7V\2\2\u0eb7\u0eb8\7\"\2\2\u0eb8"+
		"\u0ebd\5\u0112\u008a\2\u0eb9\u0eba\7\u044e\2\2\u0eba\u0ebc\5\u0112\u008a"+
		"\2\u0ebb\u0eb9\3\2\2\2\u0ebc\u0ebf\3\2\2\2\u0ebd\u0ebb\3\2\2\2\u0ebd\u0ebe"+
		"\3\2\2\2\u0ebe\u0ec2\3\2\2\2\u0ebf\u0ebd\3\2\2\2\u0ec0\u0ec1\7\u00c5\2"+
		"\2\u0ec1\u0ec3\7\u0244\2\2\u0ec2\u0ec0\3\2\2\2\u0ec2\u0ec3\3\2\2\2\u0ec3"+
		"\u010d\3\2\2\2\u0ec4\u0ec5\7W\2\2\u0ec5\u0ec6\5\u0288\u0145\2\u0ec6\u010f"+
		"\3\2\2\2\u0ec7\u0ec8\7\u0290\2\2\u0ec8\u0ec9\5\u0272\u013a\2\u0ec9\u0eca"+
		"\7\34\2\2\u0eca\u0ecb\7\u044c\2\2\u0ecb\u0ecc\5\u0270\u0139\2\u0ecc\u0ed6"+
		"\7\u044d\2\2\u0ecd\u0ece\7\u044e\2\2\u0ece\u0ecf\5\u0272\u013a\2\u0ecf"+
		"\u0ed0\7\34\2\2\u0ed0\u0ed1\7\u044c\2\2\u0ed1\u0ed2\5\u0270\u0139\2\u0ed2"+
		"\u0ed3\7\u044d\2\2\u0ed3\u0ed5\3\2\2\2\u0ed4\u0ecd\3\2\2\2\u0ed5\u0ed8"+
		"\3\2\2\2\u0ed6\u0ed4\3\2\2\2\u0ed6\u0ed7\3\2\2\2\u0ed7\u0111\3\2\2\2\u0ed8"+
		"\u0ed6\3\2\2\2\u0ed9\u0edb\5\u0288\u0145\2\u0eda\u0edc\t.\2\2\u0edb\u0eda"+
		"\3\2\2\2\u0edb\u0edc\3\2\2\2\u0edc\u0113\3\2\2\2\u0edd\u0ee8\7n\2\2\u0ede"+
		"\u0edf\5\u0116\u008c\2\u0edf\u0ee0\7\u044e\2\2\u0ee0\u0ee2\3\2\2\2\u0ee1"+
		"\u0ede\3\2\2\2\u0ee1\u0ee2\3\2\2\2\u0ee2\u0ee3\3\2\2\2\u0ee3\u0ee9\5\u0116"+
		"\u008c\2\u0ee4\u0ee5\5\u0116\u008c\2\u0ee5\u0ee6\7\u0208\2\2\u0ee6\u0ee7"+
		"\5\u0116\u008c\2\u0ee7\u0ee9\3\2\2\2\u0ee8\u0ee1\3\2\2\2\u0ee8\u0ee4\3"+
		"\2\2\2\u0ee9\u0115\3\2\2\2\u0eea\u0eee\5\u022c\u0117\2\u0eeb\u0eee\5\u0216"+
		"\u010c\2\u0eec\u0eee\5\u0228\u0115\2\u0eed\u0eea\3\2\2\2\u0eed\u0eeb\3"+
		"\2\2\2\u0eed\u0eec\3\2\2\2\u0eee\u0117\3\2\2\2\u0eef\u0ef0\7\u0261\2\2"+
		"\u0ef0\u0ef9\7\u0279\2\2\u0ef1\u0ef6\5\u012e\u0098\2\u0ef2\u0ef3\7\u044e"+
		"\2\2\u0ef3\u0ef5\5\u012e\u0098\2\u0ef4\u0ef2\3\2\2\2\u0ef5\u0ef8\3\2\2"+
		"\2\u0ef6\u0ef4\3\2\2\2\u0ef6\u0ef7\3\2\2\2\u0ef7\u0efa\3\2\2\2\u0ef8\u0ef6"+
		"\3\2\2\2\u0ef9\u0ef1\3\2\2\2\u0ef9\u0efa\3\2\2\2\u0efa\u0119\3\2\2\2\u0efb"+
		"\u0efd\7\u015a\2\2\u0efc\u0efe\7\u0292\2\2\u0efd\u0efc\3\2\2\2\u0efd\u0efe"+
		"\3\2\2\2\u0efe\u011b\3\2\2\2\u0eff\u0f01\7\u0172\2\2\u0f00\u0f02\7\u0292"+
		"\2\2\u0f01\u0f00\3\2\2\2\u0f01\u0f02\3\2\2\2\u0f02\u0f08\3\2\2\2\u0f03"+
		"\u0f05\7\32\2\2\u0f04\u0f06\7\u0203\2\2\u0f05\u0f04\3\2\2\2\u0f05\u0f06"+
		"\3\2\2\2\u0f06\u0f07\3\2\2\2\u0f07\u0f09\7\u0163\2\2\u0f08\u0f03\3\2\2"+
		"\2\u0f08\u0f09\3\2\2\2\u0f09\u0f0e\3\2\2\2\u0f0a\u0f0c\7\u0203\2\2\u0f0b"+
		"\u0f0a\3\2\2\2\u0f0b\u0f0c\3\2\2\2\u0f0c\u0f0d\3\2\2\2\u0f0d\u0f0f\7\u0092"+
		"\2\2\u0f0e\u0f0b\3\2\2\2\u0f0e\u0f0f\3\2\2\2\u0f0f\u011d\3\2\2\2\u0f10"+
		"\u0f12\7\u0243\2\2\u0f11\u0f13\7\u0292\2\2\u0f12\u0f11\3\2\2\2\u0f12\u0f13"+
		"\3\2\2\2\u0f13\u0f19\3\2\2\2\u0f14\u0f16\7\32\2\2\u0f15\u0f17\7\u0203"+
		"\2\2\u0f16\u0f15\3\2\2\2\u0f16\u0f17\3\2\2\2\u0f17\u0f18\3\2\2\2\u0f18"+
		"\u0f1a\7\u0163\2\2\u0f19\u0f14\3\2\2\2\u0f19\u0f1a\3\2\2\2\u0f1a\u0f1f"+
		"\3\2\2\2\u0f1b\u0f1d\7\u0203\2\2\u0f1c\u0f1b\3\2\2\2\u0f1c\u0f1d\3\2\2"+
		"\2\u0f1d\u0f1e\3\2\2\2\u0f1e\u0f20\7\u0092\2\2\u0f1f\u0f1c\3\2\2\2\u0f1f"+
		"\u0f20\3\2\2\2\u0f20\u011f\3\2\2\2\u0f21\u0f22\7\u0249\2\2\u0f22\u0f23"+
		"\5\u0226\u0114\2\u0f23\u0121\3\2\2\2\u0f24\u0f26\7\u0243\2\2\u0f25\u0f27"+
		"\7\u0292\2\2\u0f26\u0f25\3\2\2\2\u0f26\u0f27\3\2\2\2\u0f27\u0f28\3\2\2"+
		"\2\u0f28\u0f2a\7\u00b4\2\2\u0f29\u0f2b\7\u0249\2\2\u0f2a\u0f29\3\2\2\2"+
		"\u0f2a\u0f2b\3\2\2\2\u0f2b\u0f2c\3\2\2\2\u0f2c\u0f2d\5\u0226\u0114\2\u0f2d"+
		"\u0123\3\2\2\2\u0f2e\u0f2f\7\u0092\2\2\u0f2f\u0f30\7\u0249\2\2\u0f30\u0f31"+
		"\5\u0226\u0114\2\u0f31\u0125\3\2\2\2\u0f32\u0f33\7r\2\2\u0f33\u0f34\7"+
		"\u02a4\2\2\u0f34\u0f39\5\u0130\u0099\2\u0f35\u0f36\7\u044e\2\2\u0f36\u0f38"+
		"\5\u0130\u0099\2\u0f37\u0f35\3\2\2\2\u0f38\u0f3b\3\2\2\2\u0f39\u0f37\3"+
		"\2\2\2\u0f39\u0f3a\3\2\2\2\u0f3a\u0127\3\2\2\2\u0f3b\u0f39\3\2\2\2\u0f3c"+
		"\u0f3d\7\u00bb\2\2\u0f3d\u0f3e\7\u02a4\2\2\u0f3e\u0129\3\2\2\2\u0f3f\u0f40"+
		"\7\u00a1\2\2\u0f40\u0f41\7\u0156\2\2\u0f41\u0f42\7\u0443\2\2\u0f42\u0f43"+
		"\t\30\2\2\u0f43\u012b\3\2\2\2\u0f44\u0f46\7\u00a1\2\2\u0f45\u0f47\t8\2"+
		"\2\u0f46\u0f45\3\2\2\2\u0f46\u0f47\3\2\2\2\u0f47\u0f48\3\2\2\2\u0f48\u0f49"+
		"\7\u0279\2\2\u0f49\u0f4e\5\u0134\u009b\2\u0f4a\u0f4b\7\u044e\2\2\u0f4b"+
		"\u0f4d\5\u0134\u009b\2\u0f4c\u0f4a\3\2\2\2\u0f4d\u0f50\3\2\2\2\u0f4e\u0f4c"+
		"\3\2\2\2\u0f4e\u0f4f\3\2\2\2\u0f4f\u012d\3\2\2\2\u0f50\u0f4e\3\2\2\2\u0f51"+
		"\u0f52\7\u00c5\2\2\u0f52\u0f53\7\u017a\2\2\u0f53\u0f59\7\u0254\2\2\u0f54"+
		"\u0f55\7\u008e\2\2\u0f55\u0f59\7\u00c6\2\2\u0f56\u0f57\7\u008e\2\2\u0f57"+
		"\u0f59\7\u020e\2\2\u0f58\u0f51\3\2\2\2\u0f58\u0f54\3\2\2\2\u0f58\u0f56"+
		"\3\2\2\2\u0f59\u012f\3\2\2\2\u0f5a\u0f5f\5\u020e\u0108\2\u0f5b\u0f5d\7"+
		"\34\2\2\u0f5c\u0f5b\3\2\2\2\u0f5c\u0f5d\3\2\2\2\u0f5d\u0f5e\3\2\2\2\u0f5e"+
		"\u0f60\5\u0226\u0114\2\u0f5f\u0f5c\3\2\2\2\u0f5f\u0f60\3\2\2\2\u0f60\u0f61"+
		"\3\2\2\2\u0f61\u0f62\5\u0132\u009a\2\u0f62\u0131\3\2\2\2\u0f63\u0f65\7"+
		"\u008e\2\2\u0f64\u0f66\7\u01d4\2\2\u0f65\u0f64\3\2\2\2\u0f65\u0f66\3\2"+
		"\2\2\u0f66\u0f6c\3\2\2\2\u0f67\u0f69\7t\2\2\u0f68\u0f67\3\2\2\2\u0f68"+
		"\u0f69\3\2\2\2\u0f69\u0f6a\3\2\2\2\u0f6a\u0f6c\7\u00c6\2\2\u0f6b\u0f63"+
		"\3\2\2\2\u0f6b\u0f68\3\2\2\2\u0f6c\u0133\3\2\2\2\u0f6d\u0f6e\7\u01ca\2"+
		"\2\u0f6e\u0f6f\7\u01d2\2\2\u0f6f\u0f75\5\u0136\u009c\2\u0f70\u0f71\7\u008e"+
		"\2\2\u0f71\u0f75\7\u00c6\2\2\u0f72\u0f73\7\u008e\2\2\u0f73\u0f75\7\u020e"+
		"\2\2\u0f74\u0f6d\3\2\2\2\u0f74\u0f70\3\2\2\2\u0f74\u0f72\3\2\2\2\u0f75"+
		"\u0135\3\2\2\2\u0f76\u0f77\7\u0302\2\2\u0f77\u0f7e\7\u008e\2\2\u0f78\u0f79"+
		"\7\u008e\2\2\u0f79\u0f7e\7\u0303\2\2\u0f7a\u0f7b\7\u008e\2\2\u0f7b\u0f7e"+
		"\7\u0304\2\2\u0f7c\u0f7e\7\u0305\2\2\u0f7d\u0f76\3\2\2\2\u0f7d\u0f78\3"+
		"\2\2\2\u0f7d\u0f7a\3\2\2\2\u0f7d\u0f7c\3\2\2\2\u0f7e\u0137\3\2\2\2\u0f7f"+
		"\u0f80\7\'\2\2\u0f80\u0f81\7\u01d7\2\2\u0f81\u0f82\7\u00b4\2\2\u0f82\u0f87"+
		"\5\u014a\u00a6\2\u0f83\u0f84\7\u044e\2\2\u0f84\u0f86\5\u014a\u00a6\2\u0f85"+
		"\u0f83\3\2\2\2\u0f86\u0f89\3\2\2\2\u0f87\u0f85\3\2\2\2\u0f87\u0f88\3\2"+
		"\2\2\u0f88\u0f8b\3\2\2\2\u0f89\u0f87\3\2\2\2\u0f8a\u0f8c\5\u0152\u00aa"+
		"\2\u0f8b\u0f8a\3\2\2\2\u0f8b\u0f8c\3\2\2\2\u0f8c\u0139\3\2\2\2\u0f8d\u0f8e"+
		"\7\'\2\2\u0f8e\u0f8f\7\u023c\2\2\u0f8f\u0f90\7\u01aa\2\2\u0f90\u0f95\5"+
		"\u0154\u00ab\2\u0f91\u0f92\7\u044e\2\2\u0f92\u0f94\5\u0154\u00ab\2\u0f93"+
		"\u0f91\3\2\2\2\u0f94\u0f97\3\2\2\2\u0f95\u0f93\3\2\2\2\u0f95\u0f96\3\2"+
		"\2\2\u0f96\u013b\3\2\2\2\u0f97\u0f95\3\2\2\2\u0f98\u0f99\7\u008c\2\2\u0f99"+
		"\u0f9a\t9\2\2\u0f9a\u0f9f\7\u01d6\2\2\u0f9b\u0f9c\7\u00b4\2\2\u0f9c\u0fa0"+
		"\7\u045b\2\2\u0f9d\u0f9e\7\36\2\2\u0f9e\u0fa0\7\u045b\2\2\u0f9f\u0f9b"+
		"\3\2\2\2\u0f9f\u0f9d\3\2\2\2\u0fa0\u013d\3\2\2\2\u0fa1\u0fa2\7\u023d\2"+
		"\2\u0fa2\u0fa3\7\u01d7\2\2\u0fa3\u013f\3\2\2\2\u0fa4\u0fa5\7\u023d\2\2"+
		"\u0fa5\u0fa7\7\u0252\2\2\u0fa6\u0fa8\7\26\2\2\u0fa7\u0fa6\3\2\2\2\u0fa7"+
		"\u0fa8\3\2\2\2\u0fa8\u0faa\3\2\2\2\u0fa9\u0fab\5\u0152\u00aa\2\u0faa\u0fa9"+
		"\3\2\2\2\u0faa\u0fab\3\2\2\2\u0fab\u0141\3\2\2\2\u0fac\u0fad\7\u0261\2"+
		"\2\u0fad\u0fb6\7\u0252\2\2\u0fae\u0fb3\5\u0158\u00ad\2\u0faf\u0fb0\7\u044e"+
		"\2\2\u0fb0\u0fb2\5\u0158\u00ad\2\u0fb1\u0faf\3\2\2\2\u0fb2\u0fb5\3\2\2"+
		"\2\u0fb3\u0fb1\3\2\2\2\u0fb3\u0fb4\3\2\2\2\u0fb4\u0fb7\3\2\2\2\u0fb5\u0fb3"+
		"\3\2\2\2\u0fb6\u0fae\3\2\2\2\u0fb6\u0fb7\3\2\2\2\u0fb7\u0fba\3\2\2\2\u0fb8"+
		"\u0fb9\7\u0283\2\2\u0fb9\u0fbb\5\u015a\u00ae\2\u0fba\u0fb8\3\2\2\2\u0fba"+
		"\u0fbb\3\2\2\2\u0fbb\u0fbf\3\2\2\2\u0fbc\u0fbe\5\u015c\u00af\2\u0fbd\u0fbc"+
		"\3\2\2\2\u0fbe\u0fc1\3\2\2\2\u0fbf\u0fbd\3\2\2\2\u0fbf\u0fc0\3\2\2\2\u0fc0"+
		"\u0fc3\3\2\2\2\u0fc1\u0fbf\3\2\2\2\u0fc2\u0fc4\5\u0152\u00aa\2\u0fc3\u0fc2"+
		"\3\2\2\2\u0fc3\u0fc4\3\2\2\2\u0fc4\u0143\3\2\2\2\u0fc5\u0fc6\7\u0267\2"+
		"\2\u0fc6\u0fcf\7\u0252\2\2\u0fc7\u0fcc\5\u0158\u00ad\2\u0fc8\u0fc9\7\u044e"+
		"\2\2\u0fc9\u0fcb\5\u0158\u00ad\2\u0fca\u0fc8\3\2\2\2\u0fcb\u0fce\3\2\2"+
		"\2\u0fcc\u0fca\3\2\2\2\u0fcc\u0fcd\3\2\2\2\u0fcd\u0fd0\3\2\2\2\u0fce\u0fcc"+
		"\3\2\2\2\u0fcf\u0fc7\3\2\2\2\u0fcf\u0fd0\3\2\2\2\u0fd0\u0145\3\2\2\2\u0fd1"+
		"\u0fd2\7\u0261\2\2\u0fd2\u0fd3\7\u01b6\2\2\u0fd3\u0147\3\2\2\2\u0fd4\u0fd5"+
		"\7\u0267\2\2\u0fd5\u0fd6\7\u01b6\2\2\u0fd6\u0149\3\2\2\2\u0fd7\u0fd8\5"+
		"\u014c\u00a7\2\u0fd8\u0fd9\7\u0443\2\2\u0fd9\u0fda\7\u045b\2\2\u0fda\u0ff5"+
		"\3\2\2\2\u0fdb\u0fdc\5\u014e\u00a8\2\u0fdc\u0fdd\7\u0443\2\2\u0fdd\u0fde"+
		"\5\u022c\u0117\2\u0fde\u0ff5\3\2\2\2\u0fdf\u0fe0\5\u0150\u00a9\2\u0fe0"+
		"\u0fe1\7\u0443\2\2\u0fe1\u0fe2\t\30\2\2\u0fe2\u0ff5\3\2\2\2\u0fe3\u0fe4"+
		"\7\u01db\2\2\u0fe4\u0fe5\7\u0443\2\2\u0fe5\u0ff5\7\u045e\2\2\u0fe6\u0fe7"+
		"\7\u01bd\2\2\u0fe7\u0fe8\7\u0443\2\2\u0fe8\u0ff1\7\u044c\2";
	private static final String _serializedATNSegment2 =
		"\2\u0fe9\u0fee\5\u0226\u0114\2\u0fea\u0feb\7\u044e\2\2\u0feb\u0fed\5\u0226"+
		"\u0114\2\u0fec\u0fea\3\2\2\2\u0fed\u0ff0\3\2\2\2\u0fee\u0fec\3\2\2\2\u0fee"+
		"\u0fef\3\2\2\2\u0fef\u0ff2\3\2\2\2\u0ff0\u0fee\3\2\2\2\u0ff1\u0fe9\3\2"+
		"\2\2\u0ff1\u0ff2\3\2\2\2\u0ff2\u0ff3\3\2\2\2\u0ff3\u0ff5\7\u044d\2\2\u0ff4"+
		"\u0fd7\3\2\2\2\u0ff4\u0fdb\3\2\2\2\u0ff4\u0fdf\3\2\2\2\u0ff4\u0fe3\3\2"+
		"\2\2\u0ff4\u0fe6\3\2\2\2\u0ff5\u014b\3\2\2\2\u0ff6\u0ff7\t:\2\2\u0ff7"+
		"\u014d\3\2\2\2\u0ff8\u0ff9\t;\2\2\u0ff9\u014f\3\2\2\2\u0ffa\u0ffb\t<\2"+
		"\2\u0ffb\u0151\3\2\2\2\u0ffc\u0ffd\7N\2\2\u0ffd\u0ffe\7\u0165\2\2\u0ffe"+
		"\u0fff\7\u045b\2\2\u0fff\u0153\3\2\2\2\u1000\u1001\7\u0235\2\2\u1001\u1002"+
		"\7\u0443\2\2\u1002\u1003\7\u044c\2\2\u1003\u1004\5\u0246\u0124\2\u1004"+
		"\u1005\7\u044d\2\2\u1005\u1032\3\2\2\2\u1006\u1007\7\u0237\2\2\u1007\u1008"+
		"\7\u0443\2\2\u1008\u1009\7\u044c\2\2\u1009\u100a\5\u0246\u0124\2\u100a"+
		"\u100b\7\u044d\2\2\u100b\u1032\3\2\2\2\u100c\u100d\7\u0236\2\2\u100d\u100e"+
		"\7\u0443\2\2\u100e\u100f\7\u044c\2\2\u100f\u1010\5\u0248\u0125\2\u1010"+
		"\u1011\7\u044d\2\2\u1011\u1032\3\2\2\2\u1012\u1013\7\u0238\2\2\u1013\u1014"+
		"\7\u0443\2\2\u1014\u1015\7\u044c\2\2\u1015\u1016\5\u0248\u0125\2\u1016"+
		"\u1017\7\u044d\2\2\u1017\u1032\3\2\2\2\u1018\u1019\7\u023a\2\2\u1019\u101a"+
		"\7\u0443\2\2\u101a\u101b\7\u044c\2\2\u101b\u101c\5\u0252\u012a\2\u101c"+
		"\u101d\7\u044d\2\2\u101d\u1032\3\2\2\2\u101e\u101f\7\u023b\2\2\u101f\u1020"+
		"\7\u0443\2\2\u1020\u1021\7\u044c\2\2\u1021\u1022\5\u0252\u012a\2\u1022"+
		"\u1023\7\u044d\2\2\u1023\u1032\3\2\2\2\u1024\u1025\7\u0239\2\2\u1025\u1026"+
		"\7\u0443\2\2\u1026\u1027\7\u044c\2\2\u1027\u102c\5\u0156\u00ac\2\u1028"+
		"\u1029\7\u044e\2\2\u1029\u102b\5\u0156\u00ac\2\u102a\u1028\3\2\2\2\u102b"+
		"\u102e\3\2\2\2\u102c\u102a\3\2\2\2\u102c\u102d\3\2\2\2\u102d\u102f\3\2"+
		"\2\2\u102e\u102c\3\2\2\2\u102f\u1030\7\u044d\2\2\u1030\u1032\3\2\2\2\u1031"+
		"\u1000\3\2\2\2\u1031\u1006\3\2\2\2\u1031\u100c\3\2\2\2\u1031\u1012\3\2"+
		"\2\2\u1031\u1018\3\2\2\2\u1031\u101e\3\2\2\2\u1031\u1024\3\2\2\2\u1032"+
		"\u0155\3\2\2\2\u1033\u1034\7\u044c\2\2\u1034\u1035\5\u020e\u0108\2\u1035"+
		"\u1036\7\u044e\2\2\u1036\u1037\5\u020e\u0108\2\u1037\u1038\7\u044d\2\2"+
		"\u1038\u0157\3\2\2\2\u1039\u103a\t=\2\2\u103a\u0159\3\2\2\2\u103b\u103c"+
		"\t>\2\2\u103c\u103d\7\u0443\2\2\u103d\u104e\5\u015e\u00b0\2\u103e\u103f"+
		"\7\u01dd\2\2\u103f\u1040\7\u0443\2\2\u1040\u1041\7\u045b\2\2\u1041\u1042"+
		"\7\u044e\2\2\u1042\u1043\7\u01de\2\2\u1043\u1044\7\u0443\2\2\u1044\u104e"+
		"\5\u022c\u0117\2\u1045\u1046\7\u022f\2\2\u1046\u1047\7\u0443\2\2\u1047"+
		"\u1048\7\u045b\2\2\u1048\u1049\7\u044e\2\2\u1049\u104a\7\u0230\2\2\u104a"+
		"\u104b\7\u0443\2\2\u104b\u104e\5\u022c\u0117\2\u104c\u104e\7\u025b\2\2"+
		"\u104d\u103b\3\2\2\2\u104d\u103e\3\2\2\2\u104d\u1045\3\2\2\2\u104d\u104c"+
		"\3\2\2\2\u104e\u015b\3\2\2\2\u104f\u1050\7\u0285\2\2\u1050\u1051\7\u0443"+
		"\2\2\u1051\u105c\7\u045b\2\2\u1052\u1053\7\u0219\2\2\u1053\u1054\7\u0443"+
		"\2\2\u1054\u105c\7\u045b\2\2\u1055\u1056\7\u0187\2\2\u1056\u1057\7\u0443"+
		"\2\2\u1057\u105c\7\u045b\2\2\u1058\u1059\7\u021c\2\2\u1059\u105a\7\u0443"+
		"\2\2\u105a\u105c\7\u045b\2\2\u105b\u104f\3\2\2\2\u105b\u1052\3\2\2\2\u105b"+
		"\u1055\3\2\2\2\u105b\u1058\3\2\2\2\u105c\u015d\3\2\2\2\u105d\u1062\5\u021e"+
		"\u0110\2\u105e\u105f\7\u044e\2\2\u105f\u1061\5\u021e\u0110\2\u1060\u105e"+
		"\3\2\2\2\u1061\u1064\3\2\2\2\u1062\u1060\3\2\2\2\u1062\u1063\3\2\2\2\u1063"+
		"\u1067\3\2\2\2\u1064\u1062\3\2\2\2\u1065\u1067\7\u045b\2\2\u1066\u105d"+
		"\3\2\2\2\u1066\u1065\3\2\2\2\u1067\u015f\3\2\2\2\u1068\u1069\7\u0295\2"+
		"\2\u1069\u106a\t?\2\2\u106a\u106c\5\u0220\u0111\2\u106b\u106d\t@\2\2\u106c"+
		"\u106b\3\2\2\2\u106c\u106d\3\2\2\2\u106d\u0161\3\2\2\2\u106e\u106f\7\u0295"+
		"\2\2\u106f\u1070\7\u0195\2\2\u1070\u1076\5\u0220\u0111\2\u1071\u1074\7"+
		"\u026f\2\2\u1072\u1073\7N\2\2\u1073\u1075\7\u01f7\2\2\u1074\u1072\3\2"+
		"\2\2\u1074\u1075\3\2\2\2\u1075\u1077\3\2\2\2\u1076\u1071\3\2\2\2\u1076"+
		"\u1077\3\2\2\2\u1077\u0163\3\2\2\2\u1078\u1079\7\u0295\2\2\u1079\u107a"+
		"\7\u0221\2\2\u107a\u107b\5\u0220\u0111\2\u107b\u0165\3\2\2\2\u107c\u107d"+
		"\7\u0295\2\2\u107d\u107e\7\u0172\2\2\u107e\u1081\5\u0220\u0111\2\u107f"+
		"\u1080\7\u020c\2\2\u1080\u1082\7\u021a\2\2\u1081\u107f\3\2\2\2\u1081\u1082"+
		"\3\2\2\2\u1082\u0167\3\2\2\2\u1083\u1084\7\u0295\2\2\u1084\u1085\7\u0243"+
		"\2\2\u1085\u1086\5\u0220\u0111\2\u1086\u0169\3\2\2\2\u1087\u1088\7\u0295"+
		"\2\2\u1088\u108b\7\u022b\2\2\u1089\u108a\7/\2\2\u108a\u108c\5\u0220\u0111"+
		"\2\u108b\u1089\3\2\2\2\u108b\u108c\3\2\2\2\u108c\u016b\3\2\2\2\u108d\u108e"+
		"\7\u0221\2\2\u108e\u108f\5\u0226\u0114\2\u108f\u1092\7Q\2\2\u1090\u1093"+
		"\7\u045b\2\2\u1091\u1093\7\u0467\2\2\u1092\u1090\3\2\2\2\u1092\u1091\3"+
		"\2\2\2\u1093\u016d\3\2\2\2\u1094\u1095\7\u02a6\2\2\u1095\u1098\5\u0226"+
		"\u0114\2\u1096\u1097\7\u00c0\2\2\u1097\u1099\5\u0254\u012b\2\u1098\u1096"+
		"\3\2\2\2\u1098\u1099\3\2\2\2\u1099\u016f\3\2\2\2\u109a\u109b\tA\2\2\u109b"+
		"\u109c\7\u0221\2\2\u109c\u109d\5\u0226\u0114\2\u109d\u0171\3\2\2\2\u109e"+
		"\u10a1\5\u0174\u00bb\2\u109f\u10a1\5\6\4\2\u10a0\u109e\3\2\2\2\u10a0\u109f"+
		"\3\2\2\2\u10a1\u0173\3\2\2\2\u10a2\u10a3\5\u0226\u0114\2\u10a3\u10a4\7"+
		"\u0457\2\2\u10a4\u10a6\3\2\2\2\u10a5\u10a2\3\2\2\2\u10a5\u10a6\3\2\2\2"+
		"\u10a6\u10a7\3\2\2\2\u10a7\u10ce\7\u015a\2\2\u10a8\u10a9\5\u0188\u00c5"+
		"\2\u10a9\u10aa\7\u044f\2\2\u10aa\u10ac\3\2\2\2\u10ab\u10a8\3\2\2\2\u10ac"+
		"\u10af\3\2\2\2\u10ad\u10ab\3\2\2\2\u10ad\u10ae\3\2\2\2\u10ae\u10b5\3\2"+
		"\2\2\u10af\u10ad\3\2\2\2\u10b0\u10b1\5\u018a\u00c6\2\u10b1\u10b2\7\u044f"+
		"\2\2\u10b2\u10b4\3\2\2\2\u10b3\u10b0\3\2\2\2\u10b4\u10b7\3\2\2\2\u10b5"+
		"\u10b3\3\2\2\2\u10b5\u10b6\3\2\2\2\u10b6\u10bd\3\2\2\2\u10b7\u10b5\3\2"+
		"\2\2\u10b8\u10b9\5\u018c\u00c7\2\u10b9\u10ba\7\u044f\2\2\u10ba\u10bc\3"+
		"\2\2\2\u10bb\u10b8\3\2\2\2\u10bc\u10bf\3\2\2\2\u10bd\u10bb\3\2\2\2\u10bd"+
		"\u10be\3\2\2\2\u10be\u10c5\3\2\2\2\u10bf\u10bd\3\2\2\2\u10c0\u10c1\5\u018e"+
		"\u00c8\2\u10c1\u10c2\7\u044f\2\2\u10c2\u10c4\3\2\2\2\u10c3\u10c0\3\2\2"+
		"\2\u10c4\u10c7\3\2\2\2\u10c5\u10c3\3\2\2\2\u10c5\u10c6\3\2\2\2\u10c6\u10cb"+
		"\3\2\2\2\u10c7\u10c5\3\2\2\2\u10c8\u10ca\5\u0192\u00ca\2\u10c9\u10c8\3"+
		"\2\2\2\u10ca\u10cd\3\2\2\2\u10cb\u10c9\3\2\2\2\u10cb\u10cc\3\2\2\2\u10cc"+
		"\u10cf\3\2\2\2\u10cd\u10cb\3\2\2\2\u10ce\u10ad\3\2\2\2\u10ce\u10cf\3\2"+
		"\2\2\u10cf\u10d0\3\2\2\2\u10d0\u10d2\7\u0195\2\2\u10d1\u10d3\5\u0226\u0114"+
		"\2\u10d2\u10d1\3\2\2\2\u10d2\u10d3\3\2\2\2\u10d3\u0175\3\2\2\2\u10d4\u10d7"+
		"\7%\2\2\u10d5\u10d8\5\u0226\u0114\2\u10d6\u10d8\5\u0288\u0145\2\u10d7"+
		"\u10d5\3\2\2\2\u10d7\u10d6\3\2\2\2\u10d7\u10d8\3\2\2\2\u10d8\u10da\3\2"+
		"\2\2\u10d9\u10db\5\u0194\u00cb\2\u10da\u10d9\3\2\2\2\u10db\u10dc\3\2\2"+
		"\2\u10dc\u10da\3\2\2\2\u10dc\u10dd\3\2\2\2\u10dd\u10e4\3\2\2\2\u10de\u10e0"+
		"\7C\2\2\u10df\u10e1\5\u0192\u00ca\2\u10e0\u10df\3\2\2\2\u10e1\u10e2\3"+
		"\2\2\2\u10e2\u10e0\3\2\2\2\u10e2\u10e3\3\2\2\2\u10e3\u10e5\3\2\2\2\u10e4"+
		"\u10de\3\2\2\2\u10e4\u10e5\3\2\2\2\u10e5\u10e6\3\2\2\2\u10e6\u10e7\7\u0195"+
		"\2\2\u10e7\u10e8\7%\2\2\u10e8\u0177\3\2\2\2\u10e9\u10ea\7Z\2\2\u10ea\u10eb"+
		"\5\u0288\u0145\2\u10eb\u10ed\7\u00b3\2\2\u10ec\u10ee\5\u0192\u00ca\2\u10ed"+
		"\u10ec\3\2\2\2\u10ee\u10ef\3\2\2\2\u10ef\u10ed\3\2\2\2\u10ef\u10f0\3\2"+
		"\2\2\u10f0\u10f4\3\2\2\2\u10f1\u10f3\5\u0196\u00cc\2\u10f2\u10f1\3\2\2"+
		"\2\u10f3\u10f6\3\2\2\2\u10f4\u10f2\3\2\2\2\u10f4\u10f5\3\2\2\2\u10f5\u10fd"+
		"\3\2\2\2\u10f6\u10f4\3\2\2\2\u10f7\u10f9\7C\2\2\u10f8\u10fa\5\u0192\u00ca"+
		"\2\u10f9\u10f8\3\2\2\2\u10fa\u10fb\3\2\2\2\u10fb\u10f9\3\2\2\2\u10fb\u10fc"+
		"\3\2\2\2\u10fc\u10fe\3\2\2\2\u10fd\u10f7\3\2\2\2\u10fd\u10fe\3\2\2\2\u10fe"+
		"\u10ff\3\2\2\2\u10ff\u1100\7\u0195\2\2\u1100\u1101\7Z\2\2\u1101\u0179"+
		"\3\2\2\2\u1102\u1103\7e\2\2\u1103\u1104\5\u0226\u0114\2\u1104\u017b\3"+
		"\2\2\2\u1105\u1106\7k\2\2\u1106\u1107\5\u0226\u0114\2\u1107\u017d\3\2"+
		"\2\2\u1108\u1109\5\u0226\u0114\2\u1109\u110a\7\u0457\2\2\u110a\u110c\3"+
		"\2\2\2\u110b\u1108\3\2\2\2\u110b\u110c\3\2\2\2\u110c\u110d\3\2\2\2\u110d"+
		"\u110f\7s\2\2\u110e\u1110\5\u0192\u00ca\2\u110f\u110e\3\2\2\2\u1110\u1111"+
		"\3\2\2\2\u1111\u110f\3\2\2\2\u1111\u1112\3\2\2\2\u1112\u1113\3\2\2\2\u1113"+
		"\u1114\7\u0195\2\2\u1114\u1116\7s\2\2\u1115\u1117\5\u0226\u0114\2\u1116"+
		"\u1115\3\2\2\2\u1116\u1117\3\2\2\2\u1117\u017f\3\2\2\2\u1118\u1119\5\u0226"+
		"\u0114\2\u1119\u111a\7\u0457\2\2\u111a\u111c\3\2\2\2\u111b\u1118\3\2\2"+
		"\2\u111b\u111c\3\2\2\2\u111c\u111d\3\2\2\2\u111d\u111f\7\u0094\2\2\u111e"+
		"\u1120\5\u0192\u00ca\2\u111f\u111e\3\2\2\2\u1120\u1121\3\2\2\2\u1121\u111f"+
		"\3\2\2\2\u1121\u1122\3\2\2\2\u1122\u1123\3\2\2\2\u1123\u1124\7\u0283\2"+
		"\2\u1124\u1125\5\u0288\u0145\2\u1125\u1126\7\u0195\2\2\u1126\u1128\7\u0094"+
		"\2\2\u1127\u1129\5\u0226\u0114\2\u1128\u1127\3\2\2\2\u1128\u1129\3\2\2"+
		"\2\u1129\u0181\3\2\2\2\u112a\u112b\7\u009a\2\2\u112b\u112c\5\u0288\u0145"+
		"\2\u112c\u0183\3\2\2\2\u112d\u112e\5\u0226\u0114\2\u112e\u112f\7\u0457"+
		"\2\2\u112f\u1131\3\2\2\2\u1130\u112d\3\2\2\2\u1130\u1131\3\2\2\2\u1131"+
		"\u1132\3\2\2\2\u1132\u1133\7\u00c4\2\2\u1133\u1134\5\u0288\u0145\2\u1134"+
		"\u1136\7\u018f\2\2\u1135\u1137\5\u0192\u00ca\2\u1136\u1135\3\2\2\2\u1137"+
		"\u1138\3\2\2\2\u1138\u1136\3\2\2\2\u1138\u1139\3\2\2\2\u1139\u113a\3\2"+
		"\2\2\u113a\u113b\7\u0195\2\2\u113b\u113d\7\u00c4\2\2\u113c\u113e\5\u0226"+
		"\u0114\2\u113d\u113c\3\2\2\2\u113d\u113e\3\2\2\2\u113e\u0185\3\2\2\2\u113f"+
		"\u1140\7\u016b\2\2\u1140\u114f\5\u0226\u0114\2\u1141\u1146\7M\2\2\u1142"+
		"\u1144\7\u0202\2\2\u1143\u1142\3\2\2\2\u1143\u1144\3\2\2\2\u1144\u1145"+
		"\3\2\2\2\u1145\u1147\7Q\2\2\u1146\u1143\3\2\2\2\u1146\u1147\3\2\2\2\u1147"+
		"\u1148\3\2\2\2\u1148\u1149\5\u0226\u0114\2\u1149\u114a\7c\2\2\u114a\u114b"+
		"\5\u0246\u0124\2\u114b\u114f\3\2\2\2\u114c\u114d\7\u020f\2\2\u114d\u114f"+
		"\5\u0226\u0114\2\u114e\u113f\3\2\2\2\u114e\u1141\3\2\2\2\u114e\u114c\3"+
		"\2\2\2\u114f\u0187\3\2\2\2\u1150\u1151\7\67\2\2\u1151\u1152\5\u0246\u0124"+
		"\2\u1152\u1155\5\u023a\u011e\2\u1153\u1154\78\2\2\u1154\u1156\5\u0288"+
		"\u0145\2\u1155\u1153\3\2\2\2\u1155\u1156\3\2\2\2\u1156\u0189\3\2\2\2\u1157"+
		"\u1158\7\67\2\2\u1158\u1159\5\u0226\u0114\2\u1159\u115a\7,\2\2\u115a\u1161"+
		"\7N\2\2\u115b\u1162\5\u022c\u0117\2\u115c\u115e\7\u00a8\2\2\u115d\u115f"+
		"\7\u0289\2\2\u115e\u115d\3\2\2\2\u115e\u115f\3\2\2\2\u115f\u1160\3\2\2"+
		"\2\u1160\u1162\7\u045b\2\2\u1161\u115b\3\2\2\2\u1161\u115c\3\2\2\2\u1162"+
		"\u018b\3\2\2\2\u1163\u1164\7\67\2\2\u1164\u1165\5\u0226\u0114\2\u1165"+
		"\u1166\7\64\2\2\u1166\u1167\7N\2\2\u1167\u1168\5\u00b6\\\2\u1168\u018d"+
		"\3\2\2\2\u1169\u116a\7\67\2\2\u116a\u116b\tB\2\2\u116b\u116c\7\u01b7\2"+
		"\2\u116c\u116d\7N\2\2\u116d\u1172\5\u0190\u00c9\2\u116e\u116f\7\u044e"+
		"\2\2\u116f\u1171\5\u0190\u00c9\2\u1170\u116e\3\2\2\2\u1171\u1174\3\2\2"+
		"\2\u1172\u1170\3\2\2\2\u1172\u1173\3\2\2\2\u1173\u1175\3\2\2\2\u1174\u1172"+
		"\3\2\2\2\u1175\u1176\5\u0172\u00ba\2\u1176\u018f\3\2\2\2\u1177\u1183\5"+
		"\u022c\u0117\2\u1178\u117a\7\u00a8\2\2\u1179\u117b\7\u0289\2\2\u117a\u1179"+
		"\3\2\2\2\u117a\u117b\3\2\2\2\u117b\u117c\3\2\2\2\u117c\u1183\7\u045b\2"+
		"\2\u117d\u1183\5\u0226\u0114\2\u117e\u1183\7\u00a9\2\2\u117f\u1180\7{"+
		"\2\2\u1180\u1183\7\u01b0\2\2\u1181\u1183\7\u00a7\2\2\u1182\u1177\3\2\2"+
		"\2\u1182\u1178\3\2\2\2\u1182\u117d\3\2\2\2\u1182\u117e\3\2\2\2\u1182\u117f"+
		"\3\2\2\2\u1182\u1181\3\2\2\2\u1183\u0191\3\2\2\2\u1184\u1187\5\24\13\2"+
		"\u1185\u1187\5\6\4\2\u1186\u1184\3\2\2\2\u1186\u1185\3\2\2\2\u1187\u1188"+
		"\3\2\2\2\u1188\u1189\7\u044f\2\2\u1189\u0193\3\2\2\2\u118a\u118d\7\u00c2"+
		"\2\2\u118b\u118e\5\u0238\u011d\2\u118c\u118e\5\u0288\u0145\2\u118d\u118b"+
		"\3\2\2\2\u118d\u118c\3\2\2\2\u118e\u118f\3\2\2\2\u118f\u1191\7\u00b3\2"+
		"\2\u1190\u1192\5\u0192\u00ca\2\u1191\u1190\3\2\2\2\u1192\u1193\3\2\2\2"+
		"\u1193\u1191\3\2\2\2\u1193\u1194\3\2\2\2\u1194\u0195\3\2\2\2\u1195\u1196"+
		"\7D\2\2\u1196\u1197\5\u0288\u0145\2\u1197\u1199\7\u00b3\2\2\u1198\u119a"+
		"\5\u0192\u00ca\2\u1199\u1198\3\2\2\2\u119a\u119b\3\2\2\2\u119b\u1199\3"+
		"\2\2\2\u119b\u119c\3\2\2\2\u119c\u0197\3\2\2\2\u119d\u119e\7\27\2\2\u119e"+
		"\u119f\7\u0285\2\2\u119f\u11a4\5\u01ac\u00d7\2\u11a0\u11a1\7\u044e\2\2"+
		"\u11a1\u11a3\5\u01ac\u00d7\2\u11a2\u11a0\3\2\2\2\u11a3\u11a6\3\2\2\2\u11a4"+
		"\u11a2\3\2\2\2\u11a4\u11a5\3\2\2\2\u11a5\u11d4\3\2\2\2\u11a6\u11a4\3\2"+
		"\2\2\u11a7\u11a8\7\27\2\2\u11a8\u11aa\7\u0285\2\2\u11a9\u11ab\5\u025c"+
		"\u012f\2\u11aa\u11a9\3\2\2\2\u11aa\u11ab\3\2\2\2\u11ab\u11ac\3\2\2\2\u11ac"+
		"\u11b1\5\u01ae\u00d8\2\u11ad\u11ae\7\u044e\2\2\u11ae\u11b0\5\u01ae\u00d8"+
		"\2\u11af\u11ad\3\2\2\2\u11b0\u11b3\3\2\2\2\u11b1\u11af\3\2\2\2\u11b1\u11b2"+
		"\3\2\2\2\u11b2\u11c2\3\2\2\2\u11b3\u11b1\3\2\2\2\u11b4\u11c0\7\u0096\2"+
		"\2\u11b5\u11c1\7\u0205\2\2\u11b6\u11bd\5\u01b0\u00d9\2\u11b7\u11b9\7\32"+
		"\2\2\u11b8\u11b7\3\2\2\2\u11b8\u11b9\3\2\2\2\u11b9\u11ba\3\2\2\2\u11ba"+
		"\u11bc\5\u01b0\u00d9\2\u11bb\u11b8\3\2\2\2\u11bc\u11bf\3\2\2\2\u11bd\u11bb"+
		"\3\2\2\2\u11bd\u11be\3\2\2\2\u11be\u11c1\3\2\2\2\u11bf\u11bd\3\2\2\2\u11c0"+
		"\u11b5\3\2\2\2\u11c0\u11b6\3\2\2\2\u11c1\u11c3\3\2\2\2\u11c2\u11b4\3\2"+
		"\2\2\u11c2\u11c3\3\2\2\2\u11c3\u11ca\3\2\2\2\u11c4\u11c6\7\u00c5\2\2\u11c5"+
		"\u11c7\5\u01b2\u00da\2\u11c6\u11c5\3\2\2\2\u11c7\u11c8\3\2\2\2\u11c8\u11c6"+
		"\3\2\2\2\u11c8\u11c9\3\2\2\2\u11c9\u11cb\3\2\2\2\u11ca\u11c4\3\2\2\2\u11ca"+
		"\u11cb\3\2\2\2\u11cb\u11d0\3\2\2\2\u11cc\u11cf\5\u01b4\u00db\2\u11cd\u11cf"+
		"\5\u01b6\u00dc\2\u11ce\u11cc\3\2\2\2\u11ce\u11cd\3\2\2\2\u11cf\u11d2\3"+
		"\2\2\2\u11d0\u11ce\3\2\2\2\u11d0\u11d1\3\2\2\2\u11d1\u11d4\3\2\2\2\u11d2"+
		"\u11d0\3\2\2\2\u11d3\u119d\3\2\2\2\u11d3\u11a7\3\2\2\2\u11d4\u0199\3\2"+
		"\2\2\u11d5\u11d6\7\60\2\2\u11d6\u11d7\7\u0285\2\2\u11d7\u11dc\5\u01ae"+
		"\u00d8\2\u11d8\u11d9\7\u044e\2\2\u11d9\u11db\5\u01ae\u00d8\2\u11da\u11d8"+
		"\3\2\2\2\u11db\u11de\3\2\2\2\u11dc\u11da\3\2\2\2\u11dc\u11dd\3\2\2\2\u11dd"+
		"\u120c\3\2\2\2\u11de\u11dc\3\2\2\2\u11df\u11e0\7\60\2\2\u11e0\u11e2\7"+
		"\u0285\2\2\u11e1\u11e3\5\u025e\u0130\2\u11e2\u11e1\3\2\2\2\u11e2\u11e3"+
		"\3\2\2\2\u11e3\u11e4\3\2\2\2\u11e4\u11e9\5\u01ae\u00d8\2\u11e5\u11e6\7"+
		"\u044e\2\2\u11e6\u11e8\5\u01ae\u00d8\2\u11e7\u11e5\3\2\2\2\u11e8\u11eb"+
		"\3\2\2\2\u11e9\u11e7\3\2\2\2\u11e9\u11ea\3\2\2\2\u11ea\u11fa\3\2\2\2\u11eb"+
		"\u11e9\3\2\2\2\u11ec\u11f8\7\u0096\2\2\u11ed\u11f9\7\u0205\2\2\u11ee\u11f5"+
		"\5\u01b0\u00d9\2\u11ef\u11f1\7\32\2\2\u11f0\u11ef\3\2\2\2\u11f0\u11f1"+
		"\3\2\2\2\u11f1\u11f2\3\2\2\2\u11f2\u11f4\5\u01b0\u00d9\2\u11f3\u11f0\3"+
		"\2\2\2\u11f4\u11f7\3\2\2\2\u11f5\u11f3\3\2\2\2\u11f5\u11f6\3\2\2\2\u11f6"+
		"\u11f9\3\2\2\2\u11f7\u11f5\3\2\2\2\u11f8\u11ed\3\2\2\2\u11f8\u11ee\3\2"+
		"\2\2\u11f9\u11fb\3\2\2\2\u11fa\u11ec\3\2\2\2\u11fa\u11fb\3\2\2\2\u11fb"+
		"\u1202\3\2\2\2\u11fc\u11fe\7\u00c5\2\2\u11fd\u11ff\5\u01b2\u00da\2\u11fe"+
		"\u11fd\3\2\2\2\u11ff\u1200\3\2\2\2\u1200\u11fe\3\2\2\2\u1200\u1201\3\2"+
		"\2\2\u1201\u1203\3\2\2\2\u1202\u11fc\3\2\2\2\u1202\u1203\3\2\2\2\u1203"+
		"\u1208\3\2\2\2\u1204\u1207\5\u01b4\u00db\2\u1205\u1207\5\u01b6\u00dc\2"+
		"\u1206\u1204\3\2\2\2\u1206\u1205\3\2\2\2\u1207\u120a\3\2\2\2\u1208\u1206"+
		"\3\2\2\2\u1208\u1209\3\2\2\2\u1209\u120c\3\2\2\2\u120a\u1208\3\2\2\2\u120b"+
		"\u11d5\3\2\2\2\u120b\u11df\3\2\2\2\u120c\u019b\3\2\2\2\u120d\u120e\7A"+
		"\2\2\u120e\u1210\7\u0285\2\2\u120f\u1211\5\u025c\u012f\2\u1210\u120f\3"+
		"\2\2\2\u1210\u1211\3\2\2\2\u1211\u1212\3\2\2\2\u1212\u1217\5\u0214\u010b"+
		"\2\u1213\u1214\7\u044e\2\2\u1214\u1216\5\u0214\u010b\2\u1215\u1213\3\2"+
		"\2\2\u1216\u1219\3\2\2\2\u1217\u1215\3\2\2\2\u1217\u1218\3\2\2\2\u1218"+
		"\u019d\3\2\2\2\u1219\u1217\3\2\2\2\u121a\u121b\7U\2\2\u121b\u1220\5\u01b8"+
		"\u00dd\2\u121c\u121d\7\u044e\2\2\u121d\u121f\5\u01b8\u00dd\2\u121e\u121c"+
		"\3\2\2\2\u121f\u1222\3\2\2\2\u1220\u121e\3\2\2\2\u1220\u1221\3\2\2\2\u1221"+
		"\u1223\3\2\2\2\u1222\u1220\3\2\2\2\u1223\u1225\7\177\2\2\u1224\u1226\t"+
		"C\2\2\u1225\u1224\3\2\2\2\u1225\u1226\3\2\2\2\u1226\u1227\3\2\2\2\u1227"+
		"\u1228\5\u01bc\u00df\2\u1228\u1229\7\u00b4\2\2\u1229\u122e\5\u01ae\u00d8"+
		"\2\u122a\u122b\7\u044e\2\2\u122b\u122d\5\u01ae\u00d8\2\u122c\u122a\3\2"+
		"\2\2\u122d\u1230\3\2\2\2\u122e\u122c\3\2\2\2\u122e\u122f\3\2\2\2\u122f"+
		"\u123f\3\2\2\2\u1230\u122e\3\2\2\2\u1231\u123d\7\u0096\2\2\u1232\u123e"+
		"\7\u0205\2\2\u1233\u123a\5\u01b0\u00d9\2\u1234\u1236\7\32\2\2\u1235\u1234"+
		"\3\2\2\2\u1235\u1236\3\2\2\2\u1236\u1237\3\2\2\2\u1237\u1239\5\u01b0\u00d9"+
		"\2\u1238\u1235\3\2\2\2\u1239\u123c\3\2\2\2\u123a\u1238\3\2\2\2\u123a\u123b"+
		"\3\2\2\2\u123b\u123e\3\2\2\2\u123c\u123a\3\2\2\2\u123d\u1232\3\2\2\2\u123d"+
		"\u1233\3\2\2\2\u123e\u1240\3\2\2\2\u123f\u1231\3\2\2\2\u123f\u1240\3\2"+
		"\2\2\u1240\u124a\3\2\2\2\u1241\u1247\7\u00c5\2\2\u1242\u1243\7U\2\2\u1243"+
		"\u1246\7\u0081\2\2\u1244\u1246\5\u01b2\u00da\2\u1245\u1242\3\2\2\2\u1245"+
		"\u1244\3\2\2\2\u1246\u1249\3\2\2\2\u1247\u1245\3\2\2\2\u1247\u1248\3\2"+
		"\2\2\u1248\u124b\3\2\2\2\u1249\u1247\3\2\2\2\u124a\u1241\3\2\2\2\u124a"+
		"\u124b\3\2\2\2\u124b\u1252\3\2\2\2\u124c\u124d\7\34\2\2\u124d\u124e\5"+
		"\u0214\u010b\2\u124e\u124f\7\u00c5\2\2\u124f\u1250\7\u0242\2\2\u1250\u1251"+
		"\5\u01a0\u00d1\2\u1251\u1253\3\2\2\2\u1252\u124c\3\2\2\2\u1252\u1253\3"+
		"\2\2\2\u1253\u1272\3\2\2\2\u1254\u1255\7U\2\2\u1255\u125a\5\u0226\u0114"+
		"\2\u1256\u1257\7\u044e\2\2\u1257\u1259\5\u0226\u0114\2\u1258\u1256\3\2"+
		"\2\2\u1259\u125c\3\2\2\2\u125a\u1258\3\2\2\2\u125a\u125b\3\2\2\2\u125b"+
		"\u125d\3\2\2\2\u125c\u125a\3\2\2\2\u125d\u1260\7\u00b4\2\2\u125e\u1261"+
		"\5\u0214\u010b\2\u125f\u1261\5\u0226\u0114\2\u1260\u125e\3\2\2\2\u1260"+
		"\u125f\3\2\2\2\u1261\u1269\3\2\2\2\u1262\u1265\7\u044e\2\2\u1263\u1266"+
		"\5\u0214\u010b\2\u1264\u1266\5\u0226\u0114\2\u1265\u1263\3\2\2\2\u1265"+
		"\u1264\3\2\2\2\u1266\u1268\3\2\2\2\u1267\u1262\3\2\2\2\u1268\u126b\3\2"+
		"\2\2\u1269\u1267\3\2\2\2\u1269\u126a\3\2\2\2\u126a\u126f\3\2\2\2\u126b"+
		"\u1269\3\2\2\2\u126c\u126d\7\u00c5\2\2\u126d\u126e\7\u046a\2\2\u126e\u1270"+
		"\7\u0081\2\2\u126f\u126c\3\2\2\2\u126f\u1270\3\2\2\2\u1270\u1272\3\2\2"+
		"\2\u1271\u121a\3\2\2\2\u1271\u1254\3\2\2\2\u1272\u019f\3\2\2\2\u1273\u128a"+
		"\78\2\2\u1274\u128a\7\u0205\2\2\u1275\u127f\7\26\2\2\u1276\u1277\7H\2"+
		"\2\u1277\u127c\5\u0214\u010b\2\u1278\u1279\7\u044e\2\2\u1279\u127b\5\u0214"+
		"\u010b\2\u127a\u1278\3\2\2\2\u127b\u127e\3\2\2\2\u127c\u127a\3\2\2\2\u127c"+
		"\u127d\3\2\2\2\u127d\u1280\3\2\2\2\u127e\u127c\3\2\2\2\u127f\u1276\3\2"+
		"\2\2\u127f\u1280\3\2\2\2\u1280\u128a\3\2\2\2\u1281\u1286\5\u0214\u010b"+
		"\2\u1282\u1283\7\u044e\2\2\u1283\u1285\5\u0214\u010b\2\u1284\u1282\3\2"+
		"\2\2\u1285\u1288\3\2\2\2\u1286\u1284\3\2\2\2\u1286\u1287\3\2\2\2\u1287"+
		"\u128a\3\2\2\2\u1288\u1286\3\2\2\2\u1289\u1273\3\2\2\2\u1289\u1274\3\2"+
		"\2\2\u1289\u1275\3\2\2\2\u1289\u1281\3\2\2\2\u128a\u01a1\3\2\2\2\u128b"+
		"\u128c\7U\2\2\u128c\u128d\7\u0227\2\2\u128d\u128e\7\177\2\2\u128e\u128f"+
		"\5\u0214\u010b\2\u128f\u1290\7\u00b4\2\2\u1290\u1295\5\u0214\u010b\2\u1291"+
		"\u1292\7\u044e\2\2\u1292\u1294\5\u0214\u010b\2\u1293\u1291\3\2\2\2\u1294"+
		"\u1297\3\2\2\2\u1295\u1293\3\2\2\2\u1295\u1296\3\2\2\2\u1296\u129b\3\2"+
		"\2\2\u1297\u1295\3\2\2\2\u1298\u1299\7\u00c5\2\2\u1299\u129a\7U\2\2\u129a"+
		"\u129c\7\u0081\2\2\u129b\u1298\3\2\2\2\u129b\u129c\3\2\2\2\u129c\u01a3"+
		"\3\2\2\2\u129d\u129e\7\u0093\2\2\u129e\u129f\7\u0285\2\2\u129f\u12a4\5"+
		"\u01be\u00e0\2\u12a0\u12a1\7\u044e\2\2\u12a1\u12a3\5\u01be\u00e0\2\u12a2"+
		"\u12a0\3\2\2\2\u12a3\u12a6\3\2\2\2\u12a4\u12a2\3\2\2\2\u12a4\u12a5\3\2"+
		"\2\2\u12a5\u01a5\3\2\2\2\u12a6\u12a4\3\2\2\2\u12a7\u12a8\7\u009b\2\2\u12a8"+
		"\u12ad\5\u01b8\u00dd\2\u12a9\u12aa\7\u044e\2\2\u12aa\u12ac\5\u01b8\u00dd"+
		"\2\u12ab\u12a9\3\2\2\2\u12ac\u12af\3\2\2\2\u12ad\u12ab\3\2\2\2\u12ad\u12ae"+
		"\3\2\2\2\u12ae\u12b0\3\2\2\2\u12af\u12ad\3\2\2\2\u12b0\u12b2\7\177\2\2"+
		"\u12b1\u12b3\tC\2\2\u12b2\u12b1\3\2\2\2\u12b2\u12b3\3\2\2\2\u12b3\u12b4"+
		"\3\2\2\2\u12b4\u12b5\5\u01bc\u00df\2\u12b5\u12b6\7Q\2\2\u12b6\u12bb\5"+
		"\u0214\u010b\2\u12b7\u12b8\7\u044e\2\2\u12b8\u12ba\5\u0214\u010b\2\u12b9"+
		"\u12b7\3\2\2\2\u12ba\u12bd\3\2\2\2\u12bb\u12b9\3\2\2\2\u12bb\u12bc\3\2"+
		"\2\2\u12bc\u12e8\3\2\2\2\u12bd\u12bb\3\2\2\2\u12be\u12bf\7\u009b\2\2\u12bf"+
		"\u12c1\7\26\2\2\u12c0\u12c2\7\u02ac\2\2\u12c1\u12c0\3\2\2\2\u12c1\u12c2"+
		"\3\2\2\2\u12c2\u12c3\3\2\2\2\u12c3\u12c4\7\u044e\2\2\u12c4\u12c5\7U\2"+
		"\2\u12c5\u12c6\7\u0081\2\2\u12c6\u12c7\7Q\2\2\u12c7\u12cc\5\u0214\u010b"+
		"\2\u12c8\u12c9\7\u044e\2\2\u12c9\u12cb\5\u0214\u010b\2\u12ca\u12c8\3\2"+
		"\2\2\u12cb\u12ce\3\2\2\2\u12cc\u12ca\3\2\2\2\u12cc\u12cd\3\2\2\2\u12cd"+
		"\u12e8\3\2\2\2\u12ce\u12cc\3\2\2\2\u12cf\u12d0\7\u009b\2\2\u12d0\u12d5"+
		"\5\u0226\u0114\2\u12d1\u12d2\7\u044e\2\2\u12d2\u12d4\5\u0226\u0114\2\u12d3"+
		"\u12d1\3\2\2\2\u12d4\u12d7\3\2\2\2\u12d5\u12d3\3\2\2\2\u12d5\u12d6\3\2"+
		"\2\2\u12d6\u12d8\3\2\2\2\u12d7\u12d5\3\2\2\2\u12d8\u12db\7Q\2\2\u12d9"+
		"\u12dc\5\u0214\u010b\2\u12da\u12dc\5\u0226\u0114\2\u12db\u12d9\3\2\2\2"+
		"\u12db\u12da\3\2\2\2\u12dc\u12e4\3\2\2\2\u12dd\u12e0\7\u044e\2\2\u12de"+
		"\u12e1\5\u0214\u010b\2\u12df\u12e1\5\u0226\u0114\2\u12e0\u12de\3\2\2\2"+
		"\u12e0\u12df\3\2\2\2\u12e1\u12e3\3\2\2\2\u12e2\u12dd\3\2\2\2\u12e3\u12e6"+
		"\3\2\2\2\u12e4\u12e2\3\2\2\2\u12e4\u12e5\3\2\2\2\u12e5\u12e8\3\2\2\2\u12e6"+
		"\u12e4\3\2\2\2\u12e7\u12a7\3\2\2\2\u12e7\u12be\3\2\2\2\u12e7\u12cf\3\2"+
		"\2\2\u12e8\u01a7\3\2\2\2\u12e9\u12ea\7\u009b\2\2\u12ea\u12eb\7\u0227\2"+
		"\2\u12eb\u12ec\7\177\2\2\u12ec\u12ed\5\u0214\u010b\2\u12ed\u12ee\7Q\2"+
		"\2\u12ee\u12f3\5\u0214\u010b\2\u12ef\u12f0\7\u044e\2\2\u12f0\u12f2\5\u0214"+
		"\u010b\2\u12f1\u12ef\3\2\2\2\u12f2\u12f5\3\2\2\2\u12f3\u12f1\3\2\2\2\u12f3"+
		"\u12f4\3\2\2\2\u12f4\u01a9\3\2\2\2\u12f5\u12f3\3\2\2\2\u12f6\u12f7\7\u00a1"+
		"\2\2\u12f7\u12fa\7\u0219\2\2\u12f8\u12f9\7N\2\2\u12f9\u12fb\5\u0214\u010b"+
		"\2\u12fa\u12f8\3\2\2\2\u12fa\u12fb\3\2\2\2\u12fb\u12fc\3\2\2\2\u12fc\u12ff"+
		"\7\u0443\2\2\u12fd\u1300\5\u0282\u0142\2\u12fe\u1300\7\u045b\2\2\u12ff"+
		"\u12fd\3\2\2\2\u12ff\u12fe\3\2\2\2\u1300\u01ab\3\2\2\2\u1301\u1302\5\u0214"+
		"\u010b\2\u1302\u1303\5\u01b4\u00db\2\u1303\u01ad\3\2\2\2\u1304\u1305\5"+
		"\u0214\u010b\2\u1305\u1306\7\u01bc\2\2\u1306\u1307\7\"\2\2\u1307\u1308"+
		"\7\u0219\2\2\u1308\u1309\7\u045b\2\2\u1309\u1321\3\2\2\2\u130a\u130b\5"+
		"\u0214\u010b\2\u130b\u130e\7\u01bc\2\2\u130c\u130d\7\u00c5\2\2\u130d\u130f"+
		"\5\u0224\u0113\2\u130e\u130c\3\2\2\2\u130e\u130f\3\2\2\2\u130f\u1310\3"+
		"\2\2\2\u1310\u1311\7\"\2\2\u1311\u1315\7\u045b\2\2\u1312\u1313\7\u0099"+
		"\2\2\u1313\u1314\7\62\2\2\u1314\u1316\7\u0219\2\2\u1315\u1312\3\2\2\2"+
		"\u1315\u1316\3\2\2\2\u1316\u1321\3\2\2\2\u1317\u1318\5\u0214\u010b\2\u1318"+
		"\u1319\7\u01bc\2\2\u1319\u131a\7\u00c5\2\2\u131a\u131d\5\u0224\u0113\2"+
		"\u131b\u131c\7\34\2\2\u131c\u131e\7\u045b\2\2\u131d\u131b\3\2\2\2\u131d"+
		"\u131e\3\2\2\2\u131e\u1321\3\2\2\2\u131f\u1321\5\u0214\u010b\2\u1320\u1304"+
		"\3\2\2\2\u1320\u130a\3\2\2\2\u1320\u1317\3\2\2\2\u1320\u131f\3\2\2\2\u1321"+
		"\u01af\3\2\2\2\u1322\u132b\7\u00ad\2\2\u1323\u132b\7\u0294\2\2\u1324\u1325"+
		"\7\u0168\2\2\u1325\u132b\7\u045b\2\2\u1326\u1327\7\u01cb\2\2\u1327\u132b"+
		"\7\u045b\2\2\u1328\u1329\7\u026c\2\2\u1329\u132b\7\u045b\2\2\u132a\u1322"+
		"\3\2\2\2\u132a\u1323\3\2\2\2\u132a\u1324\3\2\2\2\u132a\u1326\3\2\2\2\u132a"+
		"\u1328\3\2\2\2\u132b\u01b1\3\2\2\2\u132c\u132d\7\u01ed\2\2\u132d\u1335"+
		"\5\u022c\u0117\2\u132e\u132f\7\u01f0\2\2\u132f\u1335\5\u022c\u0117\2\u1330"+
		"\u1331\7\u01ec\2\2\u1331\u1335\5\u022c\u0117\2\u1332\u1333\7\u01f1\2\2"+
		"\u1333\u1335\5\u022c\u0117\2\u1334\u132c\3\2\2\2\u1334\u132e\3\2\2\2\u1334"+
		"\u1330\3\2\2\2\u1334\u1332\3\2\2\2\u1335\u01b3\3\2\2\2\u1336\u1337\7\u0219"+
		"\2\2\u1337\u133e\7\u01a2\2\2\u1338\u133f\78\2\2\u1339\u133f\7\u0201\2"+
		"\2\u133a\u133b\7b\2\2\u133b\u133c\5\u022c\u0117\2\u133c\u133d\7\u029e"+
		"\2\2\u133d\u133f\3\2\2\2\u133e\u1338\3\2\2\2\u133e\u1339\3\2\2\2\u133e"+
		"\u133a\3\2\2\2\u133e\u133f\3\2\2\2\u133f\u01b5\3\2\2\2\u1340\u1341\7\u014e"+
		"\2\2\u1341\u1342\tD\2\2\u1342\u01b7\3\2\2\2\u1343\u1348\5\u01ba\u00de"+
		"\2\u1344\u1345\7\u044c\2\2\u1345\u1346\5\u0246\u0124\2\u1346\u1347\7\u044d"+
		"\2\2\u1347\u1349\3\2\2\2\u1348\u1344\3\2\2\2\u1348\u1349\3\2\2\2\u1349"+
		"\u01b9\3\2\2\2\u134a\u134c\7\26\2\2\u134b\u134d\7\u02ac\2\2\u134c\u134b"+
		"\3\2\2\2\u134c\u134d\3\2\2\2\u134d\u139a\3\2\2\2\u134e\u1350\7\27\2\2"+
		"\u134f\u1351\7\u02a5\2\2\u1350\u134f\3\2\2\2\u1350\u1351\3\2\2\2\u1351"+
		"\u139a\3\2\2\2\u1352\u135a\7\60\2\2\u1353\u1354\7\u0275\2\2\u1354\u135b"+
		"\7\u02a4\2\2\u1355\u135b\7\u02a5\2\2\u1356\u135b\7\u028b\2\2\u1357\u135b"+
		"\7\u0285\2\2\u1358\u135b\7\u0273\2\2\u1359\u135b\7\u0242\2\2\u135a\u1353"+
		"\3\2\2\2\u135a\u1355\3\2\2\2\u135a\u1356\3\2\2\2\u135a\u1357\3\2\2\2\u135a"+
		"\u1358\3\2\2\2\u135a\u1359\3\2\2\2\u135a\u135b\3\2\2\2\u135b\u139a\3\2"+
		"\2\2\u135c\u139a\7:\2\2\u135d\u135f\7A\2\2\u135e\u1360\7\u0242\2\2\u135f"+
		"\u135e\3\2\2\2\u135f\u1360\3\2\2\2\u1360\u139a\3\2\2\2\u1361\u139a\7\u019d"+
		"\2\2\u1362\u139a\7\u02a6\2\2\u1363\u139a\7\u02a7\2\2\u1364\u1365\7U\2"+
		"\2\u1365\u139a\7\u0081\2\2\u1366\u139a\7]\2\2\u1367\u139a\7a\2\2\u1368"+
		"\u1369\7r\2\2\u1369\u139a\7\u02a4\2\2\u136a\u139a\7\u02a8\2\2\u136b\u139a"+
		"\7\u0227\2\2\u136c\u139a\7\u0090\2\2\u136d\u139a\7\u02a9\2\2\u136e\u136f"+
		"\7\u023c\2\2\u136f\u139a\tE\2\2\u1370\u139a\7\u00a0\2\2\u1371\u1372\7"+
		"\u00a3\2\2\u1372\u139a\tF\2\2\u1373\u139a\7\u02aa\2\2\u1374\u139a\7\u02ab"+
		"\2\2\u1375\u139a\7\u00b6\2\2\u1376\u139a\7\u00bd\2\2\u1377\u139a\7\u00be"+
		"\2\2\u1378\u139a\7\u02ad\2\2\u1379\u139a\7\u02ae\2\2\u137a\u139a\7\u02af"+
		"\2\2\u137b\u139a\7\u02b0\2\2\u137c\u139a\7\u02b1\2\2\u137d\u139a\7\u02b2"+
		"\2\2\u137e\u139a\7\u02b3\2\2\u137f\u139a\7\u02b4\2\2\u1380\u139a\7\u02b5"+
		"\2\2\u1381\u139a\7\u02b6\2\2\u1382\u139a\7\u02b7\2\2\u1383\u139a\7\u02b8"+
		"\2\2\u1384\u139a\7\u02b9\2\2\u1385\u139a\7\u02ba\2\2\u1386\u139a\7\u02bb"+
		"\2\2\u1387\u139a\7\u02bc\2\2\u1388\u139a\7\u02bd\2\2\u1389\u139a\7\u02be"+
		"\2\2\u138a\u139a\7\u02bf\2\2\u138b\u139a\7\u02c0\2\2\u138c\u139a\7\u02c1"+
		"\2\2\u138d\u139a\7\u02c2\2\2\u138e\u139a\7\u02c3\2\2\u138f\u139a\7\u02c4"+
		"\2\2\u1390\u139a\7\u02c5\2\2\u1391\u139a\7\u02c6\2\2\u1392\u139a\7\u02c7"+
		"\2\2\u1393\u139a\7\u02c8\2\2\u1394\u139a\7\u0415\2\2\u1395\u139a\7\u02c9"+
		"\2\2\u1396\u139a\7\u02ca\2\2\u1397\u139a\7\u02cb\2\2\u1398\u139a\7\u02cc"+
		"\2\2\u1399\u134a\3\2\2\2\u1399\u134e\3\2\2\2\u1399\u1352\3\2\2\2\u1399"+
		"\u135c\3\2\2\2\u1399\u135d\3\2\2\2\u1399\u1361\3\2\2\2\u1399\u1362\3\2"+
		"\2\2\u1399\u1363\3\2\2\2\u1399\u1364\3\2\2\2\u1399\u1366\3\2\2\2\u1399"+
		"\u1367\3\2\2\2\u1399\u1368\3\2\2\2\u1399\u136a\3\2\2\2\u1399\u136b\3\2"+
		"\2\2\u1399\u136c\3\2\2\2\u1399\u136d\3\2\2\2\u1399\u136e\3\2\2\2\u1399"+
		"\u1370\3\2\2\2\u1399\u1371\3\2\2\2\u1399\u1373\3\2\2\2\u1399\u1374\3\2"+
		"\2\2\u1399\u1375\3\2\2\2\u1399\u1376\3\2\2\2\u1399\u1377\3\2\2\2\u1399"+
		"\u1378\3\2\2\2\u1399\u1379\3\2\2\2\u1399\u137a\3\2\2\2\u1399\u137b\3\2"+
		"\2\2\u1399\u137c\3\2\2\2\u1399\u137d\3\2\2\2\u1399\u137e\3\2\2\2\u1399"+
		"\u137f\3\2\2\2\u1399\u1380\3\2\2\2\u1399\u1381\3\2\2\2\u1399\u1382\3\2"+
		"\2\2\u1399\u1383\3\2\2\2\u1399\u1384\3\2\2\2\u1399\u1385\3\2\2\2\u1399"+
		"\u1386\3\2\2\2\u1399\u1387\3\2\2\2\u1399\u1388\3\2\2\2\u1399\u1389\3\2"+
		"\2\2\u1399\u138a\3\2\2\2\u1399\u138b\3\2\2\2\u1399\u138c\3\2\2\2\u1399"+
		"\u138d\3\2\2\2\u1399\u138e\3\2\2\2\u1399\u138f\3\2\2\2\u1399\u1390\3\2"+
		"\2\2\u1399\u1391\3\2\2\2\u1399\u1392\3\2\2\2\u1399\u1393\3\2\2\2\u1399"+
		"\u1394\3\2\2\2\u1399\u1395\3\2\2\2\u1399\u1396\3\2\2\2\u1399\u1397\3\2"+
		"\2\2\u1399\u1398\3\2\2\2\u139a\u01bb\3\2\2\2\u139b\u13ac\7\u043c\2\2\u139c"+
		"\u139d\7\u043c\2\2\u139d\u139e\7\u044b\2\2\u139e\u13ac\7\u043c\2\2\u139f"+
		"\u13a0\5\u0226\u0114\2\u13a0\u13a1\7\u044b\2\2\u13a1\u13a2\7\u043c\2\2"+
		"\u13a2\u13ac\3\2\2\2\u13a3\u13a4\5\u0226\u0114\2\u13a4\u13a5\7\u044b\2"+
		"\2\u13a5\u13a6\5\u0226\u0114\2\u13a6\u13ac\3\2\2\2\u13a7\u13a8\5\u0226"+
		"\u0114\2\u13a8\u13a9\5\u022a\u0116\2\u13a9\u13ac\3\2\2\2\u13aa\u13ac\5"+
		"\u0226\u0114\2\u13ab\u139b\3\2\2\2\u13ab\u139c\3\2\2\2\u13ab\u139f\3\2"+
		"\2\2\u13ab\u13a3\3\2\2\2\u13ab\u13a7\3\2\2\2\u13ab\u13aa\3\2\2\2\u13ac"+
		"\u01bd\3\2\2\2\u13ad\u13ae\5\u0214\u010b\2\u13ae\u13af\7\u00b4\2\2\u13af"+
		"\u13b0\5\u0214\u010b\2\u13b0\u01bf\3\2\2\2\u13b1\u13b3\7\31\2\2\u13b2"+
		"\u13b4\tG\2\2\u13b3\u13b2\3\2\2\2\u13b3\u13b4\3\2\2\2\u13b4\u13b5\3\2"+
		"\2\2\u13b5\u13b6\7\u00b1\2\2\u13b6\u13c8\5\u0248\u0125\2\u13b7\u13b8\7"+
		"\u00bd\2\2\u13b8\u13b9\7Y\2\2\u13b9\u13ba\7\177\2\2\u13ba\u13bf\5\u0210"+
		"\u0109\2\u13bb\u13bc\7\u044e\2\2\u13bc\u13be\5\u0210\u0109\2\u13bd\u13bb"+
		"\3\2\2\2\u13be\u13c1\3\2\2\2\u13bf\u13bd\3\2\2\2\u13bf\u13c0\3\2\2\2\u13c0"+
		"\u13c6\3\2\2\2\u13c1\u13bf\3\2\2\2\u13c2\u13c3\7\u00c5\2\2\u13c3\u13c4"+
		"\5\u022c\u0117\2\u13c4\u13c5\7!\2\2\u13c5\u13c7\3\2\2\2\u13c6\u13c2\3"+
		"\2\2\2\u13c6\u13c7\3\2\2\2\u13c7\u13c9\3\2\2\2\u13c8\u13b7\3\2\2\2\u13c8"+
		"\u13c9\3\2\2\2\u13c9\u13d5\3\2\2\2\u13ca\u13cb\7A\2\2\u13cb\u13cc\7Y\2"+
		"\2\u13cc\u13cd\7\177\2\2\u13cd\u13d2\5\u0210\u0109\2\u13ce\u13cf\7\u044e"+
		"\2\2\u13cf\u13d1\5\u0210\u0109\2\u13d0\u13ce\3\2\2\2\u13d1\u13d4\3\2\2"+
		"\2\u13d2\u13d0\3\2\2\2\u13d2\u13d3\3\2\2\2\u13d3\u13d6\3\2\2\2\u13d4\u13d2"+
		"\3\2\2\2\u13d5\u13ca\3\2\2\2\u13d5\u13d6\3\2\2\2\u13d6\u01c1\3\2\2\2\u13d7"+
		"\u13d8\7)\2\2\u13d8\u13d9\7\u00b1\2\2\u13d9\u13dd\5\u0248\u0125\2\u13da"+
		"\u13dc\5\u01ca\u00e6\2\u13db\u13da\3\2\2\2\u13dc\u13df\3\2\2\2\u13dd\u13db"+
		"\3\2\2\2\u13dd\u13de\3\2\2\2\u13de\u01c3\3\2\2\2\u13df\u13dd\3\2\2\2\u13e0"+
		"\u13e1\7\u0166\2\2\u13e1\u13e2\7\u00b1\2\2\u13e2\u13e4\5\u0248\u0125\2"+
		"\u13e3\u13e5\tH\2\2\u13e4\u13e3\3\2\2\2\u13e4\u13e5\3\2\2\2\u13e5\u01c5"+
		"\3\2\2\2\u13e6\u13e8\7\u0080\2\2\u13e7\u13e9\tG\2\2\u13e8\u13e7\3\2\2"+
		"\2\u13e8\u13e9\3\2\2\2\u13e9\u13ea\3\2\2\2\u13ea\u13eb\tI\2\2\u13eb\u13ec"+
		"\5\u0248\u0125\2\u13ec\u01c7\3\2\2\2\u13ed\u13ef\7\u0234\2\2\u13ee\u13f0"+
		"\tG\2\2\u13ef\u13ee\3\2\2\2\u13ef\u13f0\3\2\2\2\u13f0\u13f1\3\2\2\2\u13f1"+
		"\u13f2\7\u00b1\2\2\u13f2\u13f4\5\u0248\u0125\2\u13f3\u13f5\7\u0229\2\2"+
		"\u13f4\u13f3\3\2\2\2\u13f4\u13f5\3\2\2\2\u13f5\u13f7\3\2\2\2\u13f6\u13f8"+
		"\7\u01a4\2\2\u13f7\u13f6\3\2\2\2\u13f7\u13f8\3\2\2\2\u13f8\u13fa\3\2\2"+
		"\2\u13f9\u13fb\7\u0286\2\2\u13fa\u13f9\3\2\2\2\u13fa\u13fb\3\2\2\2\u13fb"+
		"\u01c9\3\2\2\2\u13fc\u13fd\7N\2\2\u13fd\u1404\7\u0284\2\2\u13fe\u1404"+
		"\7\u0229\2\2\u13ff\u1404\7\u01a6\2\2\u1400\u1404\7\u01f2\2\2\u1401\u1404"+
		"\7\u01a4\2\2\u1402\u1404\7\u0164\2\2\u1403\u13fc\3\2\2\2\u1403\u13fe\3"+
		"\2\2\2\u1403\u13ff\3\2\2\2\u1403\u1400\3\2\2\2\u1403\u1401\3\2\2\2\u1403"+
		"\u1402\3\2\2\2\u1404\u01cb\3\2\2\2\u1405\u1407\7\60\2\2\u1406\u1408\7"+
		"\u0151\2\2\u1407\u1406\3\2\2\2\u1407\u1408\3\2\2\2\u1408\u1409\3\2\2\2"+
		"\u1409\u140a\7\u01b2\2\2\u140a\u140b\5\u0226\u0114\2\u140b\u140c\7\u0241"+
		"\2\2\u140c\u140d\tJ\2\2\u140d\u140e\7\u0257\2\2\u140e\u140f\7\u045b\2"+
		"\2\u140f\u01cd\3\2\2\2\u1410\u1411\7\u01c3\2\2\u1411\u1412\7\u021b\2\2"+
		"\u1412\u1413\5\u0226\u0114\2\u1413\u1414\7\u0257\2\2\u1414\u1415\7\u045b"+
		"\2\2\u1415\u01cf\3\2\2\2\u1416\u1417\7\u0281\2\2\u1417\u1418\7\u021b\2"+
		"\2\u1418\u1419\5\u0226\u0114\2\u1419\u01d1\3\2\2\2\u141a\u141b\7\u00a1"+
		"\2\2\u141b\u141c\5\u01d6\u00ec\2\u141c\u141d\tK\2\2\u141d\u1425\5\u0288"+
		"\u0145\2\u141e\u141f\7\u044e\2\2\u141f\u1420\5\u01d6\u00ec\2\u1420\u1421"+
		"\tK\2\2\u1421\u1422\5\u0288\u0145\2\u1422\u1424\3\2\2\2\u1423\u141e\3"+
		"\2\2\2\u1424\u1427\3\2\2\2\u1425\u1423\3\2\2\2\u1425\u1426\3\2\2\2\u1426"+
		"\u144e\3\2\2\2\u1427\u1425\3\2\2\2\u1428\u142c\7\u00a1\2\2\u1429\u142a"+
		"\7(\2\2\u142a\u142d\7\u00a1\2\2\u142b\u142d\7\u032c\2\2\u142c\u1429\3"+
		"\2\2\2\u142c\u142b\3\2\2\2\u142d\u1430\3\2\2\2\u142e\u1431\5\u0218\u010d"+
		"\2\u142f\u1431\78\2\2\u1430\u142e\3\2\2\2\u1430\u142f\3\2\2\2\u1431\u144e"+
		"\3\2\2\2\u1432\u1433\7\u00a1\2\2\u1433\u143a\7\u01ff\2\2\u1434\u1437\5"+
		"\u0218\u010d\2\u1435\u1436\7*\2\2\u1436\u1438\5\u021a\u010e\2\u1437\u1435"+
		"\3\2\2\2\u1437\u1438\3\2\2\2\u1438\u143b\3\2\2\2\u1439\u143b\78\2\2\u143a"+
		"\u1434\3\2\2\2\u143a\u1439\3\2\2\2\u143b\u144e\3\2\2\2\u143c\u144e\5\u01aa"+
		"\u00d6\2\u143d\u144e\5\u012c\u0097\2\u143e\u144e\5\u012a\u0096\2\u143f"+
		"\u1440\7\u00a1\2\2\u1440\u1441\5\u020c\u0107\2\u1441\u1442\tK\2\2\u1442"+
		"\u144a\5\u0288\u0145\2\u1443\u1444\7\u044e\2\2\u1444\u1445\5\u020c\u0107"+
		"\2\u1445\u1446\tK\2\2\u1446\u1447\5\u0288\u0145\2\u1447\u1449\3\2\2\2"+
		"\u1448\u1443\3\2\2\2\u1449\u144c\3\2\2\2\u144a\u1448\3\2\2\2\u144a\u144b"+
		"\3\2\2\2\u144b\u144e\3\2\2\2\u144c\u144a\3\2\2\2\u144d\u141a\3\2\2\2\u144d"+
		"\u1428\3\2\2\2\u144d\u1432\3\2\2\2\u144d\u143c\3\2\2\2\u144d\u143d\3\2"+
		"\2\2\u144d\u143e\3\2\2\2\u144d\u143f\3\2\2\2\u144e\u01d3\3\2\2\2\u144f"+
		"\u1450\7\u00a3\2\2\u1450\u1451\t9\2\2\u1451\u14e7\7\u01d6\2\2\u1452\u1453"+
		"\7\u00a3\2\2\u1453\u1454\tL\2\2\u1454\u1457\7\u019e\2\2\u1455\u1456\7"+
		"\\\2\2\u1456\u1458\7\u045b\2\2\u1457\u1455\3\2\2\2\u1457\u1458\3\2\2\2"+
		"\u1458\u145b\3\2\2\2\u1459\u145a\7Q\2\2\u145a\u145c\5\u022c\u0117\2\u145b"+
		"\u1459\3\2\2\2\u145b\u145c\3\2\2\2\u145c\u1464\3\2\2\2\u145d\u1461\7n"+
		"\2\2\u145e\u145f\5\u022c\u0117\2\u145f\u1460\7\u044e\2\2\u1460\u1462\3"+
		"\2\2\2\u1461\u145e\3\2\2\2\u1461\u1462\3\2\2\2\u1462\u1463\3\2\2\2\u1463"+
		"\u1465\5\u022c\u0117\2\u1464\u145d\3\2\2\2\u1464\u1465\3\2\2\2\u1465\u14e7"+
		"\3\2\2\2\u1466\u1467\7\u00a3\2\2\u1467\u1469\5\u01d8\u00ed\2\u1468\u146a"+
		"\5\u01da\u00ee\2\u1469\u1468\3\2\2\2\u1469\u146a\3\2\2\2\u146a\u14e7\3"+
		"\2\2\2\u146b\u146d\7\u00a3\2\2\u146c\u146e\7\u01b1\2\2\u146d\u146c\3\2"+
		"\2\2\u146d\u146e\3\2\2\2\u146e\u146f\3\2\2\2\u146f\u1470\t\'\2\2\u1470"+
		"\u1471\tM\2\2\u1471\u1474\5\u020e\u0108\2\u1472\u1473\tM\2\2\u1473\u1475"+
		"\5\u0226\u0114\2\u1474\u1472\3\2\2\2\u1474\u1475\3\2\2\2\u1475\u1477\3"+
		"\2\2\2\u1476\u1478\5\u01da\u00ee\2\u1477\u1476\3\2\2\2\u1477\u1478\3\2"+
		"\2\2\u1478\u14e7\3\2\2\2\u1479\u147a\7\u00a3\2\2\u147a\u147b\7\60\2\2"+
		"\u147b\u147d\t\2\2\2\u147c\u147e\5\u025e\u0130\2\u147d\u147c\3\2\2\2\u147d"+
		"\u147e\3\2\2\2\u147e\u147f\3\2\2\2\u147f\u14e7\5\u0226\u0114\2\u1480\u1481"+
		"\7\u00a3\2\2\u1481\u1482\7\60\2\2\u1482\u1483\tN\2\2\u1483\u14e7\5\u020c"+
		"\u0107\2\u1484\u1485\7\u00a3\2\2\u1485\u1486\7\60\2\2\u1486\u1487\7\u0285"+
		"\2\2\u1487\u14e7\5\u0214\u010b\2\u1488\u1489\7\u00a3\2\2\u1489\u148a\7"+
		"\u0197\2\2\u148a\u148b\5\u021c\u010f\2\u148b\u148c\tO\2\2\u148c\u14e7"+
		"\3\2\2\2\u148d\u148e\7\u00a3\2\2\u148e\u14e7\5\u01dc\u00ef\2\u148f\u1490"+
		"\7\u00a3\2\2\u1490\u1491\tP\2\2\u1491\u1495\7n\2\2\u1492\u1493\5\u022c"+
		"\u0117\2\u1493\u1494\7\u044e\2\2\u1494\u1496\3\2\2\2\u1495\u1492\3\2\2"+
		"\2\u1495\u1496\3\2\2\2\u1496\u1497\3\2\2\2\u1497\u14e7\5\u022c\u0117\2"+
		"\u1498\u1499\7\u00a3\2\2\u1499\u149a\7\u0124\2\2\u149a\u149b\7\u044c\2"+
		"\2\u149b\u149c\7\u043c\2\2\u149c\u149d\7\u044d\2\2\u149d\u14e7\tP\2\2"+
		"\u149e\u149f\7\u00a3\2\2\u149f\u14a2\5\u01de\u00f0\2\u14a0\u14a1\tM\2"+
		"\2\u14a1\u14a3\5\u0226\u0114\2\u14a2\u14a0\3\2\2\2\u14a2\u14a3\3\2\2\2"+
		"\u14a3\u14a5\3\2\2\2\u14a4\u14a6\5\u01da\u00ee\2\u14a5\u14a4\3\2\2\2\u14a5"+
		"\u14a6\3\2\2\2\u14a6\u14e7\3\2\2\2\u14a7\u14a8\7\u00a3\2\2\u14a8\u14a9"+
		"\tQ\2\2\u14a9\u14aa\7\u016d\2\2\u14aa\u14e7\5\u020c\u0107\2\u14ab\u14ac"+
		"\7\u00a3\2\2\u14ac\u14af\7\u01b5\2\2\u14ad\u14ae\7N\2\2\u14ae\u14b0\5"+
		"\u0214\u010b\2\u14af\u14ad\3\2\2\2\u14af\u14b0\3\2\2\2\u14b0\u14e7\3\2"+
		"\2\2\u14b1\u14b2\7\u00a3\2\2\u14b2\u14b3\tR\2\2\u14b3\u14b4\tM\2\2\u14b4"+
		"\u14b7\5\u020e\u0108\2\u14b5\u14b6\tM\2\2\u14b6\u14b8\5\u0226\u0114\2"+
		"\u14b7\u14b5\3\2\2\2\u14b7\u14b8\3\2\2\2\u14b8\u14bb\3\2\2\2\u14b9\u14ba"+
		"\7\u00c3\2\2\u14ba\u14bc\5\u0288\u0145\2\u14bb\u14b9\3\2\2\2\u14bb\u14bc"+
		"\3\2\2\2\u14bc\u14e7\3\2\2\2\u14bd\u14be\7\u00a3\2\2\u14be\u14bf\7\u020f"+
		"\2\2\u14bf\u14c2\7\u02a4\2\2\u14c0\u14c1\tM\2\2\u14c1\u14c3\5\u0226\u0114"+
		"\2\u14c2\u14c0\3\2\2\2\u14c2\u14c3\3\2\2\2\u14c3\u14c5\3\2\2\2\u14c4\u14c6"+
		"\5\u01da\u00ee\2\u14c5\u14c4\3\2\2\2\u14c5\u14c6\3\2\2\2\u14c6\u14e7\3"+
		"\2\2\2\u14c7\u14c8\7\u00a3\2\2\u14c8\u14c9\7\u0225\2\2\u14c9\u14ce\5\u01e0"+
		"\u00f1\2\u14ca\u14cb\7\u044e\2\2\u14cb\u14cd\5\u01e0\u00f1\2\u14cc\u14ca"+
		"\3\2\2\2\u14cd\u14d0\3\2\2\2\u14ce\u14cc\3\2\2\2\u14ce\u14cf\3\2\2\2\u14cf"+
		"\u14d4\3\2\2\2\u14d0\u14ce\3\2\2\2\u14d1\u14d2\7N\2\2\u14d2\u14d3\7\u0228"+
		"\2\2\u14d3\u14d5\5\u022c\u0117\2\u14d4\u14d1\3\2\2\2\u14d4\u14d5\3\2\2"+
		"\2\u14d5\u14d6\3\2\2\2\u14d6\u14da\7n\2\2\u14d7\u14d8\5\u022c\u0117\2"+
		"\u14d8\u14d9\7\u044e\2\2\u14d9\u14db\3\2\2\2\u14da\u14d7\3\2\2\2\u14da"+
		"\u14db\3\2\2\2\u14db\u14dc\3\2\2\2\u14dc\u14dd\5\u022c\u0117\2\u14dd\u14e7"+
		"\3\2\2\2\u14de\u14df\7\u00a3\2\2\u14df\u14e0\7\u0252\2\2\u14e0\u14e4\7"+
		"\u0266\2\2\u14e1\u14e2\7N\2\2\u14e2\u14e3\7\u0165\2\2\u14e3\u14e5\7\u045b"+
		"\2\2\u14e4\u14e1\3\2\2\2\u14e4\u14e5\3\2\2\2\u14e5\u14e7\3\2\2\2\u14e6"+
		"\u144f\3\2\2\2\u14e6\u1452\3\2\2\2\u14e6\u1466\3\2\2\2\u14e6\u146b\3\2"+
		"\2\2\u14e6\u1479\3\2\2\2\u14e6\u1480\3\2\2\2\u14e6\u1484\3\2\2\2\u14e6"+
		"\u1488\3\2\2\2\u14e6\u148d\3\2\2\2\u14e6\u148f\3\2\2\2\u14e6\u1498\3\2"+
		"\2\2\u14e6\u149e\3\2\2\2\u14e6\u14a7\3\2\2\2\u14e6\u14ab\3\2\2\2\u14e6"+
		"\u14b1\3\2\2\2\u14e6\u14bd\3\2\2\2\u14e6\u14c7\3\2\2\2\u14e6\u14de\3\2"+
		"\2\2\u14e7\u01d5\3\2\2\2\u14e8\u14f3\7\u0467\2\2\u14e9\u14f3\7\u0468\2"+
		"\2\u14ea\u14eb\7\u0450\2\2\u14eb\u14ed\7\u0450\2\2\u14ec\u14ea\3\2\2\2"+
		"\u14ec\u14ed\3\2\2\2\u14ed\u14ee\3\2\2\2\u14ee\u14f0\tS\2\2\u14ef\u14ec"+
		"\3\2\2\2\u14ef\u14f0\3\2\2\2\u14f0\u14f1\3\2\2\2\u14f1\u14f3\5\u0226\u0114"+
		"\2\u14f2\u14e8\3\2\2\2\u14f2\u14e9\3\2\2\2\u14f2\u14ef\3\2\2\2\u14f3\u01d7"+
		"\3\2\2\2\u14f4\u14f5\7(\2\2\u14f5\u1502\7\u00a1\2\2\u14f6\u1502\7\u032f"+
		"\2\2\u14f7\u1502\7\66\2\2\u14f8\u1502\7\u009f\2\2\u14f9\u14fa\7\u01b2"+
		"\2\2\u14fa\u1502\7\u0266\2\2\u14fb\u14fc\7\u008b\2\2\u14fc\u1502\7\u0266"+
		"\2\2\u14fd\u14ff\t8\2\2\u14fe\u14fd\3\2\2\2\u14fe\u14ff\3\2\2\2\u14ff"+
		"\u1500\3\2\2\2\u1500\u1502\tT\2\2\u1501\u14f4\3\2\2\2\u1501\u14f6\3\2"+
		"\2\2\u1501\u14f7\3\2\2\2\u1501\u14f8\3\2\2\2\u1501\u14f9\3\2\2\2\u1501"+
		"\u14fb\3\2\2\2\u1501\u14fe\3\2\2\2\u1502\u01d9\3\2\2\2\u1503\u1504\7m"+
		"\2\2\u1504\u1508\7\u045b\2\2\u1505\u1506\7\u00c3\2\2\u1506\u1508\5\u0288"+
		"\u0145\2\u1507\u1503\3\2\2\2\u1507\u1505\3\2\2\2\u1508\u01db\3\2\2\2\u1509"+
		"\u150b\7\u0268\2\2\u150a\u1509\3\2\2\2\u150a\u150b\3\2\2\2\u150b\u150c"+
		"\3\2\2\2\u150c\u151b\7\u0198\2\2\u150d\u150e\7\u01d7\2\2\u150e\u151b\7"+
		"\u0266\2\2\u150f\u151b\7\u021d\2\2\u1510\u151b\7\u02ac\2\2\u1511\u1513"+
		"\7\u01b1\2\2\u1512\u1511\3\2\2\2\u1512\u1513\3\2\2\2\u1513\u1514\3\2\2"+
		"\2\u1514\u151b\7\u0224\2\2\u1515\u151b\7\u0226\2\2\u1516\u1517\7\u0252"+
		"\2\2\u1517\u151b\7\u01bb\2\2\u1518\u151b\7\u0155\2\2\u1519\u151b\7\u0180"+
		"\2\2\u151a\u150a\3\2\2\2\u151a\u150d\3\2\2\2\u151a\u150f\3\2\2\2\u151a"+
		"\u1510\3\2\2\2\u151a\u1512\3\2\2\2\u151a\u1515\3\2\2\2\u151a\u1516\3\2"+
		"\2\2\u151a\u1518\3\2\2\2\u151a\u1519\3\2\2\2\u151b\u01dd\3\2\2\2\u151c"+
		"\u1525\7\u019e\2\2\u151d\u151e\7\u00b1\2\2\u151e\u1525\7\u0266\2\2\u151f"+
		"\u1521\7\u01b1\2\2\u1520\u151f\3\2\2\2\u1520\u1521\3\2\2\2\u1521\u1522"+
		"\3\2\2\2\u1522\u1525\7\u02a4\2\2\u1523\u1525\7\u027b\2\2\u1524\u151c\3"+
		"\2\2\2\u1524\u151d\3\2\2\2\u1524\u1520\3\2\2\2\u1524\u1523\3\2\2\2\u1525"+
		"\u01df\3\2\2\2\u1526\u1533\7\26\2\2\u1527\u1528\7\u015d\2\2\u1528\u1533"+
		"\7\u01c7\2\2\u1529\u152a\7\u017f\2\2\u152a\u1533\7\u0271\2\2\u152b\u1533"+
		"\7\u0182\2\2\u152c\u1533\7\u01c9\2\2\u152d\u1533\7\u02fb\2\2\u152e\u152f"+
		"\7\u0214\2\2\u152f\u1533\7\u01a7\2\2\u1530\u1533\7\u0259\2\2\u1531\u1533"+
		"\7\u0270\2\2\u1532\u1526\3\2\2\2\u1532\u1527\3\2\2\2\u1532\u1529\3\2\2"+
		"\2\u1532\u152b\3\2\2\2\u1532\u152c\3\2\2\2\u1532\u152d\3\2\2\2\u1532\u152e"+
		"\3\2\2\2\u1532\u1530\3\2\2\2\u1532\u1531\3\2\2\2\u1533\u01e1\3\2\2\2\u1534"+
		"\u1535\7\u015b\2\2\u1535\u1536\7\u045b\2\2\u1536\u01e3\3\2\2\2\u1537\u1538"+
		"\7\u0161\2\2\u1538\u1539\7]\2\2\u1539\u153e\5\u01f0\u00f9\2\u153a\u153b"+
		"\7\u044e\2\2\u153b\u153d\5\u01f0\u00f9\2\u153c\u153a\3\2\2\2\u153d\u1540"+
		"\3\2\2\2\u153e\u153c\3\2\2\2\u153e\u153f\3\2\2\2\u153f\u1548\3\2\2\2\u1540"+
		"\u153e\3\2\2\2\u1541\u1542\7\u0089\2\2\u1542\u1545\7\u044c\2\2\u1543\u1546"+
		"\5\u0246\u0124\2\u1544\u1546\7\26\2\2\u1545\u1543\3\2\2\2\u1545\u1544"+
		"\3\2\2\2\u1546\u1547\3\2\2\2\u1547\u1549\7\u044d\2\2\u1548\u1541\3\2\2"+
		"\2\u1548\u1549\3\2\2\2\u1549\u154a\3\2\2\2\u154a\u154b\7\\\2\2\u154b\u154c"+
		"\5\u0226\u0114\2\u154c\u01e5\3\2\2\2\u154d\u154f\7\u01ad\2\2\u154e\u1550"+
		"\tG\2\2\u154f\u154e\3\2\2\2\u154f\u1550\3\2\2\2\u1550\u1551\3\2\2\2\u1551"+
		"\u1556\5\u01f2\u00fa\2\u1552\u1553\7\u044e\2\2\u1553\u1555\5\u01f2\u00fa"+
		"\2\u1554\u1552\3\2\2\2\u1555\u1558\3\2\2\2\u1556\u1554\3\2\2\2\u1556\u1557"+
		"\3\2\2\2\u1557\u01e7\3\2\2\2\u1558\u1556\3\2\2\2\u1559\u155b\7i\2\2\u155a"+
		"\u155c\tU\2\2\u155b\u155a\3\2\2\2\u155b\u155c\3\2\2\2\u155c\u155e\3\2"+
		"\2\2\u155d\u155f\5\u022c\u0117\2\u155e\u155d\3\2\2\2\u155f\u1560\3\2\2"+
		"\2\u1560\u155e\3\2\2\2\u1560\u1561\3\2\2\2\u1561\u01e9\3\2\2\2\u1562\u1563"+
		"\7q\2\2\u1563\u1564\7]\2\2\u1564\u1565\7c\2\2\u1565\u1566\7\u0161\2\2"+
		"\u1566\u156b\5\u01f6\u00fc\2\u1567\u1568\7\u044e\2\2\u1568\u156a\5\u01f6"+
		"\u00fc\2\u1569\u1567\3\2\2\2\u156a\u156d\3\2\2\2\u156b\u1569\3\2\2\2\u156b"+
		"\u156c\3\2\2\2\u156c\u01eb\3\2\2\2\u156d\u156b\3\2\2\2\u156e\u156f\7\u023d"+
		"\2\2\u156f\u1570\7\u0228\2\2\u1570\u1571\7\u0161\2\2\u1571\u01ed\3\2\2"+
		"\2\u1572\u1573\7\u02aa\2\2\u1573\u01ef\3\2\2\2\u1574\u157c\5\u020e\u0108"+
		"\2\u1575\u1577\t\24\2\2\u1576\u1575\3\2\2\2\u1576\u1577\3\2\2\2\u1577"+
		"\u1578\3\2\2\2\u1578\u1579\7\u044c\2\2\u1579\u157a\5\u0246\u0124\2\u157a"+
		"\u157b\7\u044d\2\2\u157b\u157d\3\2\2\2\u157c\u1576\3\2\2\2\u157c\u157d"+
		"\3\2\2\2\u157d\u01f1\3\2\2\2\u157e\u1591\7\u018a\2\2\u157f\u1591\7\u01bb"+
		"\2\2\u1580\u1582\tV\2\2\u1581\u1580\3\2\2\2\u1581\u1582\3\2\2\2\u1582"+
		"\u1583\3\2\2\2\u1583\u1591\7\u01d6\2\2\u1584\u1591\7\u0210\2\2\u1585\u1591"+
		"\7\u02ac\2\2\u1586\u1587\7\u0228\2\2\u1587\u1591\7\u0161\2\2\u1588\u1591"+
		"\7\u0266\2\2\u1589\u1591\7\u0287\2\2\u158a\u158e\7\u02a4\2\2\u158b\u158c"+
		"\7\u00c5\2\2\u158c\u158d\7\u008e\2\2\u158d\u158f\7r\2\2\u158e\u158b\3"+
		"\2\2\2\u158e\u158f\3\2\2\2\u158f\u1591\3\2\2\2\u1590\u157e\3\2\2\2\u1590"+
		"\u157f\3\2\2\2\u1590\u1581\3\2\2\2\u1590\u1584\3\2\2\2\u1590\u1585\3\2"+
		"\2\2\u1590\u1586\3\2\2\2\u1590\u1588\3\2\2\2\u1590\u1589\3\2\2\2\u1590"+
		"\u158a\3\2\2\2\u1591\u159d\3\2\2\2\u1592\u1593\7\u022e\2\2\u1593\u1595"+
		"\7\u01d6\2\2\u1594\u1596\5\u0152\u00aa\2\u1595\u1594\3\2\2\2\u1595\u1596"+
		"\3\2\2\2\u1596\u159d\3\2\2\2\u1597\u1598\7\u02a4\2\2\u1598\u159a\5\u0248"+
		"\u0125\2\u1599\u159b\5\u01f4\u00fb\2\u159a\u1599\3\2\2\2\u159a\u159b\3"+
		"\2\2\2\u159b\u159d\3\2\2\2\u159c\u1590\3\2\2\2\u159c\u1592\3\2\2\2\u159c"+
		"\u1597\3\2\2\2\u159d\u01f3\3\2\2\2\u159e\u159f\7\u00c5\2\2\u159f\u15a0"+
		"\7\u008e\2\2\u15a0\u15a4\7r\2\2\u15a1\u15a2\7N\2\2\u15a2\u15a4\7\u01a3"+
		"\2\2\u15a3\u159e\3\2\2\2\u15a3\u15a1\3\2\2\2\u15a4\u01f5\3\2\2\2\u15a5"+
		"\u15ad\5\u020e\u0108\2\u15a6\u15a7\7\u0089\2\2\u15a7\u15aa\7\u044c\2\2"+
		"\u15a8\u15ab\5\u0246\u0124\2\u15a9\u15ab\7\26\2\2\u15aa\u15a8\3\2\2\2"+
		"\u15aa\u15a9\3\2\2\2\u15ab\u15ac\3\2\2\2\u15ac\u15ae\7\u044d\2\2\u15ad"+
		"\u15a6\3\2\2\2\u15ad\u15ae\3\2\2\2\u15ae\u15b6\3\2\2\2\u15af\u15b1\t\24"+
		"\2\2\u15b0\u15af\3\2\2\2\u15b0\u15b1\3\2\2\2\u15b1\u15b2\3\2\2\2\u15b2"+
		"\u15b3\7\u044c\2\2\u15b3\u15b4\5\u0246\u0124\2\u15b4\u15b5\7\u044d\2\2"+
		"\u15b5\u15b7\3\2\2\2\u15b6\u15b0\3\2\2\2\u15b6\u15b7\3\2\2\2\u15b7\u15ba"+
		"\3\2\2\2\u15b8\u15b9\7[\2\2\u15b9\u15bb\7\u01d0\2\2\u15ba\u15b8\3\2\2"+
		"\2\u15ba\u15bb\3\2\2\2\u15bb\u01f7\3\2\2\2\u15bc\u15bd\tW\2\2\u15bd\u15c0"+
		"\5\u020e\u0108\2\u15be\u15c1\5\u0226\u0114\2\u15bf\u15c1\7\u045b\2\2\u15c0"+
		"\u15be\3\2\2\2\u15c0\u15bf\3\2\2\2\u15c0\u15c1\3\2\2\2\u15c1\u01f9\3\2"+
		"\2\2\u15c2\u15c6\tW\2\2\u15c3\u15c4\tX\2\2\u15c4\u15c5\7\u0443\2\2\u15c5"+
		"\u15c7\tY\2\2\u15c6\u15c3\3\2\2\2\u15c6\u15c7\3\2\2\2\u15c7\u15c8\3\2"+
		"\2\2\u15c8\u15c9\5\u020a\u0106\2\u15c9\u01fb\3\2\2\2\u15ca\u15cb\7\u01b9"+
		"\2\2\u15cb\u15cc\7\u045b\2\2\u15cc\u01fd\3\2\2\2\u15cd\u15ce\7\u00bf\2"+
		"\2\u15ce\u15cf\5\u0226\u0114\2\u15cf\u01ff\3\2\2\2\u15d0\u15d8\7\u00a4"+
		"\2\2\u15d1\u15d3\7\u00a8\2\2\u15d2\u15d4\7\u0289\2\2\u15d3\u15d2\3\2\2"+
		"\2\u15d3\u15d4\3\2\2\2\u15d4\u15d5\3\2\2\2\u15d5\u15d9\5\u0230\u0119\2"+
		"\u15d6\u15d9\7\u0463\2\2\u15d7\u15d9\7\u0464\2\2\u15d8\u15d1\3\2\2\2\u15d8"+
		"\u15d6\3\2\2\2\u15d8\u15d7\3\2\2\2\u15d9\u15e3\3\2\2\2\u15da\u15db\7\u00a1"+
		"\2\2\u15db\u15e0\5\u0204\u0103\2\u15dc\u15dd\7\u044e\2\2\u15dd\u15df\5"+
		"\u0204\u0103\2\u15de\u15dc\3\2\2\2\u15df\u15e2\3\2\2\2\u15e0\u15de\3\2"+
		"\2\2\u15e0\u15e1\3\2\2\2\u15e1\u15e4\3\2\2\2\u15e2\u15e0\3\2\2\2\u15e3"+
		"\u15da\3\2\2\2\u15e3\u15e4\3\2\2\2\u15e4\u0201\3\2\2\2\u15e5\u15ed\7\u0097"+
		"\2\2\u15e6\u15e8\7\u00a8\2\2\u15e7\u15e9\7\u0289\2\2\u15e8\u15e7\3\2\2"+
		"\2\u15e8\u15e9\3\2\2\2\u15e9\u15ea\3\2\2\2\u15ea\u15ee\5\u0230\u0119\2"+
		"\u15eb\u15ee\7\u0463\2\2\u15ec\u15ee\7\u0464\2\2\u15ed\u15e6\3\2\2\2\u15ed"+
		"\u15eb\3\2\2\2\u15ed\u15ec\3\2\2\2\u15ed\u15ee\3\2\2\2\u15ee\u15f8\3\2"+
		"\2\2\u15ef\u15f0\7\u00a1\2\2\u15f0\u15f5\5\u0204\u0103\2\u15f1\u15f2\7"+
		"\u044e\2\2\u15f2\u15f4\5\u0204\u0103\2\u15f3\u15f1\3\2\2\2\u15f4\u15f7"+
		"\3\2\2\2\u15f5\u15f3\3\2\2\2\u15f5\u15f6\3\2\2\2\u15f6\u15f9\3\2\2\2\u15f7"+
		"\u15f5\3\2\2\2\u15f8\u15ef\3\2\2\2\u15f8\u15f9\3\2\2\2\u15f9\u0203\3\2"+
		"\2\2\u15fa\u15fb\tZ\2\2\u15fb\u1600\7\u0443\2\2\u15fc\u1601\5\u0230\u0119"+
		"\2\u15fd\u1601\7\u045c\2\2\u15fe\u1601\5\u0216\u010c\2\u15ff\u1601\5\u0228"+
		"\u0115\2\u1600\u15fc\3\2\2\2\u1600\u15fd\3\2\2\2\u1600\u15fe\3\2\2\2\u1600"+
		"\u15ff\3\2\2\2\u1601\u0205\3\2\2\2\u1602\u1604\7T\2\2\u1603\u1605\t[\2"+
		"\2\u1604\u1603\3\2\2\2\u1604\u1605\3\2\2\2\u1605\u1606\3\2\2\2\u1606\u1626"+
		"\7>\2\2\u1607\u1608\5\u01d6\u00ec\2\u1608\u1609\7\u0443\2\2\u1609\u1611"+
		"\t\\\2\2\u160a\u160b\7\u044e\2\2\u160b\u160c\5\u01d6\u00ec\2\u160c\u160d"+
		"\7\u0443\2\2\u160d\u160e\t\\\2\2\u160e\u1610\3\2\2\2\u160f\u160a\3\2\2"+
		"\2\u1610\u1613\3\2\2\2\u1611\u160f\3\2\2\2\u1611\u1612\3\2\2\2\u1612\u1627"+
		"\3\2\2\2\u1613\u1611\3\2\2\2\u1614\u1617\7,\2\2\u1615\u1618\5\u022c\u0117"+
		"\2\u1616\u1618\5\u01d6\u00ec\2\u1617\u1615\3\2\2\2\u1617\u1616\3\2\2\2"+
		"\u1618\u1619\3\2\2\2\u1619\u161a\5\u01d6\u00ec\2\u161a\u161b\7\u0443\2"+
		"\2\u161b\u1623\5\u0208\u0105\2\u161c\u161d\7\u044e\2\2\u161d\u161e\5\u01d6"+
		"\u00ec\2\u161e\u161f\7\u0443\2\2\u161f\u1620\5\u0208\u0105\2\u1620\u1622"+
		"\3\2\2\2\u1621\u161c\3\2\2\2\u1622\u1625\3\2\2\2\u1623\u1621\3\2\2\2\u1623"+
		"\u1624\3\2\2\2\u1624\u1627\3\2\2\2\u1625\u1623\3\2\2\2\u1626\u1607\3\2"+
		"\2\2\u1626\u1614\3\2\2\2\u1627\u0207\3\2\2\2\u1628\u1629\t]\2\2\u1629"+
		"\u0209\3\2\2\2\u162a\u1630\5\u00b6\\\2\u162b\u1630\5\u00a8U\2\u162c\u1630"+
		"\5\u00aeX\2\u162d\u1630\5\u00b4[\2\u162e\u1630\5\u00b8]\2\u162f\u162a"+
		"\3\2\2\2\u162f\u162b\3\2\2\2\u162f\u162c\3\2\2\2\u162f\u162d\3\2\2\2\u162f"+
		"\u162e\3\2\2\2\u1630\u1635\3\2\2\2\u1631\u1632\7N\2\2\u1632\u1633\7\u0179"+
		"\2\2\u1633\u1635\5\u0226\u0114\2\u1634\u162f\3\2\2\2\u1634\u1631\3\2\2"+
		"\2\u1635\u020b\3\2\2\2\u1636\u163a\5\u0226\u0114\2\u1637\u163b\7\u0462"+
		"\2\2\u1638\u1639\7\u044b\2\2\u1639\u163b\5\u0226\u0114\2\u163a\u1637\3"+
		"\2\2\2\u163a\u1638\3\2\2\2\u163a\u163b\3\2\2\2\u163b\u020d\3\2\2\2\u163c"+
		"\u163d\5\u020c\u0107\2\u163d\u020f\3\2\2\2\u163e\u1643\5\u0226\u0114\2"+
		"\u163f\u1641\5\u022a\u0116\2\u1640\u1642\5\u022a\u0116\2\u1641\u1640\3"+
		"\2\2\2\u1641\u1642\3\2\2\2\u1642\u1644\3\2\2\2\u1643\u163f\3\2\2\2\u1643"+
		"\u1644\3\2\2\2\u1644\u164b\3\2\2\2\u1645\u1646\13\2\2\2\u1646\u1648\5"+
		"\u022a\u0116\2\u1647\u1649\5\u022a\u0116\2\u1648\u1647\3\2\2\2\u1648\u1649"+
		"\3\2\2\2\u1649\u164b\3\2\2\2\u164a\u163e\3\2\2\2\u164a\u1645\3\2\2\2\u164b"+
		"\u0211\3\2\2\2\u164c\u164f\5\u0226\u0114\2\u164d\u164f\7\u045b\2\2\u164e"+
		"\u164c\3\2\2\2\u164e\u164d\3\2\2\2\u164f\u1654\3\2\2\2\u1650\u1651\7\u044c"+
		"\2\2\u1651\u1652\5\u022c\u0117\2\u1652\u1653\7\u044d\2\2\u1653\u1655\3"+
		"\2\2\2\u1654\u1650\3\2\2\2\u1654\u1655\3\2\2\2\u1655\u1658\3\2\2\2\u1656"+
		"\u1658\5\u0288\u0145\2\u1657\u164e\3\2\2\2\u1657\u1656\3\2\2\2\u1658\u165a"+
		"\3\2\2\2\u1659\u165b\t.\2\2\u165a\u1659\3\2\2\2\u165a\u165b\3\2\2\2\u165b"+
		"\u0213\3\2\2\2\u165c\u165d\t^\2\2\u165d\u0215\3\2\2\2\u165e\u165f\t_\2"+
		"\2\u165f\u0217\3\2\2\2\u1660\u1665\7\u00e7\2\2\u1661\u1665\5\u029a\u014e"+
		"\2\u1662\u1665\7\u045b\2\2\u1663\u1665\7\u0458\2\2\u1664\u1660\3\2\2\2"+
		"\u1664\u1661\3\2\2\2\u1664\u1662\3\2\2\2\u1664\u1663\3\2\2\2\u1665\u0219"+
		"\3\2\2\2\u1666\u1669\5\u0226\u0114\2\u1667\u1669\7\u045b\2\2\u1668\u1666"+
		"\3\2\2\2\u1668\u1667\3\2\2\2\u1669\u021b\3\2\2\2\u166a\u166b\t`\2\2\u166b"+
		"\u021d\3\2\2\2\u166c\u166d\5\u022c\u0117\2\u166d\u166e\7\u0440\2\2\u166e"+
		"\u166f\5\u022c\u0117\2\u166f\u1670\7\u0440\2\2\u1670\u1671\5\u022c\u0117"+
		"\2\u1671\u1672\7\u0440\2\2\u1672\u1673\5\u022c\u0117\2\u1673\u1674\7\u0440"+
		"\2\2\u1674\u167a\5\u022c\u0117\2\u1675\u1676\7\u0457\2\2\u1676\u1677\5"+
		"\u022c\u0117\2\u1677\u1678\7\u0440\2\2\u1678\u1679\5\u022c\u0117\2\u1679"+
		"\u167b\3\2\2\2\u167a\u1675\3\2\2\2\u167b\u167c\3\2\2\2\u167c\u167a\3\2"+
		"\2\2\u167c\u167d\3\2\2\2\u167d\u021f\3\2\2\2\u167e\u1685\5\u0222\u0112"+
		"\2\u167f\u1680\7\u044e\2\2\u1680\u1683\5\u0222\u0112\2\u1681\u1682\7\u044e"+
		"\2\2\u1682\u1684\5\u022c\u0117\2\u1683\u1681\3\2\2\2\u1683\u1684\3\2\2"+
		"\2\u1684\u1686\3\2\2\2\u1685\u167f\3\2\2\2\u1685\u1686\3\2\2\2\u1686\u0221"+
		"\3\2\2\2\u1687\u168f\7\u045b\2\2\u1688\u168f\7\u0460\2\2\u1689\u168b\7"+
		"\u045d\2\2\u168a\u1689\3\2\2\2\u168b\u168c\3\2\2\2\u168c\u168a\3\2\2\2"+
		"\u168c\u168d\3\2\2\2\u168d\u168f\3\2\2\2\u168e\u1687\3\2\2\2\u168e\u1688"+
		"\3\2\2\2\u168e\u168a\3\2\2\2\u168f\u0223\3\2\2\2\u1690\u1693\5\u0226\u0114"+
		"\2\u1691\u1693\7\u045b\2\2\u1692\u1690\3\2\2\2\u1692\u1691\3\2\2\2\u1693"+
		"\u0225\3\2\2\2\u1694\u1698\5\u0228\u0115\2\u1695\u1698\7\u0464\2\2\u1696"+
		"\u1698\7\u0458\2\2\u1697\u1694\3\2\2\2\u1697\u1695\3\2\2\2\u1697\u1696"+
		"\3\2\2\2\u1698\u0227\3\2\2\2\u1699\u16a3\7\u0463\2\2\u169a\u16a3\5\u029a"+
		"\u014e\2\u169b\u16a3\5\u029c\u014f\2\u169c\u16a3\5\u021c\u010f\2\u169d"+
		"\u16a3\5\u029e\u0150\2\u169e\u16a3\5\u02a0\u0151\2\u169f\u16a3\5\u02a2"+
		"\u0152\2\u16a0\u16a3\5\u02a4\u0153\2\u16a1\u16a3\5\u02a6\u0154\2\u16a2"+
		"\u1699\3\2\2\2\u16a2\u169a\3\2\2\2\u16a2\u169b\3\2\2\2\u16a2\u169c\3\2"+
		"\2\2\u16a2\u169d\3\2\2\2\u16a2\u169e\3\2\2\2\u16a2\u169f\3\2\2\2\u16a2"+
		"\u16a0\3\2\2\2\u16a2\u16a1\3\2\2\2\u16a3\u0229\3\2\2\2\u16a4\u16a8\7\u0462"+
		"\2\2\u16a5\u16a6\7\u044b\2\2\u16a6\u16a8\5\u0226\u0114\2\u16a7\u16a4\3"+
		"\2\2\2\u16a7\u16a5\3\2\2\2\u16a8\u022b\3\2\2\2\u16a9\u16aa\ta\2\2\u16aa"+
		"\u022d\3\2\2\2\u16ab\u16ae\7\u0459\2\2\u16ac\u16ae\5\u022c\u0117\2\u16ad"+
		"\u16ab\3\2\2\2\u16ad\u16ac\3\2\2\2\u16ae\u022f\3\2\2\2\u16af\u16b1\7\u0461"+
		"\2\2\u16b0\u16af\3\2\2\2\u16b0\u16b1\3\2\2\2\u16b1\u16b2\3\2\2\2\u16b2"+
		"\u16b5\7\u045b\2\2\u16b3\u16b5\7\u045a\2\2\u16b4\u16b0\3\2\2\2\u16b4\u16b3"+
		"\3\2\2\2\u16b5\u16b7\3\2\2\2\u16b6\u16b8\7\u045b\2\2\u16b7\u16b6\3\2\2"+
		"\2\u16b8\u16b9\3\2\2\2\u16b9\u16b7\3\2\2\2\u16b9\u16ba\3\2\2\2\u16ba\u16c7"+
		"\3\2\2\2\u16bb\u16bd\7\u0461\2\2\u16bc\u16bb\3\2\2\2\u16bc\u16bd\3\2\2"+
		"\2\u16bd\u16be\3\2\2\2\u16be\u16c1\7\u045b\2\2\u16bf\u16c1\7\u045a\2\2"+
		"\u16c0\u16bc\3\2\2\2\u16c0\u16bf\3\2\2\2\u16c1\u16c4\3\2\2\2\u16c2\u16c3"+
		"\7*\2\2\u16c3\u16c5\5\u021a\u010e\2\u16c4\u16c2\3\2\2\2\u16c4\u16c5\3"+
		"\2\2\2\u16c5\u16c7\3\2\2\2\u16c6\u16b4\3\2\2\2\u16c6\u16c0\3\2\2\2\u16c7"+
		"\u0231\3\2\2\2\u16c8\u16c9\tb\2\2\u16c9\u0233\3\2\2\2\u16ca\u16cc\7\u0461"+
		"\2\2\u16cb\u16ca\3\2\2\2\u16cb\u16cc\3\2\2\2\u16cc\u16cd\3\2\2\2\u16cd"+
		"\u16ce\7\u045d\2\2\u16ce\u0235\3\2\2\2\u16cf\u16d1\7{\2\2\u16d0\u16cf"+
		"\3\2\2\2\u16d0\u16d1\3\2\2\2\u16d1\u16d2\3\2\2\2\u16d2\u16d3\tc\2\2\u16d3"+
		"\u0237\3\2\2\2\u16d4\u16e1\5\u0230\u0119\2\u16d5\u16e1\5\u022c\u0117\2"+
		"\u16d6\u16d7\7\u0440\2\2\u16d7\u16e1\5\u022c\u0117\2\u16d8\u16e1\5\u0234"+
		"\u011b\2\u16d9\u16e1\5\u0232\u011a\2\u16da\u16e1\7\u045e\2\2\u16db\u16e1"+
		"\7\u0460\2\2\u16dc\u16de\7{\2\2\u16dd\u16dc\3\2\2\2\u16dd\u16de\3\2\2"+
		"\2\u16de\u16df\3\2\2\2\u16df\u16e1\tc\2\2\u16e0\u16d4\3\2\2\2\u16e0\u16d5"+
		"\3\2\2\2\u16e0\u16d6\3\2\2\2\u16e0\u16d8\3\2\2\2\u16e0\u16d9\3\2\2\2\u16e0"+
		"\u16da\3\2\2\2\u16e0\u16db\3\2\2\2\u16e0\u16dd\3\2\2\2\u16e1\u0239\3\2"+
		"\2\2\u16e2\u16e4\td\2\2\u16e3\u16e5\7\u00f3\2\2\u16e4\u16e3\3\2\2\2\u16e4"+
		"\u16e5\3\2\2\2\u16e5\u16e7\3\2\2\2\u16e6\u16e8\5\u0240\u0121\2\u16e7\u16e6"+
		"\3\2\2\2\u16e7\u16e8\3\2\2\2\u16e8\u16ea\3\2\2\2\u16e9\u16eb\7\u00e7\2"+
		"\2\u16ea\u16e9\3\2\2\2\u16ea\u16eb\3\2\2\2\u16eb\u16f2\3\2\2\2\u16ec\u16ed"+
		"\7(\2\2\u16ed\u16f0\7\u00a1\2\2\u16ee\u16f0\7\u032c\2\2\u16ef\u16ec\3"+
		"\2\2\2\u16ef\u16ee\3\2\2\2\u16f0\u16f1\3\2\2\2\u16f1\u16f3\5\u0218\u010d"+
		"\2\u16f2\u16ef\3\2\2\2\u16f2\u16f3\3\2\2\2\u16f3\u16f7\3\2\2\2\u16f4\u16f5"+
		"\7*\2\2\u16f5\u16f8\5\u021a\u010e\2\u16f6\u16f8\7\u00e7\2\2\u16f7\u16f4"+
		"\3\2\2\2\u16f7\u16f6\3\2\2\2\u16f7\u16f8\3\2\2\2\u16f8\u1766\3\2\2\2\u16f9"+
		"\u16fa\7\u00e6\2\2\u16fa\u16fc\te\2\2\u16fb\u16fd\5\u0240\u0121\2\u16fc"+
		"\u16fb\3\2\2\2\u16fc\u16fd\3\2\2\2\u16fd\u16ff\3\2\2\2\u16fe\u1700\7\u00e7"+
		"\2\2\u16ff\u16fe\3\2\2\2\u16ff\u1700\3\2\2\2\u1700\u1766\3\2\2\2\u1701"+
		"\u1702\7\u0200\2\2\u1702\u1704\7\u00e4\2\2\u1703\u1705\5\u0240\u0121\2"+
		"\u1704\u1703\3\2\2\2\u1704\u1705\3\2\2\2\u1705\u1707\3\2\2\2\u1706\u1708"+
		"\7\u00e7\2\2\u1707\u1706\3\2\2\2\u1707\u1708\3\2\2\2\u1708\u1766\3\2\2"+
		"\2\u1709\u170a\7\u00e6\2\2\u170a\u170b\tf\2\2\u170b\u170d\7\u00f3\2\2"+
		"\u170c\u170e\5\u0240\u0121\2\u170d\u170c\3\2\2\2\u170d\u170e\3\2\2\2\u170e"+
		"\u1710\3\2\2\2\u170f\u1711\7\u00e7\2\2\u1710\u170f\3\2\2\2\u1710\u1711"+
		"\3\2\2\2\u1711\u1766\3\2\2\2\u1712\u1714\tg\2\2\u1713\u1715\5\u0240\u0121"+
		"\2\u1714\u1713\3\2\2\2\u1714\u1715\3\2\2\2\u1715\u1717\3\2\2\2\u1716\u1718"+
		"\th\2\2\u1717\u1716\3\2\2\2\u1717\u1718\3\2\2\2\u1718\u171a\3\2\2\2\u1719"+
		"\u171b\7\u00c8\2\2\u171a\u1719\3\2\2\2\u171a\u171b\3\2\2\2\u171b\u1766"+
		"\3\2\2\2\u171c\u171e\7\u00d5\2\2\u171d\u171f\5\u0242\u0122\2\u171e\u171d"+
		"\3\2\2\2\u171e\u171f\3\2\2\2\u171f\u1721\3\2\2\2\u1720\u1722\th\2\2\u1721"+
		"\u1720\3\2\2\2\u1721\u1722\3\2\2\2\u1722\u1724\3\2\2\2\u1723\u1725\7\u00c8"+
		"\2\2\u1724\u1723\3\2\2\2\u1724\u1725\3\2\2\2\u1725\u1766\3\2\2\2\u1726"+
		"\u1728\7\u00d6\2\2\u1727\u1729\7\u00d7\2\2\u1728\u1727\3\2\2\2\u1728\u1729"+
		"\3\2\2\2\u1729\u172b\3\2\2\2\u172a\u172c\5\u0242\u0122\2\u172b\u172a\3"+
		"\2\2\2\u172b\u172c\3\2\2\2\u172c\u172e\3\2\2\2\u172d\u172f\th\2\2\u172e"+
		"\u172d\3\2\2\2\u172e\u172f\3\2\2\2\u172f\u1731\3\2\2\2\u1730\u1732\7\u00c8"+
		"\2\2\u1731\u1730\3\2\2\2\u1731\u1732\3\2\2\2\u1732\u1766\3\2\2\2\u1733"+
		"\u1735\ti\2\2\u1734\u1736\5\u0244\u0123\2\u1735\u1734\3\2\2\2\u1735\u1736"+
		"\3\2\2\2\u1736\u1738\3\2\2\2\u1737\u1739\th\2\2\u1738\u1737\3\2\2\2\u1738"+
		"\u1739\3\2\2\2\u1739\u173b\3\2\2\2\u173a\u173c\7\u00c8\2\2\u173b\u173a"+
		"\3\2\2\2\u173b\u173c\3\2\2\2\u173c\u1766\3\2\2\2\u173d\u1766\tj\2\2\u173e"+
		"\u1740\tk\2\2\u173f\u1741\5\u0240\u0121\2\u1740\u173f\3\2\2\2\u1740\u1741"+
		"\3\2\2\2\u1741\u1766\3\2\2\2\u1742\u1743\tl\2\2\u1743\u1745\5\u023c\u011f"+
		"\2\u1744\u1746\7\u00e7\2\2\u1745\u1744\3\2\2\2\u1745\u1746\3\2\2\2\u1746"+
		"\u174d\3\2\2\2\u1747\u1748\7(\2\2\u1748\u174b\7\u00a1\2\2\u1749\u174b"+
		"\7\u032c\2\2\u174a\u1747\3\2\2\2\u174a\u1749\3\2\2\2\u174b\u174c\3\2\2"+
		"\2\u174c\u174e\5\u0218\u010d\2\u174d\u174a\3\2\2\2\u174d\u174e\3\2\2\2"+
		"\u174e\u1766\3\2\2\2\u174f\u1766\tm\2\2\u1750\u1752\7\u00ec\2\2\u1751"+
		"\u1753\7\u00e4\2\2\u1752\u1751\3\2\2\2\u1752\u1753\3\2\2\2\u1753\u1755"+
		"\3\2\2\2\u1754\u1756\7\u00e7\2\2\u1755\u1754\3\2\2\2\u1755\u1756\3\2\2"+
		"\2\u1756\u175d\3\2\2\2\u1757\u1758\7(\2\2\u1758\u175b\7\u00a1\2\2\u1759"+
		"\u175b\7\u032c\2\2\u175a\u1757\3\2\2\2\u175a\u1759\3\2\2\2\u175b\u175c"+
		"\3\2\2\2\u175c\u175e\5\u0218\u010d\2\u175d\u175a\3\2\2\2\u175d\u175e\3"+
		"\2\2\2\u175e\u1761\3\2\2\2\u175f\u1760\7*\2\2\u1760\u1762\5\u021a\u010e"+
		"\2\u1761\u175f\3\2\2\2\u1761\u1762\3\2\2\2\u1762\u1766\3\2\2\2\u1763\u1764"+
		"\7\u00ec\2\2\u1764\u1766\7\u00e8\2\2\u1765\u16e2\3\2\2\2\u1765\u16f9\3"+
		"\2\2\2\u1765\u1701\3\2\2\2\u1765\u1709\3\2\2\2\u1765\u1712\3\2\2\2\u1765"+
		"\u171c\3\2\2\2\u1765\u1726\3\2\2\2\u1765\u1733\3\2\2\2\u1765\u173d\3\2"+
		"\2\2\u1765\u173e\3\2\2\2\u1765\u1742\3\2\2\2\u1765\u174f\3\2\2\2\u1765"+
		"\u1750\3\2\2\2\u1765\u1763\3\2\2\2\u1766\u023b\3\2\2\2\u1767\u1768\7\u044c"+
		"\2\2\u1768\u176d\7\u045b\2\2\u1769\u176a\7\u044e\2\2\u176a\u176c\7\u045b"+
		"\2\2\u176b\u1769\3\2\2\2\u176c\u176f\3\2\2\2\u176d\u176b\3\2\2\2\u176d"+
		"\u176e\3\2\2\2\u176e\u1770\3\2\2\2\u176f\u176d\3\2\2\2\u1770\u1771\7\u044d"+
		"\2\2\u1771\u023d\3\2\2\2\u1772\u1774\tn\2\2\u1773\u1775\5\u0240\u0121"+
		"\2\u1774\u1773\3\2\2\2\u1774\u1775\3\2\2\2\u1775\u178e\3\2\2\2\u1776\u1778"+
		"\7\u00e3\2\2\u1777\u1779\5\u0240\u0121\2\u1778\u1777\3\2\2\2\u1778\u1779"+
		"\3\2\2\2\u1779\u1780\3\2\2\2\u177a\u177b\7(\2\2\u177b\u177e\7\u00a1\2"+
		"\2\u177c\u177e\7\u032c\2\2\u177d\u177a\3\2\2\2\u177d\u177c\3\2\2\2\u177e"+
		"\u177f\3\2\2\2\u177f\u1781\5\u0218\u010d\2\u1780\u177d\3\2\2\2\u1780\u1781"+
		"\3\2\2\2\u1781\u178e\3\2\2\2\u1782\u178e\to\2\2\u1783\u1785\7\u00db\2"+
		"\2\u1784\u1786\5\u0242\u0122\2\u1785\u1784\3\2\2\2\u1785\u1786\3\2\2\2"+
		"\u1786\u178e\3\2\2\2\u1787\u1789\th\2\2\u1788\u178a\7\u00d3\2\2\u1789"+
		"\u1788\3\2\2\2\u1789\u178a\3\2\2\2\u178a\u178e\3\2\2\2\u178b\u178c\7\u00bc"+
		"\2\2\u178c\u178e\7\33\2\2\u178d\u1772\3\2\2\2\u178d\u1776\3\2\2\2\u178d"+
		"\u1782\3\2\2\2\u178d\u1783\3\2\2\2\u178d\u1787\3\2\2\2\u178d\u178b\3\2"+
		"\2\2\u178e\u023f\3\2\2\2\u178f\u1790\7\u044c\2\2\u1790\u1791\5\u022c\u0117"+
		"\2\u1791\u1792\7\u044d\2\2\u1792\u0241\3\2\2\2\u1793\u1794\7\u044c\2\2"+
		"\u1794\u1795\5\u022c\u0117\2\u1795\u1796\7\u044e\2\2\u1796\u1797\5\u022c"+
		"\u0117\2\u1797\u1798\7\u044d\2\2\u1798\u0243\3\2\2\2\u1799\u179a\7\u044c"+
		"\2\2\u179a\u179d\5\u022c\u0117\2\u179b\u179c\7\u044e\2\2\u179c\u179e\5"+
		"\u022c\u0117\2\u179d\u179b\3\2\2\2\u179d\u179e\3\2\2\2\u179e\u179f\3\2"+
		"\2\2\u179f\u17a0\7\u044d\2\2\u17a0\u0245\3\2\2\2\u17a1\u17a6\5\u0226\u0114"+
		"\2\u17a2\u17a3\7\u044e\2\2\u17a3\u17a5\5\u0226\u0114\2\u17a4\u17a2\3\2"+
		"\2\2\u17a5\u17a8\3\2\2\2\u17a6\u17a4\3\2\2\2\u17a6\u17a7\3\2\2\2\u17a7"+
		"\u0247\3\2\2\2\u17a8\u17a6\3\2\2\2\u17a9\u17ae\5\u020e\u0108\2\u17aa\u17ab"+
		"\7\u044e\2\2\u17ab\u17ad\5\u020e\u0108\2\u17ac\u17aa\3\2\2\2\u17ad\u17b0"+
		"\3\2\2\2\u17ae\u17ac\3\2\2\2\u17ae\u17af\3\2\2\2\u17af\u0249\3\2\2\2\u17b0"+
		"\u17ae\3\2\2\2\u17b1\u17b2\7\u044c\2\2\u17b2\u17b7\5\u0212\u010a\2\u17b3"+
		"\u17b4\7\u044e\2\2\u17b4\u17b6\5\u0212\u010a\2\u17b5\u17b3\3\2\2\2\u17b6"+
		"\u17b9\3\2\2\2\u17b7\u17b5\3\2\2\2\u17b7\u17b8\3\2\2\2\u17b8\u17ba\3\2"+
		"\2\2\u17b9\u17b7\3\2\2\2\u17ba\u17bb\7\u044d\2\2\u17bb\u024b\3\2\2\2\u17bc"+
		"\u17c1\5\u0288\u0145\2\u17bd\u17be\7\u044e\2\2\u17be\u17c0\5\u0288\u0145"+
		"\2\u17bf\u17bd\3\2\2\2\u17c0\u17c3\3\2\2\2\u17c1\u17bf\3\2\2\2\u17c1\u17c2"+
		"\3\2\2\2\u17c2\u024d\3\2\2\2\u17c3\u17c1\3\2\2\2\u17c4\u17c9\5\u025a\u012e"+
		"\2\u17c5\u17c6\7\u044e\2\2\u17c6\u17c8\5\u025a\u012e\2\u17c7\u17c5\3\2"+
		"\2\2\u17c8\u17cb\3\2\2\2\u17c9\u17c7\3\2\2\2\u17c9\u17ca\3\2\2\2\u17ca"+
		"\u024f\3\2\2\2\u17cb\u17c9\3\2\2\2\u17cc\u17d1\5\u0238\u011d\2\u17cd\u17ce"+
		"\7\u044e\2\2\u17ce\u17d0\5\u0238\u011d\2\u17cf\u17cd\3\2\2\2\u17d0\u17d3"+
		"\3\2\2\2\u17d1\u17cf\3\2\2\2\u17d1\u17d2\3\2\2\2\u17d2\u0251\3\2\2\2\u17d3"+
		"\u17d1\3\2\2\2\u17d4\u17d9\7\u045b\2\2\u17d5\u17d6\7\u044e\2\2\u17d6\u17d8"+
		"\7\u045b\2\2\u17d7\u17d5\3\2\2\2\u17d8\u17db\3\2\2\2\u17d9\u17d7\3\2\2"+
		"\2\u17d9\u17da\3\2\2\2\u17da\u0253\3\2\2\2\u17db\u17d9\3\2\2\2\u17dc\u17e1"+
		"\7\u0467\2\2\u17dd\u17de\7\u044e\2\2\u17de\u17e0\7\u0467\2\2\u17df\u17dd"+
		"\3\2\2\2\u17e0\u17e3\3\2\2\2\u17e1\u17df\3\2\2\2\u17e1\u17e2\3\2\2\2\u17e2"+
		"\u0255\3\2\2\2\u17e3\u17e1\3\2\2\2\u17e4\u17ef\7}\2\2\u17e5\u17e7\5\u028e"+
		"\u0148\2\u17e6\u17e5\3\2\2\2\u17e6\u17e7\3\2\2\2\u17e7\u17e8\3\2\2\2\u17e8"+
		"\u17ef\5\u0238\u011d\2\u17e9\u17ef\5\u0258\u012d\2\u17ea\u17eb\7\u044c"+
		"\2\2\u17eb\u17ec\5\u0288\u0145\2\u17ec\u17ed\7\u044d\2\2\u17ed\u17ef\3"+
		"\2\2\2\u17ee\u17e4\3\2\2\2\u17ee\u17e6\3\2\2\2\u17ee\u17e9\3\2\2\2\u17ee"+
		"\u17ea\3\2\2\2\u17ef\u17f3\3\2\2\2\u17f0\u17f1\7\177\2\2\u17f1\u17f2\7"+
		"\u00bd\2\2\u17f2\u17f4\5\u0258\u012d\2\u17f3\u17f0\3\2\2\2\u17f3\u17f4"+
		"\3\2\2\2\u17f4\u0257\3\2\2\2\u17f5\u17fb\tp\2\2\u17f6\u17f8\7\u044c\2"+
		"\2\u17f7\u17f9\5\u022c\u0117\2\u17f8\u17f7\3\2\2\2\u17f8\u17f9\3\2\2\2"+
		"\u17f9\u17fa\3\2\2\2\u17fa\u17fc\7\u044d\2\2\u17fb\u17f6\3\2\2\2\u17fb"+
		"\u17fc\3\2\2\2\u17fc\u1804\3\2\2\2\u17fd\u17fe\7\u0145\2\2\u17fe\u1800"+
		"\7\u044c\2\2\u17ff\u1801\5\u022c\u0117\2\u1800\u17ff\3\2\2\2\u1800\u1801"+
		"\3\2\2\2\u1801\u1802\3\2\2\2\u1802\u1804\7\u044d\2\2\u1803\u17f5\3\2\2"+
		"\2\u1803\u17fd\3\2\2\2\u1804\u0259\3\2\2\2\u1805\u1808\5\u0288\u0145\2"+
		"\u1806\u1808\78\2\2\u1807\u1805\3\2\2\2\u1807\u1806\3\2\2\2\u1808\u025b"+
		"\3\2\2\2\u1809\u180a\7Z\2\2\u180a\u180b\7I\2\2\u180b\u025d\3\2\2\2\u180c"+
		"\u180d\7Z\2\2\u180d\u180e\7{\2\2\u180e\u180f\7I\2\2\u180f\u025f\3\2\2"+
		"\2\u1810\u1823\5\u0262\u0132\2\u1811\u1823\5\u026a\u0136\2\u1812\u1823"+
		"\5\u026c\u0137\2\u1813\u1814\5\u0280\u0141\2\u1814\u1816\7\u044c\2\2\u1815"+
		"\u1817\5\u0284\u0143\2\u1816\u1815\3\2\2\2\u1816\u1817\3\2\2\2\u1817\u1818"+
		"\3\2\2\2\u1818\u1819\7\u044d\2\2\u1819\u1823\3\2\2\2\u181a\u181b\5\u020c"+
		"\u0107\2\u181b\u181d\7\u044c\2\2\u181c\u181e\5\u0284\u0143\2\u181d\u181c"+
		"\3\2\2\2\u181d\u181e\3\2\2\2\u181e\u181f\3\2\2\2\u181f\u1820\7\u044d\2"+
		"\2\u1820\u1823\3\2\2\2\u1821\u1823\5\u0282\u0142\2\u1822\u1810\3\2\2\2"+
		"\u1822\u1811\3\2\2\2\u1822\u1812\3\2\2\2\u1822\u1813\3\2\2\2\u1822\u181a"+
		"\3\2\2\2\u1822\u1821\3\2\2\2\u1823\u0261\3\2\2\2\u1824\u1827\tq\2\2\u1825"+
		"\u1826\7\u044c\2\2\u1826\u1828\7\u044d\2\2\u1827\u1825\3\2\2\2\u1827\u1828"+
		"\3\2\2\2\u1828\u18e5\3\2\2\2\u1829\u182a\7/\2\2\u182a\u182b\7\u044c\2"+
		"\2\u182b\u182c\5\u0288\u0145\2\u182c\u182d\7\u044e\2\2\u182d\u182e\5\u023e"+
		"\u0120\2\u182e\u182f\7\u044d\2\2\u182f\u18e5\3\2\2\2\u1830\u1831\7/\2"+
		"\2\u1831\u1832\7\u044c\2\2\u1832\u1833\5\u0288\u0145\2\u1833\u1834\7\u00c0"+
		"\2\2\u1834\u1835\5\u0218\u010d\2\u1835\u1836\7\u044d\2\2\u1836\u18e5\3"+
		"\2\2\2\u1837\u1838\7&\2\2\u1838\u1839\7\u044c\2\2\u1839\u183a\5\u0288"+
		"\u0145\2\u183a\u183b\7\34\2\2\u183b\u183c\5\u023e\u0120\2\u183c\u183d"+
		"\7\u044d\2\2\u183d\u18e5\3\2\2\2\u183e\u183f\7\u00c1\2\2\u183f\u1840\7"+
		"\u044c\2\2\u1840\u1841\5\u0210\u0109\2\u1841\u1842\7\u044d\2\2\u1842\u18e5"+
		"\3\2\2\2\u1843\u1844\7%\2\2\u1844\u1846\5\u0288\u0145\2\u1845\u1847\5"+
		"\u0264\u0133\2\u1846\u1845\3\2\2\2\u1847\u1848\3\2\2\2\u1848\u1846\3\2"+
		"\2\2\u1848\u1849\3\2\2\2\u1849\u184c\3\2\2\2\u184a\u184b\7C\2\2\u184b"+
		"\u184d\5\u0286\u0144\2\u184c\u184a\3\2\2\2\u184c\u184d\3\2\2\2\u184d\u184e"+
		"\3\2\2\2\u184e\u184f\7\u0195\2\2\u184f\u18e5\3\2\2\2\u1850\u1852\7%\2"+
		"\2\u1851\u1853\5\u0264\u0133\2\u1852\u1851\3\2\2\2\u1853\u1854\3\2\2\2"+
		"\u1854\u1852\3\2\2\2\u1854\u1855\3\2\2\2\u1855\u1858\3\2\2\2\u1856\u1857"+
		"\7C\2\2\u1857\u1859\5\u0286\u0144\2\u1858\u1856\3\2\2\2\u1858\u1859\3"+
		"\2\2\2\u1859\u185a\3\2\2\2\u185a\u185b\7\u0195\2\2\u185b\u18e5\3\2\2\2"+
		"\u185c\u185d\7\u00e3\2\2\u185d\u185e\7\u044c\2\2\u185e\u1861\5\u0284\u0143"+
		"\2\u185f\u1860\7\u00c0\2\2\u1860\u1862\5\u0218\u010d\2\u1861\u185f\3\2"+
		"\2\2\u1861\u1862\3\2\2\2\u1862\u1863\3\2\2\2\u1863\u1864\7\u044d\2\2\u1864"+
		"\u18e5\3\2\2\2\u1865\u1866\7\u0146\2\2\u1866\u1869\7\u044c\2\2\u1867\u186a"+
		"\5\u0230\u0119\2\u1868\u186a\5\u0288\u0145\2\u1869\u1867\3\2\2\2\u1869"+
		"\u1868\3\2\2\2\u186a\u186b\3\2\2\2\u186b\u186e\7\\\2\2\u186c\u186f\5\u0230"+
		"\u0119\2\u186d\u186f\5\u0288\u0145\2\u186e\u186c\3\2\2\2\u186e\u186d\3"+
		"\2\2\2\u186f\u1870\3\2\2\2\u1870\u1871\7\u044d\2\2\u1871\u18e5\3\2\2\2"+
		"\u1872\u1873\tr\2\2\u1873\u1876\7\u044c\2\2\u1874\u1877\5\u0230\u0119"+
		"\2\u1875\u1877\5\u0288\u0145\2\u1876\u1874\3\2\2\2\u1876\u1875\3\2\2\2"+
		"\u1877\u1878\3\2\2\2\u1878\u187b\7Q\2\2\u1879\u187c\5\u022c\u0117\2\u187a"+
		"\u187c\5\u0288\u0145\2\u187b\u1879\3\2\2\2\u187b\u187a\3\2\2\2\u187c\u1882"+
		"\3\2\2\2\u187d\u1880\7N\2\2\u187e\u1881\5\u022c\u0117\2\u187f\u1881\5"+
		"\u0288\u0145\2\u1880\u187e\3\2\2\2\u1880\u187f\3\2\2\2\u1881\u1883\3\2"+
		"\2\2\u1882\u187d\3\2\2\2\u1882\u1883\3\2\2\2\u1883\u1884\3\2\2\2\u1884"+
		"\u1885\7\u044d\2\2\u1885\u18e5\3\2\2\2\u1886\u1887\7\u014a\2\2\u1887\u1888"+
		"\7\u044c\2\2\u1888\u188b\ts\2\2\u1889\u188c\5\u0230\u0119\2\u188a\u188c"+
		"\5\u0288\u0145\2\u188b\u1889\3\2\2\2\u188b\u188a\3\2\2\2\u188b\u188c\3"+
		"\2\2\2\u188c\u188d\3\2\2\2\u188d\u1890\7Q\2\2\u188e\u1891\5\u0230\u0119"+
		"\2\u188f\u1891\5\u0288\u0145\2\u1890\u188e\3\2\2\2\u1890\u188f\3\2\2\2"+
		"\u1891\u1892\3\2\2\2\u1892\u1893\7\u044d\2\2\u1893\u18e5\3\2\2\2\u1894"+
		"\u1895\7\u014a\2\2\u1895\u1898\7\u044c\2\2\u1896\u1899\5\u0230\u0119\2"+
		"\u1897\u1899\5\u0288\u0145\2\u1898\u1896\3\2\2\2\u1898\u1897\3\2\2\2\u1899"+
		"\u189a\3\2\2\2\u189a\u189d\7Q\2\2\u189b\u189e\5\u0230\u0119\2\u189c\u189e"+
		"\5\u0288\u0145\2\u189d\u189b\3\2\2\2\u189d\u189c\3\2\2\2\u189e\u189f\3"+
		"\2\2\2\u189f\u18a0\7\u044d\2\2\u18a0\u18e5\3\2\2\2\u18a1\u18a2\7\u042e"+
		"\2\2\u18a2\u18a5\7\u044c\2\2\u18a3\u18a6\5\u0230\u0119\2\u18a4\u18a6\5"+
		"\u0288\u0145\2\u18a5\u18a3\3\2\2\2\u18a5\u18a4\3\2\2\2\u18a6\u18ad\3\2"+
		"\2\2\u18a7\u18a8\7\34\2\2\u18a8\u18a9\tt\2\2\u18a9\u18aa\7\u044c\2\2\u18aa"+
		"\u18ab\5\u022c\u0117\2\u18ab\u18ac\7\u044d\2\2\u18ac\u18ae\3\2\2\2\u18ad"+
		"\u18a7\3\2\2\2\u18ad\u18ae\3\2\2\2\u18ae\u18b0\3\2\2\2\u18af\u18b1\5\u0266"+
		"\u0134\2\u18b0\u18af\3\2\2\2\u18b0\u18b1\3\2\2\2\u18b1\u18b2\3\2\2\2\u18b2"+
		"\u18b3\7\u044d\2\2\u18b3\u18e5\3\2\2\2\u18b4\u18b5\7\u0143\2\2\u18b5\u18b6"+
		"\7\u044c\2\2\u18b6\u18b7\5<\37\2\u18b7\u18ba\7Q\2\2\u18b8\u18bb\5\u0230"+
		"\u0119\2\u18b9\u18bb\5\u0288\u0145\2\u18ba\u18b8\3\2\2\2\u18ba\u18b9\3"+
		"\2\2\2\u18bb\u18bc\3\2\2\2\u18bc\u18bd\7\u044d\2\2\u18bd\u18e5\3\2\2\2"+
		"\u18be\u18bf\7\u0366\2\2\u18bf\u18c0\7\u044c\2\2\u18c0\u18c1\tu\2\2\u18c1"+
		"\u18c2\7\u044e\2\2\u18c2\u18c3\5\u0230\u0119\2\u18c3\u18c4\7\u044d\2\2"+
		"\u18c4\u18e5\3\2\2\2\u18c5\u18c6\7\u0109\2\2\u18c6\u18c7\7\u044c\2\2\u18c7"+
		"\u18c8\5\u0288\u0145\2\u18c8\u18c9\7\u044e\2\2\u18c9\u18cc\5\u0288\u0145"+
		"\2\u18ca\u18cb\7\u0240\2\2\u18cb\u18cd\5\u023e\u0120\2\u18cc\u18ca\3\2"+
		"\2\2\u18cc\u18cd\3\2\2\2\u18cd\u18d6\3\2\2\2\u18ce\u18d3\7}\2\2\u18cf"+
		"\u18d3\7\u0199\2\2\u18d0\u18d1\78\2\2\u18d1\u18d3\5\u0256\u012c\2\u18d2"+
		"\u18ce\3\2\2\2\u18d2\u18cf\3\2\2\2\u18d2\u18d0\3\2\2\2\u18d3\u18d4\3\2"+
		"\2\2\u18d4\u18d5\7\177\2\2\u18d5\u18d7\7E\2\2\u18d6\u18d2\3\2\2\2\u18d6"+
		"\u18d7\3\2\2\2\u18d7\u18e0\3\2\2\2\u18d8\u18dd\7}\2\2\u18d9\u18dd\7\u0199"+
		"\2\2\u18da\u18db\78\2\2\u18db\u18dd\5\u0256\u012c\2\u18dc\u18d8\3\2\2"+
		"\2\u18dc\u18d9\3\2\2\2\u18dc\u18da\3\2\2\2\u18dd\u18de\3\2\2\2\u18de\u18df"+
		"\7\177\2\2\u18df\u18e1\7\u0199\2\2\u18e0\u18dc\3\2\2\2\u18e0\u18e1\3\2"+
		"\2\2\u18e1\u18e2\3\2\2\2\u18e2\u18e3\7\u044d\2\2\u18e3\u18e5\3\2\2\2\u18e4"+
		"\u1824\3\2\2\2\u18e4\u1829\3\2\2\2\u18e4\u1830\3\2\2\2\u18e4\u1837\3\2"+
		"\2\2\u18e4\u183e\3\2\2\2\u18e4\u1843\3\2\2\2\u18e4\u1850\3\2\2\2\u18e4"+
		"\u185c\3\2\2\2\u18e4\u1865\3\2\2\2\u18e4\u1872\3\2\2\2\u18e4\u1886\3\2"+
		"\2\2\u18e4\u1894\3\2\2\2\u18e4\u18a1\3\2\2\2\u18e4\u18b4\3\2\2\2\u18e4"+
		"\u18be\3\2\2\2\u18e4\u18c5\3\2\2\2\u18e5\u0263\3\2\2\2\u18e6\u18e7\7\u00c2"+
		"\2\2\u18e7\u18e8\5\u0286\u0144\2\u18e8\u18e9\7\u00b3\2\2\u18e9\u18ea\5"+
		"\u0286\u0144\2\u18ea\u0265\3\2\2\2\u18eb\u18ec\7\u01d2\2\2\u18ec\u18f1"+
		"\5\u0268\u0135\2\u18ed\u18ee\7\u044e\2\2\u18ee\u18f0\5\u0268\u0135\2\u18ef"+
		"\u18ed\3\2\2\2\u18f0\u18f3\3\2\2\2\u18f1\u18ef\3\2\2\2\u18f1\u18f2\3\2"+
		"\2\2\u18f2\u18fa\3\2\2\2\u18f3\u18f1\3\2\2\2\u18f4\u18f5\7\u01d2\2\2\u18f5"+
		"\u18f6\5\u022c\u0117\2\u18f6\u18f7\7\u0440\2\2\u18f7\u18f8\5\u022c\u0117"+
		"\2\u18f8\u18fa\3\2\2\2\u18f9\u18eb\3\2\2\2\u18f9\u18f4\3\2\2\2\u18fa\u0267"+
		"\3\2\2\2\u18fb\u18fd\5\u022c\u0117\2\u18fc\u18fe\tv\2\2\u18fd\u18fc\3"+
		"\2\2\2\u18fd\u18fe\3\2\2\2\u18fe\u0269\3\2\2\2\u18ff\u1900\tw\2\2\u1900"+
		"\u1902\7\u044c\2\2\u1901\u1903\t*\2\2\u1902\u1901\3\2\2\2\u1902\u1903"+
		"\3\2\2\2\u1903\u1904\3\2\2\2\u1904\u1905\5\u0286\u0144\2\u1905\u1907\7"+
		"\u044d\2\2\u1906\u1908\5\u026e\u0138\2\u1907\u1906\3\2\2\2\u1907\u1908"+
		"\3\2\2\2\u1908\u193b\3\2\2\2\u1909\u190a\7\u0124\2\2\u190a\u1912\7\u044c"+
		"\2\2\u190b\u1913\7\u043c\2\2\u190c\u190e\7\26\2\2\u190d\u190c\3\2\2\2"+
		"\u190d\u190e\3\2\2\2\u190e\u190f\3\2\2\2\u190f\u1913\5\u0286\u0144\2\u1910"+
		"\u1911\7?\2\2\u1911\u1913\5\u0284\u0143\2\u1912\u190b\3\2\2\2\u1912\u190d"+
		"\3\2\2\2\u1912\u1910\3\2\2\2\u1913\u1914\3\2\2\2\u1914\u1916\7\u044d\2"+
		"\2\u1915\u1917\5\u026e\u0138\2\u1916\u1915\3\2\2\2\u1916\u1917\3\2\2\2"+
		"\u1917\u193b\3\2\2\2\u1918\u1919\tx\2\2\u1919\u191b\7\u044c\2\2\u191a"+
		"\u191c\7\26\2\2\u191b\u191a\3\2\2\2\u191b\u191c\3\2\2\2\u191c\u191d\3"+
		"\2\2\2\u191d\u191e\5\u0286\u0144\2\u191e\u1920\7\u044d\2\2\u191f\u1921"+
		"\5\u026e\u0138\2\u1920\u191f\3\2\2\2\u1920\u1921\3\2\2\2\u1921\u193b\3"+
		"\2\2\2\u1922\u1923\7\u0128\2\2\u1923\u1925\7\u044c\2\2\u1924\u1926\7?"+
		"\2\2\u1925\u1924\3\2\2\2\u1925\u1926\3\2\2\2\u1926\u1927\3\2\2\2\u1927"+
		"\u1932\5\u0284\u0143\2\u1928\u1929\7\u0084\2\2\u1929\u192a\7\"\2\2\u192a"+
		"\u192f\5\u00d4k\2\u192b\u192c\7\u044e\2\2\u192c\u192e\5\u00d4k\2\u192d"+
		"\u192b\3\2\2\2\u192e\u1931\3\2\2\2\u192f\u192d\3\2\2\2\u192f\u1930\3\2"+
		"\2\2\u1930\u1933\3\2\2\2\u1931\u192f\3\2\2\2\u1932\u1928\3\2\2\2\u1932"+
		"\u1933\3\2\2\2\u1933\u1936\3\2\2\2\u1934\u1935\7\u00a2\2\2\u1935\u1937"+
		"\7\u045b\2\2\u1936\u1934\3\2\2\2\u1936\u1937\3\2\2\2\u1937\u1938\3\2\2"+
		"\2\u1938\u1939\7\u044d\2\2\u1939\u193b\3\2\2\2\u193a\u18ff\3\2\2\2\u193a"+
		"\u1909\3\2\2\2\u193a\u1918\3\2\2\2\u193a\u1922\3\2\2\2\u193b\u026b\3\2"+
		"\2\2\u193c\u193d\ty\2\2\u193d\u193e\7\u044c\2\2\u193e\u1941\5\u0288\u0145"+
		"\2\u193f\u1940\7\u044e\2\2\u1940\u1942\5\u022c\u0117\2\u1941\u193f\3\2"+
		"\2\2\u1941\u1942\3\2\2\2\u1942\u1945\3\2\2\2\u1943\u1944\7\u044e\2\2\u1944"+
		"\u1946\5\u022c\u0117\2\u1945\u1943\3\2\2\2\u1945\u1946\3\2\2\2\u1946\u1947"+
		"\3\2\2\2\u1947\u1948\7\u044d\2\2\u1948\u1949\5\u026e\u0138\2\u1949\u1963"+
		"\3\2\2\2\u194a\u194b\tz\2\2\u194b\u194c\7\u044c\2\2\u194c\u194d\5\u0288"+
		"\u0145\2\u194d\u194e\7\u044d\2\2\u194e\u194f\5\u026e\u0138\2\u194f\u1963"+
		"\3\2\2\2\u1950\u1951\t{\2\2\u1951\u1952\7\u044c\2\2\u1952\u1953\7\u044d"+
		"\2\2\u1953\u1963\5\u026e\u0138\2\u1954\u1955\7\u012f\2\2\u1955\u1956\7"+
		"\u044c\2\2\u1956\u1957\5\u0288\u0145\2\u1957\u1958\7\u044e\2\2\u1958\u1959"+
		"\5\u022c\u0117\2\u1959\u195a\7\u044d\2\2\u195a\u195b\5\u026e\u0138\2\u195b"+
		"\u1963\3\2\2\2\u195c\u195d\7\u012e\2\2\u195d\u195e\7\u044c\2\2\u195e\u195f"+
		"\5\u022c\u0117\2\u195f\u1960\7\u044d\2\2\u1960\u1961\5\u026e\u0138\2\u1961"+
		"\u1963\3\2\2\2\u1962\u193c\3\2\2\2\u1962\u194a\3\2\2\2\u1962\u1950\3\2"+
		"\2\2\u1962\u1954\3\2\2\2\u1962\u195c\3\2\2\2\u1963\u026d\3\2\2\2\u1964"+
		"\u196b\7\u0086\2\2\u1965\u1967\7\u044c\2\2\u1966\u1968\5\u0270\u0139\2"+
		"\u1967\u1966\3\2\2\2\u1967\u1968\3\2\2\2\u1968\u1969\3\2\2\2\u1969\u196c"+
		"\7\u044d\2\2\u196a\u196c\5\u0272\u013a\2\u196b\u1965\3\2\2\2\u196b\u196a"+
		"\3\2\2\2\u196c\u026f\3\2\2\2\u196d\u196f\5\u0272\u013a\2\u196e\u196d\3"+
		"\2\2\2\u196e\u196f\3\2\2\2\u196f\u1971\3\2\2\2\u1970\u1972\5\u027e\u0140"+
		"\2\u1971\u1970\3\2\2\2\u1971\u1972\3\2\2\2\u1972\u1974\3\2\2\2\u1973\u1975"+
		"\5\u00d2j\2\u1974\u1973\3\2\2\2\u1974\u1975\3\2\2\2\u1975\u1977\3\2\2"+
		"\2\u1976\u1978\5\u0274\u013b\2\u1977\u1976\3\2\2\2\u1977\u1978\3\2\2\2"+
		"\u1978\u0271\3\2\2\2\u1979\u197a\5\u0226\u0114\2\u197a\u0273\3\2\2\2\u197b"+
		"\u197c\5\u0276\u013c\2\u197c\u197d\5\u0278\u013d\2\u197d\u0275\3\2\2\2"+
		"\u197e\u197f\t|\2\2\u197f\u0277\3\2\2\2\u1980\u1983\5\u027c\u013f\2\u1981"+
		"\u1983\5\u027a\u013e\2\u1982\u1980\3\2\2\2\u1982\u1981\3\2\2\2\u1983\u0279"+
		"\3\2\2\2\u1984\u1985\7\37\2\2\u1985\u1986\5\u027c\u013f\2\u1986\u1987"+
		"\7\32\2\2\u1987\u1988\5\u027c\u013f\2\u1988\u027b\3\2\2\2\u1989\u198a"+
		"\7\62\2\2\u198a\u1991\7\u0246\2\2\u198b\u198c\7\u027d\2\2\u198c\u1991"+
		"\t}\2\2\u198d\u198e\5\u0288\u0145\2\u198e\u198f\t}\2\2\u198f\u1991\3\2"+
		"\2\2\u1990\u1989\3\2\2\2\u1990\u198b\3\2\2\2\u1990\u198d\3\2\2\2\u1991"+
		"\u027d\3\2\2\2\u1992\u1993\7\u0089\2\2\u1993\u1994\7\"\2\2\u1994\u1999"+
		"\5\u0288\u0145\2\u1995\u1996\7\u044e\2\2\u1996\u1998\5\u0288\u0145\2\u1997"+
		"\u1995\3\2\2\2\u1998\u199b\3\2\2\2\u1999\u1997\3\2\2\2\u1999\u199a\3\2"+
		"\2\2\u199a\u027f\3\2\2\2\u199b\u1999\3\2\2\2\u199c\u19b4\5\u02a6\u0154"+
		"\2\u199d\u19b4\7\u02ce\2\2\u199e\u19b4\7\u013f\2\2\u199f\u19b4\7\u013b"+
		"\2\2\u19a0\u19b4\7\u013c\2\2\u19a1\u19b4\7\u013d\2\2\u19a2\u19b4\7\u0140"+
		"\2\2\u19a3\u19b4\7\u0141\2\2\u19a4\u19b4\7\u0142\2\2\u19a5\u19b4\7Z\2"+
		"\2\u19a6\u19b4\7a\2\2\u19a7\u19b4\7\u013e\2\2\u19a8\u19b4\7\u0144\2\2"+
		"\u19a9\u19b4\7\u01f6\2\2\u19aa\u19b4\7\u0145\2\2\u19ab\u19b4\7\u0095\2"+
		"\2\u19ac\u19b4\7\u0147\2\2\u19ad\u19b4\7\u0148\2\2\u19ae\u19b4\7\u0149"+
		"\2\2\u19af\u19b4\7\u014a\2\2\u19b0\u19b4\7\u014b\2\2\u19b1\u19b4\7\u014c"+
		"\2\2\u19b2\u19b4\7\u014d\2\2\u19b3\u199c\3\2\2\2\u19b3\u199d\3\2\2\2\u19b3"+
		"\u199e\3\2\2\2\u19b3\u199f\3\2\2\2\u19b3\u19a0\3\2\2\2\u19b3\u19a1\3\2"+
		"\2\2\u19b3\u19a2\3\2\2\2\u19b3\u19a3\3\2\2\2\u19b3\u19a4\3\2\2\2\u19b3"+
		"\u19a5\3\2\2\2\u19b3\u19a6\3\2\2\2\u19b3\u19a7\3\2\2\2\u19b3\u19a8\3\2"+
		"\2\2\u19b3\u19a9\3\2\2\2\u19b3\u19aa\3\2\2\2\u19b3\u19ab\3\2\2\2\u19b3"+
		"\u19ac\3\2\2\2\u19b3\u19ad\3\2\2\2\u19b3\u19ae\3\2\2\2\u19b3\u19af\3\2"+
		"\2\2\u19b3\u19b0\3\2\2\2\u19b3\u19b1\3\2\2\2\u19b3\u19b2\3\2\2\2\u19b4"+
		"\u0281\3\2\2\2\u19b5\u19b6\t~\2\2\u19b6\u19b7\7\u044c\2\2\u19b7\u19b8"+
		"\5\u0286\u0144\2\u19b8\u19b9\7\u044d\2\2\u19b9\u0283\3\2\2\2\u19ba\u19bf"+
		"\5\u0238\u011d\2\u19bb\u19bf\5\u0210\u0109\2\u19bc\u19bf\5\u0260\u0131"+
		"\2\u19bd\u19bf\5\u0288\u0145\2\u19be\u19ba\3\2\2\2\u19be\u19bb\3\2\2\2"+
		"\u19be\u19bc\3\2\2\2\u19be\u19bd\3\2\2\2\u19bf\u19c9\3\2\2\2\u19c0\u19c5"+
		"\7\u044e\2\2\u19c1\u19c6\5\u0238\u011d\2\u19c2\u19c6\5\u0210\u0109\2\u19c3"+
		"\u19c6\5\u0260\u0131\2\u19c4\u19c6\5\u0288\u0145\2\u19c5\u19c1\3\2\2\2"+
		"\u19c5\u19c2\3\2\2\2\u19c5\u19c3\3\2\2\2\u19c5\u19c4\3\2\2\2\u19c6\u19c8"+
		"\3\2\2\2\u19c7\u19c0\3\2\2\2\u19c8\u19cb\3\2\2\2\u19c9\u19c7\3\2\2\2\u19c9"+
		"\u19ca\3\2\2\2\u19ca\u0285\3\2\2\2\u19cb\u19c9\3\2\2\2\u19cc\u19d1\5\u0238"+
		"\u011d\2\u19cd\u19d1\5\u0210\u0109\2\u19ce\u19d1\5\u0260\u0131\2\u19cf"+
		"\u19d1\5\u0288\u0145\2\u19d0\u19cc\3\2\2\2\u19d0\u19cd\3\2\2\2\u19d0\u19ce"+
		"\3\2\2\2\u19d0\u19cf\3\2\2\2\u19d1\u0287\3\2\2\2\u19d2\u19d3\b\u0145\1"+
		"\2\u19d3\u19d4\t\177\2\2\u19d4\u19de\5\u0288\u0145\6\u19d5\u19d6\5\u028a"+
		"\u0146\2\u19d6\u19d8\7d\2\2\u19d7\u19d9\7{\2\2\u19d8\u19d7\3\2\2\2\u19d8"+
		"\u19d9\3\2\2\2\u19d9\u19da\3\2\2\2\u19da\u19db\t\u0080\2\2\u19db\u19de"+
		"\3\2\2\2\u19dc\u19de\5\u028a\u0146\2\u19dd\u19d2\3\2\2\2\u19dd\u19d5\3"+
		"\2\2\2\u19dd\u19dc\3\2\2\2\u19de\u19e5\3\2\2\2\u19df\u19e0\f\5\2\2\u19e0"+
		"\u19e1\5\u0292\u014a\2\u19e1\u19e2\5\u0288\u0145\6\u19e2\u19e4\3\2\2\2"+
		"\u19e3\u19df\3\2\2\2\u19e4\u19e7\3\2\2\2\u19e5\u19e3\3\2\2\2\u19e5\u19e6"+
		"\3\2\2\2\u19e6\u0289\3\2\2\2\u19e7\u19e5\3\2\2\2\u19e8\u19eb\b\u0146\1"+
		"\2\u19e9\u19ea\7\u0467\2\2\u19ea\u19ec\7\u0433\2\2\u19eb\u19e9\3\2\2\2"+
		"\u19eb\u19ec\3\2\2\2\u19ec\u19ed\3\2\2\2\u19ed\u19ee\5\u028c\u0147\2\u19ee"+
		"\u1a2f\3\2\2\2\u19ef\u19f0\f\n\2\2\u19f0\u19f1\5\u0290\u0149\2\u19f1\u19f2"+
		"\5\u028a\u0146\13\u19f2\u1a2e\3\2\2\2\u19f3\u19f5\f\b\2\2\u19f4\u19f6"+
		"\7{\2\2\u19f5\u19f4\3\2\2\2\u19f5\u19f6\3\2\2\2\u19f6\u19f7\3\2\2\2\u19f7"+
		"\u19f8\7\37\2\2\u19f8\u19f9\5\u028a\u0146\2\u19f9\u19fa\7\32\2\2\u19fa"+
		"\u19fb\5\u028a\u0146\t\u19fb\u1a2e\3\2\2\2\u19fc\u19fd\f\7\2\2\u19fd\u19fe"+
		"\7\u0258\2\2\u19fe\u19ff\7m\2\2\u19ff\u1a2e\5\u028a\u0146\b\u1a00\u1a02"+
		"\f\5\2\2\u1a01\u1a03\7{\2\2\u1a02\u1a01\3\2\2\2\u1a02\u1a03\3\2\2\2\u1a03"+
		"\u1a04\3\2\2\2\u1a04\u1a05\t\u0081\2\2\u1a05\u1a2e\5\u028a\u0146\6\u1a06"+
		"\u1a08\f\f\2\2\u1a07\u1a09\7{\2\2\u1a08\u1a07\3\2\2\2\u1a08\u1a09\3\2"+
		"\2\2\u1a09\u1a0a\3\2\2\2\u1a0a\u1a0b\7\\\2\2\u1a0b\u1a0e\7\u044c\2\2\u1a0c"+
		"\u1a0f\5\u00b6\\\2\u1a0d\u1a0f\5\u024c\u0127\2\u1a0e\u1a0c\3\2\2\2\u1a0e"+
		"\u1a0d\3\2\2\2\u1a0f\u1a10\3\2\2\2\u1a10\u1a11\7\u044d\2\2\u1a11\u1a2e"+
		"\3\2\2\2\u1a12\u1a13\f\13\2\2\u1a13\u1a14\7d\2\2\u1a14\u1a2e\5\u0236\u011c"+
		"\2\u1a15\u1a16\f\t\2\2\u1a16\u1a17\5\u0290\u0149\2\u1a17\u1a18\t\u0082"+
		"\2\2\u1a18\u1a19\7\u044c\2\2\u1a19\u1a1a\5\u00b6\\\2\u1a1a\u1a1b\7\u044d"+
		"\2\2\u1a1b\u1a2e\3\2\2\2\u1a1c\u1a1e\f\6\2\2\u1a1d\u1a1f\7{\2\2\u1a1e"+
		"\u1a1d\3\2\2\2\u1a1e\u1a1f\3\2\2\2\u1a1f\u1a20\3\2\2\2\u1a20\u1a21\7m"+
		"\2\2\u1a21\u1a24\5\u028a\u0146\2\u1a22\u1a23\7\u019b\2\2\u1a23\u1a25\7"+
		"\u045b\2\2\u1a24\u1a22\3\2\2\2\u1a24\u1a25\3\2\2\2\u1a25\u1a2e\3\2\2\2"+
		"\u1a26\u1a27\f\3\2\2\u1a27\u1a28\7\u01f3\2\2\u1a28\u1a29\7\u0209\2\2\u1a29"+
		"\u1a2a\7\u044c\2\2\u1a2a\u1a2b\5\u028a\u0146\2\u1a2b\u1a2c\7\u044d\2\2"+
		"\u1a2c\u1a2e\3\2\2\2\u1a2d\u19ef\3\2\2\2\u1a2d\u19f3\3\2\2\2\u1a2d\u19fc"+
		"\3\2\2\2\u1a2d\u1a00\3\2\2\2\u1a2d\u1a06\3\2\2\2\u1a2d\u1a12\3\2\2\2\u1a2d"+
		"\u1a15\3\2\2\2\u1a2d\u1a1c\3\2\2\2\u1a2d\u1a26\3\2\2\2\u1a2e\u1a31\3\2"+
		"\2\2\u1a2f\u1a2d\3\2\2\2\u1a2f\u1a30\3\2\2\2\u1a30\u028b\3\2\2\2\u1a31"+
		"\u1a2f\3\2\2\2\u1a32\u1a33\b\u0147\1\2\u1a33\u1a60\5\u0238\u011d\2\u1a34"+
		"\u1a60\5\u0210\u0109\2\u1a35\u1a60\5\u0260\u0131\2\u1a36\u1a60\5\u0216"+
		"\u010c\2\u1a37\u1a38\5\u028e\u0148\2\u1a38\u1a39\5\u028c\u0147\f\u1a39"+
		"\u1a60\3\2\2\2\u1a3a\u1a3b\7\u00e7\2\2\u1a3b\u1a60\5\u028c\u0147\13\u1a3c"+
		"\u1a3d\7\u044c\2\2\u1a3d\u1a42\5\u0288\u0145\2\u1a3e\u1a3f\7\u044e\2\2"+
		"\u1a3f\u1a41\5\u0288\u0145\2\u1a40\u1a3e\3\2\2\2\u1a41\u1a44\3\2\2\2\u1a42"+
		"\u1a40\3\2\2\2\u1a42\u1a43\3\2\2\2\u1a43\u1a45\3\2\2\2\u1a44\u1a42\3\2"+
		"\2\2\u1a45\u1a46\7\u044d\2\2\u1a46\u1a60\3\2\2\2\u1a47\u1a48\7\u0246\2"+
		"\2\u1a48\u1a49\7\u044c\2\2\u1a49\u1a4c\5\u0288\u0145\2\u1a4a\u1a4b\7\u044e"+
		"\2\2\u1a4b\u1a4d\5\u0288\u0145\2\u1a4c\u1a4a\3\2\2\2\u1a4d\u1a4e\3\2\2"+
		"\2\u1a4e\u1a4c\3\2\2\2\u1a4e\u1a4f\3\2\2\2\u1a4f\u1a50\3\2\2\2\u1a50\u1a51"+
		"\7\u044d\2\2\u1a51\u1a60\3\2\2\2\u1a52\u1a53\7I\2\2\u1a53\u1a54\7\u044c"+
		"\2\2\u1a54\u1a55\5\u00b6\\\2\u1a55\u1a56\7\u044d\2\2\u1a56\u1a60\3\2\2"+
		"\2\u1a57\u1a58\7\u044c\2\2\u1a58\u1a59\5\u00b6\\\2\u1a59\u1a5a\7\u044d"+
		"\2\2\u1a5a\u1a60\3\2\2\2\u1a5b\u1a5c\7b\2\2\u1a5c\u1a5d\5\u0288\u0145"+
		"\2\u1a5d\u1a5e\5<\37\2\u1a5e\u1a60\3\2\2\2\u1a5f\u1a32\3\2\2\2\u1a5f\u1a34"+
		"\3\2\2\2\u1a5f\u1a35\3\2\2\2\u1a5f\u1a36\3\2\2\2\u1a5f\u1a37\3\2\2\2\u1a5f"+
		"\u1a3a\3\2\2\2\u1a5f\u1a3c\3\2\2\2\u1a5f\u1a47\3\2\2\2\u1a5f\u1a52\3\2"+
		"\2\2\u1a5f\u1a57\3\2\2\2\u1a5f\u1a5b\3\2\2\2\u1a60\u1a72\3\2\2\2\u1a61"+
		"\u1a62\f\5\2\2\u1a62\u1a63\5\u0294\u014b\2\u1a63\u1a64\5\u028c\u0147\6"+
		"\u1a64\u1a71\3\2\2\2\u1a65\u1a66\f\4\2\2\u1a66\u1a67\5\u0296\u014c\2\u1a67"+
		"\u1a68\5\u028c\u0147\5\u1a68\u1a71\3\2\2\2\u1a69\u1a6a\f\3\2\2\u1a6a\u1a6b"+
		"\5\u0298\u014d\2\u1a6b\u1a6c\5\u028c\u0147\4\u1a6c\u1a71\3\2\2\2\u1a6d"+
		"\u1a6e\f\16\2\2\u1a6e\u1a6f\7*\2\2\u1a6f\u1a71\5\u021a\u010e\2\u1a70\u1a61"+
		"\3\2\2\2\u1a70\u1a65\3\2\2\2\u1a70\u1a69\3\2\2\2\u1a70\u1a6d\3\2\2\2\u1a71"+
		"\u1a74\3\2\2\2\u1a72\u1a70\3\2\2\2\u1a72\u1a73\3\2\2\2\u1a73\u028d\3\2"+
		"\2\2\u1a74\u1a72\3\2\2\2\u1a75\u1a76\t\u0083\2\2\u1a76\u028f\3\2\2\2\u1a77"+
		"\u1a86\7\u0443\2\2\u1a78\u1a86\7\u0444\2\2\u1a79\u1a86\7\u0445\2\2\u1a7a"+
		"\u1a7b\7\u0445\2\2\u1a7b\u1a86\7\u0443\2\2\u1a7c\u1a7d\7\u0444\2\2\u1a7d"+
		"\u1a86\7\u0443\2\2\u1a7e\u1a7f\7\u0445\2\2\u1a7f\u1a86\7\u0444\2\2\u1a80"+
		"\u1a81\7\u0446\2\2\u1a81\u1a86\7\u0443\2\2\u1a82\u1a83\7\u0445\2\2\u1a83"+
		"\u1a84\7\u0443\2\2\u1a84\u1a86\7\u0444\2\2\u1a85\u1a77\3\2\2\2\u1a85\u1a78"+
		"\3\2\2\2\u1a85\u1a79\3\2\2\2\u1a85\u1a7a\3\2\2\2\u1a85\u1a7c\3\2\2\2\u1a85"+
		"\u1a7e\3\2\2\2\u1a85\u1a80\3\2\2\2\u1a85\u1a82\3\2\2\2\u1a86\u0291\3\2"+
		"\2\2\u1a87\u1a8f\7\32\2\2\u1a88\u1a89\7\u0449\2\2\u1a89\u1a8f\7\u0449"+
		"\2\2\u1a8a\u1a8f\7\u00c7\2\2\u1a8b\u1a8f\7\u0083\2\2\u1a8c\u1a8d\7\u0448"+
		"\2\2\u1a8d\u1a8f\7\u0448\2\2\u1a8e\u1a87\3\2\2\2\u1a8e\u1a88\3\2\2\2\u1a8e"+
		"\u1a8a\3\2\2\2\u1a8e\u1a8b\3\2\2\2\u1a8e\u1a8c\3\2\2\2\u1a8f\u0293\3\2"+
		"\2\2\u1a90\u1a91\7\u0445\2\2\u1a91\u1a98\7\u0445\2\2\u1a92\u1a93\7\u0444"+
		"\2\2\u1a93\u1a98\7\u0444\2\2\u1a94\u1a98\7\u0449\2\2\u1a95\u1a98\7\u044a"+
		"\2\2\u1a96\u1a98\7\u0448\2\2\u1a97\u1a90\3\2\2\2\u1a97\u1a92\3\2\2\2\u1a97"+
		"\u1a94\3\2\2\2\u1a97\u1a95\3\2\2\2\u1a97\u1a96\3\2\2\2\u1a98\u0295\3\2"+
		"\2\2\u1a99\u1a9a\t\u0084\2\2\u1a9a\u0297\3\2\2\2\u1a9b\u1a9c\7\u0440\2"+
		"\2\u1a9c\u1aa1\7\u0444\2\2\u1a9d\u1a9e\7\u0440\2\2\u1a9e\u1a9f\7\u0444"+
		"\2\2\u1a9f\u1aa1\7\u0444\2\2\u1aa0\u1a9b\3\2\2\2\u1aa0\u1a9d\3\2\2\2\u1aa1"+
		"\u0299\3\2\2\2\u1aa2\u1aa3\t\u0085\2\2\u1aa3\u029b\3\2\2\2\u1aa4\u1aa5"+
		"\t\u0086\2\2\u1aa5\u029d\3\2\2\2\u1aa6\u1aa7\t\u0087\2\2\u1aa7\u029f\3"+
		"\2\2\2\u1aa8\u1aa9\t\u0088\2\2\u1aa9\u02a1\3\2\2\2\u1aaa\u1aab\t\u0089"+
		"\2\2\u1aab\u02a3\3\2\2\2\u1aac\u1aad\t\u008a\2\2\u1aad\u02a5\3\2\2\2\u1aae"+
		"\u1aaf\t\u008b\2\2\u1aaf\u02a7\3\2\2\2\u03dd\u02a9\u02ad\u02b4\u02b7\u02ba"+
		"\u02bc\u02c2\u02c5\u02c8\u02d1\u02f8\u0304\u030f\u0320\u0325\u0331\u034c"+
		"\u0355\u035a\u0360\u0365\u0369\u0372\u0375\u0378\u037c\u0383\u0386\u038b"+
		"\u0393\u0398\u039d\u03a0\u03a2\u03ae\u03b1\u03b5\u03b8\u03bc\u03bf\u03c3"+
		"\u03c6\u03c9\u03cd\u03d0\u03d4\u03da\u03e0\u03e6\u03ed\u03f4\u03fa\u0400"+
		"\u0409\u040e\u041e\u0425\u0429\u0433\u0437\u043b\u043f\u0443\u0448\u044b"+
		"\u044e\u0451\u0454\u045a\u045e\u0464\u0469\u046c\u046f\u0471\u047c\u0480"+
		"\u0483\u0491\u0494\u0498\u049b\u049f\u04a2\u04a6\u04a9\u04ad\u04b0\u04b3"+
		"\u04b7\u04ba\u04be\u04c4\u04d1\u04d8\u04dd\u04e0\u04e5\u04ed\u04f3\u04f7"+
		"\u04fa\u04ff\u0502\u0506\u0509\u050d\u0510\u0518\u051a\u0521\u0527\u052f"+
		"\u0532\u0539\u053c\u053e\u0544\u054a\u055b\u0562\u0569\u0574\u0577\u0584"+
		"\u0591\u0596\u05a6\u05ae\u05b8\u05be\u05ca\u05cd\u05d2\u05df\u05e6\u05ed"+
		"\u05ef\u05f6\u05fa\u05fc\u0601\u0604\u060a\u060f\u0611\u0615\u0618\u061b"+
		"\u0621\u0626\u0628\u062d\u0634\u0636\u063d\u0642\u0646\u0649\u0651\u0659"+
		"\u065b\u0663\u0667\u066a\u0670\u0675\u0678\u067e\u0681\u0685\u0688\u068c"+
		"\u0691\u0695\u069a\u069d\u06a1\u06a5\u06a9\u06ad\u06b2\u06b7\u06bc\u06c2"+
		"\u06c7\u06cc\u06d2\u06d7\u06dc\u06e1\u06e6\u06eb\u06f0\u06f5\u06fa\u06ff"+
		"\u0704\u070a\u0712\u0718\u0724\u072b\u072d\u0735\u073a\u073d\u0745\u074b"+
		"\u075b\u0767\u0769\u076c\u0774\u077a\u0780\u078d\u0794\u079d\u07a2\u07ad"+
		"\u07b6\u07bb\u07c7\u07ce\u07d7\u07dc\u07e8\u07ef\u07f8\u07fd\u0804\u080d"+
		"\u0812\u0814\u0819\u0821\u082a\u082e\u0831\u0835\u083a\u0840\u0846\u084b"+
		"\u0850\u0855\u085a\u085d\u0862\u0867\u0871\u0875\u087c\u0881\u0884\u0889"+
		"\u088c\u0890\u0894\u089c\u08af\u08b2\u08b5\u08b9\u08c3\u08d0\u08d7\u08da"+
		"\u08e3\u08e6\u08e9\u08f4\u08f7\u08fb\u0903\u0906\u090b\u0913\u0919\u091d"+
		"\u0921\u0926\u092b\u0932\u0936\u0941\u0949\u094c\u0952\u0958\u095a\u095f"+
		"\u0962\u0968\u096e\u0970\u0974\u0977\u097a\u0980\u0986\u0989\u098f\u0995"+
		"\u0997\u099c\u09a4\u09a6\u09af\u09b4\u09bc\u09c0\u09c8\u09d2\u09d7\u09de"+
		"\u09e2\u09e6\u0a06\u0a0a\u0a16\u0a19\u0a22\u0a33\u0a3f\u0a46\u0a4d\u0a5c"+
		"\u0a69\u0a6f\u0a75\u0a7b\u0a81\u0a87\u0a8d\u0a92\u0a99\u0aa0\u0aa7\u0aac"+
		"\u0aaf\u0ab1\u0abf\u0ac6\u0acd\u0ad3\u0ad7\u0adb\u0ae2\u0ae5\u0aea\u0af1"+
		"\u0af8\u0afc\u0b05\u0b0e\u0b17\u0b1a\u0b1e\u0b27\u0b2b\u0b2e\u0b31\u0b37"+
		"\u0b3a\u0b40\u0b49\u0b4c\u0b57\u0b5a\u0b5f\u0b62\u0b67\u0b71\u0b76\u0b7c"+
		"\u0b7e\u0b84\u0b86\u0b8c\u0b94\u0b99\u0ba1\u0ba4\u0ba9\u0bac\u0bb1\u0bb9"+
		"\u0bc1\u0bc7\u0bcf\u0bd4\u0bdc\u0bdf\u0be3\u0be6\u0bee\u0bf4\u0bfd\u0c00"+
		"\u0c04\u0c08\u0c0e\u0c12\u0c16\u0c18\u0c1b\u0c1e\u0c21\u0c27\u0c2b\u0c2e"+
		"\u0c31\u0c34\u0c37\u0c39\u0c3d\u0c43\u0c49\u0c4e\u0c51\u0c57\u0c5b\u0c63"+
		"\u0c67\u0c6a\u0c6d\u0c76\u0c7a\u0c7d\u0c81\u0c85\u0c88\u0c8b\u0c90\u0c96"+
		"\u0c9a\u0ca4\u0caa\u0cae\u0cb4\u0cb8\u0cbe\u0cc1\u0ccd\u0cd1\u0cd5\u0cdd"+
		"\u0ce1\u0ce9\u0cec\u0cf0\u0cf3\u0cfb\u0d00\u0d03\u0d06\u0d0a\u0d0d\u0d16"+
		"\u0d1b\u0d24\u0d29\u0d30\u0d37\u0d3f\u0d44\u0d4c\u0d4f\u0d52\u0d59\u0d5c"+
		"\u0d63\u0d66\u0d6e\u0d74\u0d7f\u0d82\u0d8d\u0d93\u0d97\u0da2\u0da7\u0da9"+
		"\u0dae\u0dba\u0dc4\u0dce\u0dd1\u0dd4\u0dd7\u0dda\u0ddd\u0de0\u0de3\u0de6"+
		"\u0de9\u0dec\u0def\u0df1\u0df7\u0dfc\u0e02\u0e07\u0e0a\u0e14\u0e19\u0e1c"+
		"\u0e1f\u0e22\u0e25\u0e28\u0e2c\u0e32\u0e36\u0e40\u0e44\u0e4b\u0e56\u0e59"+
		"\u0e5d\u0e60\u0e64\u0e68\u0e6b\u0e6d\u0e75\u0e81\u0e87\u0e89\u0e8f\u0e91"+
		"\u0e93\u0e99\u0ea1\u0ea9\u0eae\u0eb2\u0ebd\u0ec2\u0ed6\u0edb\u0ee1\u0ee8"+
		"\u0eed\u0ef6\u0ef9\u0efd\u0f01\u0f05\u0f08\u0f0b\u0f0e\u0f12\u0f16\u0f19"+
		"\u0f1c\u0f1f\u0f26\u0f2a\u0f39\u0f46\u0f4e\u0f58\u0f5c\u0f5f\u0f65\u0f68"+
		"\u0f6b\u0f74\u0f7d\u0f87\u0f8b\u0f95\u0f9f\u0fa7\u0faa\u0fb3\u0fb6\u0fba"+
		"\u0fbf\u0fc3\u0fcc\u0fcf\u0fee\u0ff1\u0ff4\u102c\u1031\u104d\u105b\u1062"+
		"\u1066\u106c\u1074\u1076\u1081\u108b\u1092\u1098\u10a0\u10a5\u10ad\u10b5"+
		"\u10bd\u10c5\u10cb\u10ce\u10d2\u10d7\u10dc\u10e2\u10e4\u10ef\u10f4\u10fb"+
		"\u10fd\u110b\u1111\u1116\u111b\u1121\u1128\u1130\u1138\u113d\u1143\u1146"+
		"\u114e\u1155\u115e\u1161\u1172\u117a\u1182\u1186\u118d\u1193\u119b\u11a4"+
		"\u11aa\u11b1\u11b8\u11bd\u11c0\u11c2\u11c8\u11ca\u11ce\u11d0\u11d3\u11dc"+
		"\u11e2\u11e9\u11f0\u11f5\u11f8\u11fa\u1200\u1202\u1206\u1208\u120b\u1210"+
		"\u1217\u1220\u1225\u122e\u1235\u123a\u123d\u123f\u1245\u1247\u124a\u1252"+
		"\u125a\u1260\u1265\u1269\u126f\u1271\u127c\u127f\u1286\u1289\u1295\u129b"+
		"\u12a4\u12ad\u12b2\u12bb\u12c1\u12cc\u12d5\u12db\u12e0\u12e4\u12e7\u12f3"+
		"\u12fa\u12ff\u130e\u1315\u131d\u1320\u132a\u1334\u133e\u1348\u134c\u1350"+
		"\u135a\u135f\u1399\u13ab\u13b3\u13bf\u13c6\u13c8\u13d2\u13d5\u13dd\u13e4"+
		"\u13e8\u13ef\u13f4\u13f7\u13fa\u1403\u1407\u1425\u142c\u1430\u1437\u143a"+
		"\u144a\u144d\u1457\u145b\u1461\u1464\u1469\u146d\u1474\u1477\u147d\u1495"+
		"\u14a2\u14a5\u14af\u14b7\u14bb\u14c2\u14c5\u14ce\u14d4\u14da\u14e4\u14e6"+
		"\u14ec\u14ef\u14f2\u14fe\u1501\u1507\u150a\u1512\u151a\u1520\u1524\u1532"+
		"\u153e\u1545\u1548\u154f\u1556\u155b\u1560\u156b\u1576\u157c\u1581\u158e"+
		"\u1590\u1595\u159a\u159c\u15a3\u15aa\u15ad\u15b0\u15b6\u15ba\u15c0\u15c6"+
		"\u15d3\u15d8\u15e0\u15e3\u15e8\u15ed\u15f5\u15f8\u1600\u1604\u1611\u1617"+
		"\u1623\u1626\u162f\u1634\u163a\u1641\u1643\u1648\u164a\u164e\u1654\u1657"+
		"\u165a\u1664\u1668\u167c\u1683\u1685\u168c\u168e\u1692\u1697\u16a2\u16a7"+
		"\u16ad\u16b0\u16b4\u16b9\u16bc\u16c0\u16c4\u16c6\u16cb\u16d0\u16dd\u16e0"+
		"\u16e4\u16e7\u16ea\u16ef\u16f2\u16f7\u16fc\u16ff\u1704\u1707\u170d\u1710"+
		"\u1714\u1717\u171a\u171e\u1721\u1724\u1728\u172b\u172e\u1731\u1735\u1738"+
		"\u173b\u1740\u1745\u174a\u174d\u1752\u1755\u175a\u175d\u1761\u1765\u176d"+
		"\u1774\u1778\u177d\u1780\u1785\u1789\u178d\u179d\u17a6\u17ae\u17b7\u17c1"+
		"\u17c9\u17d1\u17d9\u17e1\u17e6\u17ee\u17f3\u17f8\u17fb\u1800\u1803\u1807"+
		"\u1816\u181d\u1822\u1827\u1848\u184c\u1854\u1858\u1861\u1869\u186e\u1876"+
		"\u187b\u1880\u1882\u188b\u1890\u1898\u189d\u18a5\u18ad\u18b0\u18ba\u18cc"+
		"\u18d2\u18d6\u18dc\u18e0\u18e4\u18f1\u18f9\u18fd\u1902\u1907\u190d\u1912"+
		"\u1916\u191b\u1920\u1925\u192f\u1932\u1936\u193a\u1941\u1945\u1962\u1967"+
		"\u196b\u196e\u1971\u1974\u1977\u1982\u1990\u1999\u19b3\u19be\u19c5\u19c9"+
		"\u19d0\u19d8\u19dd\u19e5\u19eb\u19f5\u1a02\u1a08\u1a0e\u1a1e\u1a24\u1a2d"+
		"\u1a2f\u1a42\u1a4e\u1a5f\u1a70\u1a72\u1a85\u1a8e\u1a97\u1aa0";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}