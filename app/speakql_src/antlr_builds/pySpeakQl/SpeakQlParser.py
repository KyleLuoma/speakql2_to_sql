# Generated from SpeakQlParser.g4 by ANTLR 4.9.3
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u046b")
        buf.write("\u1ad6\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102")
        buf.write("\t\u0102\4\u0103\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105")
        buf.write("\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109")
        buf.write("\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c")
        buf.write("\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110")
        buf.write("\t\u0110\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113")
        buf.write("\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117")
        buf.write("\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a")
        buf.write("\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e")
        buf.write("\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121")
        buf.write("\4\u0122\t\u0122\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125")
        buf.write("\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128")
        buf.write("\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c")
        buf.write("\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f")
        buf.write("\4\u0130\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133")
        buf.write("\t\u0133\4\u0134\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136")
        buf.write("\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a")
        buf.write("\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d")
        buf.write("\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141")
        buf.write("\t\u0141\4\u0142\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144")
        buf.write("\4\u0145\t\u0145\4\u0146\t\u0146\4\u0147\t\u0147\4\u0148")
        buf.write("\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b")
        buf.write("\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f")
        buf.write("\t\u014f\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152")
        buf.write("\4\u0153\t\u0153\4\u0154\t\u0154\4\u0155\t\u0155\4\u0156")
        buf.write("\t\u0156\3\2\5\2\u02ae\n\2\3\2\3\2\5\2\u02b2\n\2\3\2\3")
        buf.write("\2\3\3\3\3\3\3\5\3\u02b9\n\3\3\3\5\3\u02bc\n\3\3\3\7\3")
        buf.write("\u02bf\n\3\f\3\16\3\u02c2\13\3\3\3\3\3\3\3\5\3\u02c7\n")
        buf.write("\3\3\3\5\3\u02ca\n\3\3\3\5\3\u02cd\n\3\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\5\4\u02d6\n\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\5\6\u02fd\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\5\7\u0309\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\5\b\u0314\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u0325\n\t\3\n\3\n\3\n")
        buf.write("\5\n\u032a\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\5\13\u0336\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\5\f\u0351\n\f\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\5\r\u035a\n\r\3\16\3\16\3\16\5\16\u035f\n\16\3")
        buf.write("\16\3\16\7\16\u0363\n\16\f\16\16\16\u0366\13\16\3\17\3")
        buf.write("\17\5\17\u036a\n\17\3\17\3\17\5\17\u036e\n\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\5\17\u0377\n\17\3\17\5\17\u037a")
        buf.write("\n\17\3\17\5\17\u037d\n\17\3\17\3\17\5\17\u0381\n\17\3")
        buf.write("\17\3\17\3\17\3\20\3\20\5\20\u0388\n\20\3\20\5\20\u038b")
        buf.write("\n\20\3\20\3\20\3\20\5\20\u0390\n\20\3\20\3\20\3\20\3")
        buf.write("\20\7\20\u0396\n\20\f\20\16\20\u0399\13\20\3\20\3\20\5")
        buf.write("\20\u039d\n\20\3\20\3\20\3\20\5\20\u03a2\n\20\3\20\7\20")
        buf.write("\u03a5\n\20\f\20\16\20\u03a8\13\20\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\5\21\u03b3\n\21\3\21\5\21\u03b6")
        buf.write("\n\21\3\21\3\21\5\21\u03ba\n\21\3\21\5\21\u03bd\n\21\3")
        buf.write("\21\3\21\5\21\u03c1\n\21\3\21\5\21\u03c4\n\21\3\21\3\21")
        buf.write("\5\21\u03c8\n\21\3\21\5\21\u03cb\n\21\3\21\5\21\u03ce")
        buf.write("\n\21\3\21\3\21\5\21\u03d2\n\21\3\21\5\21\u03d5\n\21\3")
        buf.write("\21\3\21\5\21\u03d9\n\21\3\21\3\21\3\22\3\22\5\22\u03df")
        buf.write("\n\22\3\22\3\22\3\22\3\22\5\22\u03e5\n\22\3\22\3\22\7")
        buf.write("\22\u03e9\n\22\f\22\16\22\u03ec\13\22\3\22\3\22\7\22\u03f0")
        buf.write("\n\22\f\22\16\22\u03f3\13\22\3\22\3\22\3\23\3\23\5\23")
        buf.write("\u03f9\n\23\3\23\3\23\3\23\3\23\5\23\u03ff\n\23\3\23\3")
        buf.write("\23\7\23\u0403\n\23\f\23\16\23\u0406\13\23\3\23\3\23\3")
        buf.write("\23\3\23\7\23\u040c\n\23\f\23\16\23\u040f\13\23\3\23\3")
        buf.write("\23\5\23\u0413\n\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\7\24\u0421\n\24\f\24\16\24\u0424")
        buf.write("\13\24\3\24\3\24\3\25\3\25\5\25\u042a\n\25\3\25\3\25\5")
        buf.write("\25\u042e\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\5\25\u0438\n\25\3\25\3\25\5\25\u043c\n\25\3\25\3\25\5")
        buf.write("\25\u0440\n\25\3\25\3\25\5\25\u0444\n\25\3\25\3\25\5\25")
        buf.write("\u0448\n\25\3\25\7\25\u044b\n\25\f\25\16\25\u044e\13\25")
        buf.write("\5\25\u0450\n\25\3\25\5\25\u0453\n\25\3\25\5\25\u0456")
        buf.write("\n\25\3\25\5\25\u0459\n\25\3\25\3\25\3\25\3\25\5\25\u045f")
        buf.write("\n\25\3\25\3\25\5\25\u0463\n\25\3\25\3\25\3\25\3\25\5")
        buf.write("\25\u0469\n\25\3\25\7\25\u046c\n\25\f\25\16\25\u046f\13")
        buf.write("\25\5\25\u0471\n\25\3\25\5\25\u0474\n\25\5\25\u0476\n")
        buf.write("\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26")
        buf.write("\u0481\n\26\3\26\3\26\5\26\u0485\n\26\3\26\5\26\u0488")
        buf.write("\n\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\5\27\u0496\n\27\3\27\5\27\u0499\n\27\3\27\3")
        buf.write("\27\5\27\u049d\n\27\3\27\5\27\u04a0\n\27\3\27\3\27\5\27")
        buf.write("\u04a4\n\27\3\27\5\27\u04a7\n\27\3\27\3\27\5\27\u04ab")
        buf.write("\n\27\3\27\5\27\u04ae\n\27\3\27\3\27\5\27\u04b2\n\27\3")
        buf.write("\27\5\27\u04b5\n\27\3\27\5\27\u04b8\n\27\3\27\3\27\5\27")
        buf.write("\u04bc\n\27\3\27\5\27\u04bf\n\27\3\27\3\27\5\27\u04c3")
        buf.write("\n\27\3\27\3\27\3\30\3\30\5\30\u04c9\n\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u04d6")
        buf.write("\n\30\3\30\3\30\3\31\3\31\3\31\5\31\u04dd\n\31\3\31\3")
        buf.write("\31\3\31\5\31\u04e2\n\31\3\31\5\31\u04e5\n\31\3\31\3\31")
        buf.write("\3\31\5\31\u04ea\n\31\3\31\3\31\3\31\3\31\3\31\3\31\5")
        buf.write("\31\u04f2\n\31\3\31\3\31\3\31\3\31\5\31\u04f8\n\31\3\31")
        buf.write("\3\31\5\31\u04fc\n\31\3\32\5\32\u04ff\n\32\3\32\3\32\3")
        buf.write("\32\5\32\u0504\n\32\3\32\5\32\u0507\n\32\3\32\3\32\5\32")
        buf.write("\u050b\n\32\3\32\5\32\u050e\n\32\3\32\3\32\5\32\u0512")
        buf.write("\n\32\3\32\5\32\u0515\n\32\3\33\3\33\3\33\3\33\3\33\3")
        buf.write("\33\3\33\5\33\u051e\n\33\5\33\u0520\n\33\3\34\3\34\3\34")
        buf.write("\7\34\u0525\n\34\f\34\16\34\u0528\13\34\3\34\3\34\3\34")
        buf.write("\5\34\u052d\n\34\3\34\3\34\3\34\3\34\7\34\u0533\n\34\f")
        buf.write("\34\16\34\u0536\13\34\5\34\u0538\n\34\3\34\3\34\3\34\7")
        buf.write("\34\u053d\n\34\f\34\16\34\u0540\13\34\5\34\u0542\n\34")
        buf.write("\5\34\u0544\n\34\3\35\3\35\3\35\3\35\5\35\u054a\n\35\3")
        buf.write("\36\3\36\3\36\3\36\5\36\u0550\n\36\3\36\3\36\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\5\37\u0561\n\37\3 \3 \3 \3 \3 \5 \u0568\n \3!\3!\3!\3")
        buf.write("\"\3\"\5\"\u056f\n\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\5\"\u057a\n\"\3#\5#\u057d\n#\3#\3#\3#\3$\3$\3$\3%\3")
        buf.write("%\3%\3%\3%\5%\u058a\n%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\5%\u0597\n%\3%\3%\3%\5%\u059c\n%\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\5&\u05ac\n&\3\'\3\'\3\'\3\'\7\'")
        buf.write("\u05b2\n\'\f\'\16\'\u05b5\13\'\3\'\3\'\3(\3(\3(\3(\3(")
        buf.write("\5(\u05be\n(\3)\3)\7)\u05c2\n)\f)\16)\u05c5\13)\3*\3*")
        buf.write("\3*\3*\3*\3*\3*\3*\3*\5*\u05d0\n*\3*\5*\u05d3\n*\3*\3")
        buf.write("*\3*\5*\u05d8\n*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u05e5")
        buf.write("\n*\3*\3*\3*\3*\3*\5*\u05ec\n*\3*\3*\3*\3*\3*\5*\u05f3")
        buf.write("\n*\5*\u05f5\n*\3*\3*\3*\3*\3*\5*\u05fc\n*\3+\3+\5+\u0600")
        buf.write("\n+\5+\u0602\n+\3+\3+\3+\5+\u0607\n+\3+\5+\u060a\n+\3")
        buf.write("+\3+\7+\u060e\n+\f+\16+\u0611\13+\3+\3+\5+\u0615\n+\5")
        buf.write("+\u0617\n+\3+\3+\5+\u061b\n+\3+\5+\u061e\n+\3+\5+\u0621")
        buf.write("\n+\3+\3+\7+\u0625\n+\f+\16+\u0628\13+\3+\3+\5+\u062c")
        buf.write("\n+\5+\u062e\n+\3+\3+\3+\5+\u0633\n+\3+\3+\3+\3+\3+\5")
        buf.write("+\u063a\n+\5+\u063c\n+\3+\3+\3+\3+\3+\5+\u0643\n+\3,\3")
        buf.write(",\3,\5,\u0648\n,\3,\3,\5,\u064c\n,\3,\5,\u064f\n,\3-\3")
        buf.write("-\3-\3-\3-\3-\5-\u0657\n-\3-\3-\3-\3-\3-\3-\5-\u065f\n")
        buf.write("-\5-\u0661\n-\3.\3.\3.\3.\3.\3.\5.\u0669\n.\3/\3/\5/\u066d")
        buf.write("\n/\3/\5/\u0670\n/\3/\3/\7/\u0674\n/\f/\16/\u0677\13/")
        buf.write("\3/\3/\5/\u067b\n/\3/\5/\u067e\n/\3/\3/\7/\u0682\n/\f")
        buf.write("/\16/\u0685\13/\5/\u0687\n/\3\60\3\60\5\60\u068b\n\60")
        buf.write("\3\60\5\60\u068e\n\60\3\60\3\60\5\60\u0692\n\60\3\60\3")
        buf.write("\60\3\60\5\60\u0697\n\60\3\60\3\60\5\60\u069b\n\60\3\60")
        buf.write("\3\60\3\60\5\60\u06a0\n\60\3\60\5\60\u06a3\n\60\3\60\3")
        buf.write("\60\5\60\u06a7\n\60\3\60\3\60\5\60\u06ab\n\60\3\60\3\60")
        buf.write("\5\60\u06af\n\60\3\60\3\60\5\60\u06b3\n\60\3\60\3\60\3")
        buf.write("\60\5\60\u06b8\n\60\3\60\3\60\3\60\5\60\u06bd\n\60\3\60")
        buf.write("\3\60\3\60\5\60\u06c2\n\60\3\60\3\60\3\60\3\60\5\60\u06c8")
        buf.write("\n\60\3\60\3\60\3\60\5\60\u06cd\n\60\3\60\3\60\3\60\5")
        buf.write("\60\u06d2\n\60\3\60\3\60\3\60\3\60\5\60\u06d8\n\60\3\60")
        buf.write("\3\60\3\60\5\60\u06dd\n\60\3\60\3\60\3\60\5\60\u06e2\n")
        buf.write("\60\3\60\3\60\3\60\5\60\u06e7\n\60\3\60\3\60\3\60\5\60")
        buf.write("\u06ec\n\60\3\60\3\60\3\60\5\60\u06f1\n\60\3\60\3\60\3")
        buf.write("\60\5\60\u06f6\n\60\3\60\3\60\3\60\5\60\u06fb\n\60\3\60")
        buf.write("\3\60\3\60\5\60\u0700\n\60\3\60\3\60\3\60\5\60\u0705\n")
        buf.write("\60\3\60\3\60\3\60\5\60\u070a\n\60\3\60\3\60\3\60\3\60")
        buf.write("\5\60\u0710\n\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u0718")
        buf.write("\n\60\3\60\3\60\3\60\3\60\5\60\u071e\n\60\3\61\3\61\3")
        buf.write("\62\3\62\3\62\3\63\3\63\3\63\3\63\3\63\5\63\u072a\n\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\5\63\u0731\n\63\5\63\u0733\n")
        buf.write("\63\3\63\3\63\3\63\3\63\7\63\u0739\n\63\f\63\16\63\u073c")
        buf.write("\13\63\3\63\3\63\5\63\u0740\n\63\3\64\5\64\u0743\n\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u074b\n\64\3\64\3")
        buf.write("\64\3\64\3\64\5\64\u0751\n\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0761")
        buf.write("\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\5\64\u076d\n\64\5\64\u076f\n\64\3\65\5\65\u0772\n\65")
        buf.write("\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u077a\n\65\3\65\3")
        buf.write("\65\3\65\3\65\5\65\u0780\n\65\3\65\3\65\3\65\3\65\5\65")
        buf.write("\u0786\n\65\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3")
        buf.write("\66\7\66\u0791\n\66\f\66\16\66\u0794\13\66\3\66\3\66\7")
        buf.write("\66\u0798\n\66\f\66\16\66\u079b\13\66\3\66\3\66\3\66\3")
        buf.write("\66\7\66\u07a1\n\66\f\66\16\66\u07a4\13\66\3\66\3\66\5")
        buf.write("\66\u07a8\n\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\7\66")
        buf.write("\u07b1\n\66\f\66\16\66\u07b4\13\66\3\66\3\66\3\66\3\66")
        buf.write("\7\66\u07ba\n\66\f\66\16\66\u07bd\13\66\3\66\3\66\5\66")
        buf.write("\u07c1\n\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\7")
        buf.write("\66\u07cb\n\66\f\66\16\66\u07ce\13\66\3\66\3\66\7\66\u07d2")
        buf.write("\n\66\f\66\16\66\u07d5\13\66\3\66\3\66\3\66\3\66\7\66")
        buf.write("\u07db\n\66\f\66\16\66\u07de\13\66\3\66\3\66\5\66\u07e2")
        buf.write("\n\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\7\66\u07ec")
        buf.write("\n\66\f\66\16\66\u07ef\13\66\3\66\3\66\7\66\u07f3\n\66")
        buf.write("\f\66\16\66\u07f6\13\66\3\66\3\66\3\66\3\66\7\66\u07fc")
        buf.write("\n\66\f\66\16\66\u07ff\13\66\3\66\3\66\5\66\u0803\n\66")
        buf.write("\3\66\3\66\3\66\7\66\u0808\n\66\f\66\16\66\u080b\13\66")
        buf.write("\3\66\3\66\3\66\3\66\7\66\u0811\n\66\f\66\16\66\u0814")
        buf.write("\13\66\3\66\3\66\5\66\u0818\n\66\5\66\u081a\n\66\3\67")
        buf.write("\3\67\3\67\5\67\u081f\n\67\38\38\38\38\68\u0825\n8\r8")
        buf.write("\168\u0826\38\38\39\39\39\79\u082e\n9\f9\169\u0831\13")
        buf.write("9\3:\5:\u0834\n:\3:\5:\u0837\n:\3:\3:\5:\u083b\n:\3:\3")
        buf.write(":\3:\5:\u0840\n:\3:\3:\3:\3:\5:\u0846\n:\3:\3:\3:\3:\5")
        buf.write(":\u084c\n:\3:\3:\3:\5:\u0851\n:\3:\3:\3:\5:\u0856\n:\3")
        buf.write(":\3:\3:\5:\u085b\n:\3:\3:\3:\5:\u0860\n:\3:\5:\u0863\n")
        buf.write(":\3;\3;\3;\5;\u0868\n;\3;\6;\u086b\n;\r;\16;\u086c\3;")
        buf.write("\3;\3;\3;\3;\3;\3;\3;\5;\u0877\n;\3<\3<\5<\u087b\n<\3")
        buf.write("<\3<\3<\3<\3<\5<\u0882\n<\3<\3<\3<\5<\u0887\n<\3<\5<\u088a")
        buf.write("\n<\3<\3<\3<\5<\u088f\n<\3<\5<\u0892\n<\3<\3<\5<\u0896")
        buf.write("\n<\3<\3<\5<\u089a\n<\3=\3=\3=\3=\7=\u08a0\n=\f=\16=\u08a3")
        buf.write("\13=\3>\3>\3>\3>\3>\3>\3>\3?\3?\3?\3?\3?\3?\3?\3?\3?\5")
        buf.write("?\u08b5\n?\3?\5?\u08b8\n?\3?\5?\u08bb\n?\3?\3?\5?\u08bf")
        buf.write("\n?\3?\3?\3@\3@\3@\3@\7@\u08c7\n@\f@\16@\u08ca\13@\3A")
        buf.write("\3A\3A\3A\3A\3A\3A\3A\7A\u08d4\nA\fA\16A\u08d7\13A\3A")
        buf.write("\3A\3B\3B\5B\u08dd\nB\3B\5B\u08e0\nB\3B\3B\3B\3B\3B\7")
        buf.write("B\u08e7\nB\fB\16B\u08ea\13B\5B\u08ec\nB\3B\5B\u08ef\n")
        buf.write("B\3C\3C\3C\3C\3C\3C\3C\3C\3C\5C\u08fa\nC\3C\5C\u08fd\n")
        buf.write("C\3C\3C\5C\u0901\nC\3C\3C\3D\3D\3D\3D\5D\u0909\nD\3D\5")
        buf.write("D\u090c\nD\3D\3D\3D\5D\u0911\nD\3D\3D\3D\3D\3D\3D\5D\u0919")
        buf.write("\nD\3D\3D\3D\3D\5D\u091f\nD\3D\3D\5D\u0923\nD\3E\3E\5")
        buf.write("E\u0927\nE\3E\7E\u092a\nE\fE\16E\u092d\13E\3E\3E\5E\u0931")
        buf.write("\nE\3E\3E\3E\3E\3E\5E\u0938\nE\3E\3E\5E\u093c\nE\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\7E\u0945\nE\fE\16E\u0948\13E\3E\3E\3")
        buf.write("E\3E\3E\5E\u094f\nE\3E\5E\u0952\nE\3E\3E\7E\u0956\nE\f")
        buf.write("E\16E\u0959\13E\3E\3E\3E\5E\u095e\nE\5E\u0960\nE\3E\3")
        buf.write("E\3E\5E\u0965\nE\3E\5E\u0968\nE\3E\3E\7E\u096c\nE\fE\16")
        buf.write("E\u096f\13E\3E\3E\3E\5E\u0974\nE\5E\u0976\nE\3E\3E\5E")
        buf.write("\u097a\nE\3E\5E\u097d\nE\3E\5E\u0980\nE\3E\3E\7E\u0984")
        buf.write("\nE\fE\16E\u0987\13E\3E\3E\3E\5E\u098c\nE\3E\5E\u098f")
        buf.write("\nE\3E\3E\7E\u0993\nE\fE\16E\u0996\13E\3E\3E\3E\5E\u099b")
        buf.write("\nE\5E\u099d\nE\3E\3E\3E\5E\u09a2\nE\3E\3E\3E\3E\3E\3")
        buf.write("E\5E\u09aa\nE\5E\u09ac\nE\3E\3E\3E\3E\3E\3E\3E\5E\u09b5")
        buf.write("\nE\3E\3E\3E\5E\u09ba\nE\3E\3E\3E\3E\3E\3E\5E\u09c2\n")
        buf.write("E\3E\3E\5E\u09c6\nE\3E\3E\3E\3E\3E\3E\5E\u09ce\nE\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\5E\u09d8\nE\3E\3E\3E\5E\u09dd\nE\3")
        buf.write("E\3E\3E\3E\3E\5E\u09e4\nE\3E\3E\5E\u09e8\nE\3E\3E\5E\u09ec")
        buf.write("\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u0a0c\nE\3")
        buf.write("E\3E\5E\u0a10\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u0a1c")
        buf.write("\nE\3E\5E\u0a1f\nE\3E\3E\3E\3E\3E\3E\3E\5E\u0a28\nE\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\7E\u0a37\nE\fE\16")
        buf.write("E\u0a3a\13E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u0a45\nE\3E")
        buf.write("\3E\3E\3E\3E\5E\u0a4c\nE\3E\3E\3E\3E\3E\5E\u0a53\nE\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\7E\u0a60\nE\fE\16E\u0a63")
        buf.write("\13E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u0a6f\nE\3E\3E\3")
        buf.write("E\3E\5E\u0a75\nE\3E\3E\3E\3E\5E\u0a7b\nE\3E\3E\3E\3E\5")
        buf.write("E\u0a81\nE\3E\3E\3E\3E\5E\u0a87\nE\3E\3E\3E\3E\5E\u0a8d")
        buf.write("\nE\3E\3E\3E\3E\5E\u0a93\nE\3F\3F\3F\5F\u0a98\nF\3F\3")
        buf.write("F\3G\3G\3G\5G\u0a9f\nG\3G\3G\3H\3H\3H\5H\u0aa6\nH\3H\3")
        buf.write("H\3H\3H\3H\5H\u0aad\nH\3H\3H\3H\5H\u0ab2\nH\3H\7H\u0ab5")
        buf.write("\nH\fH\16H\u0ab8\13H\3I\3I\3I\3I\3I\3I\3I\3I\3J\3J\3J")
        buf.write("\5J\u0ac5\nJ\3J\3J\3K\3K\3K\5K\u0acc\nK\3K\3K\3L\3L\3")
        buf.write("L\5L\u0ad3\nL\3L\3L\3M\3M\5M\u0ad9\nM\3M\3M\5M\u0add\n")
        buf.write("M\3M\3M\5M\u0ae1\nM\3N\3N\3N\3N\3N\5N\u0ae8\nN\3N\5N\u0aeb")
        buf.write("\nN\3O\3O\3O\5O\u0af0\nO\3O\3O\3P\3P\3P\5P\u0af7\nP\3")
        buf.write("P\3P\3P\7P\u0afc\nP\fP\16P\u0aff\13P\3P\5P\u0b02\nP\3")
        buf.write("Q\3Q\3Q\3Q\3Q\7Q\u0b09\nQ\fQ\16Q\u0b0c\13Q\3R\3R\3R\3")
        buf.write("R\3S\3S\5S\u0b14\nS\3S\3S\3T\3T\3T\3T\3T\5T\u0b1d\nT\3")
        buf.write("T\3T\5T\u0b21\nT\3U\3U\5U\u0b25\nU\3V\3V\3V\3W\3W\3W\3")
        buf.write("W\5W\u0b2e\nW\3X\3X\5X\u0b32\nX\3X\5X\u0b35\nX\3X\5X\u0b38")
        buf.write("\nX\3X\3X\3X\3X\5X\u0b3e\nX\3X\3X\5X\u0b42\nX\3X\3X\3")
        buf.write("X\3X\5X\u0b48\nX\3X\3X\3X\3X\3X\7X\u0b4f\nX\fX\16X\u0b52")
        buf.write("\13X\5X\u0b54\nX\3X\3X\3X\3X\3X\3X\3X\7X\u0b5d\nX\fX\16")
        buf.write("X\u0b60\13X\5X\u0b62\nX\3Y\3Y\3Y\5Y\u0b67\nY\3Y\5Y\u0b6a")
        buf.write("\nY\3Y\3Y\3Y\5Y\u0b6f\nY\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0b79")
        buf.write("\nY\3Y\3Y\3Y\5Y\u0b7e\nY\3Y\3Y\6Y\u0b82\nY\rY\16Y\u0b83")
        buf.write("\5Y\u0b86\nY\3Y\3Y\6Y\u0b8a\nY\rY\16Y\u0b8b\5Y\u0b8e\n")
        buf.write("Y\3Y\3Y\3Y\3Y\5Y\u0b94\nY\3Y\3Y\3Y\3Y\7Y\u0b9a\nY\fY\16")
        buf.write("Y\u0b9d\13Y\3Y\3Y\5Y\u0ba1\nY\3Y\3Y\3Y\3Y\7Y\u0ba7\nY")
        buf.write("\fY\16Y\u0baa\13Y\5Y\u0bac\nY\3Z\3Z\3Z\5Z\u0bb1\nZ\3Z")
        buf.write("\5Z\u0bb4\nZ\3Z\3Z\3Z\5Z\u0bb9\nZ\3Z\3Z\3Z\3Z\3Z\3Z\5")
        buf.write("Z\u0bc1\nZ\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0bc9\nZ\3Z\3Z\3Z\3Z\5")
        buf.write("Z\u0bcf\nZ\3Z\3Z\3Z\3Z\7Z\u0bd5\nZ\fZ\16Z\u0bd8\13Z\3")
        buf.write("Z\3Z\5Z\u0bdc\nZ\3Z\3Z\3Z\3Z\7Z\u0be2\nZ\fZ\16Z\u0be5")
        buf.write("\13Z\5Z\u0be7\nZ\3[\3[\5[\u0beb\n[\3[\5[\u0bee\n[\3[\3")
        buf.write("[\3[\3[\3[\3[\5[\u0bf6\n[\3[\3[\3[\3[\5[\u0bfc\n[\3[\3")
        buf.write("[\3[\3[\3[\7[\u0c03\n[\f[\16[\u0c06\13[\5[\u0c08\n[\3")
        buf.write("\\\3\\\5\\\u0c0c\n\\\3\\\3\\\5\\\u0c10\n\\\3\\\3\\\6\\")
        buf.write("\u0c14\n\\\r\\\16\\\u0c15\3\\\3\\\5\\\u0c1a\n\\\3\\\3")
        buf.write("\\\5\\\u0c1e\n\\\5\\\u0c20\n\\\3\\\5\\\u0c23\n\\\3\\\5")
        buf.write("\\\u0c26\n\\\3\\\5\\\u0c29\n\\\3\\\3\\\6\\\u0c2d\n\\\r")
        buf.write("\\\16\\\u0c2e\3\\\3\\\5\\\u0c33\n\\\3\\\5\\\u0c36\n\\")
        buf.write("\3\\\5\\\u0c39\n\\\3\\\5\\\u0c3c\n\\\3\\\5\\\u0c3f\n\\")
        buf.write("\5\\\u0c41\n\\\3]\3]\5]\u0c45\n]\3^\3^\3^\3^\5^\u0c4b")
        buf.write("\n^\3^\3^\3^\3^\5^\u0c51\n^\3^\3^\7^\u0c55\n^\f^\16^\u0c58")
        buf.write("\13^\5^\u0c5a\n^\3_\3_\3_\3_\5_\u0c60\n_\3`\3`\5`\u0c64")
        buf.write("\n`\3a\3a\3a\3a\3a\3a\5a\u0c6c\na\3b\3b\5b\u0c70\nb\3")
        buf.write("b\5b\u0c73\nb\3b\5b\u0c76\nb\3b\3b\3b\3b\3b\3b\3b\5b\u0c7f")
        buf.write("\nb\3b\3b\5b\u0c83\nb\3b\5b\u0c86\nb\3b\3b\5b\u0c8a\n")
        buf.write("b\3c\3c\5c\u0c8e\nc\3c\5c\u0c91\nc\3c\5c\u0c94\nc\3c\3")
        buf.write("c\3c\5c\u0c99\nc\3c\3c\3c\3c\5c\u0c9f\nc\7c\u0ca1\nc\f")
        buf.write("c\16c\u0ca4\13c\3c\3c\3c\3c\3c\3c\3c\5c\u0cad\nc\3c\3")
        buf.write("c\3c\3c\5c\u0cb3\nc\7c\u0cb5\nc\fc\16c\u0cb8\13c\3c\3")
        buf.write("c\3c\5c\u0cbd\nc\3c\3c\5c\u0cc1\nc\3d\3d\3d\3d\5d\u0cc7")
        buf.write("\nd\3d\5d\u0cca\nd\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\5e\u0cd6")
        buf.write("\ne\3e\3e\5e\u0cda\ne\3e\3e\5e\u0cde\ne\3f\3f\3f\3f\3")
        buf.write("f\3f\5f\u0ce6\nf\3f\3f\5f\u0cea\nf\3g\3g\3g\3g\3h\3h\5")
        buf.write("h\u0cf2\nh\3h\5h\u0cf5\nh\3h\3h\5h\u0cf9\nh\3h\5h\u0cfc")
        buf.write("\nh\3h\3h\3h\3h\7h\u0d02\nh\fh\16h\u0d05\13h\3h\3h\5h")
        buf.write("\u0d09\nh\3h\5h\u0d0c\nh\3h\5h\u0d0f\nh\3i\3i\5i\u0d13")
        buf.write("\ni\3i\5i\u0d16\ni\3i\3i\3i\3i\3i\7i\u0d1d\ni\fi\16i\u0d20")
        buf.write("\13i\3i\3i\5i\u0d24\ni\3j\3j\3j\3j\3j\7j\u0d2b\nj\fj\16")
        buf.write("j\u0d2e\13j\3k\3k\5k\u0d32\nk\3l\3l\3l\7l\u0d37\nl\fl")
        buf.write("\16l\u0d3a\13l\3m\3m\7m\u0d3e\nm\fm\16m\u0d41\13m\3m\3")
        buf.write("m\3m\7m\u0d46\nm\fm\16m\u0d49\13m\3m\3m\5m\u0d4d\nm\3")
        buf.write("n\3n\3n\3n\3n\3n\5n\u0d55\nn\3n\5n\u0d58\nn\3n\5n\u0d5b")
        buf.write("\nn\3n\3n\3n\7n\u0d60\nn\fn\16n\u0d63\13n\5n\u0d65\nn")
        buf.write("\3n\3n\3n\3n\3n\5n\u0d6c\nn\3n\5n\u0d6f\nn\3n\3n\3n\3")
        buf.write("n\3n\3n\5n\u0d77\nn\3o\3o\3o\3o\5o\u0d7d\no\3o\3o\3o\3")
        buf.write("o\3p\3p\3p\3p\3p\5p\u0d88\np\3q\5q\u0d8b\nq\3q\3q\3q\3")
        buf.write("q\3q\3q\3q\3q\3q\5q\u0d96\nq\3q\3q\3q\3q\5q\u0d9c\nq\3")
        buf.write("q\3q\5q\u0da0\nq\3q\3q\3q\3q\3q\3q\3q\3q\3q\5q\u0dab\n")
        buf.write("q\3q\3q\3q\5q\u0db0\nq\5q\u0db2\nq\3q\3q\3q\5q\u0db7\n")
        buf.write("q\3r\3r\3s\3s\3s\3s\3s\3s\3s\3s\5s\u0dc3\ns\3t\3t\3t\3")
        buf.write("t\3t\3t\3t\3t\5t\u0dcd\nt\3u\3u\3u\3u\3u\3u\3u\3u\3u\3")
        buf.write("u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\5u\u0de7\n")
        buf.write("u\3v\5v\u0dea\nv\3v\5v\u0ded\nv\3v\5v\u0df0\nv\3v\5v\u0df3")
        buf.write("\nv\3v\5v\u0df6\nv\3v\5v\u0df9\nv\3v\5v\u0dfc\nv\3v\5")
        buf.write("v\u0dff\nv\3v\5v\u0e02\nv\3v\5v\u0e05\nv\3v\5v\u0e08\n")
        buf.write("v\5v\u0e0a\nv\3w\3w\7w\u0e0e\nw\fw\16w\u0e11\13w\3w\3")
        buf.write("w\5w\u0e15\nw\3w\3w\7w\u0e19\nw\fw\16w\u0e1c\13w\3w\3")
        buf.write("w\5w\u0e20\nw\3x\5x\u0e23\nx\3y\3y\3z\3z\3{\3{\7{\u0e2b")
        buf.write("\n{\f{\16{\u0e2e\13{\3{\3{\5{\u0e32\n{\3{\5{\u0e35\n{")
        buf.write("\3{\5{\u0e38\n{\3{\5{\u0e3b\n{\3{\5{\u0e3e\n{\3{\5{\u0e41")
        buf.write("\n{\3|\3|\5|\u0e45\n|\3|\3|\3}\3}\5}\u0e4b\n}\3}\3}\5")
        buf.write("}\u0e4f\n}\3~\3~\3~\3~\3~\3~\3~\3~\5~\u0e59\n~\3\177\3")
        buf.write("\177\5\177\u0e5d\n\177\3\177\3\177\3\177\7\177\u0e62\n")
        buf.write("\177\f\177\16\177\u0e65\13\177\3\u0080\3\u0080\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0e6f")
        buf.write("\n\u0081\3\u0081\5\u0081\u0e72\n\u0081\3\u0081\3\u0081")
        buf.write("\5\u0081\u0e76\n\u0081\3\u0081\5\u0081\u0e79\n\u0081\3")
        buf.write("\u0081\3\u0081\5\u0081\u0e7d\n\u0081\3\u0081\3\u0081\5")
        buf.write("\u0081\u0e81\n\u0081\3\u0081\5\u0081\u0e84\n\u0081\5\u0081")
        buf.write("\u0e86\n\u0081\3\u0082\3\u0082\3\u0082\3\u0082\7\u0082")
        buf.write("\u0e8c\n\u0082\f\u0082\16\u0082\u0e8f\13\u0082\3\u0082")
        buf.write("\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\5\u0082\u0e9a\n\u0082\3\u0082\3\u0082\6\u0082")
        buf.write("\u0e9e\n\u0082\r\u0082\16\u0082\u0e9f\5\u0082\u0ea2\n")
        buf.write("\u0082\3\u0082\3\u0082\6\u0082\u0ea6\n\u0082\r\u0082\16")
        buf.write("\u0082\u0ea7\5\u0082\u0eaa\n\u0082\5\u0082\u0eac\n\u0082")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0eb2\n\u0083")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083")
        buf.write("\u0eba\n\u0083\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\5\u0084\u0ec2\n\u0084\3\u0085\3\u0085\3\u0085")
        buf.write("\5\u0085\u0ec7\n\u0085\3\u0085\3\u0085\5\u0085\u0ecb\n")
        buf.write("\u0085\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\7\u0087\u0ed4\n\u0087\f\u0087\16\u0087\u0ed7")
        buf.write("\13\u0087\3\u0087\3\u0087\5\u0087\u0edb\n\u0087\3\u0088")
        buf.write("\3\u0088\3\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\7\u0089\u0eed\n\u0089\f\u0089\16\u0089\u0ef0")
        buf.write("\13\u0089\3\u008a\3\u008a\5\u008a\u0ef4\n\u008a\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\5\u008b\u0efa\n\u008b\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0f01\n\u008b")
        buf.write("\3\u008c\3\u008c\3\u008c\5\u008c\u0f06\n\u008c\3\u008d")
        buf.write("\3\u008d\3\u008d\3\u008d\3\u008d\7\u008d\u0f0d\n\u008d")
        buf.write("\f\u008d\16\u008d\u0f10\13\u008d\5\u008d\u0f12\n\u008d")
        buf.write("\3\u008e\3\u008e\5\u008e\u0f16\n\u008e\3\u008f\3\u008f")
        buf.write("\5\u008f\u0f1a\n\u008f\3\u008f\3\u008f\5\u008f\u0f1e\n")
        buf.write("\u008f\3\u008f\5\u008f\u0f21\n\u008f\3\u008f\5\u008f\u0f24")
        buf.write("\n\u008f\3\u008f\5\u008f\u0f27\n\u008f\3\u0090\3\u0090")
        buf.write("\5\u0090\u0f2b\n\u0090\3\u0090\3\u0090\5\u0090\u0f2f\n")
        buf.write("\u0090\3\u0090\5\u0090\u0f32\n\u0090\3\u0090\5\u0090\u0f35")
        buf.write("\n\u0090\3\u0090\5\u0090\u0f38\n\u0090\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0092\3\u0092\5\u0092\u0f3f\n\u0092\3\u0092")
        buf.write("\3\u0092\5\u0092\u0f43\n\u0092\3\u0092\3\u0092\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\3\u0094\7\u0094\u0f50\n\u0094\f\u0094\16\u0094\u0f53")
        buf.write("\13\u0094\3\u0095\3\u0095\3\u0095\3\u0096\3\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\3\u0097\3\u0097\5\u0097\u0f5f\n\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0097\7\u0097\u0f65\n\u0097")
        buf.write("\f\u0097\16\u0097\u0f68\13\u0097\3\u0098\3\u0098\3\u0098")
        buf.write("\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0f71\n\u0098")
        buf.write("\3\u0099\3\u0099\5\u0099\u0f75\n\u0099\3\u0099\5\u0099")
        buf.write("\u0f78\n\u0099\3\u0099\3\u0099\3\u009a\3\u009a\5\u009a")
        buf.write("\u0f7e\n\u009a\3\u009a\5\u009a\u0f81\n\u009a\3\u009a\5")
        buf.write("\u009a\u0f84\n\u009a\3\u009b\3\u009b\3\u009b\3\u009b\3")
        buf.write("\u009b\3\u009b\3\u009b\5\u009b\u0f8d\n\u009b\3\u009c\3")
        buf.write("\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c")
        buf.write("\u0f96\n\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d")
        buf.write("\3\u009d\7\u009d\u0f9e\n\u009d\f\u009d\16\u009d\u0fa1")
        buf.write("\13\u009d\3\u009d\5\u009d\u0fa4\n\u009d\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\7\u009e\u0fac\n\u009e")
        buf.write("\f\u009e\16\u009e\u0faf\13\u009e\3\u009f\3\u009f\3\u009f")
        buf.write("\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0fb8\n\u009f")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a1\5\u00a1")
        buf.write("\u0fc0\n\u00a1\3\u00a1\5\u00a1\u0fc3\n\u00a1\3\u00a2\3")
        buf.write("\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0fca\n\u00a2\f")
        buf.write("\u00a2\16\u00a2\u0fcd\13\u00a2\5\u00a2\u0fcf\n\u00a2\3")
        buf.write("\u00a2\3\u00a2\5\u00a2\u0fd3\n\u00a2\3\u00a2\7\u00a2\u0fd6")
        buf.write("\n\u00a2\f\u00a2\16\u00a2\u0fd9\13\u00a2\3\u00a2\5\u00a2")
        buf.write("\u0fdc\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\7\u00a3\u0fe3\n\u00a3\f\u00a3\16\u00a3\u0fe6\13\u00a3")
        buf.write("\5\u00a3\u0fe8\n\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\7\u00a6\u1005\n\u00a6\f\u00a6\16\u00a6")
        buf.write("\u1008\13\u00a6\5\u00a6\u100a\n\u00a6\3\u00a6\3\u00a6")
        buf.write("\5\u00a6\u100e\n\u00a6\3\u00a7\3\u00a7\3\u00a8\3\u00a8")
        buf.write("\3\u00a9\3\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\7\u00ab")
        buf.write("\u1044\n\u00ab\f\u00ab\16\u00ab\u1047\13\u00ab\3\u00ab")
        buf.write("\3\u00ab\5\u00ab\u104b\n\u00ab\3\u00ac\3\u00ac\3\u00ac")
        buf.write("\3\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\5\u00ae\u1067\n\u00ae\3\u00af\3\u00af")
        buf.write("\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af")
        buf.write("\3\u00af\3\u00af\3\u00af\5\u00af\u1075\n\u00af\3\u00b0")
        buf.write("\3\u00b0\3\u00b0\7\u00b0\u107a\n\u00b0\f\u00b0\16\u00b0")
        buf.write("\u107d\13\u00b0\3\u00b0\5\u00b0\u1080\n\u00b0\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u1086\n\u00b1\3\u00b2")
        buf.write("\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u108e")
        buf.write("\n\u00b2\5\u00b2\u1090\n\u00b2\3\u00b3\3\u00b3\3\u00b3")
        buf.write("\3\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4")
        buf.write("\u109b\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u10a5\n\u00b6\3\u00b7")
        buf.write("\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u10ac\n\u00b7")
        buf.write("\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u10b2\n\u00b8")
        buf.write("\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba\5\u00ba")
        buf.write("\u10ba\n\u00ba\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u10bf\n")
        buf.write("\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u10c5\n")
        buf.write("\u00bb\f\u00bb\16\u00bb\u10c8\13\u00bb\3\u00bb\3\u00bb")
        buf.write("\3\u00bb\7\u00bb\u10cd\n\u00bb\f\u00bb\16\u00bb\u10d0")
        buf.write("\13\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u10d5\n\u00bb")
        buf.write("\f\u00bb\16\u00bb\u10d8\13\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write("\7\u00bb\u10dd\n\u00bb\f\u00bb\16\u00bb\u10e0\13\u00bb")
        buf.write("\3\u00bb\7\u00bb\u10e3\n\u00bb\f\u00bb\16\u00bb\u10e6")
        buf.write("\13\u00bb\5\u00bb\u10e8\n\u00bb\3\u00bb\3\u00bb\5\u00bb")
        buf.write("\u10ec\n\u00bb\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u10f1\n")
        buf.write("\u00bc\3\u00bc\6\u00bc\u10f4\n\u00bc\r\u00bc\16\u00bc")
        buf.write("\u10f5\3\u00bc\3\u00bc\6\u00bc\u10fa\n\u00bc\r\u00bc\16")
        buf.write("\u00bc\u10fb\5\u00bc\u10fe\n\u00bc\3\u00bc\3\u00bc\3\u00bc")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\6\u00bd\u1107\n\u00bd")
        buf.write("\r\u00bd\16\u00bd\u1108\3\u00bd\7\u00bd\u110c\n\u00bd")
        buf.write("\f\u00bd\16\u00bd\u110f\13\u00bd\3\u00bd\3\u00bd\6\u00bd")
        buf.write("\u1113\n\u00bd\r\u00bd\16\u00bd\u1114\5\u00bd\u1117\n")
        buf.write("\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00be\3\u00be\3\u00be")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c0\5\u00c0")
        buf.write("\u1125\n\u00c0\3\u00c0\3\u00c0\6\u00c0\u1129\n\u00c0\r")
        buf.write("\u00c0\16\u00c0\u112a\3\u00c0\3\u00c0\3\u00c0\5\u00c0")
        buf.write("\u1130\n\u00c0\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u1135\n")
        buf.write("\u00c1\3\u00c1\3\u00c1\6\u00c1\u1139\n\u00c1\r\u00c1\16")
        buf.write("\u00c1\u113a\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5")
        buf.write("\u00c1\u1142\n\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c3\3")
        buf.write("\u00c3\3\u00c3\5\u00c3\u114a\n\u00c3\3\u00c3\3\u00c3\3")
        buf.write("\u00c3\3\u00c3\6\u00c3\u1150\n\u00c3\r\u00c3\16\u00c3")
        buf.write("\u1151\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u1157\n\u00c3\3")
        buf.write("\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u115d\n\u00c4\3")
        buf.write("\u00c4\5\u00c4\u1160\n\u00c4\3\u00c4\3\u00c4\3\u00c4\3")
        buf.write("\u00c4\3\u00c4\3\u00c4\5\u00c4\u1168\n\u00c4\3\u00c5\3")
        buf.write("\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u116f\n\u00c5\3")
        buf.write("\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6")
        buf.write("\5\u00c6\u1178\n\u00c6\3\u00c6\5\u00c6\u117b\n\u00c6\3")
        buf.write("\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c8")
        buf.write("\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8")
        buf.write("\u118a\n\u00c8\f\u00c8\16\u00c8\u118d\13\u00c8\3\u00c8")
        buf.write("\3\u00c8\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u1194\n\u00c9")
        buf.write("\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9")
        buf.write("\u119c\n\u00c9\3\u00ca\3\u00ca\5\u00ca\u11a0\n\u00ca\3")
        buf.write("\u00ca\3\u00ca\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u11a7\n")
        buf.write("\u00cb\3\u00cb\3\u00cb\6\u00cb\u11ab\n\u00cb\r\u00cb\16")
        buf.write("\u00cb\u11ac\3\u00cc\3\u00cc\3\u00cc\3\u00cc\6\u00cc\u11b3")
        buf.write("\n\u00cc\r\u00cc\16\u00cc\u11b4\3\u00cd\3\u00cd\3\u00cd")
        buf.write("\3\u00cd\3\u00cd\7\u00cd\u11bc\n\u00cd\f\u00cd\16\u00cd")
        buf.write("\u11bf\13\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u11c4")
        buf.write("\n\u00cd\3\u00cd\3\u00cd\3\u00cd\7\u00cd\u11c9\n\u00cd")
        buf.write("\f\u00cd\16\u00cd\u11cc\13\u00cd\3\u00cd\3\u00cd\3\u00cd")
        buf.write("\3\u00cd\5\u00cd\u11d2\n\u00cd\3\u00cd\7\u00cd\u11d5\n")
        buf.write("\u00cd\f\u00cd\16\u00cd\u11d8\13\u00cd\5\u00cd\u11da\n")
        buf.write("\u00cd\5\u00cd\u11dc\n\u00cd\3\u00cd\3\u00cd\6\u00cd\u11e0")
        buf.write("\n\u00cd\r\u00cd\16\u00cd\u11e1\5\u00cd\u11e4\n\u00cd")
        buf.write("\3\u00cd\3\u00cd\7\u00cd\u11e8\n\u00cd\f\u00cd\16\u00cd")
        buf.write("\u11eb\13\u00cd\5\u00cd\u11ed\n\u00cd\3\u00ce\3\u00ce")
        buf.write("\3\u00ce\3\u00ce\3\u00ce\7\u00ce\u11f4\n\u00ce\f\u00ce")
        buf.write("\16\u00ce\u11f7\13\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce")
        buf.write("\u11fc\n\u00ce\3\u00ce\3\u00ce\3\u00ce\7\u00ce\u1201\n")
        buf.write("\u00ce\f\u00ce\16\u00ce\u1204\13\u00ce\3\u00ce\3\u00ce")
        buf.write("\3\u00ce\3\u00ce\5\u00ce\u120a\n\u00ce\3\u00ce\7\u00ce")
        buf.write("\u120d\n\u00ce\f\u00ce\16\u00ce\u1210\13\u00ce\5\u00ce")
        buf.write("\u1212\n\u00ce\5\u00ce\u1214\n\u00ce\3\u00ce\3\u00ce\6")
        buf.write("\u00ce\u1218\n\u00ce\r\u00ce\16\u00ce\u1219\5\u00ce\u121c")
        buf.write("\n\u00ce\3\u00ce\3\u00ce\7\u00ce\u1220\n\u00ce\f\u00ce")
        buf.write("\16\u00ce\u1223\13\u00ce\5\u00ce\u1225\n\u00ce\3\u00cf")
        buf.write("\3\u00cf\3\u00cf\5\u00cf\u122a\n\u00cf\3\u00cf\3\u00cf")
        buf.write("\3\u00cf\7\u00cf\u122f\n\u00cf\f\u00cf\16\u00cf\u1232")
        buf.write("\13\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\7\u00d0\u1238")
        buf.write("\n\u00d0\f\u00d0\16\u00d0\u123b\13\u00d0\3\u00d0\3\u00d0")
        buf.write("\5\u00d0\u123f\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0")
        buf.write("\3\u00d0\7\u00d0\u1246\n\u00d0\f\u00d0\16\u00d0\u1249")
        buf.write("\13\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u124f")
        buf.write("\n\u00d0\3\u00d0\7\u00d0\u1252\n\u00d0\f\u00d0\16\u00d0")
        buf.write("\u1255\13\u00d0\5\u00d0\u1257\n\u00d0\5\u00d0\u1259\n")
        buf.write("\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\7\u00d0\u125f\n")
        buf.write("\u00d0\f\u00d0\16\u00d0\u1262\13\u00d0\5\u00d0\u1264\n")
        buf.write("\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0")
        buf.write("\5\u00d0\u126c\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0")
        buf.write("\7\u00d0\u1272\n\u00d0\f\u00d0\16\u00d0\u1275\13\u00d0")
        buf.write("\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u127a\n\u00d0\3\u00d0")
        buf.write("\3\u00d0\3\u00d0\5\u00d0\u127f\n\u00d0\7\u00d0\u1281\n")
        buf.write("\u00d0\f\u00d0\16\u00d0\u1284\13\u00d0\3\u00d0\3\u00d0")
        buf.write("\3\u00d0\5\u00d0\u1289\n\u00d0\5\u00d0\u128b\n\u00d0\3")
        buf.write("\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1")
        buf.write("\7\u00d1\u1294\n\u00d1\f\u00d1\16\u00d1\u1297\13\u00d1")
        buf.write("\5\u00d1\u1299\n\u00d1\3\u00d1\3\u00d1\3\u00d1\7\u00d1")
        buf.write("\u129e\n\u00d1\f\u00d1\16\u00d1\u12a1\13\u00d1\5\u00d1")
        buf.write("\u12a3\n\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2")
        buf.write("\3\u00d2\3\u00d2\3\u00d2\7\u00d2\u12ad\n\u00d2\f\u00d2")
        buf.write("\16\u00d2\u12b0\13\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2")
        buf.write("\u12b5\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3")
        buf.write("\7\u00d3\u12bc\n\u00d3\f\u00d3\16\u00d3\u12bf\13\u00d3")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\3\u00d4\7\u00d4\u12c5\n\u00d4")
        buf.write("\f\u00d4\16\u00d4\u12c8\13\u00d4\3\u00d4\3\u00d4\5\u00d4")
        buf.write("\u12cc\n\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\7\u00d4\u12d3\n\u00d4\f\u00d4\16\u00d4\u12d6\13\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u12db\n\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\7\u00d4")
        buf.write("\u12e4\n\u00d4\f\u00d4\16\u00d4\u12e7\13\u00d4\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\7\u00d4\u12ed\n\u00d4\f\u00d4")
        buf.write("\16\u00d4\u12f0\13\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4")
        buf.write("\u12f5\n\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u12fa\n")
        buf.write("\u00d4\7\u00d4\u12fc\n\u00d4\f\u00d4\16\u00d4\u12ff\13")
        buf.write("\u00d4\5\u00d4\u1301\n\u00d4\3\u00d5\3\u00d5\3\u00d5\3")
        buf.write("\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\7\u00d5\u130b\n")
        buf.write("\u00d5\f\u00d5\16\u00d5\u130e\13\u00d5\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\3\u00d6\5\u00d6\u1314\n\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\5\u00d6\u1319\n\u00d6\3\u00d7\3\u00d7\3\u00d7")
        buf.write("\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8")
        buf.write("\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u1328\n\u00d8\3\u00d8")
        buf.write("\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u132f\n\u00d8")
        buf.write("\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8")
        buf.write("\u1337\n\u00d8\3\u00d8\5\u00d8\u133a\n\u00d8\3\u00d9\3")
        buf.write("\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9")
        buf.write("\5\u00d9\u1344\n\u00d9\3\u00da\3\u00da\3\u00da\3\u00da")
        buf.write("\3\u00da\3\u00da\3\u00da\3\u00da\5\u00da\u134e\n\u00da")
        buf.write("\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db")
        buf.write("\3\u00db\5\u00db\u1358\n\u00db\3\u00dc\3\u00dc\3\u00dc")
        buf.write("\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u1362")
        buf.write("\n\u00dd\3\u00de\3\u00de\5\u00de\u1366\n\u00de\3\u00de")
        buf.write("\3\u00de\5\u00de\u136a\n\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1374")
        buf.write("\n\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1379\n\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\5\u00de\u13b3\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u13c5")
        buf.write("\n\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e1\3\u00e1")
        buf.write("\5\u00e1\u13cd\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1")
        buf.write("\3\u00e1\3\u00e1\3\u00e1\3\u00e1\7\u00e1\u13d7\n\u00e1")
        buf.write("\f\u00e1\16\u00e1\u13da\13\u00e1\3\u00e1\3\u00e1\3\u00e1")
        buf.write("\3\u00e1\5\u00e1\u13e0\n\u00e1\5\u00e1\u13e2\n\u00e1\3")
        buf.write("\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\7\u00e1")
        buf.write("\u13ea\n\u00e1\f\u00e1\16\u00e1\u13ed\13\u00e1\5\u00e1")
        buf.write("\u13ef\n\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\7\u00e2")
        buf.write("\u13f5\n\u00e2\f\u00e2\16\u00e2\u13f8\13\u00e2\3\u00e3")
        buf.write("\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u13fe\n\u00e3\3\u00e4")
        buf.write("\3\u00e4\5\u00e4\u1402\n\u00e4\3\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e5\3\u00e5\5\u00e5\u1409\n\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\5\u00e5\u140e\n\u00e5\3\u00e5\5\u00e5\u1411\n")
        buf.write("\u00e5\3\u00e5\5\u00e5\u1414\n\u00e5\3\u00e6\3\u00e6\3")
        buf.write("\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u141d\n")
        buf.write("\u00e6\3\u00e7\3\u00e7\5\u00e7\u1421\n\u00e7\3\u00e7\3")
        buf.write("\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e8")
        buf.write("\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e9\3\u00e9")
        buf.write("\3\u00e9\3\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea")
        buf.write("\3\u00ea\3\u00ea\3\u00ea\3\u00ea\7\u00ea\u143d\n\u00ea")
        buf.write("\f\u00ea\16\u00ea\u1440\13\u00ea\3\u00ea\3\u00ea\3\u00ea")
        buf.write("\3\u00ea\5\u00ea\u1446\n\u00ea\3\u00ea\3\u00ea\5\u00ea")
        buf.write("\u144a\n\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea")
        buf.write("\5\u00ea\u1451\n\u00ea\3\u00ea\5\u00ea\u1454\n\u00ea\3")
        buf.write("\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea")
        buf.write("\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\7\u00ea\u1462")
        buf.write("\n\u00ea\f\u00ea\16\u00ea\u1465\13\u00ea\5\u00ea\u1467")
        buf.write("\n\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb")
        buf.write("\3\u00eb\3\u00eb\5\u00eb\u1471\n\u00eb\3\u00eb\3\u00eb")
        buf.write("\5\u00eb\u1475\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb")
        buf.write("\5\u00eb\u147b\n\u00eb\3\u00eb\5\u00eb\u147e\n\u00eb\3")
        buf.write("\u00eb\3\u00eb\3\u00eb\5\u00eb\u1483\n\u00eb\3\u00eb\3")
        buf.write("\u00eb\5\u00eb\u1487\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3")
        buf.write("\u00eb\3\u00eb\5\u00eb\u148e\n\u00eb\3\u00eb\5\u00eb\u1491")
        buf.write("\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u1497")
        buf.write("\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb")
        buf.write("\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb")
        buf.write("\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb")
        buf.write("\3\u00eb\3\u00eb\5\u00eb\u14af\n\u00eb\3\u00eb\3\u00eb")
        buf.write("\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb")
        buf.write("\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u14bd\n\u00eb\3\u00eb")
        buf.write("\5\u00eb\u14c0\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb")
        buf.write("\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u14ca\n\u00eb")
        buf.write("\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb")
        buf.write("\u14d2\n\u00eb\3\u00eb\3\u00eb\5\u00eb\u14d6\n\u00eb\3")
        buf.write("\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u14dd\n")
        buf.write("\u00eb\3\u00eb\5\u00eb\u14e0\n\u00eb\3\u00eb\3\u00eb\3")
        buf.write("\u00eb\3\u00eb\3\u00eb\7\u00eb\u14e7\n\u00eb\f\u00eb\16")
        buf.write("\u00eb\u14ea\13\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb")
        buf.write("\u14ef\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb")
        buf.write("\u14f5\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb")
        buf.write("\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u14ff\n\u00eb\5\u00eb")
        buf.write("\u1501\n\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec")
        buf.write("\u1507\n\u00ec\3\u00ec\5\u00ec\u150a\n\u00ec\3\u00ec\5")
        buf.write("\u00ec\u150d\n\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3")
        buf.write("\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed")
        buf.write("\u1519\n\u00ed\3\u00ed\5\u00ed\u151c\n\u00ed\3\u00ee\3")
        buf.write("\u00ee\3\u00ee\3\u00ee\5\u00ee\u1522\n\u00ee\3\u00ef\5")
        buf.write("\u00ef\u1525\n\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3")
        buf.write("\u00ef\3\u00ef\5\u00ef\u152d\n\u00ef\3\u00ef\3\u00ef\3")
        buf.write("\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u1535\n\u00ef\3")
        buf.write("\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u153b\n\u00f0\3")
        buf.write("\u00f0\3\u00f0\5\u00f0\u153f\n\u00f0\3\u00f1\3\u00f1\3")
        buf.write("\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1")
        buf.write("\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u154d\n\u00f1\3\u00f2")
        buf.write("\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3")
        buf.write("\7\u00f3\u1557\n\u00f3\f\u00f3\16\u00f3\u155a\13\u00f3")
        buf.write("\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u1560\n\u00f3")
        buf.write("\3\u00f3\3\u00f3\5\u00f3\u1564\n\u00f3\3\u00f3\3\u00f3")
        buf.write("\3\u00f3\3\u00f4\3\u00f4\5\u00f4\u156b\n\u00f4\3\u00f4")
        buf.write("\3\u00f4\3\u00f4\7\u00f4\u1570\n\u00f4\f\u00f4\16\u00f4")
        buf.write("\u1573\13\u00f4\3\u00f5\3\u00f5\5\u00f5\u1577\n\u00f5")
        buf.write("\3\u00f5\6\u00f5\u157a\n\u00f5\r\u00f5\16\u00f5\u157b")
        buf.write("\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6")
        buf.write("\7\u00f6\u1585\n\u00f6\f\u00f6\16\u00f6\u1588\13\u00f6")
        buf.write("\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f8\3\u00f8\3\u00f9")
        buf.write("\3\u00f9\5\u00f9\u1592\n\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\3\u00f9\5\u00f9\u1598\n\u00f9\3\u00fa\3\u00fa\3\u00fa")
        buf.write("\5\u00fa\u159d\n\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write("\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write("\5\u00fa\u15aa\n\u00fa\5\u00fa\u15ac\n\u00fa\3\u00fa\3")
        buf.write("\u00fa\3\u00fa\5\u00fa\u15b1\n\u00fa\3\u00fa\3\u00fa\3")
        buf.write("\u00fa\5\u00fa\u15b6\n\u00fa\5\u00fa\u15b8\n\u00fa\3\u00fb")
        buf.write("\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u15bf\n\u00fb")
        buf.write("\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u15c6")
        buf.write("\n\u00fc\3\u00fc\3\u00fc\5\u00fc\u15ca\n\u00fc\3\u00fc")
        buf.write("\5\u00fc\u15cd\n\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc")
        buf.write("\5\u00fc\u15d3\n\u00fc\3\u00fc\3\u00fc\5\u00fc\u15d7\n")
        buf.write("\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u15dd\n")
        buf.write("\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u15e3\n")
        buf.write("\u00fe\3\u00fe\3\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u0100")
        buf.write("\3\u0100\3\u0100\3\u0101\3\u0101\3\u0101\5\u0101\u15f0")
        buf.write("\n\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u15f5\n\u0101")
        buf.write("\3\u0101\3\u0101\3\u0101\3\u0101\7\u0101\u15fb\n\u0101")
        buf.write("\f\u0101\16\u0101\u15fe\13\u0101\5\u0101\u1600\n\u0101")
        buf.write("\3\u0102\3\u0102\3\u0102\5\u0102\u1605\n\u0102\3\u0102")
        buf.write("\3\u0102\3\u0102\5\u0102\u160a\n\u0102\3\u0102\3\u0102")
        buf.write("\3\u0102\3\u0102\7\u0102\u1610\n\u0102\f\u0102\16\u0102")
        buf.write("\u1613\13\u0102\5\u0102\u1615\n\u0102\3\u0103\3\u0103")
        buf.write("\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u161d\n\u0103")
        buf.write("\3\u0104\3\u0104\5\u0104\u1621\n\u0104\3\u0104\3\u0104")
        buf.write("\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104")
        buf.write("\7\u0104\u162c\n\u0104\f\u0104\16\u0104\u162f\13\u0104")
        buf.write("\3\u0104\3\u0104\3\u0104\5\u0104\u1634\n\u0104\3\u0104")
        buf.write("\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104")
        buf.write("\7\u0104\u163e\n\u0104\f\u0104\16\u0104\u1641\13\u0104")
        buf.write("\5\u0104\u1643\n\u0104\3\u0105\3\u0105\3\u0106\3\u0106")
        buf.write("\3\u0106\3\u0106\3\u0106\5\u0106\u164c\n\u0106\3\u0106")
        buf.write("\3\u0106\3\u0106\5\u0106\u1651\n\u0106\3\u0107\3\u0107")
        buf.write("\3\u0107\3\u0107\5\u0107\u1657\n\u0107\3\u0108\3\u0108")
        buf.write("\3\u0109\3\u0109\3\u0109\5\u0109\u165e\n\u0109\5\u0109")
        buf.write("\u1660\n\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u1665\n")
        buf.write("\u0109\5\u0109\u1667\n\u0109\3\u010a\3\u010a\5\u010a\u166b")
        buf.write("\n\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u1671")
        buf.write("\n\u010a\3\u010a\5\u010a\u1674\n\u010a\3\u010a\5\u010a")
        buf.write("\u1677\n\u010a\3\u010b\3\u010b\3\u010c\3\u010c\3\u010d")
        buf.write("\3\u010d\3\u010d\3\u010d\5\u010d\u1681\n\u010d\3\u010e")
        buf.write("\3\u010e\5\u010e\u1685\n\u010e\3\u010f\3\u010f\3\u0110")
        buf.write("\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110")
        buf.write("\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\6\u0110")
        buf.write("\u1697\n\u0110\r\u0110\16\u0110\u1698\3\u0111\3\u0111")
        buf.write("\3\u0111\3\u0111\3\u0111\5\u0111\u16a0\n\u0111\5\u0111")
        buf.write("\u16a2\n\u0111\3\u0112\3\u0112\3\u0112\6\u0112\u16a7\n")
        buf.write("\u0112\r\u0112\16\u0112\u16a8\5\u0112\u16ab\n\u0112\3")
        buf.write("\u0113\3\u0113\5\u0113\u16af\n\u0113\3\u0114\3\u0114\3")
        buf.write("\u0114\5\u0114\u16b4\n\u0114\3\u0115\3\u0115\3\u0115\3")
        buf.write("\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115")
        buf.write("\u16bf\n\u0115\3\u0116\3\u0116\3\u0116\5\u0116\u16c4\n")
        buf.write("\u0116\3\u0117\3\u0117\3\u0118\3\u0118\5\u0118\u16ca\n")
        buf.write("\u0118\3\u0119\5\u0119\u16cd\n\u0119\3\u0119\3\u0119\5")
        buf.write("\u0119\u16d1\n\u0119\3\u0119\6\u0119\u16d4\n\u0119\r\u0119")
        buf.write("\16\u0119\u16d5\3\u0119\5\u0119\u16d9\n\u0119\3\u0119")
        buf.write("\3\u0119\5\u0119\u16dd\n\u0119\3\u0119\3\u0119\5\u0119")
        buf.write("\u16e1\n\u0119\5\u0119\u16e3\n\u0119\3\u011a\3\u011a\3")
        buf.write("\u011b\5\u011b\u16e8\n\u011b\3\u011b\3\u011b\3\u011c\5")
        buf.write("\u011c\u16ed\n\u011c\3\u011c\3\u011c\3\u011d\3\u011d\3")
        buf.write("\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d")
        buf.write("\5\u011d\u16fa\n\u011d\3\u011d\5\u011d\u16fd\n\u011d\3")
        buf.write("\u011e\3\u011e\5\u011e\u1701\n\u011e\3\u011e\5\u011e\u1704")
        buf.write("\n\u011e\3\u011e\5\u011e\u1707\n\u011e\3\u011e\3\u011e")
        buf.write("\3\u011e\5\u011e\u170c\n\u011e\3\u011e\5\u011e\u170f\n")
        buf.write("\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u1714\n\u011e\3")
        buf.write("\u011e\3\u011e\3\u011e\5\u011e\u1719\n\u011e\3\u011e\5")
        buf.write("\u011e\u171c\n\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u1721")
        buf.write("\n\u011e\3\u011e\5\u011e\u1724\n\u011e\3\u011e\3\u011e")
        buf.write("\3\u011e\3\u011e\5\u011e\u172a\n\u011e\3\u011e\5\u011e")
        buf.write("\u172d\n\u011e\3\u011e\3\u011e\5\u011e\u1731\n\u011e\3")
        buf.write("\u011e\5\u011e\u1734\n\u011e\3\u011e\5\u011e\u1737\n\u011e")
        buf.write("\3\u011e\3\u011e\5\u011e\u173b\n\u011e\3\u011e\5\u011e")
        buf.write("\u173e\n\u011e\3\u011e\5\u011e\u1741\n\u011e\3\u011e\3")
        buf.write("\u011e\5\u011e\u1745\n\u011e\3\u011e\5\u011e\u1748\n\u011e")
        buf.write("\3\u011e\5\u011e\u174b\n\u011e\3\u011e\5\u011e\u174e\n")
        buf.write("\u011e\3\u011e\3\u011e\5\u011e\u1752\n\u011e\3\u011e\5")
        buf.write("\u011e\u1755\n\u011e\3\u011e\5\u011e\u1758\n\u011e\3\u011e")
        buf.write("\3\u011e\3\u011e\5\u011e\u175d\n\u011e\3\u011e\3\u011e")
        buf.write("\3\u011e\5\u011e\u1762\n\u011e\3\u011e\3\u011e\3\u011e")
        buf.write("\5\u011e\u1767\n\u011e\3\u011e\5\u011e\u176a\n\u011e\3")
        buf.write("\u011e\3\u011e\3\u011e\5\u011e\u176f\n\u011e\3\u011e\5")
        buf.write("\u011e\u1772\n\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u1777")
        buf.write("\n\u011e\3\u011e\5\u011e\u177a\n\u011e\3\u011e\3\u011e")
        buf.write("\5\u011e\u177e\n\u011e\3\u011e\3\u011e\5\u011e\u1782\n")
        buf.write("\u011e\3\u011f\3\u011f\3\u011f\3\u011f\7\u011f\u1788\n")
        buf.write("\u011f\f\u011f\16\u011f\u178b\13\u011f\3\u011f\3\u011f")
        buf.write("\3\u0120\3\u0120\5\u0120\u1791\n\u0120\3\u0120\3\u0120")
        buf.write("\5\u0120\u1795\n\u0120\3\u0120\3\u0120\3\u0120\5\u0120")
        buf.write("\u179a\n\u0120\3\u0120\5\u0120\u179d\n\u0120\3\u0120\3")
        buf.write("\u0120\3\u0120\5\u0120\u17a2\n\u0120\3\u0120\3\u0120\5")
        buf.write("\u0120\u17a6\n\u0120\3\u0120\3\u0120\5\u0120\u17aa\n\u0120")
        buf.write("\3\u0121\3\u0121\3\u0121\3\u0121\3\u0122\3\u0122\3\u0122")
        buf.write("\3\u0122\3\u0122\3\u0122\3\u0123\3\u0123\3\u0123\3\u0123")
        buf.write("\5\u0123\u17ba\n\u0123\3\u0123\3\u0123\3\u0124\3\u0124")
        buf.write("\3\u0124\7\u0124\u17c1\n\u0124\f\u0124\16\u0124\u17c4")
        buf.write("\13\u0124\3\u0125\3\u0125\3\u0125\7\u0125\u17c9\n\u0125")
        buf.write("\f\u0125\16\u0125\u17cc\13\u0125\3\u0126\3\u0126\3\u0126")
        buf.write("\3\u0126\7\u0126\u17d2\n\u0126\f\u0126\16\u0126\u17d5")
        buf.write("\13\u0126\3\u0126\3\u0126\3\u0127\3\u0127\3\u0127\7\u0127")
        buf.write("\u17dc\n\u0127\f\u0127\16\u0127\u17df\13\u0127\3\u0128")
        buf.write("\3\u0128\3\u0128\7\u0128\u17e4\n\u0128\f\u0128\16\u0128")
        buf.write("\u17e7\13\u0128\3\u0129\3\u0129\3\u0129\7\u0129\u17ec")
        buf.write("\n\u0129\f\u0129\16\u0129\u17ef\13\u0129\3\u012a\3\u012a")
        buf.write("\3\u012a\7\u012a\u17f4\n\u012a\f\u012a\16\u012a\u17f7")
        buf.write("\13\u012a\3\u012b\3\u012b\3\u012b\7\u012b\u17fc\n\u012b")
        buf.write("\f\u012b\16\u012b\u17ff\13\u012b\3\u012c\3\u012c\5\u012c")
        buf.write("\u1803\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write("\3\u012c\5\u012c\u180b\n\u012c\3\u012c\3\u012c\3\u012c")
        buf.write("\5\u012c\u1810\n\u012c\3\u012d\3\u012d\3\u012d\5\u012d")
        buf.write("\u1815\n\u012d\3\u012d\3\u012d\5\u012d\u1819\n\u012d\3")
        buf.write("\u012d\3\u012d\3\u012d\5\u012d\u181e\n\u012d\3\u012d\3")
        buf.write("\u012d\5\u012d\u1822\n\u012d\3\u012e\3\u012e\5\u012e\u1826")
        buf.write("\n\u012e\3\u012f\3\u012f\3\u012f\3\u0130\3\u0130\3\u0130")
        buf.write("\3\u0130\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131")
        buf.write("\5\u0131\u1835\n\u0131\3\u0131\3\u0131\3\u0131\3\u0131")
        buf.write("\3\u0131\5\u0131\u183c\n\u0131\3\u0131\3\u0131\3\u0131")
        buf.write("\5\u0131\u1841\n\u0131\3\u0132\3\u0132\3\u0133\3\u0133")
        buf.write("\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u184b\n\u0134")
        buf.write("\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\6\u0134\u186a\n\u0134\r\u0134\16\u0134\u186b")
        buf.write("\3\u0134\3\u0134\5\u0134\u1870\n\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\6\u0134\u1876\n\u0134\r\u0134\16\u0134")
        buf.write("\u1877\3\u0134\3\u0134\5\u0134\u187c\n\u0134\3\u0134\3")
        buf.write("\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134")
        buf.write("\u1885\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\5\u0134\u188d\n\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\5\u0134\u1892\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\5\u0134\u189a\n\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\5\u0134\u189f\n\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\5\u0134\u18a4\n\u0134\5\u0134\u18a6\n\u0134\3\u0134\3")
        buf.write("\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134")
        buf.write("\u18af\n\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u18b4\n")
        buf.write("\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\5\u0134\u18bc\n\u0134\3\u0134\3\u0134\3\u0134\5\u0134")
        buf.write("\u18c1\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\5\u0134\u18c9\n\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\3\u0134\5\u0134\u18d1\n\u0134\3\u0134")
        buf.write("\5\u0134\u18d4\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u18de\n\u0134")
        buf.write("\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\5\u0134\u18f0\n\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\5\u0134\u18f6\n\u0134\3\u0134\3\u0134")
        buf.write("\5\u0134\u18fa\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\5\u0134\u1900\n\u0134\3\u0134\3\u0134\5\u0134\u1904\n")
        buf.write("\u0134\3\u0134\3\u0134\5\u0134\u1908\n\u0134\3\u0135\3")
        buf.write("\u0135\3\u0135\3\u0135\3\u0135\3\u0136\3\u0136\3\u0136")
        buf.write("\3\u0136\7\u0136\u1913\n\u0136\f\u0136\16\u0136\u1916")
        buf.write("\13\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\5\u0136")
        buf.write("\u191d\n\u0136\3\u0137\3\u0137\5\u0137\u1921\n\u0137\3")
        buf.write("\u0138\3\u0138\3\u0138\5\u0138\u1926\n\u0138\3\u0138\3")
        buf.write("\u0138\3\u0138\5\u0138\u192b\n\u0138\3\u0138\3\u0138\3")
        buf.write("\u0138\3\u0138\5\u0138\u1931\n\u0138\3\u0138\3\u0138\3")
        buf.write("\u0138\5\u0138\u1936\n\u0138\3\u0138\3\u0138\5\u0138\u193a")
        buf.write("\n\u0138\3\u0138\3\u0138\3\u0138\5\u0138\u193f\n\u0138")
        buf.write("\3\u0138\3\u0138\3\u0138\5\u0138\u1944\n\u0138\3\u0138")
        buf.write("\3\u0138\3\u0138\5\u0138\u1949\n\u0138\3\u0138\3\u0138")
        buf.write("\3\u0138\3\u0138\3\u0138\3\u0138\7\u0138\u1951\n\u0138")
        buf.write("\f\u0138\16\u0138\u1954\13\u0138\5\u0138\u1956\n\u0138")
        buf.write("\3\u0138\3\u0138\5\u0138\u195a\n\u0138\3\u0138\3\u0138")
        buf.write("\5\u0138\u195e\n\u0138\3\u0139\3\u0139\3\u0139\3\u0139")
        buf.write("\3\u0139\5\u0139\u1965\n\u0139\3\u0139\3\u0139\5\u0139")
        buf.write("\u1969\n\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139")
        buf.write("\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139")
        buf.write("\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139")
        buf.write("\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139")
        buf.write("\3\u0139\3\u0139\5\u0139\u1987\n\u0139\3\u013a\3\u013a")
        buf.write("\3\u013a\5\u013a\u198c\n\u013a\3\u013a\3\u013a\3\u013a")
        buf.write("\5\u013a\u1991\n\u013a\3\u013b\5\u013b\u1994\n\u013b\3")
        buf.write("\u013b\5\u013b\u1997\n\u013b\3\u013b\5\u013b\u199a\n\u013b")
        buf.write("\3\u013b\5\u013b\u199d\n\u013b\3\u013c\3\u013c\3\u013d")
        buf.write("\3\u013d\3\u013d\3\u013e\3\u013e\3\u013f\3\u013f\5\u013f")
        buf.write("\u19a8\n\u013f\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140")
        buf.write("\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141")
        buf.write("\5\u0141\u19b6\n\u0141\3\u0142\3\u0142\3\u0142\3\u0142")
        buf.write("\3\u0142\7\u0142\u19bd\n\u0142\f\u0142\16\u0142\u19c0")
        buf.write("\13\u0142\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143")
        buf.write("\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143")
        buf.write("\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143")
        buf.write("\3\u0143\3\u0143\3\u0143\5\u0143\u19d9\n\u0143\3\u0144")
        buf.write("\3\u0144\3\u0144\3\u0144\3\u0144\3\u0145\3\u0145\3\u0145")
        buf.write("\3\u0145\5\u0145\u19e4\n\u0145\3\u0145\3\u0145\3\u0145")
        buf.write("\3\u0145\3\u0145\5\u0145\u19eb\n\u0145\7\u0145\u19ed\n")
        buf.write("\u0145\f\u0145\16\u0145\u19f0\13\u0145\3\u0146\3\u0146")
        buf.write("\3\u0146\3\u0146\5\u0146\u19f6\n\u0146\3\u0147\3\u0147")
        buf.write("\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u19fe\n\u0147")
        buf.write("\3\u0147\3\u0147\3\u0147\5\u0147\u1a03\n\u0147\3\u0147")
        buf.write("\3\u0147\3\u0147\3\u0147\7\u0147\u1a09\n\u0147\f\u0147")
        buf.write("\16\u0147\u1a0c\13\u0147\3\u0148\3\u0148\3\u0148\5\u0148")
        buf.write("\u1a11\n\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148")
        buf.write("\3\u0148\3\u0148\3\u0148\5\u0148\u1a1b\n\u0148\3\u0148")
        buf.write("\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148")
        buf.write("\3\u0148\3\u0148\3\u0148\5\u0148\u1a28\n\u0148\3\u0148")
        buf.write("\3\u0148\3\u0148\3\u0148\5\u0148\u1a2e\n\u0148\3\u0148")
        buf.write("\3\u0148\3\u0148\3\u0148\5\u0148\u1a34\n\u0148\3\u0148")
        buf.write("\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148")
        buf.write("\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\5\u0148")
        buf.write("\u1a44\n\u0148\3\u0148\3\u0148\3\u0148\3\u0148\5\u0148")
        buf.write("\u1a4a\n\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148")
        buf.write("\3\u0148\3\u0148\7\u0148\u1a53\n\u0148\f\u0148\16\u0148")
        buf.write("\u1a56\13\u0148\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149")
        buf.write("\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149")
        buf.write("\3\u0149\3\u0149\7\u0149\u1a66\n\u0149\f\u0149\16\u0149")
        buf.write("\u1a69\13\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149")
        buf.write("\3\u0149\3\u0149\6\u0149\u1a72\n\u0149\r\u0149\16\u0149")
        buf.write("\u1a73\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149")
        buf.write("\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149")
        buf.write("\3\u0149\3\u0149\5\u0149\u1a85\n\u0149\3\u0149\3\u0149")
        buf.write("\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149")
        buf.write("\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\7\u0149")
        buf.write("\u1a96\n\u0149\f\u0149\16\u0149\u1a99\13\u0149\3\u014a")
        buf.write("\3\u014a\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b")
        buf.write("\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b")
        buf.write("\3\u014b\5\u014b\u1aab\n\u014b\3\u014c\3\u014c\3\u014c")
        buf.write("\3\u014c\3\u014c\3\u014c\3\u014c\5\u014c\u1ab4\n\u014c")
        buf.write("\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d")
        buf.write("\5\u014d\u1abd\n\u014d\3\u014e\3\u014e\3\u014f\3\u014f")
        buf.write("\3\u014f\3\u014f\3\u014f\5\u014f\u1ac6\n\u014f\3\u0150")
        buf.write("\3\u0150\3\u0151\3\u0151\3\u0152\3\u0152\3\u0153\3\u0153")
        buf.write("\3\u0154\3\u0154\3\u0155\3\u0155\3\u0156\3\u0156\3\u0156")
        buf.write("\2\5\u028c\u028e\u0290\u0157\2\4\6\b\n\f\16\20\22\24\26")
        buf.write("\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\")
        buf.write("^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write("\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2")
        buf.write("\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4")
        buf.write("\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6")
        buf.write("\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108")
        buf.write("\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a")
        buf.write("\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c")
        buf.write("\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e")
        buf.write("\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150")
        buf.write("\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162")
        buf.write("\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174")
        buf.write("\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186")
        buf.write("\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198")
        buf.write("\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa")
        buf.write("\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc")
        buf.write("\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce")
        buf.write("\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0")
        buf.write("\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2")
        buf.write("\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204")
        buf.write("\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216")
        buf.write("\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228")
        buf.write("\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a")
        buf.write("\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c")
        buf.write("\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e")
        buf.write("\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270")
        buf.write("\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282")
        buf.write("\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294")
        buf.write("\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6")
        buf.write("\u02a8\u02aa\2\u008c\4\2\65\65\u009e\u009e\4\2\u0207\u0207")
        buf.write("\u020d\u020d\5\2RR\u00a5\u00a5\u00ba\u00ba\5\288\u0181")
        buf.write("\u0181\u01c1\u01c1\6\288\u01a1\u01a1\u0205\u0205\u024f")
        buf.write("\u024f\4\2\u01fc\u01fc\u045b\u045b\4\2[[\u0095\u0095\4")
        buf.write("\2\36\36\u0150\u0150\5\2::aa\u00bd\u00bd\4\2\u01af\u01af")
        buf.write("\u021f\u021f\5\2\u01f4\u01f4\u0276\u0276\u027e\u027e\4")
        buf.write("\2\u0188\u0188\u01c6\u01c6\4\2\u0162\u0162\u01d4\u01d4")
        buf.write("\4\2\u0160\u0160\u01b8\u01b8\5\2\\\\``\u0085\u0085\5\2")
        buf.write("88\u0192\u0192\u01ac\u01ac\5\288\u018e\u018e\u02fb\u02fb")
        buf.write("\4\2\u0269\u0269\u028c\u028c\4\2]]gg\5\2\u01b1\u01b1\u0216")
        buf.write("\u0216\u0251\u0251\4\2RR\u00a5\u00a5\3\2\u0166\u0167\3")
        buf.write("\2\u0451\u0452\4\2\u045b\u045b\u0463\u0463\5\2\u01ab\u01ab")
        buf.write("\u01cf\u01cf\u0203\u0203\4\288\u0451\u0452\t\288\u0173")
        buf.write("\u0173\u0175\u0175\u0192\u0192\u01ac\u01ac\u022d\u022d")
        buf.write("\u0463\u0463\4\2\u01fc\u01fc\u0206\u0206\3\2\u0452\u0453")
        buf.write("\4\2\25\25AA\4\2))--\4\2\u01c5\u01c5\u028d\u028d\4\2\34")
        buf.write("\34\u00b4\u00b4\4\2\u00c5\u00c5\u0291\u0291\4\2$$\u0098")
        buf.write("\u0098\5\299XXtt\4\2tt\u0177\u0177\4\2\u016e\u016e\u01a8")
        buf.write("\u01a8\4\2pp\u0247\u0247\4\299tt\4\2\26\26??\4\2\u00c1")
        buf.write("\u00c1\u0289\u0289\6\2\u01ab\u01ab\u01cf\u01cf\u0202\u0202")
        buf.write("\u0223\u0223\4\2\u01ab\u01ab\u0202\u0202\4\2\35\35;;\5")
        buf.write("\2OO[[\u00bf\u00bf\4\2\61\61__\4\2ll\u009c\u009c\4\2\16")
        buf.write("\24ff\4\2\7\13\u00a0\u00a0\4\2\26\26?@\3\2\u025e\u025f")
        buf.write("\4\2\32\32\u044e\u044e\4\2\f\rQQ\4\2\u01b4\u01b4\u024d")
        buf.write("\u024d\4\2\u00e7\u00e7\u01d7\u01d7\7\2uu\u01dc\u01dd\u01df")
        buf.write("\u01df\u01e3\u01eb\u022f\u022f\6\2\u01d9\u01da\u01de\u01de")
        buf.write("\u01e0\u01e1\u0230\u0230\5\2vv\u01d8\u01d8\u01e2\u01e2")
        buf.write("\4\2\u01c8\u01c8\u0260\u0260\4\2\u025a\u025a\u025c\u025c")
        buf.write("\4\2\u015a\u015a\u0261\u0261\4\2ff\u023e\u023e\4\2AA\u0186")
        buf.write("\u0186\5\2..JJ\u00b8\u00b8\5\2\u008b\u008b\u00b1\u00b1")
        buf.write("\u01b2\u01b2\4\2rr\u00bb\u00bb\4\2\u016a\u016a\u0252\u0252")
        buf.write("\4\2\66\66\u028b\u028b\4\2||\u01d4\u01d4\4\2\u01a4\u01a4")
        buf.write("\u0229\u0229\4\2\u00b1\u00b1\u02a4\u02a4\6\2\u00d3\u00d3")
        buf.write("\u00d5\u00d5\u00db\u00db\u026a\u026a\4\2\u0433\u0433\u0443")
        buf.write("\u0443\4\2\u015b\u015b\u0231\u0231\4\2QQ\\\\\b\2\u008b")
        buf.write("\u008b\u00b1\u00b1\u00b6\u00b6\u019d\u019d\u01b2\u01b2")
        buf.write("\u028b\u028b\4\2\u01fb\u01fb\u0266\u0266\4\2\u019a\u019a")
        buf.write("\u028f\u028f\4\2\u008b\u008b\u01b2\u01b2\5\2]]hh\u01bf")
        buf.write("\u01bf\5\2\u01b4\u01b4\u01d4\u01d4\u024d\u024d\4\2\u0266")
        buf.write("\u0266\u028a\u028a\4\2\u0179\u0179\u0228\u0228\b\2\u00e7")
        buf.write("\u00e7\u0197\u0197\u0199\u0199\u01b3\u01b3\u022e\u022e")
        buf.write("\u0253\u0253\4\2;<KK\5\2\u01a4\u01a4\u0218\u0218\u0357")
        buf.write("\u0357\4\2\u01cc\u01cc\u0278\u0278\f\2\u0169\u0169\u0170")
        buf.write("\u0170\u017b\u017d\u0183\u0183\u01f5\u01f5\u01fd\u01fd")
        buf.write("\u026b\u026b\u0272\u0272\u0327\u0327\u03cd\u03cd\4\2\62")
        buf.write("\62\u00ae\u00ae\4\2~~\u03c5\u03c5\r\2\u0169\u0169\u0170")
        buf.write("\u0170\u017b\u017d\u0183\u0183\u01f5\u01f5\u01fd\u01fd")
        buf.write("\u023f\u023f\u026b\u026b\u0272\u0272\u0327\u0327\u03cd")
        buf.write("\u03cd\5\2\u045b\u045b\u0463\u0463\u0465\u0465\3\2\u0467")
        buf.write("\u0468\6\2\u0178\u0178\u02f6\u0301\u045b\u045b\u0463\u0464")
        buf.write("\5\2\u0451\u0453\u045c\u045c\u045e\u045e\4\2LL\u00b7\u00b7")
        buf.write("\4\2}}\u045f\u045f\7\2((\u00e3\u00e5\u00ec\u00ec\u00ee")
        buf.write("\u00f1\u0200\u0200\4\2((\u00e4\u00e4\4\2((\u00e3\u00e3")
        buf.write("\3\2\u00c9\u00d4\4\2\u00bc\u00bc\u0250\u0250\4\2\u00d8")
        buf.write("\u00dd\u01ac\u01ac\b\2\u00de\u00de\u00e9\u00e9\u00eb\u00eb")
        buf.write("\u00ed\u00ed\u00f4\u00f4\u015e\u015f\6\2\u00df\u00e2\u00e7")
        buf.write("\u00e8\u00ea\u00ea\u015c\u015c\4\2\u00a1\u00a1\u00f2\u00f2")
        buf.write("\4\2\u01cc\u01cc\u0306\u030e\4\2\u00e7\u00e7\u0200\u0200")
        buf.write("\5\2\u00de\u00df\u00e1\u00e1\u01cc\u01cc\4\2\u013d\u013e")
        buf.write("\u0144\u0144\4\2\63\63\u013b\u013e\3\2\u0147\u0148\5\2")
        buf.write("  jj\u00b5\u00b5\4\2\u00e3\u00e3\u00e7\u00e7\4\2\u00de")
        buf.write("\u00df\u00e1\u00e1\5\2\35\35;;\u03c3\u03c3\5\2\u0120\u0120")
        buf.write("\u012c\u012d\u0137\u0137\5\2\u0121\u0123\u0133\u0136\u0138")
        buf.write("\u013a\4\2\u0129\u0129\u012b\u012b\4\2\u0127\u0127\u012a")
        buf.write("\u012a\4\2\u0125\u0126\u0130\u0132\4\2\u008d\u008d\u0247")
        buf.write("\u0247\4\2\u01ae\u01ae\u0220\u0220\4\2\u020b\u020b\u0219")
        buf.write("\u0219\4\2{{\u0446\u0446\5\2LL\u00b7\u00b7\u0282\u0282")
        buf.write("\4\2\u0091\u0091\u009d\u009d\5\2\26\26\u0153\u0153\u0256")
        buf.write("\u0256\5\2{{\u043f\u0440\u0446\u0447\3\2\u043c\u0442\4")
        buf.write("\2\u00e7\u00e7\u02cd\u02f5\3\2\u0302\u0305\3\2\u02a4\u02ac")
        buf.write("\3\2\u029c\u02a3\5\2\u00de\u00e2\u00ef\u00ef\u00f2\u00f2")
        buf.write(" \2\62\62>>HHVV~~\u0084\u0084\u00ae\u00ae\u00f4\u00f4")
        buf.write("\u0120\u0124\u0128\u0128\u012c\u012d\u0133\u013a\u014e")
        buf.write("\u01ad\u01af\u01c4\u01c6\u021f\u0221\u023f\u0241\u0268")
        buf.write("\u026a\u0273\u0275\u027c\u027e\u028b\u028e\u028f\u0291")
        buf.write("\u029b\u02ae\u02b6\u02bb\u02bc\u02be\u02c4\u02c6\u02cc")
        buf.write("\u02fb\u02fb\u0327\u0327\u03cd\u03cd\u046b\u046b\24\2")
        buf.write("\65\65ll\u009c\u009c\u009e\u009e\u00de\u00e0\u00e2\u00e2")
        buf.write("\u0100\u011f\u0124\u0124\u0146\u0146\u01c5\u01c5\u028d")
        buf.write("\u028d\u029c\u02a3\u02c6\u02c6\u0306\u0306\u0309\u0326")
        buf.write("\u0328\u03cc\u03ce\u0432\u0442\u0442\2\u1f7c\2\u02ad\3")
        buf.write("\2\2\2\4\u02c0\3\2\2\2\6\u02d5\3\2\2\2\b\u02d7\3\2\2\2")
        buf.write("\n\u02fc\3\2\2\2\f\u0308\3\2\2\2\16\u0313\3\2\2\2\20\u0324")
        buf.write("\3\2\2\2\22\u0329\3\2\2\2\24\u0335\3\2\2\2\26\u0350\3")
        buf.write("\2\2\2\30\u0359\3\2\2\2\32\u035b\3\2\2\2\34\u0367\3\2")
        buf.write("\2\2\36\u0385\3\2\2\2 \u03a9\3\2\2\2\"\u03dc\3\2\2\2$")
        buf.write("\u03f6\3\2\2\2&\u0414\3\2\2\2(\u0475\3\2\2\2*\u0477\3")
        buf.write("\2\2\2,\u0489\3\2\2\2.\u04c6\3\2\2\2\60\u04d9\3\2\2\2")
        buf.write("\62\u0514\3\2\2\2\64\u0516\3\2\2\2\66\u0543\3\2\2\28\u0549")
        buf.write("\3\2\2\2:\u054b\3\2\2\2<\u0560\3\2\2\2>\u0567\3\2\2\2")
        buf.write("@\u0569\3\2\2\2B\u0579\3\2\2\2D\u057c\3\2\2\2F\u0581\3")
        buf.write("\2\2\2H\u059b\3\2\2\2J\u05ab\3\2\2\2L\u05ad\3\2\2\2N\u05bd")
        buf.write("\3\2\2\2P\u05bf\3\2\2\2R\u05fb\3\2\2\2T\u0642\3\2\2\2")
        buf.write("V\u0644\3\2\2\2X\u0660\3\2\2\2Z\u0668\3\2\2\2\\\u0686")
        buf.write("\3\2\2\2^\u071d\3\2\2\2`\u071f\3\2\2\2b\u0721\3\2\2\2")
        buf.write("d\u0724\3\2\2\2f\u076e\3\2\2\2h\u0785\3\2\2\2j\u0819\3")
        buf.write("\2\2\2l\u081e\3\2\2\2n\u0820\3\2\2\2p\u082a\3\2\2\2r\u0862")
        buf.write("\3\2\2\2t\u0876\3\2\2\2v\u0878\3\2\2\2x\u089b\3\2\2\2")
        buf.write("z\u08a4\3\2\2\2|\u08ab\3\2\2\2~\u08c2\3\2\2\2\u0080\u08cb")
        buf.write("\3\2\2\2\u0082\u08da\3\2\2\2\u0084\u08f0\3\2\2\2\u0086")
        buf.write("\u0904\3\2\2\2\u0088\u0a92\3\2\2\2\u008a\u0a94\3\2\2\2")
        buf.write("\u008c\u0a9b\3\2\2\2\u008e\u0aa2\3\2\2\2\u0090\u0ab9\3")
        buf.write("\2\2\2\u0092\u0ac1\3\2\2\2\u0094\u0ac8\3\2\2\2\u0096\u0acf")
        buf.write("\3\2\2\2\u0098\u0ad6\3\2\2\2\u009a\u0ae2\3\2\2\2\u009c")
        buf.write("\u0aec\3\2\2\2\u009e\u0af3\3\2\2\2\u00a0\u0b03\3\2\2\2")
        buf.write("\u00a2\u0b0d\3\2\2\2\u00a4\u0b11\3\2\2\2\u00a6\u0b17\3")
        buf.write("\2\2\2\u00a8\u0b24\3\2\2\2\u00aa\u0b26\3\2\2\2\u00ac\u0b2d")
        buf.write("\3\2\2\2\u00ae\u0b2f\3\2\2\2\u00b0\u0b63\3\2\2\2\u00b2")
        buf.write("\u0bad\3\2\2\2\u00b4\u0be8\3\2\2\2\u00b6\u0c40\3\2\2\2")
        buf.write("\u00b8\u0c44\3\2\2\2\u00ba\u0c59\3\2\2\2\u00bc\u0c5b\3")
        buf.write("\2\2\2\u00be\u0c63\3\2\2\2\u00c0\u0c6b\3\2\2\2\u00c2\u0c6d")
        buf.write("\3\2\2\2\u00c4\u0c8b\3\2\2\2\u00c6\u0cc2\3\2\2\2\u00c8")
        buf.write("\u0ccb\3\2\2\2\u00ca\u0cdf\3\2\2\2\u00cc\u0ceb\3\2\2\2")
        buf.write("\u00ce\u0cef\3\2\2\2\u00d0\u0d10\3\2\2\2\u00d2\u0d25\3")
        buf.write("\2\2\2\u00d4\u0d2f\3\2\2\2\u00d6\u0d33\3\2\2\2\u00d8\u0d4c")
        buf.write("\3\2\2\2\u00da\u0d76\3\2\2\2\u00dc\u0d78\3\2\2\2\u00de")
        buf.write("\u0d87\3\2\2\2\u00e0\u0db6\3\2\2\2\u00e2\u0db8\3\2\2\2")
        buf.write("\u00e4\u0dc2\3\2\2\2\u00e6\u0dcc\3\2\2\2\u00e8\u0de6\3")
        buf.write("\2\2\2\u00ea\u0e09\3\2\2\2\u00ec\u0e1f\3\2\2\2\u00ee\u0e22")
        buf.write("\3\2\2\2\u00f0\u0e24\3\2\2\2\u00f2\u0e26\3\2\2\2\u00f4")
        buf.write("\u0e28\3\2\2\2\u00f6\u0e42\3\2\2\2\u00f8\u0e48\3\2\2\2")
        buf.write("\u00fa\u0e58\3\2\2\2\u00fc\u0e5c\3\2\2\2\u00fe\u0e66\3")
        buf.write("\2\2\2\u0100\u0e85\3\2\2\2\u0102\u0eab\3\2\2\2\u0104\u0eb9")
        buf.write("\3\2\2\2\u0106\u0ec1\3\2\2\2\u0108\u0ec6\3\2\2\2\u010a")
        buf.write("\u0ecc\3\2\2\2\u010c\u0ece\3\2\2\2\u010e\u0edc\3\2\2\2")
        buf.write("\u0110\u0edf\3\2\2\2\u0112\u0ef1\3\2\2\2\u0114\u0ef5\3")
        buf.write("\2\2\2\u0116\u0f05\3\2\2\2\u0118\u0f07\3\2\2\2\u011a\u0f13")
        buf.write("\3\2\2\2\u011c\u0f17\3\2\2\2\u011e\u0f28\3\2\2\2\u0120")
        buf.write("\u0f39\3\2\2\2\u0122\u0f3c\3\2\2\2\u0124\u0f46\3\2\2\2")
        buf.write("\u0126\u0f4a\3\2\2\2\u0128\u0f54\3\2\2\2\u012a\u0f57\3")
        buf.write("\2\2\2\u012c\u0f5c\3\2\2\2\u012e\u0f70\3\2\2\2\u0130\u0f72")
        buf.write("\3\2\2\2\u0132\u0f83\3\2\2\2\u0134\u0f8c\3\2\2\2\u0136")
        buf.write("\u0f95\3\2\2\2\u0138\u0f97\3\2\2\2\u013a\u0fa5\3\2\2\2")
        buf.write("\u013c\u0fb0\3\2\2\2\u013e\u0fb9\3\2\2\2\u0140\u0fbc\3")
        buf.write("\2\2\2\u0142\u0fc4\3\2\2\2\u0144\u0fdd\3\2\2\2\u0146\u0fe9")
        buf.write("\3\2\2\2\u0148\u0fec\3\2\2\2\u014a\u100d\3\2\2\2\u014c")
        buf.write("\u100f\3\2\2\2\u014e\u1011\3\2\2\2\u0150\u1013\3\2\2\2")
        buf.write("\u0152\u1015\3\2\2\2\u0154\u104a\3\2\2\2\u0156\u104c\3")
        buf.write("\2\2\2\u0158\u1052\3\2\2\2\u015a\u1066\3\2\2\2\u015c\u1074")
        buf.write("\3\2\2\2\u015e\u107f\3\2\2\2\u0160\u1081\3\2\2\2\u0162")
        buf.write("\u1087\3\2\2\2\u0164\u1091\3\2\2\2\u0166\u1095\3\2\2\2")
        buf.write("\u0168\u109c\3\2\2\2\u016a\u10a0\3\2\2\2\u016c\u10a6\3")
        buf.write("\2\2\2\u016e\u10ad\3\2\2\2\u0170\u10b3\3\2\2\2\u0172\u10b9")
        buf.write("\3\2\2\2\u0174\u10be\3\2\2\2\u0176\u10ed\3\2\2\2\u0178")
        buf.write("\u1102\3\2\2\2\u017a\u111b\3\2\2\2\u017c\u111e\3\2\2\2")
        buf.write("\u017e\u1124\3\2\2\2\u0180\u1134\3\2\2\2\u0182\u1143\3")
        buf.write("\2\2\2\u0184\u1149\3\2\2\2\u0186\u1167\3\2\2\2\u0188\u1169")
        buf.write("\3\2\2\2\u018a\u1170\3\2\2\2\u018c\u117c\3\2\2\2\u018e")
        buf.write("\u1182\3\2\2\2\u0190\u119b\3\2\2\2\u0192\u119f\3\2\2\2")
        buf.write("\u0194\u11a3\3\2\2\2\u0196\u11ae\3\2\2\2\u0198\u11ec\3")
        buf.write("\2\2\2\u019a\u1224\3\2\2\2\u019c\u1226\3\2\2\2\u019e\u128a")
        buf.write("\3\2\2\2\u01a0\u12a2\3\2\2\2\u01a2\u12a4\3\2\2\2\u01a4")
        buf.write("\u12b6\3\2\2\2\u01a6\u1300\3\2\2\2\u01a8\u1302\3\2\2\2")
        buf.write("\u01aa\u130f\3\2\2\2\u01ac\u131a\3\2\2\2\u01ae\u1339\3")
        buf.write("\2\2\2\u01b0\u1343\3\2\2\2\u01b2\u134d\3\2\2\2\u01b4\u134f")
        buf.write("\3\2\2\2\u01b6\u1359\3\2\2\2\u01b8\u135c\3\2\2\2\u01ba")
        buf.write("\u13b2\3\2\2\2\u01bc\u13c4\3\2\2\2\u01be\u13c6\3\2\2\2")
        buf.write("\u01c0\u13ca\3\2\2\2\u01c2\u13f0\3\2\2\2\u01c4\u13f9\3")
        buf.write("\2\2\2\u01c6\u13ff\3\2\2\2\u01c8\u1406\3\2\2\2\u01ca\u141c")
        buf.write("\3\2\2\2\u01cc\u141e\3\2\2\2\u01ce\u1429\3\2\2\2\u01d0")
        buf.write("\u142f\3\2\2\2\u01d2\u1466\3\2\2\2\u01d4\u1500\3\2\2\2")
        buf.write("\u01d6\u150c\3\2\2\2\u01d8\u151b\3\2\2\2\u01da\u1521\3")
        buf.write("\2\2\2\u01dc\u1534\3\2\2\2\u01de\u153e\3\2\2\2\u01e0\u154c")
        buf.write("\3\2\2\2\u01e2\u154e\3\2\2\2\u01e4\u1551\3\2\2\2\u01e6")
        buf.write("\u1568\3\2\2\2\u01e8\u1574\3\2\2\2\u01ea\u157d\3\2\2\2")
        buf.write("\u01ec\u1589\3\2\2\2\u01ee\u158d\3\2\2\2\u01f0\u158f\3")
        buf.write("\2\2\2\u01f2\u15b7\3\2\2\2\u01f4\u15be\3\2\2\2\u01f6\u15c0")
        buf.write("\3\2\2\2\u01f8\u15d8\3\2\2\2\u01fa\u15de\3\2\2\2\u01fc")
        buf.write("\u15e6\3\2\2\2\u01fe\u15e9\3\2\2\2\u0200\u15ec\3\2\2\2")
        buf.write("\u0202\u1601\3\2\2\2\u0204\u1616\3\2\2\2\u0206\u161e\3")
        buf.write("\2\2\2\u0208\u1644\3\2\2\2\u020a\u1650\3\2\2\2\u020c\u1652")
        buf.write("\3\2\2\2\u020e\u1658\3\2\2\2\u0210\u1666\3\2\2\2\u0212")
        buf.write("\u1673\3\2\2\2\u0214\u1678\3\2\2\2\u0216\u167a\3\2\2\2")
        buf.write("\u0218\u1680\3\2\2\2\u021a\u1684\3\2\2\2\u021c\u1686\3")
        buf.write("\2\2\2\u021e\u1688\3\2\2\2\u0220\u169a\3\2\2\2\u0222\u16aa")
        buf.write("\3\2\2\2\u0224\u16ae\3\2\2\2\u0226\u16b3\3\2\2\2\u0228")
        buf.write("\u16be\3\2\2\2\u022a\u16c3\3\2\2\2\u022c\u16c5\3\2\2\2")
        buf.write("\u022e\u16c9\3\2\2\2\u0230\u16e2\3\2\2\2\u0232\u16e4\3")
        buf.write("\2\2\2\u0234\u16e7\3\2\2\2\u0236\u16ec\3\2\2\2\u0238\u16fc")
        buf.write("\3\2\2\2\u023a\u1781\3\2\2\2\u023c\u1783\3\2\2\2\u023e")
        buf.write("\u17a9\3\2\2\2\u0240\u17ab\3\2\2\2\u0242\u17af\3\2\2\2")
        buf.write("\u0244\u17b5\3\2\2\2\u0246\u17bd\3\2\2\2\u0248\u17c5\3")
        buf.write("\2\2\2\u024a\u17cd\3\2\2\2\u024c\u17d8\3\2\2\2\u024e\u17e0")
        buf.write("\3\2\2\2\u0250\u17e8\3\2\2\2\u0252\u17f0\3\2\2\2\u0254")
        buf.write("\u17f8\3\2\2\2\u0256\u180a\3\2\2\2\u0258\u1821\3\2\2\2")
        buf.write("\u025a\u1825\3\2\2\2\u025c\u1827\3\2\2\2\u025e\u182a\3")
        buf.write("\2\2\2\u0260\u1840\3\2\2\2\u0262\u1842\3\2\2\2\u0264\u1844")
        buf.write("\3\2\2\2\u0266\u1907\3\2\2\2\u0268\u1909\3\2\2\2\u026a")
        buf.write("\u191c\3\2\2\2\u026c\u191e\3\2\2\2\u026e\u195d\3\2\2\2")
        buf.write("\u0270\u1986\3\2\2\2\u0272\u1988\3\2\2\2\u0274\u1993\3")
        buf.write("\2\2\2\u0276\u199e\3\2\2\2\u0278\u19a0\3\2\2\2\u027a\u19a3")
        buf.write("\3\2\2\2\u027c\u19a7\3\2\2\2\u027e\u19a9\3\2\2\2\u0280")
        buf.write("\u19b5\3\2\2\2\u0282\u19b7\3\2\2\2\u0284\u19d8\3\2\2\2")
        buf.write("\u0286\u19da\3\2\2\2\u0288\u19e3\3\2\2\2\u028a\u19f5\3")
        buf.write("\2\2\2\u028c\u1a02\3\2\2\2\u028e\u1a0d\3\2\2\2\u0290\u1a84")
        buf.write("\3\2\2\2\u0292\u1a9a\3\2\2\2\u0294\u1aaa\3\2\2\2\u0296")
        buf.write("\u1ab3\3\2\2\2\u0298\u1abc\3\2\2\2\u029a\u1abe\3\2\2\2")
        buf.write("\u029c\u1ac5\3\2\2\2\u029e\u1ac7\3\2\2\2\u02a0\u1ac9\3")
        buf.write("\2\2\2\u02a2\u1acb\3\2\2\2\u02a4\u1acd\3\2\2\2\u02a6\u1acf")
        buf.write("\3\2\2\2\u02a8\u1ad1\3\2\2\2\u02aa\u1ad3\3\2\2\2\u02ac")
        buf.write("\u02ae\5\4\3\2\u02ad\u02ac\3\2\2\2\u02ad\u02ae\3\2\2\2")
        buf.write("\u02ae\u02b1\3\2\2\2\u02af\u02b0\7\u0440\2\2\u02b0\u02b2")
        buf.write("\7\u0440\2\2\u02b1\u02af\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2")
        buf.write("\u02b3\3\2\2\2\u02b3\u02b4\7\2\2\3\u02b4\3\3\2\2\2\u02b5")
        buf.write("\u02b8\5\6\4\2\u02b6\u02b7\7\u0440\2\2\u02b7\u02b9\7\u0440")
        buf.write("\2\2\u02b8\u02b6\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02bb")
        buf.write("\3\2\2\2\u02ba\u02bc\7\u044f\2\2\u02bb\u02ba\3\2\2\2\u02bb")
        buf.write("\u02bc\3\2\2\2\u02bc\u02bf\3\2\2\2\u02bd\u02bf\5\b\5\2")
        buf.write("\u02be\u02b5\3\2\2\2\u02be\u02bd\3\2\2\2\u02bf\u02c2\3")
        buf.write("\2\2\2\u02c0\u02be\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1\u02cc")
        buf.write("\3\2\2\2\u02c2\u02c0\3\2\2\2\u02c3\u02c9\5\6\4\2\u02c4")
        buf.write("\u02c5\7\u0440\2\2\u02c5\u02c7\7\u0440\2\2\u02c6\u02c4")
        buf.write("\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8")
        buf.write("\u02ca\7\u044f\2\2\u02c9\u02c6\3\2\2\2\u02c9\u02ca\3\2")
        buf.write("\2\2\u02ca\u02cd\3\2\2\2\u02cb\u02cd\5\b\5\2\u02cc\u02c3")
        buf.write("\3\2\2\2\u02cc\u02cb\3\2\2\2\u02cd\5\3\2\2\2\u02ce\u02d6")
        buf.write("\5\n\6\2\u02cf\u02d6\5\f\7\2\u02d0\u02d6\5\16\b\2\u02d1")
        buf.write("\u02d6\5\20\t\2\u02d2\u02d6\5\22\n\2\u02d3\u02d6\5\26")
        buf.write("\f\2\u02d4\u02d6\5\30\r\2\u02d5\u02ce\3\2\2\2\u02d5\u02cf")
        buf.write("\3\2\2\2\u02d5\u02d0\3\2\2\2\u02d5\u02d1\3\2\2\2\u02d5")
        buf.write("\u02d2\3\2\2\2\u02d5\u02d3\3\2\2\2\u02d5\u02d4\3\2\2\2")
        buf.write("\u02d6\7\3\2\2\2\u02d7\u02d8\7\u044f\2\2\u02d8\t\3\2\2")
        buf.write("\2\u02d9\u02fd\5\32\16\2\u02da\u02fd\5\34\17\2\u02db\u02fd")
        buf.write("\5\36\20\2\u02dc\u02fd\5 \21\2\u02dd\u02fd\5\"\22\2\u02de")
        buf.write("\u02fd\5$\23\2\u02df\u02fd\5&\24\2\u02e0\u02fd\5(\25\2")
        buf.write("\u02e1\u02fd\5*\26\2\u02e2\u02fd\5,\27\2\u02e3\u02fd\5")
        buf.write(".\30\2\u02e4\u02fd\5\60\31\2\u02e5\u02fd\5t;\2\u02e6\u02fd")
        buf.write("\5v<\2\u02e7\u02fd\5x=\2\u02e8\u02fd\5z>\2\u02e9\u02fd")
        buf.write("\5|?\2\u02ea\u02fd\5~@\2\u02eb\u02fd\5\u0080A\2\u02ec")
        buf.write("\u02fd\5\u0082B\2\u02ed\u02fd\5\u0084C\2\u02ee\u02fd\5")
        buf.write("\u0086D\2\u02ef\u02fd\5\u008aF\2\u02f0\u02fd\5\u008cG")
        buf.write("\2\u02f1\u02fd\5\u008eH\2\u02f2\u02fd\5\u0090I\2\u02f3")
        buf.write("\u02fd\5\u0092J\2\u02f4\u02fd\5\u0094K\2\u02f5\u02fd\5")
        buf.write("\u0096L\2\u02f6\u02fd\5\u0098M\2\u02f7\u02fd\5\u009aN")
        buf.write("\2\u02f8\u02fd\5\u009cO\2\u02f9\u02fd\5\u009eP\2\u02fa")
        buf.write("\u02fd\5\u00a0Q\2\u02fb\u02fd\5\u00a4S\2\u02fc\u02d9\3")
        buf.write("\2\2\2\u02fc\u02da\3\2\2\2\u02fc\u02db\3\2\2\2\u02fc\u02dc")
        buf.write("\3\2\2\2\u02fc\u02dd\3\2\2\2\u02fc\u02de\3\2\2\2\u02fc")
        buf.write("\u02df\3\2\2\2\u02fc\u02e0\3\2\2\2\u02fc\u02e1\3\2\2\2")
        buf.write("\u02fc\u02e2\3\2\2\2\u02fc\u02e3\3\2\2\2\u02fc\u02e4\3")
        buf.write("\2\2\2\u02fc\u02e5\3\2\2\2\u02fc\u02e6\3\2\2\2\u02fc\u02e7")
        buf.write("\3\2\2\2\u02fc\u02e8\3\2\2\2\u02fc\u02e9\3\2\2\2\u02fc")
        buf.write("\u02ea\3\2\2\2\u02fc\u02eb\3\2\2\2\u02fc\u02ec\3\2\2\2")
        buf.write("\u02fc\u02ed\3\2\2\2\u02fc\u02ee\3\2\2\2\u02fc\u02ef\3")
        buf.write("\2\2\2\u02fc\u02f0\3\2\2\2\u02fc\u02f1\3\2\2\2\u02fc\u02f2")
        buf.write("\3\2\2\2\u02fc\u02f3\3\2\2\2\u02fc\u02f4\3\2\2\2\u02fc")
        buf.write("\u02f5\3\2\2\2\u02fc\u02f6\3\2\2\2\u02fc\u02f7\3\2\2\2")
        buf.write("\u02fc\u02f8\3\2\2\2\u02fc\u02f9\3\2\2\2\u02fc\u02fa\3")
        buf.write("\2\2\2\u02fc\u02fb\3\2\2\2\u02fd\13\3\2\2\2\u02fe\u0309")
        buf.write("\5\u00b6\\\2\u02ff\u0309\5\u00aeX\2\u0300\u0309\5\u00b8")
        buf.write("]\2\u0301\u0309\5\u00a8U\2\u0302\u0309\5\u00b4[\2\u0303")
        buf.write("\u0309\5\u00a6T\2\u0304\u0309\5\u00b0Y\2\u0305\u0309\5")
        buf.write("\u00b2Z\2\u0306\u0309\5\u00aaV\2\u0307\u0309\5\u00acW")
        buf.write("\2\u0308\u02fe\3\2\2\2\u0308\u02ff\3\2\2\2\u0308\u0300")
        buf.write("\3\2\2\2\u0308\u0301\3\2\2\2\u0308\u0302\3\2\2\2\u0308")
        buf.write("\u0303\3\2\2\2\u0308\u0304\3\2\2\2\u0308\u0305\3\2\2\2")
        buf.write("\u0308\u0306\3\2\2\2\u0308\u0307\3\2\2\2\u0309\r\3\2\2")
        buf.write("\2\u030a\u0314\5\u0118\u008d\2\u030b\u0314\5\u011a\u008e")
        buf.write("\2\u030c\u0314\5\u011c\u008f\2\u030d\u0314\5\u011e\u0090")
        buf.write("\2\u030e\u0314\5\u0120\u0091\2\u030f\u0314\5\u0122\u0092")
        buf.write("\2\u0310\u0314\5\u0124\u0093\2\u0311\u0314\5\u0126\u0094")
        buf.write("\2\u0312\u0314\5\u0128\u0095\2\u0313\u030a\3\2\2\2\u0313")
        buf.write("\u030b\3\2\2\2\u0313\u030c\3\2\2\2\u0313\u030d\3\2\2\2")
        buf.write("\u0313\u030e\3\2\2\2\u0313\u030f\3\2\2\2\u0313\u0310\3")
        buf.write("\2\2\2\u0313\u0311\3\2\2\2\u0313\u0312\3\2\2\2\u0314\17")
        buf.write("\3\2\2\2\u0315\u0325\5\u0138\u009d\2\u0316\u0325\5\u013a")
        buf.write("\u009e\2\u0317\u0325\5\u013c\u009f\2\u0318\u0325\5\u013e")
        buf.write("\u00a0\2\u0319\u0325\5\u0140\u00a1\2\u031a\u0325\5\u0142")
        buf.write("\u00a2\2\u031b\u0325\5\u0144\u00a3\2\u031c\u0325\5\u0146")
        buf.write("\u00a4\2\u031d\u0325\5\u0148\u00a5\2\u031e\u0325\5\u0160")
        buf.write("\u00b1\2\u031f\u0325\5\u0162\u00b2\2\u0320\u0325\5\u0164")
        buf.write("\u00b3\2\u0321\u0325\5\u0166\u00b4\2\u0322\u0325\5\u0168")
        buf.write("\u00b5\2\u0323\u0325\5\u016a\u00b6\2\u0324\u0315\3\2\2")
        buf.write("\2\u0324\u0316\3\2\2\2\u0324\u0317\3\2\2\2\u0324\u0318")
        buf.write("\3\2\2\2\u0324\u0319\3\2\2\2\u0324\u031a\3\2\2\2\u0324")
        buf.write("\u031b\3\2\2\2\u0324\u031c\3\2\2\2\u0324\u031d\3\2\2\2")
        buf.write("\u0324\u031e\3\2\2\2\u0324\u031f\3\2\2\2\u0324\u0320\3")
        buf.write("\2\2\2\u0324\u0321\3\2\2\2\u0324\u0322\3\2\2\2\u0324\u0323")
        buf.write("\3\2\2\2\u0325\21\3\2\2\2\u0326\u032a\5\u016c\u00b7\2")
        buf.write("\u0327\u032a\5\u016e\u00b8\2\u0328\u032a\5\u0170\u00b9")
        buf.write("\2\u0329\u0326\3\2\2\2\u0329\u0327\3\2\2\2\u0329\u0328")
        buf.write("\3\2\2\2\u032a\23\3\2\2\2\u032b\u0336\5\u0174\u00bb\2")
        buf.write("\u032c\u0336\5\u0176\u00bc\2\u032d\u0336\5\u0178\u00bd")
        buf.write("\2\u032e\u0336\5\u017c\u00bf\2\u032f\u0336\5\u017e\u00c0")
        buf.write("\2\u0330\u0336\5\u0180\u00c1\2\u0331\u0336\5\u0184\u00c3")
        buf.write("\2\u0332\u0336\5\u017a\u00be\2\u0333\u0336\5\u0182\u00c2")
        buf.write("\2\u0334\u0336\5\u0186\u00c4\2\u0335\u032b\3\2\2\2\u0335")
        buf.write("\u032c\3\2\2\2\u0335\u032d\3\2\2\2\u0335\u032e\3\2\2\2")
        buf.write("\u0335\u032f\3\2\2\2\u0335\u0330\3\2\2\2\u0335\u0331\3")
        buf.write("\2\2\2\u0335\u0332\3\2\2\2\u0335\u0333\3\2\2\2\u0335\u0334")
        buf.write("\3\2\2\2\u0336\25\3\2\2\2\u0337\u0351\5\u0198\u00cd\2")
        buf.write("\u0338\u0351\5\u019a\u00ce\2\u0339\u0351\5\u019c\u00cf")
        buf.write("\2\u033a\u0351\5\u019e\u00d0\2\u033b\u0351\5\u01a2\u00d2")
        buf.write("\2\u033c\u0351\5\u01a4\u00d3\2\u033d\u0351\5\u01a6\u00d4")
        buf.write("\2\u033e\u0351\5\u01a8\u00d5\2\u033f\u0351\5\u01c0\u00e1")
        buf.write("\2\u0340\u0351\5\u01c2\u00e2\2\u0341\u0351\5\u01c4\u00e3")
        buf.write("\2\u0342\u0351\5\u01c6\u00e4\2\u0343\u0351\5\u01c8\u00e5")
        buf.write("\2\u0344\u0351\5\u01cc\u00e7\2\u0345\u0351\5\u01ce\u00e8")
        buf.write("\2\u0346\u0351\5\u01d0\u00e9\2\u0347\u0351\5\u01d2\u00ea")
        buf.write("\2\u0348\u0351\5\u01d4\u00eb\2\u0349\u0351\5\u01e2\u00f2")
        buf.write("\2\u034a\u0351\5\u01e4\u00f3\2\u034b\u0351\5\u01e6\u00f4")
        buf.write("\2\u034c\u0351\5\u01e8\u00f5\2\u034d\u0351\5\u01ea\u00f6")
        buf.write("\2\u034e\u0351\5\u01ec\u00f7\2\u034f\u0351\5\u01ee\u00f8")
        buf.write("\2\u0350\u0337\3\2\2\2\u0350\u0338\3\2\2\2\u0350\u0339")
        buf.write("\3\2\2\2\u0350\u033a\3\2\2\2\u0350\u033b\3\2\2\2\u0350")
        buf.write("\u033c\3\2\2\2\u0350\u033d\3\2\2\2\u0350\u033e\3\2\2\2")
        buf.write("\u0350\u033f\3\2\2\2\u0350\u0340\3\2\2\2\u0350\u0341\3")
        buf.write("\2\2\2\u0350\u0342\3\2\2\2\u0350\u0343\3\2\2\2\u0350\u0344")
        buf.write("\3\2\2\2\u0350\u0345\3\2\2\2\u0350\u0346\3\2\2\2\u0350")
        buf.write("\u0347\3\2\2\2\u0350\u0348\3\2\2\2\u0350\u0349\3\2\2\2")
        buf.write("\u0350\u034a\3\2\2\2\u0350\u034b\3\2\2\2\u0350\u034c\3")
        buf.write("\2\2\2\u0350\u034d\3\2\2\2\u0350\u034e\3\2\2\2\u0350\u034f")
        buf.write("\3\2\2\2\u0351\27\3\2\2\2\u0352\u035a\5\u01f8\u00fd\2")
        buf.write("\u0353\u035a\5\u01fa\u00fe\2\u0354\u035a\5\u01fc\u00ff")
        buf.write("\2\u0355\u035a\5\u01fe\u0100\2\u0356\u035a\5\u0200\u0101")
        buf.write("\2\u0357\u035a\5\u0202\u0102\2\u0358\u035a\5\u0206\u0104")
        buf.write("\2\u0359\u0352\3\2\2\2\u0359\u0353\3\2\2\2\u0359\u0354")
        buf.write("\3\2\2\2\u0359\u0355\3\2\2\2\u0359\u0356\3\2\2\2\u0359")
        buf.write("\u0357\3\2\2\2\u0359\u0358\3\2\2\2\u035a\31\3\2\2\2\u035b")
        buf.write("\u035c\7\60\2\2\u035c\u035e\t\2\2\2\u035d\u035f\5\u025e")
        buf.write("\u0130\2\u035e\u035d\3\2\2\2\u035e\u035f\3\2\2\2\u035f")
        buf.write("\u0360\3\2\2\2\u0360\u0364\5\u0226\u0114\2\u0361\u0363")
        buf.write("\5\62\32\2\u0362\u0361\3\2\2\2\u0363\u0366\3\2\2\2\u0364")
        buf.write("\u0362\3\2\2\2\u0364\u0365\3\2\2\2\u0365\33\3\2\2\2\u0366")
        buf.write("\u0364\3\2\2\2\u0367\u0369\7\60\2\2\u0368\u036a\5\64\33")
        buf.write("\2\u0369\u0368\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u036b")
        buf.write("\3\2\2\2\u036b\u036d\7\u019d\2\2\u036c\u036e\5\u025e\u0130")
        buf.write("\2\u036d\u036c\3\2\2\2\u036d\u036e\3\2\2\2\u036e\u036f")
        buf.write("\3\2\2\2\u036f\u0370\5\u020c\u0107\2\u0370\u0371\7\177")
        buf.write("\2\2\u0371\u0372\7\u024a\2\2\u0372\u0379\5\66\34\2\u0373")
        buf.write("\u0374\7\177\2\2\u0374\u0376\7\u0174\2\2\u0375\u0377\7")
        buf.write("{\2\2\u0376\u0375\3\2\2\2\u0376\u0377\3\2\2\2\u0377\u0378")
        buf.write("\3\2\2\2\u0378\u037a\7\u0222\2\2\u0379\u0373\3\2\2\2\u0379")
        buf.write("\u037a\3\2\2\2\u037a\u037c\3\2\2\2\u037b\u037d\5> \2\u037c")
        buf.write("\u037b\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u0380\3\2\2\2")
        buf.write("\u037e\u037f\7\u0171\2\2\u037f\u0381\7\u045b\2\2\u0380")
        buf.write("\u037e\3\2\2\2\u0380\u0381\3\2\2\2\u0381\u0382\3\2\2\2")
        buf.write("\u0382\u0383\7\u018f\2\2\u0383\u0384\5\u0172\u00ba\2\u0384")
        buf.write("\35\3\2\2\2\u0385\u0387\7\60\2\2\u0386\u0388\t\3\2\2\u0387")
        buf.write("\u0386\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u038a\3\2\2\2")
        buf.write("\u0389\u038b\t\4\2\2\u038a\u0389\3\2\2\2\u038a\u038b\3")
        buf.write("\2\2\2\u038b\u038c\3\2\2\2\u038c\u038d\7]\2\2\u038d\u038f")
        buf.write("\5\u0226\u0114\2\u038e\u0390\5@!\2\u038f\u038e\3\2\2\2")
        buf.write("\u038f\u0390\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u0392\7")
        buf.write("\177\2\2\u0392\u0393\5\u020e\u0108\2\u0393\u0397\5\u024a")
        buf.write("\u0126\2\u0394\u0396\5B\"\2\u0395\u0394\3\2\2\2\u0396")
        buf.write("\u0399\3\2\2\2\u0397\u0395\3\2\2\2\u0397\u0398\3\2\2\2")
        buf.write("\u0398\u03a6\3\2\2\2\u0399\u0397\3\2\2\2\u039a\u039c\7")
        buf.write("\u0152\2\2\u039b\u039d\7\u0443\2\2\u039c\u039b\3\2\2\2")
        buf.write("\u039c\u039d\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u03a5\t")
        buf.write("\5\2\2\u039f\u03a1\7r\2\2\u03a0\u03a2\7\u0443\2\2\u03a1")
        buf.write("\u03a0\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a3\3\2\2\2")
        buf.write("\u03a3\u03a5\t\6\2\2\u03a4\u039a\3\2\2\2\u03a4\u039f\3")
        buf.write("\2\2\2\u03a5\u03a8\3\2\2\2\u03a6\u03a4\3\2\2\2\u03a6\u03a7")
        buf.write("\3\2\2\2\u03a7\37\3\2\2\2\u03a8\u03a6\3\2\2\2\u03a9\u03aa")
        buf.write("\7\60\2\2\u03aa\u03ab\7\u01d5\2\2\u03ab\u03ac\7V\2\2\u03ac")
        buf.write("\u03ad\5\u0226\u0114\2\u03ad\u03ae\7\25\2\2\u03ae\u03af")
        buf.write("\7\u027f\2\2\u03af\u03b5\7\u045b\2\2\u03b0\u03b2\7\u01c0")
        buf.write("\2\2\u03b1\u03b3\7\u0443\2\2\u03b2\u03b1\3\2\2\2\u03b2")
        buf.write("\u03b3\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b6\5\u022e")
        buf.write("\u0118\2\u03b5\u03b0\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6")
        buf.write("\u03bc\3\2\2\2\u03b7\u03b9\7\u0280\2\2\u03b8\u03ba\7\u0443")
        buf.write("\2\2\u03b9\u03b8\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\u03bb")
        buf.write("\3\2\2\2\u03bb\u03bd\5\u022e\u0118\2\u03bc\u03b7\3\2\2")
        buf.write("\2\u03bc\u03bd\3\2\2\2\u03bd\u03c3\3\2\2\2\u03be\u03c0")
        buf.write("\7\u022c\2\2\u03bf\u03c1\7\u0443\2\2\u03c0\u03bf\3\2\2")
        buf.write("\2\u03c0\u03c1\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c4")
        buf.write("\5\u022e\u0118\2\u03c3\u03be\3\2\2\2\u03c3\u03c4\3\2\2")
        buf.write("\2\u03c4\u03ca\3\2\2\2\u03c5\u03c7\7\u0204\2\2\u03c6\u03c8")
        buf.write("\7\u0443\2\2\u03c7\u03c6\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8")
        buf.write("\u03c9\3\2\2\2\u03c9\u03cb\5\u0226\u0114\2\u03ca\u03c5")
        buf.write("\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03cd\3\2\2\2\u03cc")
        buf.write("\u03ce\7\u028e\2\2\u03cd\u03cc\3\2\2\2\u03cd\u03ce\3\2")
        buf.write("\2\2\u03ce\u03d4\3\2\2\2\u03cf\u03d1\7\u0171\2\2\u03d0")
        buf.write("\u03d2\7\u0443\2\2\u03d1\u03d0\3\2\2\2\u03d1\u03d2\3\2")
        buf.write("\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d5\7\u045b\2\2\u03d4")
        buf.write("\u03cf\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d6\3\2\2\2")
        buf.write("\u03d6\u03d8\7\u0197\2\2\u03d7\u03d9\7\u0443\2\2\u03d8")
        buf.write("\u03d7\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03da\3\2\2\2")
        buf.write("\u03da\u03db\5\u021c\u010f\2\u03db!\3\2\2\2\u03dc\u03de")
        buf.write("\7\60\2\2\u03dd\u03df\5\64\33\2\u03de\u03dd\3\2\2\2\u03de")
        buf.write("\u03df\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u03e1\7\u008b")
        buf.write("\2\2\u03e1\u03e2\5\u020c\u0107\2\u03e2\u03e4\5\u0262\u0132")
        buf.write("\2\u03e3\u03e5\5D#\2\u03e4\u03e3\3\2\2\2\u03e4\u03e5\3")
        buf.write("\2\2\2\u03e5\u03ea\3\2\2\2\u03e6\u03e7\7\u044e\2\2\u03e7")
        buf.write("\u03e9\5D#\2\u03e8\u03e6\3\2\2\2\u03e9\u03ec\3\2\2\2\u03ea")
        buf.write("\u03e8\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03ed\3\2\2\2")
        buf.write("\u03ec\u03ea\3\2\2\2\u03ed\u03f1\5\u0264\u0133\2\u03ee")
        buf.write("\u03f0\5H%\2\u03ef\u03ee\3\2\2\2\u03f0\u03f3\3\2\2\2\u03f1")
        buf.write("\u03ef\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f4\3\2\2\2")
        buf.write("\u03f3\u03f1\3\2\2\2\u03f4\u03f5\5\u0172\u00ba\2\u03f5")
        buf.write("#\3\2\2\2\u03f6\u03f8\7\60\2\2\u03f7\u03f9\5\64\33\2\u03f8")
        buf.write("\u03f7\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u03fa\3\2\2\2")
        buf.write("\u03fa\u03fb\7\u01b2\2\2\u03fb\u03fc\5\u020c\u0107\2\u03fc")
        buf.write("\u03fe\5\u0262\u0132\2\u03fd\u03ff\5F$\2\u03fe\u03fd\3")
        buf.write("\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0404\3\2\2\2\u0400\u0401")
        buf.write("\7\u044e\2\2\u0401\u0403\5F$\2\u0402\u0400\3\2\2\2\u0403")
        buf.write("\u0406\3\2\2\2\u0404\u0402\3\2\2\2\u0404\u0405\3\2\2\2")
        buf.write("\u0405\u0407\3\2\2\2\u0406\u0404\3\2\2\2\u0407\u0408\5")
        buf.write("\u0264\u0133\2\u0408\u0409\7\u0241\2\2\u0409\u040d\5\u023a")
        buf.write("\u011e\2\u040a\u040c\5H%\2\u040b\u040a\3\2\2\2\u040c\u040f")
        buf.write("\3\2\2\2\u040d\u040b\3\2\2\2\u040d\u040e\3\2\2\2\u040e")
        buf.write("\u0412\3\2\2\2\u040f\u040d\3\2\2\2\u0410\u0413\5\u0172")
        buf.write("\u00ba\2\u0411\u0413\5\u0182\u00c2\2\u0412\u0410\3\2\2")
        buf.write("\2\u0412\u0411\3\2\2\2\u0413%\3\2\2\2\u0414\u0415\7\60")
        buf.write("\2\2\u0415\u0416\7\u024c\2\2\u0416\u0417\5\u0226\u0114")
        buf.write("\2\u0417\u0418\7P\2\2\u0418\u0419\7\u0184\2\2\u0419\u041a")
        buf.write("\7\u0293\2\2\u041a\u041b\t\7\2\2\u041b\u041c\7\u0211\2")
        buf.write("\2\u041c\u041d\5\u0262\u0132\2\u041d\u0422\5J&\2\u041e")
        buf.write("\u041f\7\u044e\2\2\u041f\u0421\5J&\2\u0420\u041e\3\2\2")
        buf.write("\2\u0421\u0424\3\2\2\2\u0422\u0420\3\2\2\2\u0422\u0423")
        buf.write("\3\2\2\2\u0423\u0425\3\2\2\2\u0424\u0422\3\2\2\2\u0425")
        buf.write("\u0426\5\u0264\u0133\2\u0426\'\3\2\2\2\u0427\u0429\7\60")
        buf.write("\2\2\u0428\u042a\7\u0275\2\2\u0429\u0428\3\2\2\2\u0429")
        buf.write("\u042a\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u042d\7\u00b1")
        buf.write("\2\2\u042c\u042e\5\u025e\u0130\2\u042d\u042c\3\2\2\2\u042d")
        buf.write("\u042e\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u0437\5\u020e")
        buf.write("\u0108\2\u0430\u0431\7m\2\2\u0431\u0438\5\u020e\u0108")
        buf.write("\2\u0432\u0433\5\u0262\u0132\2\u0433\u0434\7m\2\2\u0434")
        buf.write("\u0435\5\u020e\u0108\2\u0435\u0436\5\u0264\u0133\2\u0436")
        buf.write("\u0438\3\2\2\2\u0437\u0430\3\2\2\2\u0437\u0432\3\2\2\2")
        buf.write("\u0438\u0476\3\2\2\2\u0439\u043b\7\60\2\2\u043a\u043c")
        buf.write("\7\u0275\2\2\u043b\u043a\3\2\2\2\u043b\u043c\3\2\2\2\u043c")
        buf.write("\u043d\3\2\2\2\u043d\u043f\7\u00b1\2\2\u043e\u0440\5\u025e")
        buf.write("\u0130\2\u043f\u043e\3\2\2\2\u043f\u0440\3\2\2\2\u0440")
        buf.write("\u0441\3\2\2\2\u0441\u0443\5\u020e\u0108\2\u0442\u0444")
        buf.write("\5L\'\2\u0443\u0442\3\2\2\2\u0443\u0444\3\2\2\2\u0444")
        buf.write("\u044f\3\2\2\2\u0445\u044c\5^\60\2\u0446\u0448\7\u044e")
        buf.write("\2\2\u0447\u0446\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u0449")
        buf.write("\3\2\2\2\u0449\u044b\5^\60\2\u044a\u0447\3\2\2\2\u044b")
        buf.write("\u044e\3\2\2\2\u044c\u044a\3\2\2\2\u044c\u044d\3\2\2\2")
        buf.write("\u044d\u0450\3\2\2\2\u044e\u044c\3\2\2\2\u044f\u0445\3")
        buf.write("\2\2\2\u044f\u0450\3\2\2\2\u0450\u0452\3\2\2\2\u0451\u0453")
        buf.write("\5d\63\2\u0452\u0451\3\2\2\2\u0452\u0453\3\2\2\2\u0453")
        buf.write("\u0455\3\2\2\2\u0454\u0456\t\b\2\2\u0455\u0454\3\2\2\2")
        buf.write("\u0455\u0456\3\2\2\2\u0456\u0458\3\2\2\2\u0457\u0459\7")
        buf.write("\34\2\2\u0458\u0457\3\2\2\2\u0458\u0459\3\2\2\2\u0459")
        buf.write("\u045a\3\2\2\2\u045a\u045b\5\u00b6\\\2\u045b\u0476\3\2")
        buf.write("\2\2\u045c\u045e\7\60\2\2\u045d\u045f\7\u0275\2\2\u045e")
        buf.write("\u045d\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u0460\3\2\2\2")
        buf.write("\u0460\u0462\7\u00b1\2\2\u0461\u0463\5\u025e\u0130\2\u0462")
        buf.write("\u0461\3\2\2\2\u0462\u0463\3\2\2\2\u0463\u0464\3\2\2\2")
        buf.write("\u0464\u0465\5\u020e\u0108\2\u0465\u0470\5L\'\2\u0466")
        buf.write("\u046d\5^\60\2\u0467\u0469\7\u044e\2\2\u0468\u0467\3\2")
        buf.write("\2\2\u0468\u0469\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u046c")
        buf.write("\5^\60\2\u046b\u0468\3\2\2\2\u046c\u046f\3\2\2\2\u046d")
        buf.write("\u046b\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u0471\3\2\2\2")
        buf.write("\u046f\u046d\3\2\2\2\u0470\u0466\3\2\2\2\u0470\u0471\3")
        buf.write("\2\2\2\u0471\u0473\3\2\2\2\u0472\u0474\5d\63\2\u0473\u0472")
        buf.write("\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u0476\3\2\2\2\u0475")
        buf.write("\u0427\3\2\2\2\u0475\u0439\3\2\2\2\u0475\u045c\3\2\2\2")
        buf.write("\u0476)\3\2\2\2\u0477\u0478\7\60\2\2\u0478\u0479\7\u0273")
        buf.write("\2\2\u0479\u047a\5\u0226\u0114\2\u047a\u047b\7\25\2\2")
        buf.write("\u047b\u047c\7\u0185\2\2\u047c\u0480\7\u045b\2\2\u047d")
        buf.write("\u047e\7\u01a9\2\2\u047e\u047f\7\u0443\2\2\u047f\u0481")
        buf.write("\5\u022e\u0118\2\u0480\u047d\3\2\2\2\u0480\u0481\3\2\2")
        buf.write("\2\u0481\u0487\3\2\2\2\u0482\u0484\7\u0197\2\2\u0483\u0485")
        buf.write("\7\u0443\2\2\u0484\u0483\3\2\2\2\u0484\u0485\3\2\2\2\u0485")
        buf.write("\u0486\3\2\2\2\u0486\u0488\5\u021c\u010f\2\u0487\u0482")
        buf.write("\3\2\2\2\u0487\u0488\3\2\2\2\u0488+\3\2\2\2\u0489\u048a")
        buf.write("\7\60\2\2\u048a\u048b\7\u0273\2\2\u048b\u048c\5\u0226")
        buf.write("\u0114\2\u048c\u048d\7\25\2\2\u048d\u048e\7\u0185\2\2")
        buf.write("\u048e\u048f\7\u045b\2\2\u048f\u0490\7\u00bf\2\2\u0490")
        buf.write("\u0491\7\u01d5\2\2\u0491\u0492\7V\2\2\u0492\u0498\5\u0226")
        buf.write("\u0114\2\u0493\u0495\7\u01a5\2\2\u0494\u0496\7\u0443\2")
        buf.write("\2\u0495\u0494\3\2\2\2\u0495\u0496\3\2\2\2\u0496\u0497")
        buf.write("\3\2\2\2\u0497\u0499\5\u022e\u0118\2\u0498\u0493\3\2\2")
        buf.write("\2\u0498\u0499\3\2\2\2\u0499\u049f\3\2\2\2\u049a\u049c")
        buf.write("\7\u01c0\2\2\u049b\u049d\7\u0443\2\2\u049c\u049b\3\2\2")
        buf.write("\2\u049c\u049d\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u04a0")
        buf.write("\5\u022e\u0118\2\u049f\u049a\3\2\2\2\u049f\u04a0\3\2\2")
        buf.write("\2\u04a0\u04a6\3\2\2\2\u04a1\u04a3\7\u0157\2\2\u04a2\u04a4")
        buf.write("\7\u0443\2\2\u04a3\u04a2\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4")
        buf.write("\u04a5\3\2\2\2\u04a5\u04a7\5\u022e\u0118\2\u04a6\u04a1")
        buf.write("\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04ad\3\2\2\2\u04a8")
        buf.write("\u04aa\7\u01ef\2\2\u04a9\u04ab\7\u0443\2\2\u04aa\u04a9")
        buf.write("\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac")
        buf.write("\u04ae\5\u022e\u0118\2\u04ad\u04a8\3\2\2\2\u04ad\u04ae")
        buf.write("\3\2\2\2\u04ae\u04b4\3\2\2\2\u04af\u04b1\7\u0204\2\2\u04b0")
        buf.write("\u04b2\7\u0443\2\2\u04b1\u04b0\3\2\2\2\u04b1\u04b2\3\2")
        buf.write("\2\2\u04b2\u04b3\3\2\2\2\u04b3\u04b5\5\u0226\u0114\2\u04b4")
        buf.write("\u04af\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5\u04b7\3\2\2\2")
        buf.write("\u04b6\u04b8\7\u028e\2\2\u04b7\u04b6\3\2\2\2\u04b7\u04b8")
        buf.write("\3\2\2\2\u04b8\u04be\3\2\2\2\u04b9\u04bb\7\u0171\2\2\u04ba")
        buf.write("\u04bc\7\u0443\2\2\u04bb\u04ba\3\2\2\2\u04bb\u04bc\3\2")
        buf.write("\2\2\u04bc\u04bd\3\2\2\2\u04bd\u04bf\7\u045b\2\2\u04be")
        buf.write("\u04b9\3\2\2\2\u04be\u04bf\3\2\2\2\u04bf\u04c0\3\2\2\2")
        buf.write("\u04c0\u04c2\7\u0197\2\2\u04c1\u04c3\7\u0443\2\2\u04c2")
        buf.write("\u04c1\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3\u04c4\3\2\2\2")
        buf.write("\u04c4\u04c5\5\u021c\u010f\2\u04c5-\3\2\2\2\u04c6\u04c8")
        buf.write("\7\60\2\2\u04c7\u04c9\5\64\33\2\u04c8\u04c7\3\2\2\2\u04c8")
        buf.write("\u04c9\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u04cb\7\u00b6")
        buf.write("\2\2\u04cb\u04cc\5\u020c\u0107\2\u04cc\u04cd\t\t\2\2\u04cd")
        buf.write("\u04ce\t\n\2\2\u04ce\u04cf\7\177\2\2\u04cf\u04d0\5\u020e")
        buf.write("\u0108\2\u04d0\u04d1\7N\2\2\u04d1\u04d2\7B\2\2\u04d2\u04d5")
        buf.write("\7\u0246\2\2\u04d3\u04d4\t\13\2\2\u04d4\u04d6\5\u020c")
        buf.write("\u0107\2\u04d5\u04d3\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6")
        buf.write("\u04d7\3\2\2\2\u04d7\u04d8\5\u0172\u00ba\2\u04d8/\3\2")
        buf.write("\2\2\u04d9\u04dc\7\60\2\2\u04da\u04db\7\u0083\2\2\u04db")
        buf.write("\u04dd\7\u0095\2\2\u04dc\u04da\3\2\2\2\u04dc\u04dd\3\2")
        buf.write("\2\2\u04dd\u04e1\3\2\2\2\u04de\u04df\7\u0152\2\2\u04df")
        buf.write("\u04e0\7\u0443\2\2\u04e0\u04e2\t\f\2\2\u04e1\u04de\3\2")
        buf.write("\2\2\u04e1\u04e2\3\2\2\2\u04e2\u04e4\3\2\2\2\u04e3\u04e5")
        buf.write("\5\64\33\2\u04e4\u04e3\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5")
        buf.write("\u04e9\3\2\2\2\u04e6\u04e7\7\u00a6\2\2\u04e7\u04e8\7\u024b")
        buf.write("\2\2\u04e8\u04ea\t\r\2\2\u04e9\u04e6\3\2\2\2\u04e9\u04ea")
        buf.write("\3\2\2\2\u04ea\u04eb\3\2\2\2\u04eb\u04ec\7\u028b\2\2\u04ec")
        buf.write("\u04f1\5\u020c\u0107\2\u04ed\u04ee\5\u0262\u0132\2\u04ee")
        buf.write("\u04ef\5\u0246\u0124\2\u04ef\u04f0\5\u0264\u0133\2\u04f0")
        buf.write("\u04f2\3\2\2\2\u04f1\u04ed\3\2\2\2\u04f1\u04f2\3\2\2\2")
        buf.write("\u04f2\u04f3\3\2\2\2\u04f3\u04f4\7\34\2\2\u04f4\u04fb")
        buf.write("\5\u00b6\\\2\u04f5\u04f7\7\u00c5\2\2\u04f6\u04f8\t\16")
        buf.write("\2\2\u04f7\u04f6\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8\u04f9")
        buf.write("\3\2\2\2\u04f9\u04fa\7)\2\2\u04fa\u04fc\7\u0081\2\2\u04fb")
        buf.write("\u04f5\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc\61\3\2\2\2\u04fd")
        buf.write("\u04ff\78\2\2\u04fe\u04fd\3\2\2\2\u04fe\u04ff\3\2\2\2")
        buf.write("\u04ff\u0503\3\2\2\2\u0500\u0501\7(\2\2\u0501\u0504\7")
        buf.write("\u00a1\2\2\u0502\u0504\7\u032c\2\2\u0503\u0500\3\2\2\2")
        buf.write("\u0503\u0502\3\2\2\2\u0504\u0506\3\2\2\2\u0505\u0507\7")
        buf.write("\u0443\2\2\u0506\u0505\3\2\2\2\u0506\u0507\3\2\2\2\u0507")
        buf.write("\u050a\3\2\2\2\u0508\u050b\5\u0218\u010d\2\u0509\u050b")
        buf.write("\78\2\2\u050a\u0508\3\2\2\2\u050a\u0509\3\2\2\2\u050b")
        buf.write("\u0515\3\2\2\2\u050c\u050e\78\2\2\u050d\u050c\3\2\2\2")
        buf.write("\u050d\u050e\3\2\2\2\u050e\u050f\3\2\2\2\u050f\u0511\7")
        buf.write("*\2\2\u0510\u0512\7\u0443\2\2\u0511\u0510\3\2\2\2\u0511")
        buf.write("\u0512\3\2\2\2\u0512\u0513\3\2\2\2\u0513\u0515\5\u021a")
        buf.write("\u010e\2\u0514\u04fe\3\2\2\2\u0514\u050d\3\2\2\2\u0515")
        buf.write("\63\3\2\2\2\u0516\u0517\7\u0188\2\2\u0517\u051f\7\u0443")
        buf.write("\2\2\u0518\u0520\5\u0214\u010b\2\u0519\u051d\7\63\2\2")
        buf.write("\u051a\u051b\5\u0262\u0132\2\u051b\u051c\5\u0264\u0133")
        buf.write("\2\u051c\u051e\3\2\2\2\u051d\u051a\3\2\2\2\u051d\u051e")
        buf.write("\3\2\2\2\u051e\u0520\3\2\2\2\u051f\u0518\3\2\2\2\u051f")
        buf.write("\u0519\3\2\2\2\u0520\65\3\2\2\2\u0521\u0522\7\u0154\2")
        buf.write("\2\u0522\u0526\58\35\2\u0523\u0525\5:\36\2\u0524\u0523")
        buf.write("\3\2\2\2\u0525\u0528\3\2\2\2\u0526\u0524\3\2\2\2\u0526")
        buf.write("\u0527\3\2\2\2\u0527\u0544\3\2\2\2\u0528\u0526\3\2\2\2")
        buf.write("\u0529\u052c\7\u019f\2\2\u052a\u052d\5\u022c\u0117\2\u052b")
        buf.write("\u052d\5\u028c\u0147\2\u052c\u052a\3\2\2\2\u052c\u052b")
        buf.write("\3\2\2\2\u052d\u052e\3\2\2\2\u052e\u0537\5<\37\2\u052f")
        buf.write("\u0530\7\u0262\2\2\u0530\u0534\58\35\2\u0531\u0533\5:")
        buf.write("\36\2\u0532\u0531\3\2\2\2\u0533\u0536\3\2\2\2\u0534\u0532")
        buf.write("\3\2\2\2\u0534\u0535\3\2\2\2\u0535\u0538\3\2\2\2\u0536")
        buf.write("\u0534\3\2\2\2\u0537\u052f\3\2\2\2\u0537\u0538\3\2\2\2")
        buf.write("\u0538\u0541\3\2\2\2\u0539\u053a\7\u0196\2\2\u053a\u053e")
        buf.write("\58\35\2\u053b\u053d\5:\36\2\u053c\u053b\3\2\2\2\u053d")
        buf.write("\u0540\3\2\2\2\u053e\u053c\3\2\2\2\u053e\u053f\3\2\2\2")
        buf.write("\u053f\u0542\3\2\2\2\u0540\u053e\3\2\2\2\u0541\u0539\3")
        buf.write("\2\2\2\u0541\u0542\3\2\2\2\u0542\u0544\3\2\2\2\u0543\u0521")
        buf.write("\3\2\2\2\u0543\u0529\3\2\2\2\u0544\67\3\2\2\2\u0545\u054a")
        buf.write("\7\u013d\2\2\u0546\u054a\5\u0230\u0119\2\u0547\u054a\5")
        buf.write("\u022c\u0117\2\u0548\u054a\5\u028c\u0147\2\u0549\u0545")
        buf.write("\3\2\2\2\u0549\u0546\3\2\2\2\u0549\u0547\3\2\2\2\u0549")
        buf.write("\u0548\3\2\2\2\u054a9\3\2\2\2\u054b\u054c\7\u043f\2\2")
        buf.write("\u054c\u054f\7b\2\2\u054d\u0550\5\u022c\u0117\2\u054e")
        buf.write("\u0550\5\u028c\u0147\2\u054f\u054d\3\2\2\2\u054f\u054e")
        buf.write("\3\2\2\2\u0550\u0551\3\2\2\2\u0551\u0552\5<\37\2\u0552")
        buf.write(";\3\2\2\2\u0553\u0561\5\u02a4\u0153\2\u0554\u0561\7\u00e2")
        buf.write("\2\2\u0555\u0561\7\u00f5\2\2\u0556\u0561\7\u00f6\2\2\u0557")
        buf.write("\u0561\7\u00f7\2\2\u0558\u0561\7\u00f8\2\2\u0559\u0561")
        buf.write("\7\u00f9\2\2\u055a\u0561\7\u00fa\2\2\u055b\u0561\7\u00fb")
        buf.write("\2\2\u055c\u0561\7\u00fc\2\2\u055d\u0561\7\u00fd\2\2\u055e")
        buf.write("\u0561\7\u00fe\2\2\u055f\u0561\7\u00ff\2\2\u0560\u0553")
        buf.write("\3\2\2\2\u0560\u0554\3\2\2\2\u0560\u0555\3\2\2\2\u0560")
        buf.write("\u0556\3\2\2\2\u0560\u0557\3\2\2\2\u0560\u0558\3\2\2\2")
        buf.write("\u0560\u0559\3\2\2\2\u0560\u055a\3\2\2\2\u0560\u055b\3")
        buf.write("\2\2\2\u0560\u055c\3\2\2\2\u0560\u055d\3\2\2\2\u0560\u055e")
        buf.write("\3\2\2\2\u0560\u055f\3\2\2\2\u0561=\3\2\2\2\u0562\u0568")
        buf.write("\7\u0193\2\2\u0563\u0568\7\u018c\2\2\u0564\u0565\7\u018c")
        buf.write("\2\2\u0565\u0566\7\177\2\2\u0566\u0568\7\u0252\2\2\u0567")
        buf.write("\u0562\3\2\2\2\u0567\u0563\3\2\2\2\u0567\u0564\3\2\2\2")
        buf.write("\u0568?\3\2\2\2\u0569\u056a\7\u00c0\2\2\u056a\u056b\t")
        buf.write("\17\2\2\u056bA\3\2\2\2\u056c\u056e\7\u01cd\2\2\u056d\u056f")
        buf.write("\7\u0443\2\2\u056e\u056d\3\2\2\2\u056e\u056f\3\2\2\2\u056f")
        buf.write("\u0570\3\2\2\2\u0570\u057a\5\u022e\u0118\2\u0571\u057a")
        buf.write("\5@!\2\u0572\u0573\7\u00c5\2\2\u0573\u0574\7\u0215\2\2")
        buf.write("\u0574\u057a\5\u0226\u0114\2\u0575\u0576\7\u0171\2\2\u0576")
        buf.write("\u057a\7\u045b\2\2\u0577\u057a\7\u01c5\2\2\u0578\u057a")
        buf.write("\7\u028d\2\2\u0579\u056c\3\2\2\2\u0579\u0571\3\2\2\2\u0579")
        buf.write("\u0572\3\2\2\2\u0579\u0575\3\2\2\2\u0579\u0577\3\2\2\2")
        buf.write("\u0579\u0578\3\2\2\2\u057aC\3\2\2\2\u057b\u057d\t\20\2")
        buf.write("\2\u057c\u057b\3\2\2\2\u057c\u057d\3\2\2\2\u057d\u057e")
        buf.write("\3\2\2\2\u057e\u057f\5\u0226\u0114\2\u057f\u0580\5\u023a")
        buf.write("\u011e\2\u0580E\3\2\2\2\u0581\u0582\5\u0226\u0114\2\u0582")
        buf.write("\u0583\5\u023a\u011e\2\u0583G\3\2\2\2\u0584\u0585\7\u0171")
        buf.write("\2\2\u0585\u059c\7\u045b\2\2\u0586\u0587\7\u01ce\2\2\u0587")
        buf.write("\u059c\7\u00a6\2\2\u0588\u058a\7{\2\2\u0589\u0588\3\2")
        buf.write("\2\2\u0589\u058a\3\2\2\2\u058a\u058b\3\2\2\2\u058b\u059c")
        buf.write("\7=\2\2\u058c\u058d\7\u017e\2\2\u058d\u0597\7\u00a6\2")
        buf.write("\2\u058e\u058f\7\u0203\2\2\u058f\u0597\7\u00a6\2\2\u0590")
        buf.write("\u0591\7\u008f\2\2\u0591\u0592\7\u00a6\2\2\u0592\u0597")
        buf.write("\7\u0184\2\2\u0593\u0594\7y\2\2\u0594\u0595\7\u00a6\2")
        buf.write("\2\u0595\u0597\7\u0184\2\2\u0596\u058c\3\2\2\2\u0596\u058e")
        buf.write("\3\2\2\2\u0596\u0590\3\2\2\2\u0596\u0593\3\2\2\2\u0597")
        buf.write("\u059c\3\2\2\2\u0598\u0599\7\u00a6\2\2\u0599\u059a\7\u024b")
        buf.write("\2\2\u059a\u059c\t\r\2\2\u059b\u0584\3\2\2\2\u059b\u0586")
        buf.write("\3\2\2\2\u059b\u0589\3\2\2\2\u059b\u0596\3\2\2\2\u059b")
        buf.write("\u0598\3\2\2\2\u059cI\3\2\2\2\u059d\u059e\7\u01ba\2\2")
        buf.write("\u059e\u05ac\7\u045b\2\2\u059f\u05a0\7\65\2\2\u05a0\u05ac")
        buf.write("\7\u045b\2\2\u05a1\u05a2\7\u0285\2\2\u05a2\u05ac\7\u045b")
        buf.write("\2\2\u05a3\u05a4\7\u0219\2\2\u05a4\u05ac\7\u045b\2\2\u05a5")
        buf.write("\u05a6\7\u0255\2\2\u05a6\u05ac\7\u045b\2\2\u05a7\u05a8")
        buf.write("\7\u0212\2\2\u05a8\u05ac\7\u045b\2\2\u05a9\u05aa\7\u021e")
        buf.write("\2\2\u05aa\u05ac\5\u022c\u0117\2\u05ab\u059d\3\2\2\2\u05ab")
        buf.write("\u059f\3\2\2\2\u05ab\u05a1\3\2\2\2\u05ab\u05a3\3\2\2\2")
        buf.write("\u05ab\u05a5\3\2\2\2\u05ab\u05a7\3\2\2\2\u05ab\u05a9\3")
        buf.write("\2\2\2\u05acK\3\2\2\2\u05ad\u05ae\5\u0262\u0132\2\u05ae")
        buf.write("\u05b3\5N(\2\u05af\u05b0\7\u044e\2\2\u05b0\u05b2\5N(\2")
        buf.write("\u05b1\u05af\3\2\2\2\u05b2\u05b5\3\2\2\2\u05b3\u05b1\3")
        buf.write("\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b6\3\2\2\2\u05b5\u05b3")
        buf.write("\3\2\2\2\u05b6\u05b7\5\u0264\u0133\2\u05b7M\3\2\2\2\u05b8")
        buf.write("\u05b9\5\u0226\u0114\2\u05b9\u05ba\5P)\2\u05ba\u05be\3")
        buf.write("\2\2\2\u05bb\u05be\5T+\2\u05bc\u05be\5\\/\2\u05bd\u05b8")
        buf.write("\3\2\2\2\u05bd\u05bb\3\2\2\2\u05bd\u05bc\3\2\2\2\u05be")
        buf.write("O\3\2\2\2\u05bf\u05c3\5\u023a\u011e\2\u05c0\u05c2\5R*")
        buf.write("\2\u05c1\u05c0\3\2\2\2\u05c2\u05c5\3\2\2\2\u05c3\u05c1")
        buf.write("\3\2\2\2\u05c3\u05c4\3\2\2\2\u05c4Q\3\2\2\2\u05c5\u05c3")
        buf.write("\3\2\2\2\u05c6\u05fc\5\u0236\u011c\2\u05c7\u05c8\78\2")
        buf.write("\2\u05c8\u05fc\5\u0256\u012c\2\u05c9\u05fc\7\u028d\2\2")
        buf.write("\u05ca\u05fc\7\u01c5\2\2\u05cb\u05d0\7\u0158\2\2\u05cc")
        buf.write("\u05cd\7\177\2\2\u05cd\u05ce\7\u00bd\2\2\u05ce\u05d0\5")
        buf.write("\u0258\u012d\2\u05cf\u05cb\3\2\2\2\u05cf\u05cc\3\2\2\2")
        buf.write("\u05d0\u05fc\3\2\2\2\u05d1\u05d3\7\u008a\2\2\u05d2\u05d1")
        buf.write("\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d4\3\2\2\2\u05d4")
        buf.write("\u05fc\7g\2\2\u05d5\u05d7\7\u00ba\2\2\u05d6\u05d8\7g\2")
        buf.write("\2\u05d7\u05d6\3\2\2\2\u05d7\u05d8\3\2\2\2\u05d8\u05fc")
        buf.write("\3\2\2\2\u05d9\u05da\7\u0171\2\2\u05da\u05fc\7\u045b\2")
        buf.write("\2\u05db\u05dc\7\u016f\2\2\u05dc\u05fc\t\21\2\2\u05dd")
        buf.write("\u05de\7\u0268\2\2\u05de\u05fc\t\22\2\2\u05df\u05fc\5")
        buf.write("V,\2\u05e0\u05e1\7*\2\2\u05e1\u05fc\5\u021a\u010e\2\u05e2")
        buf.write("\u05e3\7S\2\2\u05e3\u05e5\7\30\2\2\u05e4\u05e2\3\2\2\2")
        buf.write("\u05e4\u05e5\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6\u05e7\7")
        buf.write("\34\2\2\u05e7\u05e8\5\u0262\u0132\2\u05e8\u05e9\5\u028c")
        buf.write("\u0147\2\u05e9\u05eb\5\u0264\u0133\2\u05ea\u05ec\t\23")
        buf.write("\2\2\u05eb\u05ea\3\2\2\2\u05eb\u05ec\3\2\2\2\u05ec\u05fc")
        buf.write("\3\2\2\2\u05ed\u05ee\7\u00f4\2\2\u05ee\u05ef\78\2\2\u05ef")
        buf.write("\u05fc\7\u0289\2\2\u05f0\u05f2\7-\2\2\u05f1\u05f3\5\u0226")
        buf.write("\u0114\2\u05f2\u05f1\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3")
        buf.write("\u05f5\3\2\2\2\u05f4\u05f0\3\2\2\2\u05f4\u05f5\3\2\2\2")
        buf.write("\u05f5\u05f6\3\2\2\2\u05f6\u05f7\7)\2\2\u05f7\u05f8\5")
        buf.write("\u0262\u0132\2\u05f8\u05f9\5\u028c\u0147\2\u05f9\u05fa")
        buf.write("\5\u0264\u0133\2\u05fa\u05fc\3\2\2\2\u05fb\u05c6\3\2\2")
        buf.write("\2\u05fb\u05c7\3\2\2\2\u05fb\u05c9\3\2\2\2\u05fb\u05ca")
        buf.write("\3\2\2\2\u05fb\u05cf\3\2\2\2\u05fb\u05d2\3\2\2\2\u05fb")
        buf.write("\u05d5\3\2\2\2\u05fb\u05d9\3\2\2\2\u05fb\u05db\3\2\2\2")
        buf.write("\u05fb\u05dd\3\2\2\2\u05fb\u05df\3\2\2\2\u05fb\u05e0\3")
        buf.write("\2\2\2\u05fb\u05e4\3\2\2\2\u05fb\u05ed\3\2\2\2\u05fb\u05f4")
        buf.write("\3\2\2\2\u05fcS\3\2\2\2\u05fd\u05ff\7-\2\2\u05fe\u0600")
        buf.write("\5\u0226\u0114\2\u05ff\u05fe\3\2\2\2\u05ff\u0600\3\2\2")
        buf.write("\2\u0600\u0602\3\2\2\2\u0601\u05fd\3\2\2\2\u0601\u0602")
        buf.write("\3\2\2\2\u0602\u0603\3\2\2\2\u0603\u0604\7\u008a\2\2\u0604")
        buf.write("\u0606\7g\2\2\u0605\u0607\5\u0226\u0114\2\u0606\u0605")
        buf.write("\3\2\2\2\u0606\u0607\3\2\2\2\u0607\u0609\3\2\2\2\u0608")
        buf.write("\u060a\5@!\2\u0609\u0608\3\2\2\2\u0609\u060a\3\2\2\2\u060a")
        buf.write("\u060b\3\2\2\2\u060b\u060f\5\u024a\u0126\2\u060c\u060e")
        buf.write("\5B\"\2\u060d\u060c\3\2\2\2\u060e\u0611\3\2\2\2\u060f")
        buf.write("\u060d\3\2\2\2\u060f\u0610\3\2\2\2\u0610\u0643\3\2\2\2")
        buf.write("\u0611\u060f\3\2\2\2\u0612\u0614\7-\2\2\u0613\u0615\5")
        buf.write("\u0226\u0114\2\u0614\u0613\3\2\2\2\u0614\u0615\3\2\2\2")
        buf.write("\u0615\u0617\3\2\2\2\u0616\u0612\3\2\2\2\u0616\u0617\3")
        buf.write("\2\2\2\u0617\u0618\3\2\2\2\u0618\u061a\7\u00ba\2\2\u0619")
        buf.write("\u061b\t\24\2\2\u061a\u0619\3\2\2\2\u061a\u061b\3\2\2")
        buf.write("\2\u061b\u061d\3\2\2\2\u061c\u061e\5\u0226\u0114\2\u061d")
        buf.write("\u061c\3\2\2\2\u061d\u061e\3\2\2\2\u061e\u0620\3\2\2\2")
        buf.write("\u061f\u0621\5@!\2\u0620\u061f\3\2\2\2\u0620\u0621\3\2")
        buf.write("\2\2\u0621\u0622\3\2\2\2\u0622\u0626\5\u024a\u0126\2\u0623")
        buf.write("\u0625\5B\"\2\u0624\u0623\3\2\2\2\u0625\u0628\3\2\2\2")
        buf.write("\u0626\u0624\3\2\2\2\u0626\u0627\3\2\2\2\u0627\u0643\3")
        buf.write("\2\2\2\u0628\u0626\3\2\2\2\u0629\u062b\7-\2\2\u062a\u062c")
        buf.write("\5\u0226\u0114\2\u062b\u062a\3\2\2\2\u062b\u062c\3\2\2")
        buf.write("\2\u062c\u062e\3\2\2\2\u062d\u0629\3\2\2\2\u062d\u062e")
        buf.write("\3\2\2\2\u062e\u062f\3\2\2\2\u062f\u0630\7P\2\2\u0630")
        buf.write("\u0632\7g\2\2\u0631\u0633\5\u0226\u0114\2\u0632\u0631")
        buf.write("\3\2\2\2\u0632\u0633\3\2\2\2\u0633\u0634\3\2\2\2\u0634")
        buf.write("\u0635\5\u024a\u0126\2\u0635\u0636\5V,\2\u0636\u0643\3")
        buf.write("\2\2\2\u0637\u0639\7-\2\2\u0638\u063a\5\u0226\u0114\2")
        buf.write("\u0639\u0638\3\2\2\2\u0639\u063a\3\2\2\2\u063a\u063c\3")
        buf.write("\2\2\2\u063b\u0637\3\2\2\2\u063b\u063c\3\2\2\2\u063c\u063d")
        buf.write("\3\2\2\2\u063d\u063e\7)\2\2\u063e\u063f\5\u0262\u0132")
        buf.write("\2\u063f\u0640\5\u028c\u0147\2\u0640\u0641\5\u0264\u0133")
        buf.write("\2\u0641\u0643\3\2\2\2\u0642\u0601\3\2\2\2\u0642\u0616")
        buf.write("\3\2\2\2\u0642\u062d\3\2\2\2\u0642\u063b\3\2\2\2\u0643")
        buf.write("U\3\2\2\2\u0644\u0645\7\u0090\2\2\u0645\u0647\5\u020e")
        buf.write("\u0108\2\u0646\u0648\5\u024a\u0126\2\u0647\u0646\3\2\2")
        buf.write("\2\u0647\u0648\3\2\2\2\u0648\u064b\3\2\2\2\u0649\u064a")
        buf.write("\7w\2\2\u064a\u064c\t\25\2\2\u064b\u0649\3\2\2\2\u064b")
        buf.write("\u064c\3\2\2\2\u064c\u064e\3\2\2\2\u064d\u064f\5X-\2\u064e")
        buf.write("\u064d\3\2\2\2\u064e\u064f\3\2\2\2\u064fW\3\2\2\2\u0650")
        buf.write("\u0651\7\177\2\2\u0651\u0652\7:\2\2\u0652\u0656\5Z.\2")
        buf.write("\u0653\u0654\7\177\2\2\u0654\u0655\7\u00bd\2\2\u0655\u0657")
        buf.write("\5Z.\2\u0656\u0653\3\2\2\2\u0656\u0657\3\2\2\2\u0657\u0661")
        buf.write("\3\2\2\2\u0658\u0659\7\177\2\2\u0659\u065a\7\u00bd\2\2")
        buf.write("\u065a\u065e\5Z.\2\u065b\u065c\7\177\2\2\u065c\u065d\7")
        buf.write(":\2\2\u065d\u065f\5Z.\2\u065e\u065b\3\2\2\2\u065e\u065f")
        buf.write("\3\2\2\2\u065f\u0661\3\2\2\2\u0660\u0650\3\2\2\2\u0660")
        buf.write("\u0658\3\2\2\2\u0661Y\3\2\2\2\u0662\u0669\7\u0098\2\2")
        buf.write("\u0663\u0669\7$\2\2\u0664\u0665\7\u00a1\2\2\u0665\u0669")
        buf.write("\7}\2\2\u0666\u0667\7\u0203\2\2\u0667\u0669\7\u014f\2")
        buf.write("\2\u0668\u0662\3\2\2\2\u0668\u0663\3\2\2\2\u0668\u0664")
        buf.write("\3\2\2\2\u0668\u0666\3\2\2\2\u0669[\3\2\2\2\u066a\u066c")
        buf.write("\t\24\2\2\u066b\u066d\5\u0226\u0114\2\u066c\u066b\3\2")
        buf.write("\2\2\u066c\u066d\3\2\2\2\u066d\u066f\3\2\2\2\u066e\u0670")
        buf.write("\5@!\2\u066f\u066e\3\2\2\2\u066f\u0670\3\2\2\2\u0670\u0671")
        buf.write("\3\2\2\2\u0671\u0675\5\u024a\u0126\2\u0672\u0674\5B\"")
        buf.write("\2\u0673\u0672\3\2\2\2\u0674\u0677\3\2\2\2\u0675\u0673")
        buf.write("\3\2\2\2\u0675\u0676\3\2\2\2\u0676\u0687\3\2\2\2\u0677")
        buf.write("\u0675\3\2\2\2\u0678\u067a\t\26\2\2\u0679\u067b\t\24\2")
        buf.write("\2\u067a\u0679\3\2\2\2\u067a\u067b\3\2\2\2\u067b\u067d")
        buf.write("\3\2\2\2\u067c\u067e\5\u0226\u0114\2\u067d\u067c\3\2\2")
        buf.write("\2\u067d\u067e\3\2\2\2\u067e\u067f\3\2\2\2\u067f\u0683")
        buf.write("\5\u024a\u0126\2\u0680\u0682\5B\"\2\u0681\u0680\3\2\2")
        buf.write("\2\u0682\u0685\3\2\2\2\u0683\u0681\3\2\2\2\u0683\u0684")
        buf.write("\3\2\2\2\u0684\u0687\3\2\2\2\u0685\u0683\3\2\2\2\u0686")
        buf.write("\u066a\3\2\2\2\u0686\u0678\3\2\2\2\u0687]\3\2\2\2\u0688")
        buf.write("\u068a\7\u0197\2\2\u0689\u068b\7\u0443\2\2\u068a\u0689")
        buf.write("\3\2\2\2\u068a\u068b\3\2\2\2\u068b\u068d\3\2\2\2\u068c")
        buf.write("\u068e\5\u021c\u010f\2\u068d\u068c\3\2\2\2\u068d\u068e")
        buf.write("\3\2\2\2\u068e\u071e\3\2\2\2\u068f\u0691\7\u0158\2\2\u0690")
        buf.write("\u0692\7\u0443\2\2\u0691\u0690\3\2\2\2\u0691\u0692\3\2")
        buf.write("\2\2\u0692\u0693\3\2\2\2\u0693\u071e\5\u022c\u0117\2\u0694")
        buf.write("\u0696\7\u0159\2\2\u0695\u0697\7\u0443\2\2\u0696\u0695")
        buf.write("\3\2\2\2\u0696\u0697\3\2\2\2\u0697\u0698\3\2\2\2\u0698")
        buf.write("\u071e\5\u022c\u0117\2\u0699\u069b\78\2\2\u069a\u0699")
        buf.write("\3\2\2\2\u069a\u069b\3\2\2\2\u069b\u069f\3\2\2\2\u069c")
        buf.write("\u069d\7(\2\2\u069d\u06a0\7\u00a1\2\2\u069e\u06a0\7\u032c")
        buf.write("\2\2\u069f\u069c\3\2\2\2\u069f\u069e\3\2\2\2\u06a0\u06a2")
        buf.write("\3\2\2\2\u06a1\u06a3\7\u0443\2\2\u06a2\u06a1\3\2\2\2\u06a2")
        buf.write("\u06a3\3\2\2\2\u06a3\u06a6\3\2\2\2\u06a4\u06a7\5\u0218")
        buf.write("\u010d\2\u06a5\u06a7\78\2\2\u06a6\u06a4\3\2\2\2\u06a6")
        buf.write("\u06a5\3\2\2\2\u06a7\u071e\3\2\2\2\u06a8\u06aa\t\27\2")
        buf.write("\2\u06a9\u06ab\7\u0443\2\2\u06aa\u06a9\3\2\2\2\u06aa\u06ab")
        buf.write("\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac\u071e\t\30\2\2\u06ad")
        buf.write("\u06af\78\2\2\u06ae\u06ad\3\2\2\2\u06ae\u06af\3\2\2\2")
        buf.write("\u06af\u06b0\3\2\2\2\u06b0\u06b2\7*\2\2\u06b1\u06b3\7")
        buf.write("\u0443\2\2\u06b2\u06b1\3\2\2\2\u06b2\u06b3\3\2\2\2\u06b3")
        buf.write("\u06b4\3\2\2\2\u06b4\u071e\5\u021a\u010e\2\u06b5\u06b7")
        buf.write("\7\u0171\2\2\u06b6\u06b8\7\u0443\2\2\u06b7\u06b6\3\2\2")
        buf.write("\2\u06b7\u06b8\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u071e")
        buf.write("\7\u045b\2\2\u06ba\u06bc\7\u0176\2\2\u06bb\u06bd\7\u0443")
        buf.write("\2\2\u06bc\u06bb\3\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u06be")
        buf.write("\3\2\2\2\u06be\u071e\t\31\2\2\u06bf\u06c1\7\u0179\2\2")
        buf.write("\u06c0\u06c2\7\u0443\2\2\u06c1\u06c0\3\2\2\2\u06c1\u06c2")
        buf.write("\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3\u071e\7\u045b\2\2\u06c4")
        buf.write("\u06c5\7\u0184\2\2\u06c5\u06c7\7\u018b\2\2\u06c6\u06c8")
        buf.write("\7\u0443\2\2\u06c7\u06c6\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8")
        buf.write("\u06c9\3\2\2\2\u06c9\u071e\7\u045b\2\2\u06ca\u06cc\7\u0189")
        buf.write("\2\2\u06cb\u06cd\7\u0443\2\2\u06cc\u06cb\3\2\2\2\u06cc")
        buf.write("\u06cd\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u071e\t\30\2")
        buf.write("\2\u06cf\u06d1\7\u0194\2\2\u06d0\u06d2\7\u0443\2\2\u06d1")
        buf.write("\u06d0\3\2\2\2\u06d1\u06d2\3\2\2\2\u06d2\u06d3\3\2\2\2")
        buf.write("\u06d3\u071e\7\u045b\2\2\u06d4\u06d5\7]\2\2\u06d5\u06d7")
        buf.write("\7\u018b\2\2\u06d6\u06d8\7\u0443\2\2\u06d7\u06d6\3\2\2")
        buf.write("\2\u06d7\u06d8\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u071e")
        buf.write("\7\u045b\2\2\u06da\u06dc\7\u01c2\2\2\u06db\u06dd\7\u0443")
        buf.write("\2\2\u06dc\u06db\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u06de")
        buf.write("\3\2\2\2\u06de\u071e\t\32\2\2\u06df\u06e1\7\u01cd\2\2")
        buf.write("\u06e0\u06e2\7\u0443\2\2\u06e1\u06e0\3\2\2\2\u06e1\u06e2")
        buf.write("\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3\u071e\5\u022e\u0118")
        buf.write("\2\u06e4\u06e6\7\u01ee\2\2\u06e5\u06e7\7\u0443\2\2\u06e6")
        buf.write("\u06e5\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e7\u06e8\3\2\2\2")
        buf.write("\u06e8\u071e\5\u022c\u0117\2\u06e9\u06eb\7\u01f8\2\2\u06ea")
        buf.write("\u06ec\7\u0443\2\2\u06eb\u06ea\3\2\2\2\u06eb\u06ec\3\2")
        buf.write("\2\2\u06ec\u06ed\3\2\2\2\u06ed\u071e\5\u022c\u0117\2\u06ee")
        buf.write("\u06f0\7\u0213\2\2\u06ef\u06f1\7\u0443\2\2\u06f0\u06ef")
        buf.write("\3\2\2\2\u06f0\u06f1\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2")
        buf.write("\u071e\t\33\2\2\u06f3\u06f5\7\u0219\2\2\u06f4\u06f6\7")
        buf.write("\u0443\2\2\u06f5\u06f4\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6")
        buf.write("\u06f7\3\2\2\2\u06f7\u071e\7\u045b\2\2\u06f8\u06fa\7\u0248")
        buf.write("\2\2\u06f9\u06fb\7\u0443\2\2\u06fa\u06f9\3\2\2\2\u06fa")
        buf.write("\u06fb\3\2\2\2\u06fb\u06fc\3\2\2\2\u06fc\u071e\t\34\2")
        buf.write("\2\u06fd\u06ff\7\u0263\2\2\u06fe\u0700\7\u0443\2\2\u06ff")
        buf.write("\u06fe\3\2\2\2\u06ff\u0700\3\2\2\2\u0700\u0701\3\2\2\2")
        buf.write("\u0701\u071e\t\33\2\2\u0702\u0704\7\u0264\2\2\u0703\u0705")
        buf.write("\7\u0443\2\2\u0704\u0703\3\2\2\2\u0704\u0705\3\2\2\2\u0705")
        buf.write("\u0706\3\2\2\2\u0706\u071e\t\33\2\2\u0707\u0709\7\u0265")
        buf.write("\2\2\u0708\u070a\7\u0443\2\2\u0709\u0708\3\2\2\2\u0709")
        buf.write("\u070a\3\2\2\2\u070a\u070b\3\2\2\2\u070b\u071e\5\u022c")
        buf.write("\u0117\2\u070c\u070d\7\u0273\2\2\u070d\u070f\5\u0226\u0114")
        buf.write("\2\u070e\u0710\5b\62\2\u070f\u070e\3\2\2\2\u070f\u0710")
        buf.write("\3\2\2\2\u0710\u071e\3\2\2\2\u0711\u0712\7\u0274\2\2\u0712")
        buf.write("\u0713\7\u0443\2\2\u0713\u071e\5`\61\2\u0714\u071e\5b")
        buf.write("\62\2\u0715\u0717\7\u00b9\2\2\u0716\u0718\7\u0443\2\2")
        buf.write("\u0717\u0716\3\2\2\2\u0717\u0718\3\2\2\2\u0718\u0719\3")
        buf.write("\2\2\2\u0719\u071a\5\u0262\u0132\2\u071a\u071b\5\u0248")
        buf.write("\u0125\2\u071b\u071c\5\u0264\u0133\2\u071c\u071e\3\2\2")
        buf.write("\2\u071d\u0688\3\2\2\2\u071d\u068f\3\2\2\2\u071d\u0694")
        buf.write("\3\2\2\2\u071d\u069a\3\2\2\2\u071d\u06a8\3\2\2\2\u071d")
        buf.write("\u06ae\3\2\2\2\u071d\u06b5\3\2\2\2\u071d\u06ba\3\2\2\2")
        buf.write("\u071d\u06bf\3\2\2\2\u071d\u06c4\3\2\2\2\u071d\u06ca\3")
        buf.write("\2\2\2\u071d\u06cf\3\2\2\2\u071d\u06d4\3\2\2\2\u071d\u06da")
        buf.write("\3\2\2\2\u071d\u06df\3\2\2\2\u071d\u06e4\3\2\2\2\u071d")
        buf.write("\u06e9\3\2\2\2\u071d\u06ee\3\2\2\2\u071d\u06f3\3\2\2\2")
        buf.write("\u071d\u06f8\3\2\2\2\u071d\u06fd\3\2\2\2\u071d\u0702\3")
        buf.write("\2\2\2\u071d\u0707\3\2\2\2\u071d\u070c\3\2\2\2\u071d\u0711")
        buf.write("\3\2\2\2\u071d\u0714\3\2\2\2\u071d\u0715\3\2\2\2\u071e")
        buf.write("_\3\2\2\2\u071f\u0720\t\35\2\2\u0720a\3\2\2\2\u0721\u0722")
        buf.write("\7\u0268\2\2\u0722\u0723\t\22\2\2\u0723c\3\2\2\2\u0724")
        buf.write("\u0725\7\u0089\2\2\u0725\u0726\7\"\2\2\u0726\u0729\5f")
        buf.write("\64\2\u0727\u0728\7\u0218\2\2\u0728\u072a\5\u022c\u0117")
        buf.write("\2\u0729\u0727\3\2\2\2\u0729\u072a\3\2\2\2\u072a\u0732")
        buf.write("\3\2\2\2\u072b\u072c\7\u026d\2\2\u072c\u072d\7\"\2\2\u072d")
        buf.write("\u0730\5h\65\2\u072e\u072f\7\u026e\2\2\u072f\u0731\5\u022c")
        buf.write("\u0117\2\u0730\u072e\3\2\2\2\u0730\u0731\3\2\2\2\u0731")
        buf.write("\u0733\3\2\2\2\u0732\u072b\3\2\2\2\u0732\u0733\3\2\2\2")
        buf.write("\u0733\u073f\3\2\2\2\u0734\u0735\5\u0262\u0132\2\u0735")
        buf.write("\u073a\5j\66\2\u0736\u0737\7\u044e\2\2\u0737\u0739\5j")
        buf.write("\66\2\u0738\u0736\3\2\2\2\u0739\u073c\3\2\2\2\u073a\u0738")
        buf.write("\3\2\2\2\u073a\u073b\3\2\2\2\u073b\u073d\3\2\2\2\u073c")
        buf.write("\u073a\3\2\2\2\u073d\u073e\5\u0264\u0133\2\u073e\u0740")
        buf.write("\3\2\2\2\u073f\u0734\3\2\2\2\u073f\u0740\3\2\2\2\u0740")
        buf.write("e\3\2\2\2\u0741\u0743\7o\2\2\u0742\u0741\3\2\2\2\u0742")
        buf.write("\u0743\3\2\2\2\u0743\u0744\3\2\2\2\u0744\u0745\7\u01b8")
        buf.write("\2\2\u0745\u0746\5\u0262\u0132\2\u0746\u0747\5\u028c\u0147")
        buf.write("\2\u0747\u0748\5\u0264\u0133\2\u0748\u076f\3\2\2\2\u0749")
        buf.write("\u074b\7o\2\2\u074a\u0749\3\2\2\2\u074a\u074b\3\2\2\2")
        buf.write("\u074b\u074c\3\2\2\2\u074c\u0750\7g\2\2\u074d\u074e\7")
        buf.write("\u0152\2\2\u074e\u074f\7\u0443\2\2\u074f\u0751\t\36\2")
        buf.write("\2\u0750\u074d\3\2\2\2\u0750\u0751\3\2\2\2\u0751\u0752")
        buf.write("\3\2\2\2\u0752\u0753\5\u0262\u0132\2\u0753\u0754\5\u0246")
        buf.write("\u0124\2\u0754\u0755\5\u0264\u0133\2\u0755\u076f\3\2\2")
        buf.write("\2\u0756\u0760\7\u008d\2\2\u0757\u0758\5\u0262\u0132\2")
        buf.write("\u0758\u0759\5\u028c\u0147\2\u0759\u075a\5\u0264\u0133")
        buf.write("\2\u075a\u0761\3\2\2\2\u075b\u075c\7\u016e\2\2\u075c\u075d")
        buf.write("\5\u0262\u0132\2\u075d\u075e\5\u0246\u0124\2\u075e\u075f")
        buf.write("\5\u0264\u0133\2\u075f\u0761\3\2\2\2\u0760\u0757\3\2\2")
        buf.write("\2\u0760\u075b\3\2\2\2\u0761\u076f\3\2\2\2\u0762\u076c")
        buf.write("\7\u01d3\2\2\u0763\u0764\5\u0262\u0132\2\u0764\u0765\5")
        buf.write("\u028c\u0147\2\u0765\u0766\5\u0264\u0133\2\u0766\u076d")
        buf.write("\3\2\2\2\u0767\u0768\7\u016e\2\2\u0768\u0769\5\u0262\u0132")
        buf.write("\2\u0769\u076a\5\u0246\u0124\2\u076a\u076b\5\u0264\u0133")
        buf.write("\2\u076b\u076d\3\2\2\2\u076c\u0763\3\2\2\2\u076c\u0767")
        buf.write("\3\2\2\2\u076d\u076f\3\2\2\2\u076e\u0742\3\2\2\2\u076e")
        buf.write("\u074a\3\2\2\2\u076e\u0756\3\2\2\2\u076e\u0762\3\2\2\2")
        buf.write("\u076fg\3\2\2\2\u0770\u0772\7o\2\2\u0771\u0770\3\2\2\2")
        buf.write("\u0771\u0772\3\2\2\2\u0772\u0773\3\2\2\2\u0773\u0774\7")
        buf.write("\u01b8\2\2\u0774\u0775\5\u0262\u0132\2\u0775\u0776\5\u028c")
        buf.write("\u0147\2\u0776\u0777\5\u0264\u0133\2\u0777\u0786\3\2\2")
        buf.write("\2\u0778\u077a\7o\2\2\u0779\u0778\3\2\2\2\u0779\u077a")
        buf.write("\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u077f\7g\2\2\u077c")
        buf.write("\u077d\7\u0152\2\2\u077d\u077e\7\u0443\2\2\u077e\u0780")
        buf.write("\t\36\2\2\u077f\u077c\3\2\2\2\u077f\u0780\3\2\2\2\u0780")
        buf.write("\u0781\3\2\2\2\u0781\u0782\5\u0262\u0132\2\u0782\u0783")
        buf.write("\5\u0246\u0124\2\u0783\u0784\5\u0264\u0133\2\u0784\u0786")
        buf.write("\3\2\2\2\u0785\u0771\3\2\2\2\u0785\u0779\3\2\2\2\u0786")
        buf.write("i\3\2\2\2\u0787\u0788\7\u0089\2\2\u0788\u0789\5\u0226")
        buf.write("\u0114\2\u0789\u078a\7\u00c1\2\2\u078a\u078b\7\u01d1\2")
        buf.write("\2\u078b\u078c\7\u0277\2\2\u078c\u078d\5\u0262\u0132\2")
        buf.write("\u078d\u0792\5l\67\2\u078e\u078f\7\u044e\2\2\u078f\u0791")
        buf.write("\5l\67\2\u0790\u078e\3\2\2\2\u0791\u0794\3\2\2\2\u0792")
        buf.write("\u0790\3\2\2\2\u0792\u0793\3\2\2\2\u0793\u0795\3\2\2\2")
        buf.write("\u0794\u0792\3\2\2\2\u0795\u0799\5\u0264\u0133\2\u0796")
        buf.write("\u0798\5r:\2\u0797\u0796\3\2\2\2\u0798\u079b\3\2\2\2\u0799")
        buf.write("\u0797\3\2\2\2\u0799\u079a\3\2\2\2\u079a\u07a7\3\2\2\2")
        buf.write("\u079b\u0799\3\2\2\2\u079c\u079d\5\u0262\u0132\2\u079d")
        buf.write("\u07a2\5p9\2\u079e\u079f\7\u044e\2\2\u079f\u07a1\5p9\2")
        buf.write("\u07a0\u079e\3\2\2\2\u07a1\u07a4\3\2\2\2\u07a2\u07a0\3")
        buf.write("\2\2\2\u07a2\u07a3\3\2\2\2\u07a3\u07a5\3\2\2\2\u07a4\u07a2")
        buf.write("\3\2\2\2\u07a5\u07a6\5\u0264\u0133\2\u07a6\u07a8\3\2\2")
        buf.write("\2\u07a7\u079c\3\2\2\2\u07a7\u07a8\3\2\2\2\u07a8\u081a")
        buf.write("\3\2\2\2\u07a9\u07aa\7\u0089\2\2\u07aa\u07ab\5\u0226\u0114")
        buf.write("\2\u07ab\u07ac\7\u00c1\2\2\u07ac\u07ad\7\u01d1\2\2\u07ad")
        buf.write("\u07ae\7\u0277\2\2\u07ae\u07b2\5l\67\2\u07af\u07b1\5r")
        buf.write(":\2\u07b0\u07af\3\2\2\2\u07b1\u07b4\3\2\2\2\u07b2\u07b0")
        buf.write("\3\2\2\2\u07b2\u07b3\3\2\2\2\u07b3\u07c0\3\2\2\2\u07b4")
        buf.write("\u07b2\3\2\2\2\u07b5\u07b6\5\u0262\u0132\2\u07b6\u07bb")
        buf.write("\5p9\2\u07b7\u07b8\7\u044e\2\2\u07b8\u07ba\5p9\2\u07b9")
        buf.write("\u07b7\3\2\2\2\u07ba\u07bd\3\2\2\2\u07bb\u07b9\3\2\2\2")
        buf.write("\u07bb\u07bc\3\2\2\2\u07bc\u07be\3\2\2\2\u07bd\u07bb\3")
        buf.write("\2\2\2\u07be\u07bf\5\u0264\u0133\2\u07bf\u07c1\3\2\2\2")
        buf.write("\u07c0\u07b5\3\2\2\2\u07c0\u07c1\3\2\2\2\u07c1\u081a\3")
        buf.write("\2\2\2\u07c2\u07c3\7\u0089\2\2\u07c3\u07c4\5\u0226\u0114")
        buf.write("\2\u07c4\u07c5\7\u00c1\2\2\u07c5\u07c6\7\\\2\2\u07c6\u07c7")
        buf.write("\5\u0262\u0132\2\u07c7\u07cc\5l\67\2\u07c8\u07c9\7\u044e")
        buf.write("\2\2\u07c9\u07cb\5l\67\2\u07ca\u07c8\3\2\2\2\u07cb\u07ce")
        buf.write("\3\2\2\2\u07cc\u07ca\3\2\2\2\u07cc\u07cd\3\2\2\2\u07cd")
        buf.write("\u07cf\3\2\2\2\u07ce\u07cc\3\2\2\2\u07cf\u07d3\5\u0264")
        buf.write("\u0133\2\u07d0\u07d2\5r:\2\u07d1\u07d0\3\2\2\2\u07d2\u07d5")
        buf.write("\3\2\2\2\u07d3\u07d1\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4")
        buf.write("\u07e1\3\2\2\2\u07d5\u07d3\3\2\2\2\u07d6\u07d7\5\u0262")
        buf.write("\u0132\2\u07d7\u07dc\5p9\2\u07d8\u07d9\7\u044e\2\2\u07d9")
        buf.write("\u07db\5p9\2\u07da\u07d8\3\2\2\2\u07db\u07de\3\2\2\2\u07dc")
        buf.write("\u07da\3\2\2\2\u07dc\u07dd\3\2\2\2\u07dd\u07df\3\2\2\2")
        buf.write("\u07de\u07dc\3\2\2\2\u07df\u07e0\5\u0264\u0133\2\u07e0")
        buf.write("\u07e2\3\2\2\2\u07e1\u07d6\3\2\2\2\u07e1\u07e2\3\2\2\2")
        buf.write("\u07e2\u081a\3\2\2\2\u07e3\u07e4\7\u0089\2\2\u07e4\u07e5")
        buf.write("\5\u0226\u0114\2\u07e5\u07e6\7\u00c1\2\2\u07e6\u07e7\7")
        buf.write("\\\2\2\u07e7\u07e8\5\u0262\u0132\2\u07e8\u07ed\5n8\2\u07e9")
        buf.write("\u07ea\7\u044e\2\2\u07ea\u07ec\5n8\2\u07eb\u07e9\3\2\2")
        buf.write("\2\u07ec\u07ef\3\2\2\2\u07ed\u07eb\3\2\2\2\u07ed\u07ee")
        buf.write("\3\2\2\2\u07ee\u07f0\3\2\2\2\u07ef\u07ed\3\2\2\2\u07f0")
        buf.write("\u07f4\5\u0264\u0133\2\u07f1\u07f3\5r:\2\u07f2\u07f1\3")
        buf.write("\2\2\2\u07f3\u07f6\3\2\2\2\u07f4\u07f2\3\2\2\2\u07f4\u07f5")
        buf.write("\3\2\2\2\u07f5\u0802\3\2\2\2\u07f6\u07f4\3\2\2\2\u07f7")
        buf.write("\u07f8\5\u0262\u0132\2\u07f8\u07fd\5p9\2\u07f9\u07fa\7")
        buf.write("\u044e\2\2\u07fa\u07fc\5p9\2\u07fb\u07f9\3\2\2\2\u07fc")
        buf.write("\u07ff\3\2\2\2\u07fd\u07fb\3\2\2\2\u07fd\u07fe\3\2\2\2")
        buf.write("\u07fe\u0800\3\2\2\2\u07ff\u07fd\3\2\2\2\u0800\u0801\5")
        buf.write("\u0264\u0133\2\u0801\u0803\3\2\2\2\u0802\u07f7\3\2\2\2")
        buf.write("\u0802\u0803\3\2\2\2\u0803\u081a\3\2\2\2\u0804\u0805\7")
        buf.write("\u0089\2\2\u0805\u0809\5\u0226\u0114\2\u0806\u0808\5r")
        buf.write(":\2\u0807\u0806\3\2\2\2\u0808\u080b\3\2\2\2\u0809\u0807")
        buf.write("\3\2\2\2\u0809\u080a\3\2\2\2\u080a\u0817\3\2\2\2\u080b")
        buf.write("\u0809\3\2\2\2\u080c\u080d\5\u0262\u0132\2\u080d\u0812")
        buf.write("\5p9\2\u080e\u080f\7\u044e\2\2\u080f\u0811\5p9\2\u0810")
        buf.write("\u080e\3\2\2\2\u0811\u0814\3\2\2\2\u0812\u0810\3\2\2\2")
        buf.write("\u0812\u0813\3\2\2\2\u0813\u0815\3\2\2\2\u0814\u0812\3")
        buf.write("\2\2\2\u0815\u0816\5\u0264\u0133\2\u0816\u0818\3\2\2\2")
        buf.write("\u0817\u080c\3\2\2\2\u0817\u0818\3\2\2\2\u0818\u081a\3")
        buf.write("\2\2\2\u0819\u0787\3\2\2\2\u0819\u07a9\3\2\2\2\u0819\u07c2")
        buf.write("\3\2\2\2\u0819\u07e3\3\2\2\2\u0819\u0804\3\2\2\2\u081a")
        buf.write("k\3\2\2\2\u081b\u081f\5\u0238\u011d\2\u081c\u081f\5\u028c")
        buf.write("\u0147\2\u081d\u081f\7x\2\2\u081e\u081b\3\2\2\2\u081e")
        buf.write("\u081c\3\2\2\2\u081e\u081d\3\2\2\2\u081fm\3\2\2\2\u0820")
        buf.write("\u0821\5\u0262\u0132\2\u0821\u0824\5l\67\2\u0822\u0823")
        buf.write("\7\u044e\2\2\u0823\u0825\5l\67\2\u0824\u0822\3\2\2\2\u0825")
        buf.write("\u0826\3\2\2\2\u0826\u0824\3\2\2\2\u0826\u0827\3\2\2\2")
        buf.write("\u0827\u0828\3\2\2\2\u0828\u0829\5\u0264\u0133\2\u0829")
        buf.write("o\3\2\2\2\u082a\u082b\7\u026d\2\2\u082b\u082f\5\u0226")
        buf.write("\u0114\2\u082c\u082e\5r:\2\u082d\u082c\3\2\2\2\u082e\u0831")
        buf.write("\3\2\2\2\u082f\u082d\3\2\2\2\u082f\u0830\3\2\2\2\u0830")
        buf.write("q\3\2\2\2\u0831\u082f\3\2\2\2\u0832\u0834\78\2\2\u0833")
        buf.write("\u0832\3\2\2\2\u0833\u0834\3\2\2\2\u0834\u0836\3\2\2\2")
        buf.write("\u0835\u0837\7\u0268\2\2\u0836\u0835\3\2\2\2\u0836\u0837")
        buf.write("\3\2\2\2\u0837\u0838\3\2\2\2\u0838\u083a\7\u0197\2\2\u0839")
        buf.write("\u083b\7\u0443\2\2\u083a\u0839\3\2\2\2\u083a\u083b\3\2")
        buf.write("\2\2\u083b\u083c\3\2\2\2\u083c\u0863\5\u021c\u010f\2\u083d")
        buf.write("\u083f\7\u0171\2\2\u083e\u0840\7\u0443\2\2\u083f\u083e")
        buf.write("\3\2\2\2\u083f\u0840\3\2\2\2\u0840\u0841\3\2\2\2\u0841")
        buf.write("\u0863\7\u045b\2\2\u0842\u0843\7\u0184\2\2\u0843\u0845")
        buf.write("\7\u018b\2\2\u0844\u0846\7\u0443\2\2\u0845\u0844\3\2\2")
        buf.write("\2\u0845\u0846\3\2\2\2\u0846\u0847\3\2\2\2\u0847\u0863")
        buf.write("\7\u045b\2\2\u0848\u0849\7]\2\2\u0849\u084b\7\u018b\2")
        buf.write("\2\u084a\u084c\7\u0443\2\2\u084b\u084a\3\2\2\2\u084b\u084c")
        buf.write("\3\2\2\2\u084c\u084d\3\2\2\2\u084d\u0863\7\u045b\2\2\u084e")
        buf.write("\u0850\7\u01ee\2\2\u084f\u0851\7\u0443\2\2\u0850\u084f")
        buf.write("\3\2\2\2\u0850\u0851\3\2\2\2\u0851\u0852\3\2\2\2\u0852")
        buf.write("\u0863\5\u022c\u0117\2\u0853\u0855\7\u01f8\2\2\u0854\u0856")
        buf.write("\7\u0443\2\2\u0855\u0854\3\2\2\2\u0855\u0856\3\2\2\2\u0856")
        buf.write("\u0857\3\2\2\2\u0857\u0863\5\u022c\u0117\2\u0858\u085a")
        buf.write("\7\u0273\2\2\u0859\u085b\7\u0443\2\2\u085a\u0859\3\2\2")
        buf.write("\2\u085a\u085b\3\2\2\2\u085b\u085c\3\2\2\2\u085c\u0863")
        buf.write("\5\u0226\u0114\2\u085d\u085f\7\u0204\2\2\u085e\u0860\7")
        buf.write("\u0443\2\2\u085f\u085e\3\2\2\2\u085f\u0860\3\2\2\2\u0860")
        buf.write("\u0861\3\2\2\2\u0861\u0863\5\u0226\u0114\2\u0862\u0833")
        buf.write("\3\2\2\2\u0862\u083d\3\2\2\2\u0862\u0842\3\2\2\2\u0862")
        buf.write("\u0848\3\2\2\2\u0862\u084e\3\2\2\2\u0862\u0853\3\2\2\2")
        buf.write("\u0862\u0858\3\2\2\2\u0862\u085d\3\2\2\2\u0863s\3\2\2")
        buf.write("\2\u0864\u0865\7\27\2\2\u0865\u0867\t\2\2\2\u0866\u0868")
        buf.write("\5\u0226\u0114\2\u0867\u0866\3\2\2\2\u0867\u0868\3\2\2")
        buf.write("\2\u0868\u086a\3\2\2\2\u0869\u086b\5\62\32\2\u086a\u0869")
        buf.write("\3\2\2\2\u086b\u086c\3\2\2\2\u086c\u086a\3\2\2\2\u086c")
        buf.write("\u086d\3\2\2\2\u086d\u0877\3\2\2\2\u086e\u086f\7\27\2")
        buf.write("\2\u086f\u0870\t\2\2\2\u0870\u0871\5\u0226\u0114\2\u0871")
        buf.write("\u0872\7\u0284\2\2\u0872\u0873\7\u0184\2\2\u0873\u0874")
        buf.write("\7\u018b\2\2\u0874\u0875\7\u01fe\2\2\u0875\u0877\3\2\2")
        buf.write("\2\u0876\u0864\3\2\2\2\u0876\u086e\3\2\2\2\u0877u\3\2")
        buf.write("\2\2\u0878\u087a\7\27\2\2\u0879\u087b\5\64\33\2\u087a")
        buf.write("\u0879\3\2\2\2\u087a\u087b\3\2\2\2\u087b\u087c\3\2\2\2")
        buf.write("\u087c\u087d\7\u019d\2\2\u087d\u0881\5\u020c\u0107\2\u087e")
        buf.write("\u087f\7\177\2\2\u087f\u0880\7\u024a\2\2\u0880\u0882\5")
        buf.write("\66\34\2\u0881\u087e\3\2\2\2\u0881\u0882\3\2\2\2\u0882")
        buf.write("\u0889\3\2\2\2\u0883\u0884\7\177\2\2\u0884\u0886\7\u0174")
        buf.write("\2\2\u0885\u0887\7{\2\2\u0886\u0885\3\2\2\2\u0886\u0887")
        buf.write("\3\2\2\2\u0887\u0888\3\2\2\2\u0888\u088a\7\u0222\2\2\u0889")
        buf.write("\u0883\3\2\2\2\u0889\u088a\3\2\2\2\u088a\u088e\3\2\2\2")
        buf.write("\u088b\u088c\7\u0093\2\2\u088c\u088d\7\u00b4\2\2\u088d")
        buf.write("\u088f\5\u020c\u0107\2\u088e\u088b\3\2\2\2\u088e\u088f")
        buf.write("\3\2\2\2\u088f\u0891\3\2\2\2\u0890\u0892\5> \2\u0891\u0890")
        buf.write("\3\2\2\2\u0891\u0892\3\2\2\2\u0892\u0895\3\2\2\2\u0893")
        buf.write("\u0894\7\u0171\2\2\u0894\u0896\7\u045b\2\2\u0895\u0893")
        buf.write("\3\2\2\2\u0895\u0896\3\2\2\2\u0896\u0899\3\2\2\2\u0897")
        buf.write("\u0898\7\u018f\2\2\u0898\u089a\5\u0172\u00ba\2\u0899\u0897")
        buf.write("\3\2\2\2\u0899\u089a\3\2\2\2\u089aw\3\2\2\2\u089b\u089c")
        buf.write("\7\27\2\2\u089c\u089d\7\u01b2\2\2\u089d\u08a1\5\u020c")
        buf.write("\u0107\2\u089e\u08a0\5H%\2\u089f\u089e\3\2\2\2\u08a0\u08a3")
        buf.write("\3\2\2\2\u08a1\u089f\3\2\2\2\u08a1\u08a2\3\2\2\2\u08a2")
        buf.write("y\3\2\2\2\u08a3\u08a1\3\2\2\2\u08a4\u08a5\7\27\2\2\u08a5")
        buf.write("\u08a6\7\u01c4\2\2\u08a6\u08a7\7\u0245\2\2\u08a7\u08a8")
        buf.write("\7\u02fa\2\2\u08a8\u08a9\7\u01d7\2\2\u08a9\u08aa\7g\2")
        buf.write("\2\u08aa{\3\2\2\2\u08ab\u08ac\7\27\2\2\u08ac\u08ad\7\u01d5")
        buf.write("\2\2\u08ad\u08ae\7V\2\2\u08ae\u08af\5\u0226\u0114\2\u08af")
        buf.write("\u08b0\7\25\2\2\u08b0\u08b1\7\u027f\2\2\u08b1\u08b7\7")
        buf.write("\u045b\2\2\u08b2\u08b4\7\u01c0\2\2\u08b3\u08b5\7\u0443")
        buf.write("\2\2\u08b4\u08b3\3\2\2\2\u08b4\u08b5\3\2\2\2\u08b5\u08b6")
        buf.write("\3\2\2\2\u08b6\u08b8\5\u022e\u0118\2\u08b7\u08b2\3\2\2")
        buf.write("\2\u08b7\u08b8\3\2\2\2\u08b8\u08ba\3\2\2\2\u08b9\u08bb")
        buf.write("\7\u028e\2\2\u08ba\u08b9\3\2\2\2\u08ba\u08bb\3\2\2\2\u08bb")
        buf.write("\u08bc\3\2\2\2\u08bc\u08be\7\u0197\2\2\u08bd\u08bf\7\u0443")
        buf.write("\2\2\u08be\u08bd\3\2\2\2\u08be\u08bf\3\2\2\2\u08bf\u08c0")
        buf.write("\3\2\2\2\u08c0\u08c1\5\u021c\u010f\2\u08c1}\3\2\2\2\u08c2")
        buf.write("\u08c3\7\27\2\2\u08c3\u08c4\7\u008b\2\2\u08c4\u08c8\5")
        buf.write("\u020c\u0107\2\u08c5\u08c7\5H%\2\u08c6\u08c5\3\2\2\2\u08c7")
        buf.write("\u08ca\3\2\2\2\u08c8\u08c6\3\2\2\2\u08c8\u08c9\3\2\2\2")
        buf.write("\u08c9\177\3\2\2\2\u08ca\u08c8\3\2\2\2\u08cb\u08cc\7\27")
        buf.write("\2\2\u08cc\u08cd\7\u024c\2\2\u08cd\u08ce\5\u0226\u0114")
        buf.write("\2\u08ce\u08cf\7\u0211\2\2\u08cf\u08d0\5\u0262\u0132\2")
        buf.write("\u08d0\u08d5\5J&\2\u08d1\u08d2\7\u044e\2\2\u08d2\u08d4")
        buf.write("\5J&\2\u08d3\u08d1\3\2\2\2\u08d4\u08d7\3\2\2\2\u08d5\u08d3")
        buf.write("\3\2\2\2\u08d5\u08d6\3\2\2\2\u08d6\u08d8\3\2\2\2\u08d7")
        buf.write("\u08d5\3\2\2\2\u08d8\u08d9\5\u0264\u0133\2\u08d9\u0081")
        buf.write("\3\2\2\2\u08da\u08dc\7\27\2\2\u08db\u08dd\t\3\2\2\u08dc")
        buf.write("\u08db\3\2\2\2\u08dc\u08dd\3\2\2\2\u08dd\u08df\3\2\2\2")
        buf.write("\u08de\u08e0\7[\2\2\u08df\u08de\3\2\2\2\u08df\u08e0\3")
        buf.write("\2\2\2\u08e0\u08e1\3\2\2\2\u08e1\u08e2\7\u00b1\2\2\u08e2")
        buf.write("\u08eb\5\u020e\u0108\2\u08e3\u08e8\5\u0088E\2\u08e4\u08e5")
        buf.write("\7\u044e\2\2\u08e5\u08e7\5\u0088E\2\u08e6\u08e4\3\2\2")
        buf.write("\2\u08e7\u08ea\3\2\2\2\u08e8\u08e6\3\2\2\2\u08e8\u08e9")
        buf.write("\3\2\2\2\u08e9\u08ec\3\2\2\2\u08ea\u08e8\3\2\2\2\u08eb")
        buf.write("\u08e3\3\2\2\2\u08eb\u08ec\3\2\2\2\u08ec\u08ee\3\2\2\2")
        buf.write("\u08ed\u08ef\5d\63\2\u08ee\u08ed\3\2\2\2\u08ee\u08ef\3")
        buf.write("\2\2\2\u08ef\u0083\3\2\2\2\u08f0\u08f1\7\27\2\2\u08f1")
        buf.write("\u08f2\7\u0273\2\2\u08f2\u08f3\5\u0226\u0114\2\u08f3\u08f4")
        buf.write("\t\37\2\2\u08f4\u08f5\7\u0185\2\2\u08f5\u08f9\7\u045b")
        buf.write("\2\2\u08f6\u08f7\7\u01c0\2\2\u08f7\u08f8\7\u0443\2\2\u08f8")
        buf.write("\u08fa\5\u022e\u0118\2\u08f9\u08f6\3\2\2\2\u08f9\u08fa")
        buf.write("\3\2\2\2\u08fa\u08fc\3\2\2\2\u08fb\u08fd\7\u028e\2\2\u08fc")
        buf.write("\u08fb\3\2\2\2\u08fc\u08fd\3\2\2\2\u08fd\u08fe\3\2\2\2")
        buf.write("\u08fe\u0900\7\u0197\2\2\u08ff\u0901\7\u0443\2\2\u0900")
        buf.write("\u08ff\3\2\2\2\u0900\u0901\3\2\2\2\u0901\u0902\3\2\2\2")
        buf.write("\u0902\u0903\5\u021c\u010f\2\u0903\u0085\3\2\2\2\u0904")
        buf.write("\u0908\7\27\2\2\u0905\u0906\7\u0152\2\2\u0906\u0907\7")
        buf.write("\u0443\2\2\u0907\u0909\t\f\2\2\u0908\u0905\3\2\2\2\u0908")
        buf.write("\u0909\3\2\2\2\u0909\u090b\3\2\2\2\u090a\u090c\5\64\33")
        buf.write("\2\u090b\u090a\3\2\2\2\u090b\u090c\3\2\2\2\u090c\u0910")
        buf.write("\3\2\2\2\u090d\u090e\7\u00a6\2\2\u090e\u090f\7\u024b\2")
        buf.write("\2\u090f\u0911\t\r\2\2\u0910\u090d\3\2\2\2\u0910\u0911")
        buf.write("\3\2\2\2\u0911\u0912\3\2\2\2\u0912\u0913\7\u028b\2\2\u0913")
        buf.write("\u0918\5\u020c\u0107\2\u0914\u0915\5\u0262\u0132\2\u0915")
        buf.write("\u0916\5\u0246\u0124\2\u0916\u0917\5\u0264\u0133\2\u0917")
        buf.write("\u0919\3\2\2\2\u0918\u0914\3\2\2\2\u0918\u0919\3\2\2\2")
        buf.write("\u0919\u091a\3\2\2\2\u091a\u091b\7\34\2\2\u091b\u0922")
        buf.write("\5\u00b6\\\2\u091c\u091e\7\u00c5\2\2\u091d\u091f\t\16")
        buf.write("\2\2\u091e\u091d\3\2\2\2\u091e\u091f\3\2\2\2\u091f\u0920")
        buf.write("\3\2\2\2\u0920\u0921\7)\2\2\u0921\u0923\7\u0081\2\2\u0922")
        buf.write("\u091c\3\2\2\2\u0922\u0923\3\2\2\2\u0923\u0087\3\2\2\2")
        buf.write("\u0924\u092b\5^\60\2\u0925\u0927\7\u044e\2\2\u0926\u0925")
        buf.write("\3\2\2\2\u0926\u0927\3\2\2\2\u0927\u0928\3\2\2\2\u0928")
        buf.write("\u092a\5^\60\2\u0929\u0926\3\2\2\2\u092a\u092d\3\2\2\2")
        buf.write("\u092b\u0929\3\2\2\2\u092b\u092c\3\2\2\2\u092c\u0a93\3")
        buf.write("\2\2\2\u092d\u092b\3\2\2\2\u092e\u0930\7\25\2\2\u092f")
        buf.write("\u0931\7+\2\2\u0930\u092f\3\2\2\2\u0930\u0931\3\2\2\2")
        buf.write("\u0931\u0932\3\2\2\2\u0932\u0933\5\u0226\u0114\2\u0933")
        buf.write("\u0937\5P)\2\u0934\u0938\7\u01ab\2\2\u0935\u0936\7\u0150")
        buf.write("\2\2\u0936\u0938\5\u0226\u0114\2\u0937\u0934\3\2\2\2\u0937")
        buf.write("\u0935\3\2\2\2\u0937\u0938\3\2\2\2\u0938\u0a93\3\2\2\2")
        buf.write("\u0939\u093b\7\25\2\2\u093a\u093c\7+\2\2\u093b\u093a\3")
        buf.write("\2\2\2\u093b\u093c\3\2\2\2\u093c\u093d\3\2\2\2\u093d\u093e")
        buf.write("\5\u0262\u0132\2\u093e\u093f\5\u0226\u0114\2\u093f\u0946")
        buf.write("\5P)\2\u0940\u0941\7\u044e\2\2\u0941\u0942\5\u0226\u0114")
        buf.write("\2\u0942\u0943\5P)\2\u0943\u0945\3\2\2\2\u0944\u0940\3")
        buf.write("\2\2\2\u0945\u0948\3\2\2\2\u0946\u0944\3\2\2\2\u0946\u0947")
        buf.write("\3\2\2\2\u0947\u0949\3\2\2\2\u0948\u0946\3\2\2\2\u0949")
        buf.write("\u094a\5\u0264\u0133\2\u094a\u0a93\3\2\2\2\u094b\u094c")
        buf.write("\7\25\2\2\u094c\u094e\t\24\2\2\u094d\u094f\5\u0226\u0114")
        buf.write("\2\u094e\u094d\3\2\2\2\u094e\u094f\3\2\2\2\u094f\u0951")
        buf.write("\3\2\2\2\u0950\u0952\5@!\2\u0951\u0950\3\2\2\2\u0951\u0952")
        buf.write("\3\2\2\2\u0952\u0953\3\2\2\2\u0953\u0957\5\u024a\u0126")
        buf.write("\2\u0954\u0956\5B\"\2\u0955\u0954\3\2\2\2\u0956\u0959")
        buf.write("\3\2\2\2\u0957\u0955\3\2\2\2\u0957\u0958\3\2\2\2\u0958")
        buf.write("\u0a93\3\2\2\2\u0959\u0957\3\2\2\2\u095a\u095f\7\25\2")
        buf.write("\2\u095b\u095d\7-\2\2\u095c\u095e\5\u0226\u0114\2\u095d")
        buf.write("\u095c\3\2\2\2\u095d\u095e\3\2\2\2\u095e\u0960\3\2\2\2")
        buf.write("\u095f\u095b\3\2\2\2\u095f\u0960\3\2\2\2\u0960\u0961\3")
        buf.write("\2\2\2\u0961\u0962\7\u008a\2\2\u0962\u0964\7g\2\2\u0963")
        buf.write("\u0965\5\u0226\u0114\2\u0964\u0963\3\2\2\2\u0964\u0965")
        buf.write("\3\2\2\2\u0965\u0967\3\2\2\2\u0966\u0968\5@!\2\u0967\u0966")
        buf.write("\3\2\2\2\u0967\u0968\3\2\2\2\u0968\u0969\3\2\2\2\u0969")
        buf.write("\u096d\5\u024a\u0126\2\u096a\u096c\5B\"\2\u096b\u096a")
        buf.write("\3\2\2\2\u096c\u096f\3\2\2\2\u096d\u096b\3\2\2\2\u096d")
        buf.write("\u096e\3\2\2\2\u096e\u0a93\3\2\2\2\u096f\u096d\3\2\2\2")
        buf.write("\u0970\u0975\7\25\2\2\u0971\u0973\7-\2\2\u0972\u0974\5")
        buf.write("\u0226\u0114\2\u0973\u0972\3\2\2\2\u0973\u0974\3\2\2\2")
        buf.write("\u0974\u0976\3\2\2\2\u0975\u0971\3\2\2\2\u0975\u0976\3")
        buf.write("\2\2\2\u0976\u0977\3\2\2\2\u0977\u0979\7\u00ba\2\2\u0978")
        buf.write("\u097a\t\24\2\2\u0979\u0978\3\2\2\2\u0979\u097a\3\2\2")
        buf.write("\2\u097a\u097c\3\2\2\2\u097b\u097d\5\u0226\u0114\2\u097c")
        buf.write("\u097b\3\2\2\2\u097c\u097d\3\2\2\2\u097d\u097f\3\2\2\2")
        buf.write("\u097e\u0980\5@!\2\u097f\u097e\3\2\2\2\u097f\u0980\3\2")
        buf.write("\2\2\u0980\u0981\3\2\2\2\u0981\u0985\5\u024a\u0126\2\u0982")
        buf.write("\u0984\5B\"\2\u0983\u0982\3\2\2\2\u0984\u0987\3\2\2\2")
        buf.write("\u0985\u0983\3\2\2\2\u0985\u0986\3\2\2\2\u0986\u0a93\3")
        buf.write("\2\2\2\u0987\u0985\3\2\2\2\u0988\u0989\7\25\2\2\u0989")
        buf.write("\u098b\t\26\2\2\u098a\u098c\t\24\2\2\u098b\u098a\3\2\2")
        buf.write("\2\u098b\u098c\3\2\2\2\u098c\u098e\3\2\2\2\u098d\u098f")
        buf.write("\5\u0226\u0114\2\u098e\u098d\3\2\2\2\u098e\u098f\3\2\2")
        buf.write("\2\u098f\u0990\3\2\2\2\u0990\u0994\5\u024a\u0126\2\u0991")
        buf.write("\u0993\5B\"\2\u0992\u0991\3\2\2\2\u0993\u0996\3\2\2\2")
        buf.write("\u0994\u0992\3\2\2\2\u0994\u0995\3\2\2\2\u0995\u0a93\3")
        buf.write("\2\2\2\u0996\u0994\3\2\2\2\u0997\u099c\7\25\2\2\u0998")
        buf.write("\u099a\7-\2\2\u0999\u099b\5\u0226\u0114\2\u099a\u0999")
        buf.write("\3\2\2\2\u099a\u099b\3\2\2\2\u099b\u099d\3\2\2\2\u099c")
        buf.write("\u0998\3\2\2\2\u099c\u099d\3\2\2\2\u099d\u099e\3\2\2\2")
        buf.write("\u099e\u099f\7P\2\2\u099f\u09a1\7g\2\2\u09a0\u09a2\5\u0226")
        buf.write("\u0114\2\u09a1\u09a0\3\2\2\2\u09a1\u09a2\3\2\2\2\u09a2")
        buf.write("\u09a3\3\2\2\2\u09a3\u09a4\5\u024a\u0126\2\u09a4\u09a5")
        buf.write("\5V,\2\u09a5\u0a93\3\2\2\2\u09a6\u09ab\7\25\2\2\u09a7")
        buf.write("\u09a9\7-\2\2\u09a8\u09aa\5\u0226\u0114\2\u09a9\u09a8")
        buf.write("\3\2\2\2\u09a9\u09aa\3\2\2\2\u09aa\u09ac\3\2\2\2\u09ab")
        buf.write("\u09a7\3\2\2\2\u09ab\u09ac\3\2\2\2\u09ac\u09ad\3\2\2\2")
        buf.write("\u09ad\u09ae\7)\2\2\u09ae\u09af\5\u0262\u0132\2\u09af")
        buf.write("\u09b0\5\u028c\u0147\2\u09b0\u09b1\5\u0264\u0133\2\u09b1")
        buf.write("\u0a93\3\2\2\2\u09b2\u09b4\7\u0152\2\2\u09b3\u09b5\7\u0443")
        buf.write("\2\2\u09b4\u09b3\3\2\2\2\u09b4\u09b5\3\2\2\2\u09b5\u09b6")
        buf.write("\3\2\2\2\u09b6\u0a93\t\5\2\2\u09b7\u09b9\7\27\2\2\u09b8")
        buf.write("\u09ba\7+\2\2\u09b9\u09b8\3\2\2\2\u09b9\u09ba\3\2\2\2")
        buf.write("\u09ba\u09bb\3\2\2\2\u09bb\u09c1\5\u0226\u0114\2\u09bc")
        buf.write("\u09bd\7\u00a1\2\2\u09bd\u09be\78\2\2\u09be\u09c2\5\u0256")
        buf.write("\u012c\2\u09bf\u09c0\7A\2\2\u09c0\u09c2\78\2\2\u09c1\u09bc")
        buf.write("\3\2\2\2\u09c1\u09bf\3\2\2\2\u09c2\u0a93\3\2\2\2\u09c3")
        buf.write("\u09c5\7\'\2\2\u09c4\u09c6\7+\2\2\u09c5\u09c4\3\2\2\2")
        buf.write("\u09c5\u09c6\3\2\2\2\u09c6\u09c7\3\2\2\2\u09c7\u09c8\5")
        buf.write("\u0226\u0114\2\u09c8\u09c9\5\u0226\u0114\2\u09c9\u09cd")
        buf.write("\5P)\2\u09ca\u09ce\7\u01ab\2\2\u09cb\u09cc\7\u0150\2\2")
        buf.write("\u09cc\u09ce\5\u0226\u0114\2\u09cd\u09ca\3\2\2\2\u09cd")
        buf.write("\u09cb\3\2\2\2\u09cd\u09ce\3\2\2\2\u09ce\u0a93\3\2\2\2")
        buf.write("\u09cf\u09d0\7\u0093\2\2\u09d0\u09d1\7+\2\2\u09d1\u09d2")
        buf.write("\5\u0226\u0114\2\u09d2\u09d3\7\u00b4\2\2\u09d3\u09d4\5")
        buf.write("\u0226\u0114\2\u09d4\u0a93\3\2\2\2\u09d5\u09d7\7r\2\2")
        buf.write("\u09d6\u09d8\7\u0443\2\2\u09d7\u09d6\3\2\2\2\u09d7\u09d8")
        buf.write("\3\2\2\2\u09d8\u09d9\3\2\2\2\u09d9\u0a93\t\6\2\2\u09da")
        buf.write("\u09dc\7\u01fa\2\2\u09db\u09dd\7+\2\2\u09dc\u09db\3\2")
        buf.write("\2\2\u09dc\u09dd\3\2\2\2\u09dd\u09de\3\2\2\2\u09de\u09df")
        buf.write("\5\u0226\u0114\2\u09df\u09e3\5P)\2\u09e0\u09e4\7\u01ab")
        buf.write("\2\2\u09e1\u09e2\7\u0150\2\2\u09e2\u09e4\5\u0226\u0114")
        buf.write("\2\u09e3\u09e0\3\2\2\2\u09e3\u09e1\3\2\2\2\u09e3\u09e4")
        buf.write("\3\2\2\2\u09e4\u0a93\3\2\2\2\u09e5\u09e7\7A\2\2\u09e6")
        buf.write("\u09e8\7+\2\2\u09e7\u09e6\3\2\2\2\u09e7\u09e8\3\2\2\2")
        buf.write("\u09e8\u09e9\3\2\2\2\u09e9\u09eb\5\u0226\u0114\2\u09ea")
        buf.write("\u09ec\7\u0098\2\2\u09eb\u09ea\3\2\2\2\u09eb\u09ec\3\2")
        buf.write("\2\2\u09ec\u0a93\3\2\2\2\u09ed\u09ee\7A\2\2\u09ee\u09ef")
        buf.write("\t \2\2\u09ef\u0a93\5\u0226\u0114\2\u09f0\u09f1\7A\2\2")
        buf.write("\u09f1\u09f2\7\u008a\2\2\u09f2\u0a93\7g\2\2\u09f3\u09f4")
        buf.write("\7\u0093\2\2\u09f4\u09f5\t\24\2\2\u09f5\u09f6\5\u0226")
        buf.write("\u0114\2\u09f6\u09f7\7\u00b4\2\2\u09f7\u09f8\5\u0226\u0114")
        buf.write("\2\u09f8\u0a93\3\2\2\2\u09f9\u09fa\7\27\2\2\u09fa\u09fb")
        buf.write("\7]\2\2\u09fb\u09fc\5\u0226\u0114\2\u09fc\u09fd\t!\2\2")
        buf.write("\u09fd\u0a93\3\2\2\2\u09fe\u09ff\7A\2\2\u09ff\u0a00\t")
        buf.write("\24\2\2\u0a00\u0a93\5\u0226\u0114\2\u0a01\u0a02\7A\2\2")
        buf.write("\u0a02\u0a03\7P\2\2\u0a03\u0a04\7g\2\2\u0a04\u0a93\5\u0226")
        buf.write("\u0114\2\u0a05\u0a06\7\u018c\2\2\u0a06\u0a93\7h\2\2\u0a07")
        buf.write("\u0a08\7\u0193\2\2\u0a08\u0a93\7h\2\2\u0a09\u0a0b\7\u0093")
        buf.write("\2\2\u0a0a\u0a0c\t\"\2\2\u0a0b\u0a0a\3\2\2\2\u0a0b\u0a0c")
        buf.write("\3\2\2\2\u0a0c\u0a0f\3\2\2\2\u0a0d\u0a10\5\u0226\u0114")
        buf.write("\2\u0a0e\u0a10\5\u020c\u0107\2\u0a0f\u0a0d\3\2\2\2\u0a0f")
        buf.write("\u0a0e\3\2\2\2\u0a10\u0a93\3\2\2\2\u0a11\u0a12\7\u0084")
        buf.write("\2\2\u0a12\u0a13\7\"\2\2\u0a13\u0a93\5\u0246\u0124\2\u0a14")
        buf.write("\u0a15\7/\2\2\u0a15\u0a16\7\u00b4\2\2\u0a16\u0a17\7(\2")
        buf.write("\2\u0a17\u0a18\7\u00a1\2\2\u0a18\u0a1b\5\u0218\u010d\2")
        buf.write("\u0a19\u0a1a\7*\2\2\u0a1a\u0a1c\5\u021a\u010e\2\u0a1b")
        buf.write("\u0a19\3\2\2\2\u0a1b\u0a1c\3\2\2\2\u0a1c\u0a93\3\2\2\2")
        buf.write("\u0a1d\u0a1f\78\2\2\u0a1e\u0a1d\3\2\2\2\u0a1e\u0a1f\3")
        buf.write("\2\2\2\u0a1f\u0a20\3\2\2\2\u0a20\u0a21\7(\2\2\u0a21\u0a22")
        buf.write("\7\u00a1\2\2\u0a22\u0a23\7\u0443\2\2\u0a23\u0a27\5\u0218")
        buf.write("\u010d\2\u0a24\u0a25\7*\2\2\u0a25\u0a26\7\u0443\2\2\u0a26")
        buf.write("\u0a28\5\u021a\u010e\2\u0a27\u0a24\3\2\2\2\u0a27\u0a28")
        buf.write("\3\2\2\2\u0a28\u0a93\3\2\2\2\u0a29\u0a2a\7\u018d\2\2\u0a2a")
        buf.write("\u0a93\7\u0273\2\2\u0a2b\u0a2c\7\u01be\2\2\u0a2c\u0a93")
        buf.write("\7\u0273\2\2\u0a2d\u0a93\7O\2\2\u0a2e\u0a2f\t#\2\2\u0a2f")
        buf.write("\u0a93\7\u0288\2\2\u0a30\u0a31\7\25\2\2\u0a31\u0a32\7")
        buf.write("\u0089\2\2\u0a32\u0a33\5\u0262\u0132\2\u0a33\u0a38\5j")
        buf.write("\66\2\u0a34\u0a35\7\u044e\2\2\u0a35\u0a37\5j\66\2\u0a36")
        buf.write("\u0a34\3\2\2\2\u0a37\u0a3a\3\2\2\2\u0a38\u0a36\3\2\2\2")
        buf.write("\u0a38\u0a39\3\2\2\2\u0a39\u0a3b\3\2\2\2\u0a3a\u0a38\3")
        buf.write("\2\2\2\u0a3b\u0a3c\5\u0264\u0133\2\u0a3c\u0a93\3\2\2\2")
        buf.write("\u0a3d\u0a3e\7A\2\2\u0a3e\u0a3f\7\u0089\2\2\u0a3f\u0a93")
        buf.write("\5\u0246\u0124\2\u0a40\u0a41\7\u018d\2\2\u0a41\u0a44\7")
        buf.write("\u0089\2\2\u0a42\u0a45\5\u0246\u0124\2\u0a43\u0a45\7\26")
        buf.write("\2\2\u0a44\u0a42\3\2\2\2\u0a44\u0a43\3\2\2\2\u0a45\u0a46")
        buf.write("\3\2\2\2\u0a46\u0a93\7\u0273\2\2\u0a47\u0a48\7\u01be\2")
        buf.write("\2\u0a48\u0a4b\7\u0089\2\2\u0a49\u0a4c\5\u0246\u0124\2")
        buf.write("\u0a4a\u0a4c\7\26\2\2\u0a4b\u0a49\3\2\2\2\u0a4b\u0a4a")
        buf.write("\3\2\2\2\u0a4c\u0a4d\3\2\2\2\u0a4d\u0a93\7\u0273\2\2\u0a4e")
        buf.write("\u0a4f\7\u027c\2\2\u0a4f\u0a52\7\u0089\2\2\u0a50\u0a53")
        buf.write("\5\u0246\u0124\2\u0a51\u0a53\7\26\2\2\u0a52\u0a50\3\2")
        buf.write("\2\2\u0a52\u0a51\3\2\2\2\u0a53\u0a93\3\2\2\2\u0a54\u0a55")
        buf.write("\7\u016c\2\2\u0a55\u0a56\7\u0089\2\2\u0a56\u0a93\5\u022c")
        buf.write("\u0117\2\u0a57\u0a58\7\u0233\2\2\u0a58\u0a59\7\u0089\2")
        buf.write("\2\u0a59\u0a5a\5\u0246\u0124\2\u0a5a\u0a5b\7c\2\2\u0a5b")
        buf.write("\u0a5c\5\u0262\u0132\2\u0a5c\u0a61\5j\66\2\u0a5d\u0a5e")
        buf.write("\7\u044e\2\2\u0a5e\u0a60\5j\66\2\u0a5f\u0a5d\3\2\2\2\u0a60")
        buf.write("\u0a63\3\2\2\2\u0a61\u0a5f\3\2\2\2\u0a61\u0a62\3\2\2\2")
        buf.write("\u0a62\u0a64\3\2\2\2\u0a63\u0a61\3\2\2\2\u0a64\u0a65\5")
        buf.write("\u0264\u0133\2\u0a65\u0a93\3\2\2\2\u0a66\u0a67\7\u01a0")
        buf.write("\2\2\u0a67\u0a68\7\u0089\2\2\u0a68\u0a69\5\u0226\u0114")
        buf.write("\2\u0a69\u0a6a\7\u00c5\2\2\u0a6a\u0a6b\7\u00b1\2\2\u0a6b")
        buf.write("\u0a6e\5\u020e\u0108\2\u0a6c\u0a6d\t#\2\2\u0a6d\u0a6f")
        buf.write("\7\u0288\2\2\u0a6e\u0a6c\3\2\2\2\u0a6e\u0a6f\3\2\2\2\u0a6f")
        buf.write("\u0a93\3\2\2\2\u0a70\u0a71\7\31\2\2\u0a71\u0a74\7\u0089")
        buf.write("\2\2\u0a72\u0a75\5\u0246\u0124\2\u0a73\u0a75\7\26\2\2")
        buf.write("\u0a74\u0a72\3\2\2\2\u0a74\u0a73\3\2\2\2\u0a75\u0a93\3")
        buf.write("\2\2\2\u0a76\u0a77\7)\2\2\u0a77\u0a7a\7\u0089\2\2\u0a78")
        buf.write("\u0a7b\5\u0246\u0124\2\u0a79\u0a7b\7\26\2\2\u0a7a\u0a78")
        buf.write("\3\2\2\2\u0a7a\u0a79\3\2\2\2\u0a7b\u0a93\3\2\2\2\u0a7c")
        buf.write("\u0a7d\7\u0080\2\2\u0a7d\u0a80\7\u0089\2\2\u0a7e\u0a81")
        buf.write("\5\u0246\u0124\2\u0a7f\u0a81\7\26\2\2\u0a80\u0a7e\3\2")
        buf.write("\2\2\u0a80\u0a7f\3\2\2\2\u0a81\u0a93\3\2\2\2\u0a82\u0a83")
        buf.write("\7\u022a\2\2\u0a83\u0a86\7\u0089\2\2\u0a84\u0a87\5\u0246")
        buf.write("\u0124\2\u0a85\u0a87\7\26\2\2\u0a86\u0a84\3\2\2\2\u0a86")
        buf.write("\u0a85\3\2\2\2\u0a87\u0a93\3\2\2\2\u0a88\u0a89\7\u0234")
        buf.write("\2\2\u0a89\u0a8c\7\u0089\2\2\u0a8a\u0a8d\5\u0246\u0124")
        buf.write("\2\u0a8b\u0a8d\7\26\2\2\u0a8c\u0a8a\3\2\2\2\u0a8c\u0a8b")
        buf.write("\3\2\2\2\u0a8d\u0a93\3\2\2\2\u0a8e\u0a8f\7\u0232\2\2\u0a8f")
        buf.write("\u0a93\7\u0217\2\2\u0a90\u0a91\7\u0284\2\2\u0a91\u0a93")
        buf.write("\7\u0217\2\2\u0a92\u0924\3\2\2\2\u0a92\u092e\3\2\2\2\u0a92")
        buf.write("\u0939\3\2\2\2\u0a92\u094b\3\2\2\2\u0a92\u095a\3\2\2\2")
        buf.write("\u0a92\u0970\3\2\2\2\u0a92\u0988\3\2\2\2\u0a92\u0997\3")
        buf.write("\2\2\2\u0a92\u09a6\3\2\2\2\u0a92\u09b2\3\2\2\2\u0a92\u09b7")
        buf.write("\3\2\2\2\u0a92\u09c3\3\2\2\2\u0a92\u09cf\3\2\2\2\u0a92")
        buf.write("\u09d5\3\2\2\2\u0a92\u09da\3\2\2\2\u0a92\u09e5\3\2\2\2")
        buf.write("\u0a92\u09ed\3\2\2\2\u0a92\u09f0\3\2\2\2\u0a92\u09f3\3")
        buf.write("\2\2\2\u0a92\u09f9\3\2\2\2\u0a92\u09fe\3\2\2\2\u0a92\u0a01")
        buf.write("\3\2\2\2\u0a92\u0a05\3\2\2\2\u0a92\u0a07\3\2\2\2\u0a92")
        buf.write("\u0a09\3\2\2\2\u0a92\u0a11\3\2\2\2\u0a92\u0a14\3\2\2\2")
        buf.write("\u0a92\u0a1e\3\2\2\2\u0a92\u0a29\3\2\2\2\u0a92\u0a2b\3")
        buf.write("\2\2\2\u0a92\u0a2d\3\2\2\2\u0a92\u0a2e\3\2\2\2\u0a92\u0a30")
        buf.write("\3\2\2\2\u0a92\u0a3d\3\2\2\2\u0a92\u0a40\3\2\2\2\u0a92")
        buf.write("\u0a47\3\2\2\2\u0a92\u0a4e\3\2\2\2\u0a92\u0a54\3\2\2\2")
        buf.write("\u0a92\u0a57\3\2\2\2\u0a92\u0a66\3\2\2\2\u0a92\u0a70\3")
        buf.write("\2\2\2\u0a92\u0a76\3\2\2\2\u0a92\u0a7c\3\2\2\2\u0a92\u0a82")
        buf.write("\3\2\2\2\u0a92\u0a88\3\2\2\2\u0a92\u0a8e\3\2\2\2\u0a92")
        buf.write("\u0a90\3\2\2\2\u0a93\u0089\3\2\2\2\u0a94\u0a95\7A\2\2")
        buf.write("\u0a95\u0a97\t\2\2\2\u0a96\u0a98\5\u025c\u012f\2\u0a97")
        buf.write("\u0a96\3\2\2\2\u0a97\u0a98\3\2\2\2\u0a98\u0a99\3\2\2\2")
        buf.write("\u0a99\u0a9a\5\u0226\u0114\2\u0a9a\u008b\3\2\2\2\u0a9b")
        buf.write("\u0a9c\7A\2\2\u0a9c\u0a9e\7\u019d\2\2\u0a9d\u0a9f\5\u025c")
        buf.write("\u012f\2\u0a9e\u0a9d\3\2\2\2\u0a9e\u0a9f\3\2\2\2\u0a9f")
        buf.write("\u0aa0\3\2\2\2\u0aa0\u0aa1\5\u020c\u0107\2\u0aa1\u008d")
        buf.write("\3\2\2\2\u0aa2\u0aa3\7A\2\2\u0aa3\u0aa5\7]\2\2\u0aa4\u0aa6")
        buf.write("\t\3\2\2\u0aa5\u0aa4\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6")
        buf.write("\u0aa7\3\2\2\2\u0aa7\u0aa8\5\u0226\u0114\2\u0aa8\u0aa9")
        buf.write("\7\177\2\2\u0aa9\u0ab6\5\u020e\u0108\2\u0aaa\u0aac\7\u0152")
        buf.write("\2\2\u0aab\u0aad\7\u0443\2\2\u0aac\u0aab\3\2\2\2\u0aac")
        buf.write("\u0aad\3\2\2\2\u0aad\u0aae\3\2\2\2\u0aae\u0ab5\t\5\2\2")
        buf.write("\u0aaf\u0ab1\7r\2\2\u0ab0\u0ab2\7\u0443\2\2\u0ab1\u0ab0")
        buf.write("\3\2\2\2\u0ab1\u0ab2\3\2\2\2\u0ab2\u0ab3\3\2\2\2\u0ab3")
        buf.write("\u0ab5\t\6\2\2\u0ab4\u0aaa\3\2\2\2\u0ab4\u0aaf\3\2\2\2")
        buf.write("\u0ab5\u0ab8\3\2\2\2\u0ab6\u0ab4\3\2\2\2\u0ab6\u0ab7\3")
        buf.write("\2\2\2\u0ab7\u008f\3\2\2\2\u0ab8\u0ab6\3\2\2\2\u0ab9\u0aba")
        buf.write("\7A\2\2\u0aba\u0abb\7\u01d5\2\2\u0abb\u0abc\7V\2\2\u0abc")
        buf.write("\u0abd\5\u0226\u0114\2\u0abd\u0abe\7\u0197\2\2\u0abe\u0abf")
        buf.write("\7\u0443\2\2\u0abf\u0ac0\5\u021c\u010f\2\u0ac0\u0091\3")
        buf.write("\2\2\2\u0ac1\u0ac2\7A\2\2\u0ac2\u0ac4\7\u008b\2\2\u0ac3")
        buf.write("\u0ac5\5\u025c\u012f\2\u0ac4\u0ac3\3\2\2\2\u0ac4\u0ac5")
        buf.write("\3\2\2\2\u0ac5\u0ac6\3\2\2\2\u0ac6\u0ac7\5\u020c\u0107")
        buf.write("\2\u0ac7\u0093\3\2\2\2\u0ac8\u0ac9\7A\2\2\u0ac9\u0acb")
        buf.write("\7\u01b2\2\2\u0aca\u0acc\5\u025c\u012f\2\u0acb\u0aca\3")
        buf.write("\2\2\2\u0acb\u0acc\3\2\2\2\u0acc\u0acd\3\2\2\2\u0acd\u0ace")
        buf.write("\5\u020c\u0107\2\u0ace\u0095\3\2\2\2\u0acf\u0ad0\7A\2")
        buf.write("\2\u0ad0\u0ad2\7\u024c\2\2\u0ad1\u0ad3\5\u025c\u012f\2")
        buf.write("\u0ad2\u0ad1\3\2\2\2\u0ad2\u0ad3\3\2\2\2\u0ad3\u0ad4\3")
        buf.write("\2\2\2\u0ad4\u0ad5\5\u0226\u0114\2\u0ad5\u0097\3\2\2\2")
        buf.write("\u0ad6\u0ad8\7A\2\2\u0ad7\u0ad9\7\u0275\2\2\u0ad8\u0ad7")
        buf.write("\3\2\2\2\u0ad8\u0ad9\3\2\2\2\u0ad9\u0ada\3\2\2\2\u0ada")
        buf.write("\u0adc\7\u00b1\2\2\u0adb\u0add\5\u025c\u012f\2\u0adc\u0adb")
        buf.write("\3\2\2\2\u0adc\u0add\3\2\2\2\u0add\u0ade\3\2\2\2\u0ade")
        buf.write("\u0ae0\5\u0248\u0125\2\u0adf\u0ae1\t$\2\2\u0ae0\u0adf")
        buf.write("\3\2\2\2\u0ae0\u0ae1\3\2\2\2\u0ae1\u0099\3\2\2\2\u0ae2")
        buf.write("\u0ae3\7A\2\2\u0ae3\u0ae4\7\u0273\2\2\u0ae4\u0aea\5\u0226")
        buf.write("\u0114\2\u0ae5\u0ae7\7\u0197\2\2\u0ae6\u0ae8\7\u0443\2")
        buf.write("\2\u0ae7\u0ae6\3\2\2\2\u0ae7\u0ae8\3\2\2\2\u0ae8\u0ae9")
        buf.write("\3\2\2\2\u0ae9\u0aeb\5\u021c\u010f\2\u0aea\u0ae5\3\2\2")
        buf.write("\2\u0aea\u0aeb\3\2\2\2\u0aeb\u009b\3\2\2\2\u0aec\u0aed")
        buf.write("\7A\2\2\u0aed\u0aef\7\u00b6\2\2\u0aee\u0af0\5\u025c\u012f")
        buf.write("\2\u0aef\u0aee\3\2\2\2\u0aef\u0af0\3\2\2\2\u0af0\u0af1")
        buf.write("\3\2\2\2\u0af1\u0af2\5\u020c\u0107\2\u0af2\u009d\3\2\2")
        buf.write("\2\u0af3\u0af4\7A\2\2\u0af4\u0af6\7\u028b\2\2\u0af5\u0af7")
        buf.write("\5\u025c\u012f\2\u0af6\u0af5\3\2\2\2\u0af6\u0af7\3\2\2")
        buf.write("\2\u0af7\u0af8\3\2\2\2\u0af8\u0afd\5\u020c\u0107\2\u0af9")
        buf.write("\u0afa\7\u044e\2\2\u0afa\u0afc\5\u020c\u0107\2\u0afb\u0af9")
        buf.write("\3\2\2\2\u0afc\u0aff\3\2\2\2\u0afd\u0afb\3\2\2\2\u0afd")
        buf.write("\u0afe\3\2\2\2\u0afe\u0b01\3\2\2\2\u0aff\u0afd\3\2\2\2")
        buf.write("\u0b00\u0b02\t$\2\2\u0b01\u0b00\3\2\2\2\u0b01\u0b02\3")
        buf.write("\2\2\2\u0b02\u009f\3\2\2\2\u0b03\u0b04\7\u0093\2\2\u0b04")
        buf.write("\u0b05\7\u00b1\2\2\u0b05\u0b0a\5\u00a2R\2\u0b06\u0b07")
        buf.write("\7\u044e\2\2\u0b07\u0b09\5\u00a2R\2\u0b08\u0b06\3\2\2")
        buf.write("\2\u0b09\u0b0c\3\2\2\2\u0b0a\u0b08\3\2\2\2\u0b0a\u0b0b")
        buf.write("\3\2\2\2\u0b0b\u00a1\3\2\2\2\u0b0c\u0b0a\3\2\2\2\u0b0d")
        buf.write("\u0b0e\5\u020e\u0108\2\u0b0e\u0b0f\7\u00b4\2\2\u0b0f\u0b10")
        buf.write("\5\u020e\u0108\2\u0b10\u00a3\3\2\2\2\u0b11\u0b13\7\u027c")
        buf.write("\2\2\u0b12\u0b14\7\u00b1\2\2\u0b13\u0b12\3\2\2\2\u0b13")
        buf.write("\u0b14\3\2\2\2\u0b14\u0b15\3\2\2\2\u0b15\u0b16\5\u020e")
        buf.write("\u0108\2\u0b16\u00a5\3\2\2\2\u0b17\u0b18\7#\2\2\u0b18")
        buf.write("\u0b20\5\u020c\u0107\2\u0b19\u0b1c\5\u0262\u0132\2\u0b1a")
        buf.write("\u0b1d\5\u0250\u0129\2\u0b1b\u0b1d\5\u024c\u0127\2\u0b1c")
        buf.write("\u0b1a\3\2\2\2\u0b1c\u0b1b\3\2\2\2\u0b1c\u0b1d\3\2\2\2")
        buf.write("\u0b1d\u0b1e\3\2\2\2\u0b1e\u0b1f\5\u0264\u0133\2\u0b1f")
        buf.write("\u0b21\3\2\2\2\u0b20\u0b19\3\2\2\2\u0b20\u0b21\3\2\2\2")
        buf.write("\u0b21\u00a7\3\2\2\2\u0b22\u0b25\5\u00c2b\2\u0b23\u0b25")
        buf.write("\5\u00c4c\2\u0b24\u0b22\3\2\2\2\u0b24\u0b23\3\2\2\2\u0b25")
        buf.write("\u00a9\3\2\2\2\u0b26\u0b27\7\u018f\2\2\u0b27\u0b28\5\u024c")
        buf.write("\u0127\2\u0b28\u00ab\3\2\2\2\u0b29\u0b2e\5\u00c6d\2\u0b2a")
        buf.write("\u0b2e\5\u00c8e\2\u0b2b\u0b2e\5\u00caf\2\u0b2c\u0b2e\5")
        buf.write("\u00ccg\2\u0b2d\u0b29\3\2\2\2\u0b2d\u0b2a\3\2\2\2\u0b2d")
        buf.write("\u0b2b\3\2\2\2\u0b2d\u0b2c\3\2\2\2\u0b2e\u00ad\3\2\2\2")
        buf.write("\u0b2f\u0b31\7a\2\2\u0b30\u0b32\t%\2\2\u0b31\u0b30\3\2")
        buf.write("\2\2\u0b31\u0b32\3\2\2\2\u0b32\u0b34\3\2\2\2\u0b33\u0b35")
        buf.write("\7[\2\2\u0b34\u0b33\3\2\2\2\u0b34\u0b35\3\2\2\2\u0b35")
        buf.write("\u0b37\3\2\2\2\u0b36\u0b38\7c\2\2\u0b37\u0b36\3\2\2\2")
        buf.write("\u0b37\u0b38\3\2\2\2\u0b38\u0b39\3\2\2\2\u0b39\u0b41\5")
        buf.write("\u020e\u0108\2\u0b3a\u0b3b\7\u0089\2\2\u0b3b\u0b3d\5\u0262")
        buf.write("\u0132\2\u0b3c\u0b3e\5\u0246\u0124\2\u0b3d\u0b3c\3\2\2")
        buf.write("\2\u0b3d\u0b3e\3\2\2\2\u0b3e\u0b3f\3\2\2\2\u0b3f\u0b40")
        buf.write("\5\u0264\u0133\2\u0b40\u0b42\3\2\2\2\u0b41\u0b3a\3\2\2")
        buf.write("\2\u0b41\u0b42\3\2\2\2\u0b42\u0b53\3\2\2\2\u0b43\u0b44")
        buf.write("\5\u0262\u0132\2\u0b44\u0b45\5\u0246\u0124\2\u0b45\u0b46")
        buf.write("\5\u0264\u0133\2\u0b46\u0b48\3\2\2\2\u0b47\u0b43\3\2\2")
        buf.write("\2\u0b47\u0b48\3\2\2\2\u0b48\u0b49\3\2\2\2\u0b49\u0b54")
        buf.write("\5\u00ba^\2\u0b4a\u0b4b\7\u00a1\2\2\u0b4b\u0b50\5\u00bc")
        buf.write("_\2\u0b4c\u0b4d\7\u044e\2\2\u0b4d\u0b4f\5\u00bc_\2\u0b4e")
        buf.write("\u0b4c\3\2\2\2\u0b4f\u0b52\3\2\2\2\u0b50\u0b4e\3\2\2\2")
        buf.write("\u0b50\u0b51\3\2\2\2\u0b51\u0b54\3\2\2\2\u0b52\u0b50\3")
        buf.write("\2\2\2\u0b53\u0b47\3\2\2\2\u0b53\u0b4a\3\2\2\2\u0b54\u0b61")
        buf.write("\3\2\2\2\u0b55\u0b56\7\177\2\2\u0b56\u0b57\7\u0191\2\2")
        buf.write("\u0b57\u0b58\7g\2\2\u0b58\u0b59\7\u00bd\2\2\u0b59\u0b5e")
        buf.write("\5\u00bc_\2\u0b5a\u0b5b\7\u044e\2\2\u0b5b\u0b5d\5\u00bc")
        buf.write("_\2\u0b5c\u0b5a\3\2\2\2\u0b5d\u0b60\3\2\2\2\u0b5e\u0b5c")
        buf.write("\3\2\2\2\u0b5e\u0b5f\3\2\2\2\u0b5f\u0b62\3\2\2\2\u0b60")
        buf.write("\u0b5e\3\2\2\2\u0b61\u0b55\3\2\2\2\u0b61\u0b62\3\2\2\2")
        buf.write("\u0b62\u00af\3\2\2\2\u0b63\u0b64\7q\2\2\u0b64\u0b66\7")
        buf.write("\u0184\2\2\u0b65\u0b67\t&\2\2\u0b66\u0b65\3\2\2\2\u0b66")
        buf.write("\u0b67\3\2\2\2\u0b67\u0b69\3\2\2\2\u0b68\u0b6a\7\u01d4")
        buf.write("\2\2\u0b69\u0b68\3\2\2\2\u0b69\u0b6a\3\2\2\2\u0b6a\u0b6b")
        buf.write("\3\2\2\2\u0b6b\u0b6c\7^\2\2\u0b6c\u0b6e\7\u045b\2\2\u0b6d")
        buf.write("\u0b6f\t\b\2\2\u0b6e\u0b6d\3\2\2\2\u0b6e\u0b6f\3\2\2\2")
        buf.write("\u0b6f\u0b70\3\2\2\2\u0b70\u0b71\7c\2\2\u0b71\u0b72\7")
        buf.write("\u00b1\2\2\u0b72\u0b78\5\u020e\u0108\2\u0b73\u0b74\7\u0089")
        buf.write("\2\2\u0b74\u0b75\5\u0262\u0132\2\u0b75\u0b76\5\u0246\u0124")
        buf.write("\2\u0b76\u0b77\5\u0264\u0133\2\u0b77\u0b79\3\2\2\2\u0b78")
        buf.write("\u0b73\3\2\2\2\u0b78\u0b79\3\2\2\2\u0b79\u0b7d\3\2\2\2")
        buf.write("\u0b7a\u0b7b\7(\2\2\u0b7b\u0b7c\7\u00a1\2\2\u0b7c\u0b7e")
        buf.write("\5\u0218\u010d\2\u0b7d\u0b7a\3\2\2\2\u0b7d\u0b7e\3\2\2")
        buf.write("\2\u0b7e\u0b85\3\2\2\2\u0b7f\u0b81\t\'\2\2\u0b80\u0b82")
        buf.write("\5\u0104\u0083\2\u0b81\u0b80\3\2\2\2\u0b82\u0b83\3\2\2")
        buf.write("\2\u0b83\u0b81\3\2\2\2\u0b83\u0b84\3\2\2\2\u0b84\u0b86")
        buf.write("\3\2\2\2\u0b85\u0b7f\3\2\2\2\u0b85\u0b86\3\2\2\2\u0b86")
        buf.write("\u0b8d\3\2\2\2\u0b87\u0b89\7p\2\2\u0b88\u0b8a\5\u0106")
        buf.write("\u0084\2\u0b89\u0b88\3\2\2\2\u0b8a\u0b8b\3\2\2\2\u0b8b")
        buf.write("\u0b89\3\2\2\2\u0b8b\u0b8c\3\2\2\2\u0b8c\u0b8e\3\2\2\2")
        buf.write("\u0b8d\u0b87\3\2\2\2\u0b8d\u0b8e\3\2\2\2\u0b8e\u0b93\3")
        buf.write("\2\2\2\u0b8f\u0b90\7[\2\2\u0b90\u0b91\5\u022c\u0117\2")
        buf.write("\u0b91\u0b92\t(\2\2\u0b92\u0b94\3\2\2\2\u0b93\u0b8f\3")
        buf.write("\2\2\2\u0b93\u0b94\3\2\2\2\u0b94\u0ba0\3\2\2\2\u0b95\u0b96")
        buf.write("\5\u0262\u0132\2\u0b96\u0b9b\5\u00be`\2\u0b97\u0b98\7")
        buf.write("\u044e\2\2\u0b98\u0b9a\5\u00be`\2\u0b99\u0b97\3\2\2\2")
        buf.write("\u0b9a\u0b9d\3\2\2\2\u0b9b\u0b99\3\2\2\2\u0b9b\u0b9c\3")
        buf.write("\2\2\2\u0b9c\u0b9e\3\2\2\2\u0b9d\u0b9b\3\2\2\2\u0b9e\u0b9f")
        buf.write("\5\u0264\u0133\2\u0b9f\u0ba1\3\2\2\2\u0ba0\u0b95\3\2\2")
        buf.write("\2\u0ba0\u0ba1\3\2\2\2\u0ba1\u0bab\3\2\2\2\u0ba2\u0ba3")
        buf.write("\7\u00a1\2\2\u0ba3\u0ba8\5\u00bc_\2\u0ba4\u0ba5\7\u044e")
        buf.write("\2\2\u0ba5\u0ba7\5\u00bc_\2\u0ba6\u0ba4\3\2\2\2\u0ba7")
        buf.write("\u0baa\3\2\2\2\u0ba8\u0ba6\3\2\2\2\u0ba8\u0ba9\3\2\2\2")
        buf.write("\u0ba9\u0bac\3\2\2\2\u0baa\u0ba8\3\2\2\2\u0bab\u0ba2\3")
        buf.write("\2\2\2\u0bab\u0bac\3\2\2\2\u0bac\u00b1\3\2\2\2\u0bad\u0bae")
        buf.write("\7q\2\2\u0bae\u0bb0\7\u0296\2\2\u0baf\u0bb1\t&\2\2\u0bb0")
        buf.write("\u0baf\3\2\2\2\u0bb0\u0bb1\3\2\2\2\u0bb1\u0bb3\3\2\2\2")
        buf.write("\u0bb2\u0bb4\7\u01d4\2\2\u0bb3\u0bb2\3\2\2\2\u0bb3\u0bb4")
        buf.write("\3\2\2\2\u0bb4\u0bb5\3\2\2\2\u0bb5\u0bb6\7^\2\2\u0bb6")
        buf.write("\u0bb8\7\u045b\2\2\u0bb7\u0bb9\t\b\2\2\u0bb8\u0bb7\3\2")
        buf.write("\2\2\u0bb8\u0bb9\3\2\2\2\u0bb9\u0bba\3\2\2\2\u0bba\u0bbb")
        buf.write("\7c\2\2\u0bbb\u0bbc\7\u00b1\2\2\u0bbc\u0bc0\5\u020e\u0108")
        buf.write("\2\u0bbd\u0bbe\7(\2\2\u0bbe\u0bbf\7\u00a1\2\2\u0bbf\u0bc1")
        buf.write("\5\u0218\u010d\2\u0bc0\u0bbd\3\2\2\2\u0bc0\u0bc1\3\2\2")
        buf.write("\2\u0bc1\u0bc8\3\2\2\2\u0bc2\u0bc3\7\u0247\2\2\u0bc3\u0bc4")
        buf.write("\7\u01bc\2\2\u0bc4\u0bc5\7\"\2\2\u0bc5\u0bc6\7\u0445\2")
        buf.write("\2\u0bc6\u0bc7\7\u045b\2\2\u0bc7\u0bc9\7\u0444\2\2\u0bc8")
        buf.write("\u0bc2\3\2\2\2\u0bc8\u0bc9\3\2\2\2\u0bc9\u0bce\3\2\2\2")
        buf.write("\u0bca\u0bcb\7[\2\2\u0bcb\u0bcc\5\u022c\u0117\2\u0bcc")
        buf.write("\u0bcd\t(\2\2\u0bcd\u0bcf\3\2\2\2\u0bce\u0bca\3\2\2\2")
        buf.write("\u0bce\u0bcf\3\2\2\2\u0bcf\u0bdb\3\2\2\2\u0bd0\u0bd1\5")
        buf.write("\u0262\u0132\2\u0bd1\u0bd6\5\u00be`\2\u0bd2\u0bd3\7\u044e")
        buf.write("\2\2\u0bd3\u0bd5\5\u00be`\2\u0bd4\u0bd2\3\2\2\2\u0bd5")
        buf.write("\u0bd8\3\2\2\2\u0bd6\u0bd4\3\2\2\2\u0bd6\u0bd7\3\2\2\2")
        buf.write("\u0bd7\u0bd9\3\2\2\2\u0bd8\u0bd6\3\2\2\2\u0bd9\u0bda\5")
        buf.write("\u0264\u0133\2\u0bda\u0bdc\3\2\2\2\u0bdb\u0bd0\3\2\2\2")
        buf.write("\u0bdb\u0bdc\3\2\2\2\u0bdc\u0be6\3\2\2\2\u0bdd\u0bde\7")
        buf.write("\u00a1\2\2\u0bde\u0be3\5\u00bc_\2\u0bdf\u0be0\7\u044e")
        buf.write("\2\2\u0be0\u0be2\5\u00bc_\2\u0be1\u0bdf\3\2\2\2\u0be2")
        buf.write("\u0be5\3\2\2\2\u0be3\u0be1\3\2\2\2\u0be3\u0be4\3\2\2\2")
        buf.write("\u0be4\u0be7\3\2\2\2\u0be5\u0be3\3\2\2\2\u0be6\u0bdd\3")
        buf.write("\2\2\2\u0be6\u0be7\3\2\2\2\u0be7\u00b3\3\2\2\2\u0be8\u0bea")
        buf.write("\7\u0095\2\2\u0be9\u0beb\t)\2\2\u0bea\u0be9\3\2\2\2\u0bea")
        buf.write("\u0beb\3\2\2\2\u0beb\u0bed\3\2\2\2\u0bec\u0bee\7c\2\2")
        buf.write("\u0bed\u0bec\3\2\2\2\u0bed\u0bee\3\2\2\2\u0bee\u0bef\3")
        buf.write("\2\2\2\u0bef\u0bf5\5\u020e\u0108\2\u0bf0\u0bf1\7\u0089")
        buf.write("\2\2\u0bf1\u0bf2\5\u0262\u0132\2\u0bf2\u0bf3\5\u0246\u0124")
        buf.write("\2\u0bf3\u0bf4\5\u0264\u0133\2\u0bf4\u0bf6\3\2\2\2\u0bf5")
        buf.write("\u0bf0\3\2\2\2\u0bf5\u0bf6\3\2\2\2\u0bf6\u0c07\3\2\2\2")
        buf.write("\u0bf7\u0bf8\5\u0262\u0132\2\u0bf8\u0bf9\5\u0246\u0124")
        buf.write("\2\u0bf9\u0bfa\5\u0264\u0133\2\u0bfa\u0bfc\3\2\2\2\u0bfb")
        buf.write("\u0bf7\3\2\2\2\u0bfb\u0bfc\3\2\2\2\u0bfc\u0bfd\3\2\2\2")
        buf.write("\u0bfd\u0c08\5\u00ba^\2\u0bfe\u0bff\7\u00a1\2\2\u0bff")
        buf.write("\u0c04\5\u00bc_\2\u0c00\u0c01\7\u044e\2\2\u0c01\u0c03")
        buf.write("\5\u00bc_\2\u0c02\u0c00\3\2\2\2\u0c03\u0c06\3\2\2\2\u0c04")
        buf.write("\u0c02\3\2\2\2\u0c04\u0c05\3\2\2\2\u0c05\u0c08\3\2\2\2")
        buf.write("\u0c06\u0c04\3\2\2\2\u0c07\u0bfb\3\2\2\2\u0c07\u0bfe\3")
        buf.write("\2\2\2\u0c08\u00b5\3\2\2\2\u0c09\u0c0b\5\u00e8u\2\u0c0a")
        buf.write("\u0c0c\5\u00c0a\2\u0c0b\u0c0a\3\2\2\2\u0c0b\u0c0c\3\2")
        buf.write("\2\2\u0c0c\u0c41\3\2\2\2\u0c0d\u0c0f\5\u00e4s\2\u0c0e")
        buf.write("\u0c10\5\u00c0a\2\u0c0f\u0c0e\3\2\2\2\u0c0f\u0c10\3\2")
        buf.write("\2\2\u0c10\u0c41\3\2\2\2\u0c11\u0c13\5\u00f4{\2\u0c12")
        buf.write("\u0c14\5\u00f8}\2\u0c13\u0c12\3\2\2\2\u0c14\u0c15\3\2")
        buf.write("\2\2\u0c15\u0c13\3\2\2\2\u0c15\u0c16\3\2\2\2\u0c16\u0c1f")
        buf.write("\3\2\2\2\u0c17\u0c19\7\u00b9\2\2\u0c18\u0c1a\t*\2\2\u0c19")
        buf.write("\u0c18\3\2\2\2\u0c19\u0c1a\3\2\2\2\u0c1a\u0c1d\3\2\2\2")
        buf.write("\u0c1b\u0c1e\5\u00e8u\2\u0c1c\u0c1e\5\u00e4s\2\u0c1d\u0c1b")
        buf.write("\3\2\2\2\u0c1d\u0c1c\3\2\2\2\u0c1e\u0c20\3\2\2\2\u0c1f")
        buf.write("\u0c17\3\2\2\2\u0c1f\u0c20\3\2\2\2\u0c20\u0c22\3\2\2\2")
        buf.write("\u0c21\u0c23\5\u00d2j\2\u0c22\u0c21\3\2\2\2\u0c22\u0c23")
        buf.write("\3\2\2\2\u0c23\u0c25\3\2\2\2\u0c24\u0c26\5\u0114\u008b")
        buf.write("\2\u0c25\u0c24\3\2\2\2\u0c25\u0c26\3\2\2\2\u0c26\u0c28")
        buf.write("\3\2\2\2\u0c27\u0c29\5\u00c0a\2\u0c28\u0c27\3\2\2\2\u0c28")
        buf.write("\u0c29\3\2\2\2\u0c29\u0c41\3\2\2\2\u0c2a\u0c2c\5\u00e6")
        buf.write("t\2\u0c2b\u0c2d\5\u00f6|\2\u0c2c\u0c2b\3\2\2\2\u0c2d\u0c2e")
        buf.write("\3\2\2\2\u0c2e\u0c2c\3\2\2\2\u0c2e\u0c2f\3\2\2\2\u0c2f")
        buf.write("\u0c35\3\2\2\2\u0c30\u0c32\7\u00b9\2\2\u0c31\u0c33\t*")
        buf.write("\2\2\u0c32\u0c31\3\2\2\2\u0c32\u0c33\3\2\2\2\u0c33\u0c34")
        buf.write("\3\2\2\2\u0c34\u0c36\5\u00e4s\2\u0c35\u0c30\3\2\2\2\u0c35")
        buf.write("\u0c36\3\2\2\2\u0c36\u0c38\3\2\2\2\u0c37\u0c39\5\u00d2")
        buf.write("j\2\u0c38\u0c37\3\2\2\2\u0c38\u0c39\3\2\2\2\u0c39\u0c3b")
        buf.write("\3\2\2\2\u0c3a\u0c3c\5\u0114\u008b\2\u0c3b\u0c3a\3\2\2")
        buf.write("\2\u0c3b\u0c3c\3\2\2\2\u0c3c\u0c3e\3\2\2\2\u0c3d\u0c3f")
        buf.write("\5\u00c0a\2\u0c3e\u0c3d\3\2\2\2\u0c3e\u0c3f\3\2\2\2\u0c3f")
        buf.write("\u0c41\3\2\2\2\u0c40\u0c09\3\2\2\2\u0c40\u0c0d\3\2\2\2")
        buf.write("\u0c40\u0c11\3\2\2\2\u0c40\u0c2a\3\2\2\2\u0c41\u00b7\3")
        buf.write("\2\2\2\u0c42\u0c45\5\u00ceh\2\u0c43\u0c45\5\u00d0i\2\u0c44")
        buf.write("\u0c42\3\2\2\2\u0c44\u0c43\3\2\2\2\u0c45\u00b9\3\2\2\2")
        buf.write("\u0c46\u0c5a\5\u00b6\\\2\u0c47\u0c48\t+\2\2\u0c48\u0c4a")
        buf.write("\5\u0262\u0132\2\u0c49\u0c4b\5\u024e\u0128\2\u0c4a\u0c49")
        buf.write("\3\2\2\2\u0c4a\u0c4b\3\2\2\2\u0c4b\u0c4c\3\2\2\2\u0c4c")
        buf.write("\u0c56\5\u0264\u0133\2\u0c4d\u0c4e\7\u044e\2\2\u0c4e\u0c50")
        buf.write("\5\u0262\u0132\2\u0c4f\u0c51\5\u024e\u0128\2\u0c50\u0c4f")
        buf.write("\3\2\2\2\u0c50\u0c51\3\2\2\2\u0c51\u0c52\3\2\2\2\u0c52")
        buf.write("\u0c53\5\u0264\u0133\2\u0c53\u0c55\3\2\2\2\u0c54\u0c4d")
        buf.write("\3\2\2\2\u0c55\u0c58\3\2\2\2\u0c56\u0c54\3\2\2\2\u0c56")
        buf.write("\u0c57\3\2\2\2\u0c57\u0c5a\3\2\2\2\u0c58\u0c56\3\2\2\2")
        buf.write("\u0c59\u0c46\3\2\2\2\u0c59\u0c47\3\2\2\2\u0c5a\u00bb\3")
        buf.write("\2\2\2\u0c5b\u0c5c\5\u0210\u0109\2\u0c5c\u0c5f\7\u0443")
        buf.write("\2\2\u0c5d\u0c60\5\u028c\u0147\2\u0c5e\u0c60\78\2\2\u0c5f")
        buf.write("\u0c5d\3\2\2\2\u0c5f\u0c5e\3\2\2\2\u0c60\u00bd\3\2\2\2")
        buf.write("\u0c61\u0c64\5\u0226\u0114\2\u0c62\u0c64\7\u0467\2\2\u0c63")
        buf.write("\u0c61\3\2\2\2\u0c63\u0c62\3\2\2\2\u0c64\u00bf\3\2\2\2")
        buf.write("\u0c65\u0c66\7N\2\2\u0c66\u0c6c\7\u00bd\2\2\u0c67\u0c68")
        buf.write("\7r\2\2\u0c68\u0c69\7\\\2\2\u0c69\u0c6a\7\u024e\2\2\u0c6a")
        buf.write("\u0c6c\7\u01f9\2\2\u0c6b\u0c65\3\2\2\2\u0c6b\u0c67\3\2")
        buf.write("\2\2\u0c6c\u00c1\3\2\2\2\u0c6d\u0c6f\7:\2\2\u0c6e\u0c70")
        buf.write("\7t\2\2\u0c6f\u0c6e\3\2\2\2\u0c6f\u0c70\3\2\2\2\u0c70")
        buf.write("\u0c72\3\2\2\2\u0c71\u0c73\7\u0229\2\2\u0c72\u0c71\3\2")
        buf.write("\2\2\u0c72\u0c73\3\2\2\2\u0c73\u0c75\3\2\2\2\u0c74\u0c76")
        buf.write("\7[\2\2\u0c75\u0c74\3\2\2\2\u0c75\u0c76\3\2\2\2\u0c76")
        buf.write("\u0c77\3\2\2\2\u0c77\u0c78\7Q\2\2\u0c78\u0c7e\5\u020e")
        buf.write("\u0108\2\u0c79\u0c7a\7\u0089\2\2\u0c7a\u0c7b\5\u0262\u0132")
        buf.write("\2\u0c7b\u0c7c\5\u0246\u0124\2\u0c7c\u0c7d\5\u0264\u0133")
        buf.write("\2\u0c7d\u0c7f\3\2\2\2\u0c7e\u0c79\3\2\2\2\u0c7e\u0c7f")
        buf.write("\3\2\2\2\u0c7f\u0c82\3\2\2\2\u0c80\u0c81\7\u00c3\2\2\u0c81")
        buf.write("\u0c83\5\u028c\u0147\2\u0c82\u0c80\3\2\2\2\u0c82\u0c83")
        buf.write("\3\2\2\2\u0c83\u0c85\3\2\2\2\u0c84\u0c86\5\u00d2j\2\u0c85")
        buf.write("\u0c84\3\2\2\2\u0c85\u0c86\3\2\2\2\u0c86\u0c89\3\2\2\2")
        buf.write("\u0c87\u0c88\7n\2\2\u0c88\u0c8a\5\u0116\u008c\2\u0c89")
        buf.write("\u0c87\3\2\2\2\u0c89\u0c8a\3\2\2\2\u0c8a\u00c3\3\2\2\2")
        buf.write("\u0c8b\u0c8d\7:\2\2\u0c8c\u0c8e\7t\2\2\u0c8d\u0c8c\3\2")
        buf.write("\2\2\u0c8d\u0c8e\3\2\2\2\u0c8e\u0c90\3\2\2\2\u0c8f\u0c91")
        buf.write("\7\u0229\2\2\u0c90\u0c8f\3\2\2\2\u0c90\u0c91\3\2\2\2\u0c91")
        buf.write("\u0c93\3\2\2\2\u0c92\u0c94\7[\2\2\u0c93\u0c92\3\2\2\2")
        buf.write("\u0c93\u0c94\3\2\2\2\u0c94\u0cbc\3\2\2\2\u0c95\u0c98\5")
        buf.write("\u020e\u0108\2\u0c96\u0c97\7\u044b\2\2\u0c97\u0c99\7\u043c")
        buf.write("\2\2\u0c98\u0c96\3\2\2\2\u0c98\u0c99\3\2\2\2\u0c99\u0ca2")
        buf.write("\3\2\2\2\u0c9a\u0c9b\7\u044e\2\2\u0c9b\u0c9e\5\u020e\u0108")
        buf.write("\2\u0c9c\u0c9d\7\u044b\2\2\u0c9d\u0c9f\7\u043c\2\2\u0c9e")
        buf.write("\u0c9c\3\2\2\2\u0c9e\u0c9f\3\2\2\2\u0c9f\u0ca1\3\2\2\2")
        buf.write("\u0ca0\u0c9a\3\2\2\2\u0ca1\u0ca4\3\2\2\2\u0ca2\u0ca0\3")
        buf.write("\2\2\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u0ca5\3\2\2\2\u0ca4\u0ca2")
        buf.write("\3\2\2\2\u0ca5\u0ca6\7Q\2\2\u0ca6\u0ca7\5\u00d6l\2\u0ca7")
        buf.write("\u0cbd\3\2\2\2\u0ca8\u0ca9\7Q\2\2\u0ca9\u0cac\5\u020e")
        buf.write("\u0108\2\u0caa\u0cab\7\u044b\2\2\u0cab\u0cad\7\u043c\2")
        buf.write("\2\u0cac\u0caa\3\2\2\2\u0cac\u0cad\3\2\2\2\u0cad\u0cb6")
        buf.write("\3\2\2\2\u0cae\u0caf\7\u044e\2\2\u0caf\u0cb2\5\u020e\u0108")
        buf.write("\2\u0cb0\u0cb1\7\u044b\2\2\u0cb1\u0cb3\7\u043c\2\2\u0cb2")
        buf.write("\u0cb0\3\2\2\2\u0cb2\u0cb3\3\2\2\2\u0cb3\u0cb5\3\2\2\2")
        buf.write("\u0cb4\u0cae\3\2\2\2\u0cb5\u0cb8\3\2\2\2\u0cb6\u0cb4\3")
        buf.write("\2\2\2\u0cb6\u0cb7\3\2\2\2\u0cb7\u0cb9\3\2\2\2\u0cb8\u0cb6")
        buf.write("\3\2\2\2\u0cb9\u0cba\7\u00c0\2\2\u0cba\u0cbb\5\u00d6l")
        buf.write("\2\u0cbb\u0cbd\3\2\2\2\u0cbc\u0c95\3\2\2\2\u0cbc\u0ca8")
        buf.write("\3\2\2\2\u0cbd\u0cc0\3\2\2\2\u0cbe\u0cbf\7\u00c3\2\2\u0cbf")
        buf.write("\u0cc1\5\u028c\u0147\2\u0cc0\u0cbe\3\2\2\2\u0cc0\u0cc1")
        buf.write("\3\2\2\2\u0cc1\u00c5\3\2\2\2\u0cc2\u0cc3\7\u01b7\2\2\u0cc3")
        buf.write("\u0cc4\5\u020e\u0108\2\u0cc4\u0cc9\7\u020f\2\2\u0cc5\u0cc7")
        buf.write("\7\34\2\2\u0cc6\u0cc5\3\2\2\2\u0cc6\u0cc7\3\2\2\2\u0cc7")
        buf.write("\u0cc8\3\2\2\2\u0cc8\u0cca\5\u0226\u0114\2\u0cc9\u0cc6")
        buf.write("\3\2\2\2\u0cc9\u0cca\3\2\2\2\u0cca\u00c7\3\2\2\2\u0ccb")
        buf.write("\u0ccc\7\u01b7\2\2\u0ccc\u0ccd\5\u020e\u0108\2\u0ccd\u0cce")
        buf.write("\7\u008e\2\2\u0cce\u0cd5\5\u0226\u0114\2\u0ccf\u0cd0\5")
        buf.write("\u0294\u014b\2\u0cd0\u0cd1\5\u0262\u0132\2\u0cd1\u0cd2")
        buf.write("\5\u0250\u0129\2\u0cd2\u0cd3\5\u0264\u0133\2\u0cd3\u0cd6")
        buf.write("\3\2\2\2\u0cd4\u0cd6\t,\2\2\u0cd5\u0ccf\3\2\2\2\u0cd5")
        buf.write("\u0cd4\3\2\2\2\u0cd6\u0cd9\3\2\2\2\u0cd7\u0cd8\7\u00c3")
        buf.write("\2\2\u0cd8\u0cda\5\u028c\u0147\2\u0cd9\u0cd7\3\2\2\2\u0cd9")
        buf.write("\u0cda\3\2\2\2\u0cda\u0cdd\3\2\2\2\u0cdb\u0cdc\7n\2\2")
        buf.write("\u0cdc\u0cde\5\u0116\u008c\2\u0cdd\u0cdb\3\2\2\2\u0cdd")
        buf.write("\u0cde\3\2\2\2\u0cde\u00c9\3\2\2\2\u0cdf\u0ce0\7\u01b7")
        buf.write("\2\2\u0ce0\u0ce1\5\u020e\u0108\2\u0ce1\u0ce2\7\u008e\2")
        buf.write("\2\u0ce2\u0ce5\t-\2\2\u0ce3\u0ce4\7\u00c3\2\2\u0ce4\u0ce6")
        buf.write("\5\u028c\u0147\2\u0ce5\u0ce3\3\2\2\2\u0ce5\u0ce6\3\2\2")
        buf.write("\2\u0ce6\u0ce9\3\2\2\2\u0ce7\u0ce8\7n\2\2\u0ce8\u0cea")
        buf.write("\5\u0116\u008c\2\u0ce9\u0ce7\3\2\2\2\u0ce9\u0cea\3\2\2")
        buf.write("\2\u0cea\u00cb\3\2\2\2\u0ceb\u0cec\7\u01b7\2\2\u0cec\u0ced")
        buf.write("\5\u020e\u0108\2\u0ced\u0cee\7\u016b\2\2\u0cee\u00cd\3")
        buf.write("\2\2\2\u0cef\u0cf1\7\u00bd\2\2\u0cf0\u0cf2\7t\2\2\u0cf1")
        buf.write("\u0cf0\3\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u0cf4\3\2\2\2")
        buf.write("\u0cf3\u0cf5\7[\2\2\u0cf4\u0cf3\3\2\2\2\u0cf4\u0cf5\3")
        buf.write("\2\2\2\u0cf5\u0cf6\3\2\2\2\u0cf6\u0cfb\5\u020e\u0108\2")
        buf.write("\u0cf7\u0cf9\7\34\2\2\u0cf8\u0cf7\3\2\2\2\u0cf8\u0cf9")
        buf.write("\3\2\2\2\u0cf9\u0cfa\3\2\2\2\u0cfa\u0cfc\5\u0226\u0114")
        buf.write("\2\u0cfb\u0cf8\3\2\2\2\u0cfb\u0cfc\3\2\2\2\u0cfc\u0cfd")
        buf.write("\3\2\2\2\u0cfd\u0cfe\7\u00a1\2\2\u0cfe\u0d03\5\u00bc_")
        buf.write("\2\u0cff\u0d00\7\u044e\2\2\u0d00\u0d02\5\u00bc_\2\u0d01")
        buf.write("\u0cff\3\2\2\2\u0d02\u0d05\3\2\2\2\u0d03\u0d01\3\2\2\2")
        buf.write("\u0d03\u0d04\3\2\2\2\u0d04\u0d08\3\2\2\2\u0d05\u0d03\3")
        buf.write("\2\2\2\u0d06\u0d07\7\u00c3\2\2\u0d07\u0d09\5\u028c\u0147")
        buf.write("\2\u0d08\u0d06\3\2\2\2\u0d08\u0d09\3\2\2\2\u0d09\u0d0b")
        buf.write("\3\2\2\2\u0d0a\u0d0c\5\u00d2j\2\u0d0b\u0d0a\3\2\2\2\u0d0b")
        buf.write("\u0d0c\3\2\2\2\u0d0c\u0d0e\3\2\2\2\u0d0d\u0d0f\5\u0114")
        buf.write("\u008b\2\u0d0e\u0d0d\3\2\2\2\u0d0e\u0d0f\3\2\2\2\u0d0f")
        buf.write("\u00cf\3\2\2\2\u0d10\u0d12\7\u00bd\2\2\u0d11\u0d13\7t")
        buf.write("\2\2\u0d12\u0d11\3\2\2\2\u0d12\u0d13\3\2\2\2\u0d13\u0d15")
        buf.write("\3\2\2\2\u0d14\u0d16\7[\2\2\u0d15\u0d14\3\2\2\2\u0d15")
        buf.write("\u0d16\3\2\2\2\u0d16\u0d17\3\2\2\2\u0d17\u0d18\5\u00d6")
        buf.write("l\2\u0d18\u0d19\7\u00a1\2\2\u0d19\u0d1e\5\u00bc_\2\u0d1a")
        buf.write("\u0d1b\7\u044e\2\2\u0d1b\u0d1d\5\u00bc_\2\u0d1c\u0d1a")
        buf.write("\3\2\2\2\u0d1d\u0d20\3\2\2\2\u0d1e\u0d1c\3\2\2\2\u0d1e")
        buf.write("\u0d1f\3\2\2\2\u0d1f\u0d23\3\2\2\2\u0d20\u0d1e\3\2\2\2")
        buf.write("\u0d21\u0d22\7\u00c3\2\2\u0d22\u0d24\5\u028c\u0147\2\u0d23")
        buf.write("\u0d21\3\2\2\2\u0d23\u0d24\3\2\2\2\u0d24\u00d1\3\2\2\2")
        buf.write("\u0d25\u0d26\7\u0084\2\2\u0d26\u0d27\7\"\2\2\u0d27\u0d2c")
        buf.write("\5\u00d4k\2\u0d28\u0d29\7\u044e\2\2\u0d29\u0d2b\5\u00d4")
        buf.write("k\2\u0d2a\u0d28\3\2\2\2\u0d2b\u0d2e\3\2\2\2\u0d2c\u0d2a")
        buf.write("\3\2\2\2\u0d2c\u0d2d\3\2\2\2\u0d2d\u00d3\3\2\2\2\u0d2e")
        buf.write("\u0d2c\3\2\2\2\u0d2f\u0d31\5\u028c\u0147\2\u0d30\u0d32")
        buf.write("\t.\2\2\u0d31\u0d30\3\2\2\2\u0d31\u0d32\3\2\2\2\u0d32")
        buf.write("\u00d5\3\2\2\2\u0d33\u0d38\5\u00d8m\2\u0d34\u0d35\7\u044e")
        buf.write("\2\2\u0d35\u0d37\5\u00d8m\2\u0d36\u0d34\3\2\2\2\u0d37")
        buf.write("\u0d3a\3\2\2\2\u0d38\u0d36\3\2\2\2\u0d38\u0d39\3\2\2\2")
        buf.write("\u0d39\u00d7\3\2\2\2\u0d3a\u0d38\3\2\2\2\u0d3b\u0d3f\5")
        buf.write("\u00dan\2\u0d3c\u0d3e\5\u00e0q\2\u0d3d\u0d3c\3\2\2\2\u0d3e")
        buf.write("\u0d41\3\2\2\2\u0d3f\u0d3d\3\2\2\2\u0d3f\u0d40\3\2\2\2")
        buf.write("\u0d40\u0d4d\3\2\2\2\u0d41\u0d3f\3\2\2\2\u0d42\u0d43\5")
        buf.write("\u0262\u0132\2\u0d43\u0d47\5\u00dan\2\u0d44\u0d46\5\u00e0")
        buf.write("q\2\u0d45\u0d44\3\2\2\2\u0d46\u0d49\3\2\2\2\u0d47\u0d45")
        buf.write("\3\2\2\2\u0d47\u0d48\3\2\2\2\u0d48\u0d4a\3\2\2\2\u0d49")
        buf.write("\u0d47\3\2\2\2\u0d4a\u0d4b\5\u0264\u0133\2\u0d4b\u0d4d")
        buf.write("\3\2\2\2\u0d4c\u0d3b\3\2\2\2\u0d4c\u0d42\3\2\2\2\u0d4d")
        buf.write("\u00d9\3\2\2\2\u0d4e\u0d54\5\u020e\u0108\2\u0d4f\u0d50")
        buf.write("\7\u0089\2\2\u0d50\u0d51\5\u0262\u0132\2\u0d51\u0d52\5")
        buf.write("\u0246\u0124\2\u0d52\u0d53\5\u0264\u0133\2\u0d53\u0d55")
        buf.write("\3\2\2\2\u0d54\u0d4f\3\2\2\2\u0d54\u0d55\3\2\2\2\u0d55")
        buf.write("\u0d5a\3\2\2\2\u0d56\u0d58\7\34\2\2\u0d57\u0d56\3\2\2")
        buf.write("\2\u0d57\u0d58\3\2\2\2\u0d58\u0d59\3\2\2\2\u0d59\u0d5b")
        buf.write("\5\u0226\u0114\2\u0d5a\u0d57\3\2\2\2\u0d5a\u0d5b\3\2\2")
        buf.write("\2\u0d5b\u0d64\3\2\2\2\u0d5c\u0d61\5\u00dco\2\u0d5d\u0d5e")
        buf.write("\7\u044e\2\2\u0d5e\u0d60\5\u00dco\2\u0d5f\u0d5d\3\2\2")
        buf.write("\2\u0d60\u0d63\3\2\2\2\u0d61\u0d5f\3\2\2\2\u0d61\u0d62")
        buf.write("\3\2\2\2\u0d62\u0d65\3\2\2\2\u0d63\u0d61\3\2\2\2\u0d64")
        buf.write("\u0d5c\3\2\2\2\u0d64\u0d65\3\2\2\2\u0d65\u0d77\3\2\2\2")
        buf.write("\u0d66\u0d6c\5\u00b6\\\2\u0d67\u0d68\5\u0262\u0132\2\u0d68")
        buf.write("\u0d69\5\u00b6\\\2\u0d69\u0d6a\5\u0264\u0133\2\u0d6a\u0d6c")
        buf.write("\3\2\2\2\u0d6b\u0d66\3\2\2\2\u0d6b\u0d67\3\2\2\2\u0d6c")
        buf.write("\u0d6e\3\2\2\2\u0d6d\u0d6f\7\34\2\2\u0d6e\u0d6d\3\2\2")
        buf.write("\2\u0d6e\u0d6f\3\2\2\2\u0d6f\u0d70\3\2\2\2\u0d70\u0d71")
        buf.write("\5\u0226\u0114\2\u0d71\u0d77\3\2\2\2\u0d72\u0d73\5\u0262")
        buf.write("\u0132\2\u0d73\u0d74\5\u00d6l\2\u0d74\u0d75\5\u0264\u0133")
        buf.write("\2\u0d75\u0d77\3\2\2\2\u0d76\u0d4e\3\2\2\2\u0d76\u0d6b")
        buf.write("\3\2\2\2\u0d76\u0d72\3\2\2\2\u0d77\u00db\3\2\2\2\u0d78")
        buf.write("\u0d79\t/\2\2\u0d79\u0d7c\t\24\2\2\u0d7a\u0d7b\7N\2\2")
        buf.write("\u0d7b\u0d7d\5\u00dep\2\u0d7c\u0d7a\3\2\2\2\u0d7c\u0d7d")
        buf.write("\3\2\2\2\u0d7d\u0d7e\3\2\2\2\u0d7e\u0d7f\5\u0262\u0132")
        buf.write("\2\u0d7f\u0d80\5\u0246\u0124\2\u0d80\u0d81\5\u0264\u0133")
        buf.write("\2\u0d81\u00dd\3\2\2\2\u0d82\u0d88\7f\2\2\u0d83\u0d84")
        buf.write("\7\u0084\2\2\u0d84\u0d88\7\"\2\2\u0d85\u0d86\7V\2\2\u0d86")
        buf.write("\u0d88\7\"\2\2\u0d87\u0d82\3\2\2\2\u0d87\u0d83\3\2\2\2")
        buf.write("\u0d87\u0d85\3\2\2\2\u0d88\u00df\3\2\2\2\u0d89\u0d8b\t")
        buf.write("\60\2\2\u0d8a\u0d89\3\2\2\2\u0d8a\u0d8b\3\2\2\2\u0d8b")
        buf.write("\u0d8c\3\2\2\2\u0d8c\u0d8d\5\u00e2r\2\u0d8d\u0d95\5\u00da")
        buf.write("n\2\u0d8e\u0d8f\7\177\2\2\u0d8f\u0d96\5\u028c\u0147\2")
        buf.write("\u0d90\u0d91\7\u00c0\2\2\u0d91\u0d92\5\u0262\u0132\2\u0d92")
        buf.write("\u0d93\5\u0246\u0124\2\u0d93\u0d94\5\u0264\u0133\2\u0d94")
        buf.write("\u0d96\3\2\2\2\u0d95\u0d8e\3\2\2\2\u0d95\u0d90\3\2\2\2")
        buf.write("\u0d95\u0d96\3\2\2\2\u0d96\u0db7\3\2\2\2\u0d97\u0d98\7")
        buf.write("\u00b0\2\2\u0d98\u0d9b\5\u00dan\2\u0d99\u0d9a\7\177\2")
        buf.write("\2\u0d9a\u0d9c\5\u028c\u0147\2\u0d9b\u0d99\3\2\2\2\u0d9b")
        buf.write("\u0d9c\3\2\2\2\u0d9c\u0db7\3\2\2\2\u0d9d\u0d9f\t\61\2")
        buf.write("\2\u0d9e\u0da0\7\u0087\2\2\u0d9f\u0d9e\3\2\2\2\u0d9f\u0da0")
        buf.write("\3\2\2\2\u0da0\u0da1\3\2\2\2\u0da1\u0da2\5\u00e2r\2\u0da2")
        buf.write("\u0daa\5\u00dan\2\u0da3\u0da4\7\177\2\2\u0da4\u0dab\5")
        buf.write("\u028c\u0147\2\u0da5\u0da6\7\u00c0\2\2\u0da6\u0da7\5\u0262")
        buf.write("\u0132\2\u0da7\u0da8\5\u0246\u0124\2\u0da8\u0da9\5\u0264")
        buf.write("\u0133\2\u0da9\u0dab\3\2\2\2\u0daa\u0da3\3\2\2\2\u0daa")
        buf.write("\u0da5\3\2\2\2\u0dab\u0db7\3\2\2\2\u0dac\u0db1\7z\2\2")
        buf.write("\u0dad\u0daf\t\61\2\2\u0dae\u0db0\7\u0087\2\2\u0daf\u0dae")
        buf.write("\3\2\2\2\u0daf\u0db0\3\2\2\2\u0db0\u0db2\3\2\2\2\u0db1")
        buf.write("\u0dad\3\2\2\2\u0db1\u0db2\3\2\2\2\u0db2\u0db3\3\2\2\2")
        buf.write("\u0db3\u0db4\5\u00e2r\2\u0db4\u0db5\5\u00dan\2\u0db5\u0db7")
        buf.write("\3\2\2\2\u0db6\u0d8a\3\2\2\2\u0db6\u0d97\3\2\2\2\u0db6")
        buf.write("\u0d9d\3\2\2\2\u0db6\u0dac\3\2\2\2\u0db7\u00e1\3\2\2\2")
        buf.write("\u0db8\u0db9\t\62\2\2\u0db9\u00e3\3\2\2\2\u0dba\u0dbb")
        buf.write("\5\u0262\u0132\2\u0dbb\u0dbc\5\u00e8u\2\u0dbc\u0dbd\5")
        buf.write("\u0264\u0133\2\u0dbd\u0dc3\3\2\2\2\u0dbe\u0dbf\5\u0262")
        buf.write("\u0132\2\u0dbf\u0dc0\5\u00e4s\2\u0dc0\u0dc1\5\u0264\u0133")
        buf.write("\2\u0dc1\u0dc3\3\2\2\2\u0dc2\u0dba\3\2\2\2\u0dc2\u0dbe")
        buf.write("\3\2\2\2\u0dc3\u00e5\3\2\2\2\u0dc4\u0dc5\5\u0262\u0132")
        buf.write("\2\u0dc5\u0dc6\5\u00f4{\2\u0dc6\u0dc7\5\u0264\u0133\2")
        buf.write("\u0dc7\u0dcd\3\2\2\2\u0dc8\u0dc9\5\u0262\u0132\2\u0dc9")
        buf.write("\u0dca\5\u00e6t\2\u0dca\u0dcb\5\u0264\u0133\2\u0dcb\u0dcd")
        buf.write("\3\2\2\2\u0dcc\u0dc4\3\2\2\2\u0dcc\u0dc8\3\2\2\2\u0dcd")
        buf.write("\u00e7\3\2\2\2\u0dce\u0dcf\5\u00ecw\2\u0dcf\u0dd0\5\u00ee")
        buf.write("x\2\u0dd0\u0dd1\5\u00eav\2\u0dd1\u0de7\3\2\2\2\u0dd2\u0dd3")
        buf.write("\5\u00ecw\2\u0dd3\u0dd4\5\u00eav\2\u0dd4\u0dd5\5\u00ee")
        buf.write("x\2\u0dd5\u0de7\3\2\2\2\u0dd6\u0dd7\5\u00eex\2\u0dd7\u0dd8")
        buf.write("\5\u00ecw\2\u0dd8\u0dd9\5\u00eav\2\u0dd9\u0de7\3\2\2\2")
        buf.write("\u0dda\u0ddb\5\u00eex\2\u0ddb\u0ddc\5\u00eav\2\u0ddc\u0ddd")
        buf.write("\5\u00ecw\2\u0ddd\u0de7\3\2\2\2\u0dde\u0ddf\5\u00eav\2")
        buf.write("\u0ddf\u0de0\5\u00eex\2\u0de0\u0de1\5\u00ecw\2\u0de1\u0de7")
        buf.write("\3\2\2\2\u0de2\u0de3\5\u00eav\2\u0de3\u0de4\5\u00ecw\2")
        buf.write("\u0de4\u0de5\5\u00eex\2\u0de5\u0de7\3\2\2\2\u0de6\u0dce")
        buf.write("\3\2\2\2\u0de6\u0dd2\3\2\2\2\u0de6\u0dd6\3\2\2\2\u0de6")
        buf.write("\u0dda\3\2\2\2\u0de6\u0dde\3\2\2\2\u0de6\u0de2\3\2\2\2")
        buf.write("\u0de7\u00e9\3\2\2\2\u0de8\u0dea\5\u010c\u0087\2\u0de9")
        buf.write("\u0de8\3\2\2\2\u0de9\u0dea\3\2\2\2\u0dea\u0dec\3\2\2\2")
        buf.write("\u0deb\u0ded\5\u010e\u0088\2\u0dec\u0deb\3\2\2\2\u0dec")
        buf.write("\u0ded\3\2\2\2\u0ded\u0def\3\2\2\2\u0dee\u0df0\5\u0110")
        buf.write("\u0089\2\u0def\u0dee\3\2\2\2\u0def\u0df0\3\2\2\2\u0df0")
        buf.write("\u0df2\3\2\2\2\u0df1\u0df3\5\u00d2j\2\u0df2\u0df1\3\2")
        buf.write("\2\2\u0df2\u0df3\3\2\2\2\u0df3\u0df5\3\2\2\2\u0df4\u0df6")
        buf.write("\5\u0114\u008b\2\u0df5\u0df4\3\2\2\2\u0df5\u0df6\3\2\2")
        buf.write("\2\u0df6\u0e0a\3\2\2\2\u0df7\u0df9\5\u010c\u0087\2\u0df8")
        buf.write("\u0df7\3\2\2\2\u0df8\u0df9\3\2\2\2\u0df9\u0dfb\3\2\2\2")
        buf.write("\u0dfa\u0dfc\5\u010e\u0088\2\u0dfb\u0dfa\3\2\2\2\u0dfb")
        buf.write("\u0dfc\3\2\2\2\u0dfc\u0dfe\3\2\2\2\u0dfd\u0dff\5\u0110")
        buf.write("\u0089\2\u0dfe\u0dfd\3\2\2\2\u0dfe\u0dff\3\2\2\2\u0dff")
        buf.write("\u0e01\3\2\2\2\u0e00\u0e02\5\u00d2j\2\u0e01\u0e00\3\2")
        buf.write("\2\2\u0e01\u0e02\3\2\2\2\u0e02\u0e04\3\2\2\2\u0e03\u0e05")
        buf.write("\5\u0114\u008b\2\u0e04\u0e03\3\2\2\2\u0e04\u0e05\3\2\2")
        buf.write("\2\u0e05\u0e07\3\2\2\2\u0e06\u0e08\5\u0102\u0082\2\u0e07")
        buf.write("\u0e06\3\2\2\2\u0e07\u0e08\3\2\2\2\u0e08\u0e0a\3\2\2\2")
        buf.write("\u0e09\u0de9\3\2\2\2\u0e09\u0df8\3\2\2\2\u0e0a\u00eb\3")
        buf.write("\2\2\2\u0e0b\u0e0f\5\u00f0y\2\u0e0c\u0e0e\5\u00fa~\2\u0e0d")
        buf.write("\u0e0c\3\2\2\2\u0e0e\u0e11\3\2\2\2\u0e0f\u0e0d\3\2\2\2")
        buf.write("\u0e0f\u0e10\3\2\2\2\u0e10\u0e12\3\2\2\2\u0e11\u0e0f\3")
        buf.write("\2\2\2\u0e12\u0e14\5\u00fc\177\2\u0e13\u0e15\5\u0102\u0082")
        buf.write("\2\u0e14\u0e13\3\2\2\2\u0e14\u0e15\3\2\2\2\u0e15\u0e20")
        buf.write("\3\2\2\2\u0e16\u0e1a\5\u00f0y\2\u0e17\u0e19\5\u00fa~\2")
        buf.write("\u0e18\u0e17\3\2\2\2\u0e19\u0e1c\3\2\2\2\u0e1a\u0e18\3")
        buf.write("\2\2\2\u0e1a\u0e1b\3\2\2\2\u0e1b\u0e1d\3\2\2\2\u0e1c\u0e1a")
        buf.write("\3\2\2\2\u0e1d\u0e1e\5\u00fc\177\2\u0e1e\u0e20\3\2\2\2")
        buf.write("\u0e1f\u0e0b\3\2\2\2\u0e1f\u0e16\3\2\2\2\u0e20\u00ed\3")
        buf.write("\2\2\2\u0e21\u0e23\5\u0108\u0085\2\u0e22\u0e21\3\2\2\2")
        buf.write("\u0e22\u0e23\3\2\2\2\u0e23\u00ef\3\2\2\2\u0e24\u0e25\5")
        buf.write("\u00f2z\2\u0e25\u00f1\3\2\2\2\u0e26\u0e27\t\63\2\2\u0e27")
        buf.write("\u00f3\3\2\2\2\u0e28\u0e2c\7\u00a0\2\2\u0e29\u0e2b\5\u00fa")
        buf.write("~\2\u0e2a\u0e29\3\2\2\2\u0e2b\u0e2e\3\2\2\2\u0e2c\u0e2a")
        buf.write("\3\2\2\2\u0e2c\u0e2d\3\2\2\2\u0e2d\u0e2f\3\2\2\2\u0e2e")
        buf.write("\u0e2c\3\2\2\2\u0e2f\u0e31\5\u00fc\177\2\u0e30\u0e32\5")
        buf.write("\u0108\u0085\2\u0e31\u0e30\3\2\2\2\u0e31\u0e32\3\2\2\2")
        buf.write("\u0e32\u0e34\3\2\2\2\u0e33\u0e35\5\u010c\u0087\2\u0e34")
        buf.write("\u0e33\3\2\2\2\u0e34\u0e35\3\2\2\2\u0e35\u0e37\3\2\2\2")
        buf.write("\u0e36\u0e38\5\u010e\u0088\2\u0e37\u0e36\3\2\2\2\u0e37")
        buf.write("\u0e38\3\2\2\2\u0e38\u0e3a\3\2\2\2\u0e39\u0e3b\5\u0110")
        buf.write("\u0089\2\u0e3a\u0e39\3\2\2\2\u0e3a\u0e3b\3\2\2\2\u0e3b")
        buf.write("\u0e3d\3\2\2\2\u0e3c\u0e3e\5\u00d2j\2\u0e3d\u0e3c\3\2")
        buf.write("\2\2\u0e3d\u0e3e\3\2\2\2\u0e3e\u0e40\3\2\2\2\u0e3f\u0e41")
        buf.write("\5\u0114\u008b\2\u0e40\u0e3f\3\2\2\2\u0e40\u0e41\3\2\2")
        buf.write("\2\u0e41\u00f5\3\2\2\2\u0e42\u0e44\7\u00b9\2\2\u0e43\u0e45")
        buf.write("\t*\2\2\u0e44\u0e43\3\2\2\2\u0e44\u0e45\3\2\2\2\u0e45")
        buf.write("\u0e46\3\2\2\2\u0e46\u0e47\5\u00e6t\2\u0e47\u00f7\3\2")
        buf.write("\2\2\u0e48\u0e4a\7\u00b9\2\2\u0e49\u0e4b\t*\2\2\u0e4a")
        buf.write("\u0e49\3\2\2\2\u0e4a\u0e4b\3\2\2\2\u0e4b\u0e4e\3\2\2\2")
        buf.write("\u0e4c\u0e4f\5\u00f4{\2\u0e4d\u0e4f\5\u00e6t\2\u0e4e\u0e4c")
        buf.write("\3\2\2\2\u0e4e\u0e4d\3\2\2\2\u0e4f\u00f9\3\2\2\2\u0e50")
        buf.write("\u0e59\t\64\2\2\u0e51\u0e59\7X\2\2\u0e52\u0e59\7\u00b0")
        buf.write("\2\2\u0e53\u0e59\7\u00ac\2\2\u0e54\u0e59\7\u00aa\2\2\u0e55")
        buf.write("\u0e59\7\u025d\2\2\u0e56\u0e59\t\65\2\2\u0e57\u0e59\7")
        buf.write("\u00ab\2\2\u0e58\u0e50\3\2\2\2\u0e58\u0e51\3\2\2\2\u0e58")
        buf.write("\u0e52\3\2\2\2\u0e58\u0e53\3\2\2\2\u0e58\u0e54\3\2\2\2")
        buf.write("\u0e58\u0e55\3\2\2\2\u0e58\u0e56\3\2\2\2\u0e58\u0e57\3")
        buf.write("\2\2\2\u0e59\u00fb\3\2\2\2\u0e5a\u0e5d\7\u043c\2\2\u0e5b")
        buf.write("\u0e5d\5\u0100\u0081\2\u0e5c\u0e5a\3\2\2\2\u0e5c\u0e5b")
        buf.write("\3\2\2\2\u0e5d\u0e63\3\2\2\2\u0e5e\u0e5f\5\u00fe\u0080")
        buf.write("\2\u0e5f\u0e60\5\u0100\u0081\2\u0e60\u0e62\3\2\2\2\u0e61")
        buf.write("\u0e5e\3\2\2\2\u0e62\u0e65\3\2\2\2\u0e63\u0e61\3\2\2\2")
        buf.write("\u0e63\u0e64\3\2\2\2\u0e64\u00fd\3\2\2\2\u0e65\u0e63\3")
        buf.write("\2\2\2\u0e66\u0e67\t\66\2\2\u0e67\u00ff\3\2\2\2\u0e68")
        buf.write("\u0e69\5\u020c\u0107\2\u0e69\u0e6a\7\u044b\2\2\u0e6a\u0e6b")
        buf.write("\7\u043c\2\2\u0e6b\u0e86\3\2\2\2\u0e6c\u0e71\5\u0210\u0109")
        buf.write("\2\u0e6d\u0e6f\7\34\2\2\u0e6e\u0e6d\3\2\2\2\u0e6e\u0e6f")
        buf.write("\3\2\2\2\u0e6f\u0e70\3\2\2\2\u0e70\u0e72\5\u0226\u0114")
        buf.write("\2\u0e71\u0e6e\3\2\2\2\u0e71\u0e72\3\2\2\2\u0e72\u0e86")
        buf.write("\3\2\2\2\u0e73\u0e78\5\u0260\u0131\2\u0e74\u0e76\7\34")
        buf.write("\2\2\u0e75\u0e74\3\2\2\2\u0e75\u0e76\3\2\2\2\u0e76\u0e77")
        buf.write("\3\2\2\2\u0e77\u0e79\5\u0226\u0114\2\u0e78\u0e75\3\2\2")
        buf.write("\2\u0e78\u0e79\3\2\2\2\u0e79\u0e86\3\2\2\2\u0e7a\u0e7b")
        buf.write("\7\u0467\2\2\u0e7b\u0e7d\7\u0433\2\2\u0e7c\u0e7a\3\2\2")
        buf.write("\2\u0e7c\u0e7d\3\2\2\2\u0e7d\u0e7e\3\2\2\2\u0e7e\u0e83")
        buf.write("\5\u028c\u0147\2\u0e7f\u0e81\7\34\2\2\u0e80\u0e7f\3\2")
        buf.write("\2\2\u0e80\u0e81\3\2\2\2\u0e81\u0e82\3\2\2\2\u0e82\u0e84")
        buf.write("\5\u0226\u0114\2\u0e83\u0e80\3\2\2\2\u0e83\u0e84\3\2\2")
        buf.write("\2\u0e84\u0e86\3\2\2\2\u0e85\u0e68\3\2\2\2\u0e85\u0e6c")
        buf.write("\3\2\2\2\u0e85\u0e73\3\2\2\2\u0e85\u0e7c\3\2\2\2\u0e86")
        buf.write("\u0101\3\2\2\2\u0e87\u0e88\7c\2\2\u0e88\u0e8d\5\u00be")
        buf.write("`\2\u0e89\u0e8a\7\u044e\2\2\u0e8a\u0e8c\5\u00be`\2\u0e8b")
        buf.write("\u0e89\3\2\2\2\u0e8c\u0e8f\3\2\2\2\u0e8d\u0e8b\3\2\2\2")
        buf.write("\u0e8d\u0e8e\3\2\2\2\u0e8e\u0eac\3\2\2\2\u0e8f\u0e8d\3")
        buf.write("\2\2\2\u0e90\u0e91\7c\2\2\u0e91\u0e92\7\u0190\2\2\u0e92")
        buf.write("\u0eac\7\u045b\2\2\u0e93\u0e94\7c\2\2\u0e94\u0e95\7\u0088")
        buf.write("\2\2\u0e95\u0e99\7\u045b\2\2\u0e96\u0e97\7(\2\2\u0e97")
        buf.write("\u0e98\7\u00a1\2\2\u0e98\u0e9a\5\u0218\u010d\2\u0e99\u0e96")
        buf.write("\3\2\2\2\u0e99\u0e9a\3\2\2\2\u0e9a\u0ea1\3\2\2\2\u0e9b")
        buf.write("\u0e9d\t\'\2\2\u0e9c\u0e9e\5\u0104\u0083\2\u0e9d\u0e9c")
        buf.write("\3\2\2\2\u0e9e\u0e9f\3\2\2\2\u0e9f\u0e9d\3\2\2\2\u0e9f")
        buf.write("\u0ea0\3\2\2\2\u0ea0\u0ea2\3\2\2\2\u0ea1\u0e9b\3\2\2\2")
        buf.write("\u0ea1\u0ea2\3\2\2\2\u0ea2\u0ea9\3\2\2\2\u0ea3\u0ea5\7")
        buf.write("p\2\2\u0ea4\u0ea6\5\u0106\u0084\2\u0ea5\u0ea4\3\2\2\2")
        buf.write("\u0ea6\u0ea7\3\2\2\2\u0ea7\u0ea5\3\2\2\2\u0ea7\u0ea8\3")
        buf.write("\2\2\2\u0ea8\u0eaa\3\2\2\2\u0ea9\u0ea3\3\2\2\2\u0ea9\u0eaa")
        buf.write("\3\2\2\2\u0eaa\u0eac\3\2\2\2\u0eab\u0e87\3\2\2\2\u0eab")
        buf.write("\u0e90\3\2\2\2\u0eab\u0e93\3\2\2\2\u0eac\u0103\3\2\2\2")
        buf.write("\u0ead\u0eae\7\u00b2\2\2\u0eae\u0eaf\7\"\2\2\u0eaf\u0eba")
        buf.write("\7\u045b\2\2\u0eb0\u0eb2\7\u0082\2\2\u0eb1\u0eb0\3\2\2")
        buf.write("\2\u0eb1\u0eb2\3\2\2\2\u0eb2\u0eb3\3\2\2\2\u0eb3\u0eb4")
        buf.write("\7F\2\2\u0eb4\u0eb5\7\"\2\2\u0eb5\u0eba\7\u045b\2\2\u0eb6")
        buf.write("\u0eb7\7G\2\2\u0eb7\u0eb8\7\"\2\2\u0eb8\u0eba\7\u045b")
        buf.write("\2\2\u0eb9\u0ead\3\2\2\2\u0eb9\u0eb1\3\2\2\2\u0eb9\u0eb6")
        buf.write("\3\2\2\2\u0eba\u0105\3\2\2\2\u0ebb\u0ebc\7\u00af\2\2\u0ebc")
        buf.write("\u0ebd\7\"\2\2\u0ebd\u0ec2\7\u045b\2\2\u0ebe\u0ebf\7\u00b2")
        buf.write("\2\2\u0ebf\u0ec0\7\"\2\2\u0ec0\u0ec2\7\u045b\2\2\u0ec1")
        buf.write("\u0ebb\3\2\2\2\u0ec1\u0ebe\3\2\2\2\u0ec2\u0107\3\2\2\2")
        buf.write("\u0ec3\u0ec4\5\u010a\u0086\2\u0ec4\u0ec5\5\u00d6l\2\u0ec5")
        buf.write("\u0ec7\3\2\2\2\u0ec6\u0ec3\3\2\2\2\u0ec6\u0ec7\3\2\2\2")
        buf.write("\u0ec7\u0eca\3\2\2\2\u0ec8\u0ec9\7\u00c3\2\2\u0ec9\u0ecb")
        buf.write("\5\u028c\u0147\2\u0eca\u0ec8\3\2\2\2\u0eca\u0ecb\3\2\2")
        buf.write("\2\u0ecb\u0109\3\2\2\2\u0ecc\u0ecd\t\67\2\2\u0ecd\u010b")
        buf.write("\3\2\2\2\u0ece\u0ecf\7V\2\2\u0ecf\u0ed0\7\"\2\2\u0ed0")
        buf.write("\u0ed5\5\u0112\u008a\2\u0ed1\u0ed2\7\u044e\2\2\u0ed2\u0ed4")
        buf.write("\5\u0112\u008a\2\u0ed3\u0ed1\3\2\2\2\u0ed4\u0ed7\3\2\2")
        buf.write("\2\u0ed5\u0ed3\3\2\2\2\u0ed5\u0ed6\3\2\2\2\u0ed6\u0eda")
        buf.write("\3\2\2\2\u0ed7\u0ed5\3\2\2\2\u0ed8\u0ed9\7\u00c5\2\2\u0ed9")
        buf.write("\u0edb\7\u0244\2\2\u0eda\u0ed8\3\2\2\2\u0eda\u0edb\3\2")
        buf.write("\2\2\u0edb\u010d\3\2\2\2\u0edc\u0edd\7W\2\2\u0edd\u0ede")
        buf.write("\5\u028c\u0147\2\u0ede\u010f\3\2\2\2\u0edf\u0ee0\7\u0290")
        buf.write("\2\2\u0ee0\u0ee1\5\u0276\u013c\2\u0ee1\u0ee2\7\34\2\2")
        buf.write("\u0ee2\u0ee3\5\u0262\u0132\2\u0ee3\u0ee4\5\u0274\u013b")
        buf.write("\2\u0ee4\u0eee\5\u0264\u0133\2\u0ee5\u0ee6\7\u044e\2\2")
        buf.write("\u0ee6\u0ee7\5\u0276\u013c\2\u0ee7\u0ee8\7\34\2\2\u0ee8")
        buf.write("\u0ee9\5\u0262\u0132\2\u0ee9\u0eea\5\u0274\u013b\2\u0eea")
        buf.write("\u0eeb\5\u0264\u0133\2\u0eeb\u0eed\3\2\2\2\u0eec\u0ee5")
        buf.write("\3\2\2\2\u0eed\u0ef0\3\2\2\2\u0eee\u0eec\3\2\2\2\u0eee")
        buf.write("\u0eef\3\2\2\2\u0eef\u0111\3\2\2\2\u0ef0\u0eee\3\2\2\2")
        buf.write("\u0ef1\u0ef3\5\u028c\u0147\2\u0ef2\u0ef4\t.\2\2\u0ef3")
        buf.write("\u0ef2\3\2\2\2\u0ef3\u0ef4\3\2\2\2\u0ef4\u0113\3\2\2\2")
        buf.write("\u0ef5\u0f00\7n\2\2\u0ef6\u0ef7\5\u0116\u008c\2\u0ef7")
        buf.write("\u0ef8\7\u044e\2\2\u0ef8\u0efa\3\2\2\2\u0ef9\u0ef6\3\2")
        buf.write("\2\2\u0ef9\u0efa\3\2\2\2\u0efa\u0efb\3\2\2\2\u0efb\u0f01")
        buf.write("\5\u0116\u008c\2\u0efc\u0efd\5\u0116\u008c\2\u0efd\u0efe")
        buf.write("\7\u0208\2\2\u0efe\u0eff\5\u0116\u008c\2\u0eff\u0f01\3")
        buf.write("\2\2\2\u0f00\u0ef9\3\2\2\2\u0f00\u0efc\3\2\2\2\u0f01\u0115")
        buf.write("\3\2\2\2\u0f02\u0f06\5\u022c\u0117\2\u0f03\u0f06\5\u0216")
        buf.write("\u010c\2\u0f04\u0f06\5\u0228\u0115\2\u0f05\u0f02\3\2\2")
        buf.write("\2\u0f05\u0f03\3\2\2\2\u0f05\u0f04\3\2\2\2\u0f06\u0117")
        buf.write("\3\2\2\2\u0f07\u0f08\7\u0261\2\2\u0f08\u0f11\7\u0279\2")
        buf.write("\2\u0f09\u0f0e\5\u012e\u0098\2\u0f0a\u0f0b\7\u044e\2\2")
        buf.write("\u0f0b\u0f0d\5\u012e\u0098\2\u0f0c\u0f0a\3\2\2\2\u0f0d")
        buf.write("\u0f10\3\2\2\2\u0f0e\u0f0c\3\2\2\2\u0f0e\u0f0f\3\2\2\2")
        buf.write("\u0f0f\u0f12\3\2\2\2\u0f10\u0f0e\3\2\2\2\u0f11\u0f09\3")
        buf.write("\2\2\2\u0f11\u0f12\3\2\2\2\u0f12\u0119\3\2\2\2\u0f13\u0f15")
        buf.write("\7\u015a\2\2\u0f14\u0f16\7\u0292\2\2\u0f15\u0f14\3\2\2")
        buf.write("\2\u0f15\u0f16\3\2\2\2\u0f16\u011b\3\2\2\2\u0f17\u0f19")
        buf.write("\7\u0172\2\2\u0f18\u0f1a\7\u0292\2\2\u0f19\u0f18\3\2\2")
        buf.write("\2\u0f19\u0f1a\3\2\2\2\u0f1a\u0f20\3\2\2\2\u0f1b\u0f1d")
        buf.write("\7\32\2\2\u0f1c\u0f1e\7\u0203\2\2\u0f1d\u0f1c\3\2\2\2")
        buf.write("\u0f1d\u0f1e\3\2\2\2\u0f1e\u0f1f\3\2\2\2\u0f1f\u0f21\7")
        buf.write("\u0163\2\2\u0f20\u0f1b\3\2\2\2\u0f20\u0f21\3\2\2\2\u0f21")
        buf.write("\u0f26\3\2\2\2\u0f22\u0f24\7\u0203\2\2\u0f23\u0f22\3\2")
        buf.write("\2\2\u0f23\u0f24\3\2\2\2\u0f24\u0f25\3\2\2\2\u0f25\u0f27")
        buf.write("\7\u0092\2\2\u0f26\u0f23\3\2\2\2\u0f26\u0f27\3\2\2\2\u0f27")
        buf.write("\u011d\3\2\2\2\u0f28\u0f2a\7\u0243\2\2\u0f29\u0f2b\7\u0292")
        buf.write("\2\2\u0f2a\u0f29\3\2\2\2\u0f2a\u0f2b\3\2\2\2\u0f2b\u0f31")
        buf.write("\3\2\2\2\u0f2c\u0f2e\7\32\2\2\u0f2d\u0f2f\7\u0203\2\2")
        buf.write("\u0f2e\u0f2d\3\2\2\2\u0f2e\u0f2f\3\2\2\2\u0f2f\u0f30\3")
        buf.write("\2\2\2\u0f30\u0f32\7\u0163\2\2\u0f31\u0f2c\3\2\2\2\u0f31")
        buf.write("\u0f32\3\2\2\2\u0f32\u0f37\3\2\2\2\u0f33\u0f35\7\u0203")
        buf.write("\2\2\u0f34\u0f33\3\2\2\2\u0f34\u0f35\3\2\2\2\u0f35\u0f36")
        buf.write("\3\2\2\2\u0f36\u0f38\7\u0092\2\2\u0f37\u0f34\3\2\2\2\u0f37")
        buf.write("\u0f38\3\2\2\2\u0f38\u011f\3\2\2\2\u0f39\u0f3a\7\u0249")
        buf.write("\2\2\u0f3a\u0f3b\5\u0226\u0114\2\u0f3b\u0121\3\2\2\2\u0f3c")
        buf.write("\u0f3e\7\u0243\2\2\u0f3d\u0f3f\7\u0292\2\2\u0f3e\u0f3d")
        buf.write("\3\2\2\2\u0f3e\u0f3f\3\2\2\2\u0f3f\u0f40\3\2\2\2\u0f40")
        buf.write("\u0f42\7\u00b4\2\2\u0f41\u0f43\7\u0249\2\2\u0f42\u0f41")
        buf.write("\3\2\2\2\u0f42\u0f43\3\2\2\2\u0f43\u0f44\3\2\2\2\u0f44")
        buf.write("\u0f45\5\u0226\u0114\2\u0f45\u0123\3\2\2\2\u0f46\u0f47")
        buf.write("\7\u0092\2\2\u0f47\u0f48\7\u0249\2\2\u0f48\u0f49\5\u0226")
        buf.write("\u0114\2\u0f49\u0125\3\2\2\2\u0f4a\u0f4b\7r\2\2\u0f4b")
        buf.write("\u0f4c\7\u02a4\2\2\u0f4c\u0f51\5\u0130\u0099\2\u0f4d\u0f4e")
        buf.write("\7\u044e\2\2\u0f4e\u0f50\5\u0130\u0099\2\u0f4f\u0f4d\3")
        buf.write("\2\2\2\u0f50\u0f53\3\2\2\2\u0f51\u0f4f\3\2\2\2\u0f51\u0f52")
        buf.write("\3\2\2\2\u0f52\u0127\3\2\2\2\u0f53\u0f51\3\2\2\2\u0f54")
        buf.write("\u0f55\7\u00bb\2\2\u0f55\u0f56\7\u02a4\2\2\u0f56\u0129")
        buf.write("\3\2\2\2\u0f57\u0f58\7\u00a1\2\2\u0f58\u0f59\7\u0156\2")
        buf.write("\2\u0f59\u0f5a\7\u0443\2\2\u0f5a\u0f5b\t\30\2\2\u0f5b")
        buf.write("\u012b\3\2\2\2\u0f5c\u0f5e\7\u00a1\2\2\u0f5d\u0f5f\t8")
        buf.write("\2\2\u0f5e\u0f5d\3\2\2\2\u0f5e\u0f5f\3\2\2\2\u0f5f\u0f60")
        buf.write("\3\2\2\2\u0f60\u0f61\7\u0279\2\2\u0f61\u0f66\5\u0134\u009b")
        buf.write("\2\u0f62\u0f63\7\u044e\2\2\u0f63\u0f65\5\u0134\u009b\2")
        buf.write("\u0f64\u0f62\3\2\2\2\u0f65\u0f68\3\2\2\2\u0f66\u0f64\3")
        buf.write("\2\2\2\u0f66\u0f67\3\2\2\2\u0f67\u012d\3\2\2\2\u0f68\u0f66")
        buf.write("\3\2\2\2\u0f69\u0f6a\7\u00c5\2\2\u0f6a\u0f6b\7\u017a\2")
        buf.write("\2\u0f6b\u0f71\7\u0254\2\2\u0f6c\u0f6d\7\u008e\2\2\u0f6d")
        buf.write("\u0f71\7\u00c6\2\2\u0f6e\u0f6f\7\u008e\2\2\u0f6f\u0f71")
        buf.write("\7\u020e\2\2\u0f70\u0f69\3\2\2\2\u0f70\u0f6c\3\2\2\2\u0f70")
        buf.write("\u0f6e\3\2\2\2\u0f71\u012f\3\2\2\2\u0f72\u0f77\5\u020e")
        buf.write("\u0108\2\u0f73\u0f75\7\34\2\2\u0f74\u0f73\3\2\2\2\u0f74")
        buf.write("\u0f75\3\2\2\2\u0f75\u0f76\3\2\2\2\u0f76\u0f78\5\u0226")
        buf.write("\u0114\2\u0f77\u0f74\3\2\2\2\u0f77\u0f78\3\2\2\2\u0f78")
        buf.write("\u0f79\3\2\2\2\u0f79\u0f7a\5\u0132\u009a\2\u0f7a\u0131")
        buf.write("\3\2\2\2\u0f7b\u0f7d\7\u008e\2\2\u0f7c\u0f7e\7\u01d4\2")
        buf.write("\2\u0f7d\u0f7c\3\2\2\2\u0f7d\u0f7e\3\2\2\2\u0f7e\u0f84")
        buf.write("\3\2\2\2\u0f7f\u0f81\7t\2\2\u0f80\u0f7f\3\2\2\2\u0f80")
        buf.write("\u0f81\3\2\2\2\u0f81\u0f82\3\2\2\2\u0f82\u0f84\7\u00c6")
        buf.write("\2\2\u0f83\u0f7b\3\2\2\2\u0f83\u0f80\3\2\2\2\u0f84\u0133")
        buf.write("\3\2\2\2\u0f85\u0f86\7\u01ca\2\2\u0f86\u0f87\7\u01d2\2")
        buf.write("\2\u0f87\u0f8d\5\u0136\u009c\2\u0f88\u0f89\7\u008e\2\2")
        buf.write("\u0f89\u0f8d\7\u00c6\2\2\u0f8a\u0f8b\7\u008e\2\2\u0f8b")
        buf.write("\u0f8d\7\u020e\2\2\u0f8c\u0f85\3\2\2\2\u0f8c\u0f88\3\2")
        buf.write("\2\2\u0f8c\u0f8a\3\2\2\2\u0f8d\u0135\3\2\2\2\u0f8e\u0f8f")
        buf.write("\7\u0302\2\2\u0f8f\u0f96\7\u008e\2\2\u0f90\u0f91\7\u008e")
        buf.write("\2\2\u0f91\u0f96\7\u0303\2\2\u0f92\u0f93\7\u008e\2\2\u0f93")
        buf.write("\u0f96\7\u0304\2\2\u0f94\u0f96\7\u0305\2\2\u0f95\u0f8e")
        buf.write("\3\2\2\2\u0f95\u0f90\3\2\2\2\u0f95\u0f92\3\2\2\2\u0f95")
        buf.write("\u0f94\3\2\2\2\u0f96\u0137\3\2\2\2\u0f97\u0f98\7\'\2\2")
        buf.write("\u0f98\u0f99\7\u01d7\2\2\u0f99\u0f9a\7\u00b4\2\2\u0f9a")
        buf.write("\u0f9f\5\u014a\u00a6\2\u0f9b\u0f9c\7\u044e\2\2\u0f9c\u0f9e")
        buf.write("\5\u014a\u00a6\2\u0f9d\u0f9b\3\2\2\2\u0f9e\u0fa1\3\2\2")
        buf.write("\2\u0f9f\u0f9d\3\2\2\2\u0f9f\u0fa0\3\2\2\2\u0fa0\u0fa3")
        buf.write("\3\2\2\2\u0fa1\u0f9f\3\2\2\2\u0fa2\u0fa4\5\u0152\u00aa")
        buf.write("\2\u0fa3\u0fa2\3\2\2\2\u0fa3\u0fa4\3\2\2\2\u0fa4\u0139")
        buf.write("\3\2\2\2\u0fa5\u0fa6\7\'\2\2\u0fa6\u0fa7\7\u023c\2\2\u0fa7")
        buf.write("\u0fa8\7\u01aa\2\2\u0fa8\u0fad\5\u0154\u00ab\2\u0fa9\u0faa")
        buf.write("\7\u044e\2\2\u0faa\u0fac\5\u0154\u00ab\2\u0fab\u0fa9\3")
        buf.write("\2\2\2\u0fac\u0faf\3\2\2\2\u0fad\u0fab\3\2\2\2\u0fad\u0fae")
        buf.write("\3\2\2\2\u0fae\u013b\3\2\2\2\u0faf\u0fad\3\2\2\2\u0fb0")
        buf.write("\u0fb1\7\u008c\2\2\u0fb1\u0fb2\t9\2\2\u0fb2\u0fb7\7\u01d6")
        buf.write("\2\2\u0fb3\u0fb4\7\u00b4\2\2\u0fb4\u0fb8\7\u045b\2\2\u0fb5")
        buf.write("\u0fb6\7\36\2\2\u0fb6\u0fb8\7\u045b\2\2\u0fb7\u0fb3\3")
        buf.write("\2\2\2\u0fb7\u0fb5\3\2\2\2\u0fb8\u013d\3\2\2\2\u0fb9\u0fba")
        buf.write("\7\u023d\2\2\u0fba\u0fbb\7\u01d7\2\2\u0fbb\u013f\3\2\2")
        buf.write("\2\u0fbc\u0fbd\7\u023d\2\2\u0fbd\u0fbf\7\u0252\2\2\u0fbe")
        buf.write("\u0fc0\7\26\2\2\u0fbf\u0fbe\3\2\2\2\u0fbf\u0fc0\3\2\2")
        buf.write("\2\u0fc0\u0fc2\3\2\2\2\u0fc1\u0fc3\5\u0152\u00aa\2\u0fc2")
        buf.write("\u0fc1\3\2\2\2\u0fc2\u0fc3\3\2\2\2\u0fc3\u0141\3\2\2\2")
        buf.write("\u0fc4\u0fc5\7\u0261\2\2\u0fc5\u0fce\7\u0252\2\2\u0fc6")
        buf.write("\u0fcb\5\u0158\u00ad\2\u0fc7\u0fc8\7\u044e\2\2\u0fc8\u0fca")
        buf.write("\5\u0158\u00ad\2\u0fc9\u0fc7\3\2\2\2\u0fca\u0fcd\3\2\2")
        buf.write("\2\u0fcb\u0fc9\3\2\2\2\u0fcb\u0fcc\3\2\2\2\u0fcc\u0fcf")
        buf.write("\3\2\2\2\u0fcd\u0fcb\3\2\2\2\u0fce\u0fc6\3\2\2\2\u0fce")
        buf.write("\u0fcf\3\2\2\2\u0fcf\u0fd2\3\2\2\2\u0fd0\u0fd1\7\u0283")
        buf.write("\2\2\u0fd1\u0fd3\5\u015a\u00ae\2\u0fd2\u0fd0\3\2\2\2\u0fd2")
        buf.write("\u0fd3\3\2\2\2\u0fd3\u0fd7\3\2\2\2\u0fd4\u0fd6\5\u015c")
        buf.write("\u00af\2\u0fd5\u0fd4\3\2\2\2\u0fd6\u0fd9\3\2\2\2\u0fd7")
        buf.write("\u0fd5\3\2\2\2\u0fd7\u0fd8\3\2\2\2\u0fd8\u0fdb\3\2\2\2")
        buf.write("\u0fd9\u0fd7\3\2\2\2\u0fda\u0fdc\5\u0152\u00aa\2\u0fdb")
        buf.write("\u0fda\3\2\2\2\u0fdb\u0fdc\3\2\2\2\u0fdc\u0143\3\2\2\2")
        buf.write("\u0fdd\u0fde\7\u0267\2\2\u0fde\u0fe7\7\u0252\2\2\u0fdf")
        buf.write("\u0fe4\5\u0158\u00ad\2\u0fe0\u0fe1\7\u044e\2\2\u0fe1\u0fe3")
        buf.write("\5\u0158\u00ad\2\u0fe2\u0fe0\3\2\2\2\u0fe3\u0fe6\3\2\2")
        buf.write("\2\u0fe4\u0fe2\3\2\2\2\u0fe4\u0fe5\3\2\2\2\u0fe5\u0fe8")
        buf.write("\3\2\2\2\u0fe6\u0fe4\3\2\2\2\u0fe7\u0fdf\3\2\2\2\u0fe7")
        buf.write("\u0fe8\3\2\2\2\u0fe8\u0145\3\2\2\2\u0fe9\u0fea\7\u0261")
        buf.write("\2\2\u0fea\u0feb\7\u01b6\2\2\u0feb\u0147\3\2\2\2\u0fec")
        buf.write("\u0fed\7\u0267\2\2\u0fed\u0fee\7\u01b6\2\2\u0fee\u0149")
        buf.write("\3\2\2\2\u0fef\u0ff0\5\u014c\u00a7\2\u0ff0\u0ff1\7\u0443")
        buf.write("\2\2\u0ff1\u0ff2\7\u045b\2\2\u0ff2\u100e\3\2\2\2\u0ff3")
        buf.write("\u0ff4\5\u014e\u00a8\2\u0ff4\u0ff5\7\u0443\2\2\u0ff5\u0ff6")
        buf.write("\5\u022c\u0117\2\u0ff6\u100e\3\2\2\2\u0ff7\u0ff8\5\u0150")
        buf.write("\u00a9\2\u0ff8\u0ff9\7\u0443\2\2\u0ff9\u0ffa\t\30\2\2")
        buf.write("\u0ffa\u100e\3\2\2\2\u0ffb\u0ffc\7\u01db\2\2\u0ffc\u0ffd")
        buf.write("\7\u0443\2\2\u0ffd\u100e\7\u045e\2\2\u0ffe\u0fff\7\u01bd")
        buf.write("\2\2\u0fff\u1000\7\u0443\2\2\u1000\u1009\5\u0262\u0132")
        buf.write("\2\u1001\u1006\5\u0226\u0114\2\u1002\u1003\7\u044e\2\2")
        buf.write("\u1003\u1005\5\u0226\u0114\2\u1004\u1002\3\2\2\2\u1005")
        buf.write("\u1008\3\2\2\2\u1006\u1004\3\2\2\2\u1006\u1007\3\2\2\2")
        buf.write("\u1007\u100a\3\2\2\2\u1008\u1006\3\2\2\2\u1009\u1001\3")
        buf.write("\2\2\2\u1009\u100a\3\2\2\2\u100a\u100b\3\2\2\2\u100b\u100c")
        buf.write("\5\u0264\u0133\2\u100c\u100e\3\2\2\2\u100d\u0fef\3\2\2")
        buf.write("\2\u100d\u0ff3\3\2\2\2\u100d\u0ff7\3\2\2\2\u100d\u0ffb")
        buf.write("\3\2\2\2\u100d\u0ffe\3\2\2\2\u100e\u014b\3\2\2\2\u100f")
        buf.write("\u1010\t:\2\2\u1010\u014d\3\2\2\2\u1011\u1012\t;\2\2\u1012")
        buf.write("\u014f\3\2\2\2\u1013\u1014\t<\2\2\u1014\u0151\3\2\2\2")
        buf.write("\u1015\u1016\7N\2\2\u1016\u1017\7\u0165\2\2\u1017\u1018")
        buf.write("\7\u045b\2\2\u1018\u0153\3\2\2\2\u1019\u101a\7\u0235\2")
        buf.write("\2\u101a\u101b\7\u0443\2\2\u101b\u101c\5\u0262\u0132\2")
        buf.write("\u101c\u101d\5\u0246\u0124\2\u101d\u101e\5\u0264\u0133")
        buf.write("\2\u101e\u104b\3\2\2\2\u101f\u1020\7\u0237\2\2\u1020\u1021")
        buf.write("\7\u0443\2\2\u1021\u1022\5\u0262\u0132\2\u1022\u1023\5")
        buf.write("\u0246\u0124\2\u1023\u1024\5\u0264\u0133\2\u1024\u104b")
        buf.write("\3\2\2\2\u1025\u1026\7\u0236\2\2\u1026\u1027\7\u0443\2")
        buf.write("\2\u1027\u1028\5\u0262\u0132\2\u1028\u1029\5\u0248\u0125")
        buf.write("\2\u1029\u102a\5\u0264\u0133\2\u102a\u104b\3\2\2\2\u102b")
        buf.write("\u102c\7\u0238\2\2\u102c\u102d\7\u0443\2\2\u102d\u102e")
        buf.write("\5\u0262\u0132\2\u102e\u102f\5\u0248\u0125\2\u102f\u1030")
        buf.write("\5\u0264\u0133\2\u1030\u104b\3\2\2\2\u1031\u1032\7\u023a")
        buf.write("\2\2\u1032\u1033\7\u0443\2\2\u1033\u1034\5\u0262\u0132")
        buf.write("\2\u1034\u1035\5\u0252\u012a\2\u1035\u1036\5\u0264\u0133")
        buf.write("\2\u1036\u104b\3\2\2\2\u1037\u1038\7\u023b\2\2\u1038\u1039")
        buf.write("\7\u0443\2\2\u1039\u103a\5\u0262\u0132\2\u103a\u103b\5")
        buf.write("\u0252\u012a\2\u103b\u103c\5\u0264\u0133\2\u103c\u104b")
        buf.write("\3\2\2\2\u103d\u103e\7\u0239\2\2\u103e\u103f\7\u0443\2")
        buf.write("\2\u103f\u1040\5\u0262\u0132\2\u1040\u1045\5\u0156\u00ac")
        buf.write("\2\u1041\u1042\7\u044e\2\2\u1042\u1044\5\u0156\u00ac\2")
        buf.write("\u1043\u1041\3\2\2\2\u1044\u1047\3\2\2\2\u1045\u1043\3")
        buf.write("\2\2\2\u1045\u1046\3\2\2\2\u1046\u1048\3\2\2\2\u1047\u1045")
        buf.write("\3\2\2\2\u1048\u1049\5\u0264\u0133\2\u1049\u104b\3\2\2")
        buf.write("\2\u104a\u1019\3\2\2\2\u104a\u101f\3\2\2\2\u104a\u1025")
        buf.write("\3\2\2\2\u104a\u102b\3\2\2\2\u104a\u1031\3\2\2\2\u104a")
        buf.write("\u1037\3\2\2\2\u104a\u103d\3\2\2\2\u104b\u0155\3\2\2\2")
        buf.write("\u104c\u104d\5\u0262\u0132\2\u104d\u104e\5\u020e\u0108")
        buf.write("\2\u104e\u104f\7\u044e\2\2\u104f\u1050\5\u020e\u0108\2")
        buf.write("\u1050\u1051\5\u0264\u0133\2\u1051\u0157\3\2\2\2\u1052")
        buf.write("\u1053\t=\2\2\u1053\u0159\3\2\2\2\u1054\u1055\t>\2\2\u1055")
        buf.write("\u1056\7\u0443\2\2\u1056\u1067\5\u015e\u00b0\2\u1057\u1058")
        buf.write("\7\u01dd\2\2\u1058\u1059\7\u0443\2\2\u1059\u105a\7\u045b")
        buf.write("\2\2\u105a\u105b\7\u044e\2\2\u105b\u105c\7\u01de\2\2\u105c")
        buf.write("\u105d\7\u0443\2\2\u105d\u1067\5\u022c\u0117\2\u105e\u105f")
        buf.write("\7\u022f\2\2\u105f\u1060\7\u0443\2\2\u1060\u1061\7\u045b")
        buf.write("\2\2\u1061\u1062\7\u044e\2\2\u1062\u1063\7\u0230\2\2\u1063")
        buf.write("\u1064\7\u0443\2\2\u1064\u1067\5\u022c\u0117\2\u1065\u1067")
        buf.write("\7\u025b\2\2\u1066\u1054\3\2\2\2\u1066\u1057\3\2\2\2\u1066")
        buf.write("\u105e\3\2\2\2\u1066\u1065\3\2\2\2\u1067\u015b\3\2\2\2")
        buf.write("\u1068\u1069\7\u0285\2\2\u1069\u106a\7\u0443\2\2\u106a")
        buf.write("\u1075\7\u045b\2\2\u106b\u106c\7\u0219\2\2\u106c\u106d")
        buf.write("\7\u0443\2\2\u106d\u1075\7\u045b\2\2\u106e\u106f\7\u0187")
        buf.write("\2\2\u106f\u1070\7\u0443\2\2\u1070\u1075\7\u045b\2\2\u1071")
        buf.write("\u1072\7\u021c\2\2\u1072\u1073\7\u0443\2\2\u1073\u1075")
        buf.write("\7\u045b\2\2\u1074\u1068\3\2\2\2\u1074\u106b\3\2\2\2\u1074")
        buf.write("\u106e\3\2\2\2\u1074\u1071\3\2\2\2\u1075\u015d\3\2\2\2")
        buf.write("\u1076\u107b\5\u021e\u0110\2\u1077\u1078\7\u044e\2\2\u1078")
        buf.write("\u107a\5\u021e\u0110\2\u1079\u1077\3\2\2\2\u107a\u107d")
        buf.write("\3\2\2\2\u107b\u1079\3\2\2\2\u107b\u107c\3\2\2\2\u107c")
        buf.write("\u1080\3\2\2\2\u107d\u107b\3\2\2\2\u107e\u1080\7\u045b")
        buf.write("\2\2\u107f\u1076\3\2\2\2\u107f\u107e\3\2\2\2\u1080\u015f")
        buf.write("\3\2\2\2\u1081\u1082\7\u0295\2\2\u1082\u1083\t?\2\2\u1083")
        buf.write("\u1085\5\u0220\u0111\2\u1084\u1086\t@\2\2\u1085\u1084")
        buf.write("\3\2\2\2\u1085\u1086\3\2\2\2\u1086\u0161\3\2\2\2\u1087")
        buf.write("\u1088\7\u0295\2\2\u1088\u1089\7\u0195\2\2\u1089\u108f")
        buf.write("\5\u0220\u0111\2\u108a\u108d\7\u026f\2\2\u108b\u108c\7")
        buf.write("N\2\2\u108c\u108e\7\u01f7\2\2\u108d\u108b\3\2\2\2\u108d")
        buf.write("\u108e\3\2\2\2\u108e\u1090\3\2\2\2\u108f\u108a\3\2\2\2")
        buf.write("\u108f\u1090\3\2\2\2\u1090\u0163\3\2\2\2\u1091\u1092\7")
        buf.write("\u0295\2\2\u1092\u1093\7\u0221\2\2\u1093\u1094\5\u0220")
        buf.write("\u0111\2\u1094\u0165\3\2\2\2\u1095\u1096\7\u0295\2\2\u1096")
        buf.write("\u1097\7\u0172\2\2\u1097\u109a\5\u0220\u0111\2\u1098\u1099")
        buf.write("\7\u020c\2\2\u1099\u109b\7\u021a\2\2\u109a\u1098\3\2\2")
        buf.write("\2\u109a\u109b\3\2\2\2\u109b\u0167\3\2\2\2\u109c\u109d")
        buf.write("\7\u0295\2\2\u109d\u109e\7\u0243\2\2\u109e\u109f\5\u0220")
        buf.write("\u0111\2\u109f\u0169\3\2\2\2\u10a0\u10a1\7\u0295\2\2\u10a1")
        buf.write("\u10a4\7\u022b\2\2\u10a2\u10a3\7/\2\2\u10a3\u10a5\5\u0220")
        buf.write("\u0111\2\u10a4\u10a2\3\2\2\2\u10a4\u10a5\3\2\2\2\u10a5")
        buf.write("\u016b\3\2\2\2\u10a6\u10a7\7\u0221\2\2\u10a7\u10a8\5\u0226")
        buf.write("\u0114\2\u10a8\u10ab\7Q\2\2\u10a9\u10ac\7\u045b\2\2\u10aa")
        buf.write("\u10ac\7\u0467\2\2\u10ab\u10a9\3\2\2\2\u10ab\u10aa\3\2")
        buf.write("\2\2\u10ac\u016d\3\2\2\2\u10ad\u10ae\7\u02a6\2\2\u10ae")
        buf.write("\u10b1\5\u0226\u0114\2\u10af\u10b0\7\u00c0\2\2\u10b0\u10b2")
        buf.write("\5\u0254\u012b\2\u10b1\u10af\3\2\2\2\u10b1\u10b2\3\2\2")
        buf.write("\2\u10b2\u016f\3\2\2\2\u10b3\u10b4\tA\2\2\u10b4\u10b5")
        buf.write("\7\u0221\2\2\u10b5\u10b6\5\u0226\u0114\2\u10b6\u0171\3")
        buf.write("\2\2\2\u10b7\u10ba\5\u0174\u00bb\2\u10b8\u10ba\5\6\4\2")
        buf.write("\u10b9\u10b7\3\2\2\2\u10b9\u10b8\3\2\2\2\u10ba\u0173\3")
        buf.write("\2\2\2\u10bb\u10bc\5\u0226\u0114\2\u10bc\u10bd\7\u0457")
        buf.write("\2\2\u10bd\u10bf\3\2\2\2\u10be\u10bb\3\2\2\2\u10be\u10bf")
        buf.write("\3\2\2\2\u10bf\u10c0\3\2\2\2\u10c0\u10e7\7\u015a\2\2\u10c1")
        buf.write("\u10c2\5\u0188\u00c5\2\u10c2\u10c3\7\u044f\2\2\u10c3\u10c5")
        buf.write("\3\2\2\2\u10c4\u10c1\3\2\2\2\u10c5\u10c8\3\2\2\2\u10c6")
        buf.write("\u10c4\3\2\2\2\u10c6\u10c7\3\2\2\2\u10c7\u10ce\3\2\2\2")
        buf.write("\u10c8\u10c6\3\2\2\2\u10c9\u10ca\5\u018a\u00c6\2\u10ca")
        buf.write("\u10cb\7\u044f\2\2\u10cb\u10cd\3\2\2\2\u10cc\u10c9\3\2")
        buf.write("\2\2\u10cd\u10d0\3\2\2\2\u10ce\u10cc\3\2\2\2\u10ce\u10cf")
        buf.write("\3\2\2\2\u10cf\u10d6\3\2\2\2\u10d0\u10ce\3\2\2\2\u10d1")
        buf.write("\u10d2\5\u018c\u00c7\2\u10d2\u10d3\7\u044f\2\2\u10d3\u10d5")
        buf.write("\3\2\2\2\u10d4\u10d1\3\2\2\2\u10d5\u10d8\3\2\2\2\u10d6")
        buf.write("\u10d4\3\2\2\2\u10d6\u10d7\3\2\2\2\u10d7\u10de\3\2\2\2")
        buf.write("\u10d8\u10d6\3\2\2\2\u10d9\u10da\5\u018e\u00c8\2\u10da")
        buf.write("\u10db\7\u044f\2\2\u10db\u10dd\3\2\2\2\u10dc\u10d9\3\2")
        buf.write("\2\2\u10dd\u10e0\3\2\2\2\u10de\u10dc\3\2\2\2\u10de\u10df")
        buf.write("\3\2\2\2\u10df\u10e4\3\2\2\2\u10e0\u10de\3\2\2\2\u10e1")
        buf.write("\u10e3\5\u0192\u00ca\2\u10e2\u10e1\3\2\2\2\u10e3\u10e6")
        buf.write("\3\2\2\2\u10e4\u10e2\3\2\2\2\u10e4\u10e5\3\2\2\2\u10e5")
        buf.write("\u10e8\3\2\2\2\u10e6\u10e4\3\2\2\2\u10e7\u10c6\3\2\2\2")
        buf.write("\u10e7\u10e8\3\2\2\2\u10e8\u10e9\3\2\2\2\u10e9\u10eb\7")
        buf.write("\u0195\2\2\u10ea\u10ec\5\u0226\u0114\2\u10eb\u10ea\3\2")
        buf.write("\2\2\u10eb\u10ec\3\2\2\2\u10ec\u0175\3\2\2\2\u10ed\u10f0")
        buf.write("\7%\2\2\u10ee\u10f1\5\u0226\u0114\2\u10ef\u10f1\5\u028c")
        buf.write("\u0147\2\u10f0\u10ee\3\2\2\2\u10f0\u10ef\3\2\2\2\u10f0")
        buf.write("\u10f1\3\2\2\2\u10f1\u10f3\3\2\2\2\u10f2\u10f4\5\u0194")
        buf.write("\u00cb\2\u10f3\u10f2\3\2\2\2\u10f4\u10f5\3\2\2\2\u10f5")
        buf.write("\u10f3\3\2\2\2\u10f5\u10f6\3\2\2\2\u10f6\u10fd\3\2\2\2")
        buf.write("\u10f7\u10f9\7C\2\2\u10f8\u10fa\5\u0192\u00ca\2\u10f9")
        buf.write("\u10f8\3\2\2\2\u10fa\u10fb\3\2\2\2\u10fb\u10f9\3\2\2\2")
        buf.write("\u10fb\u10fc\3\2\2\2\u10fc\u10fe\3\2\2\2\u10fd\u10f7\3")
        buf.write("\2\2\2\u10fd\u10fe\3\2\2\2\u10fe\u10ff\3\2\2\2\u10ff\u1100")
        buf.write("\7\u0195\2\2\u1100\u1101\7%\2\2\u1101\u0177\3\2\2\2\u1102")
        buf.write("\u1103\7Z\2\2\u1103\u1104\5\u028c\u0147\2\u1104\u1106")
        buf.write("\7\u00b3\2\2\u1105\u1107\5\u0192\u00ca\2\u1106\u1105\3")
        buf.write("\2\2\2\u1107\u1108\3\2\2\2\u1108\u1106\3\2\2\2\u1108\u1109")
        buf.write("\3\2\2\2\u1109\u110d\3\2\2\2\u110a\u110c\5\u0196\u00cc")
        buf.write("\2\u110b\u110a\3\2\2\2\u110c\u110f\3\2\2\2\u110d\u110b")
        buf.write("\3\2\2\2\u110d\u110e\3\2\2\2\u110e\u1116\3\2\2\2\u110f")
        buf.write("\u110d\3\2\2\2\u1110\u1112\7C\2\2\u1111\u1113\5\u0192")
        buf.write("\u00ca\2\u1112\u1111\3\2\2\2\u1113\u1114\3\2\2\2\u1114")
        buf.write("\u1112\3\2\2\2\u1114\u1115\3\2\2\2\u1115\u1117\3\2\2\2")
        buf.write("\u1116\u1110\3\2\2\2\u1116\u1117\3\2\2\2\u1117\u1118\3")
        buf.write("\2\2\2\u1118\u1119\7\u0195\2\2\u1119\u111a\7Z\2\2\u111a")
        buf.write("\u0179\3\2\2\2\u111b\u111c\7e\2\2\u111c\u111d\5\u0226")
        buf.write("\u0114\2\u111d\u017b\3\2\2\2\u111e\u111f\7k\2\2\u111f")
        buf.write("\u1120\5\u0226\u0114\2\u1120\u017d\3\2\2\2\u1121\u1122")
        buf.write("\5\u0226\u0114\2\u1122\u1123\7\u0457\2\2\u1123\u1125\3")
        buf.write("\2\2\2\u1124\u1121\3\2\2\2\u1124\u1125\3\2\2\2\u1125\u1126")
        buf.write("\3\2\2\2\u1126\u1128\7s\2\2\u1127\u1129\5\u0192\u00ca")
        buf.write("\2\u1128\u1127\3\2\2\2\u1129\u112a\3\2\2\2\u112a\u1128")
        buf.write("\3\2\2\2\u112a\u112b\3\2\2\2\u112b\u112c\3\2\2\2\u112c")
        buf.write("\u112d\7\u0195\2\2\u112d\u112f\7s\2\2\u112e\u1130\5\u0226")
        buf.write("\u0114\2\u112f\u112e\3\2\2\2\u112f\u1130\3\2\2\2\u1130")
        buf.write("\u017f\3\2\2\2\u1131\u1132\5\u0226\u0114\2\u1132\u1133")
        buf.write("\7\u0457\2\2\u1133\u1135\3\2\2\2\u1134\u1131\3\2\2\2\u1134")
        buf.write("\u1135\3\2\2\2\u1135\u1136\3\2\2\2\u1136\u1138\7\u0094")
        buf.write("\2\2\u1137\u1139\5\u0192\u00ca\2\u1138\u1137\3\2\2\2\u1139")
        buf.write("\u113a\3\2\2\2\u113a\u1138\3\2\2\2\u113a\u113b\3\2\2\2")
        buf.write("\u113b\u113c\3\2\2\2\u113c\u113d\7\u0283\2\2\u113d\u113e")
        buf.write("\5\u028c\u0147\2\u113e\u113f\7\u0195\2\2\u113f\u1141\7")
        buf.write("\u0094\2\2\u1140\u1142\5\u0226\u0114\2\u1141\u1140\3\2")
        buf.write("\2\2\u1141\u1142\3\2\2\2\u1142\u0181\3\2\2\2\u1143\u1144")
        buf.write("\7\u009a\2\2\u1144\u1145\5\u028c\u0147\2\u1145\u0183\3")
        buf.write("\2\2\2\u1146\u1147\5\u0226\u0114\2\u1147\u1148\7\u0457")
        buf.write("\2\2\u1148\u114a\3\2\2\2\u1149\u1146\3\2\2\2\u1149\u114a")
        buf.write("\3\2\2\2\u114a\u114b\3\2\2\2\u114b\u114c\7\u00c4\2\2\u114c")
        buf.write("\u114d\5\u028c\u0147\2\u114d\u114f\7\u018f\2\2\u114e\u1150")
        buf.write("\5\u0192\u00ca\2\u114f\u114e\3\2\2\2\u1150\u1151\3\2\2")
        buf.write("\2\u1151\u114f\3\2\2\2\u1151\u1152\3\2\2\2\u1152\u1153")
        buf.write("\3\2\2\2\u1153\u1154\7\u0195\2\2\u1154\u1156\7\u00c4\2")
        buf.write("\2\u1155\u1157\5\u0226\u0114\2\u1156\u1155\3\2\2\2\u1156")
        buf.write("\u1157\3\2\2\2\u1157\u0185\3\2\2\2\u1158\u1159\7\u016b")
        buf.write("\2\2\u1159\u1168\5\u0226\u0114\2\u115a\u115f\7M\2\2\u115b")
        buf.write("\u115d\7\u0202\2\2\u115c\u115b\3\2\2\2\u115c\u115d\3\2")
        buf.write("\2\2\u115d\u115e\3\2\2\2\u115e\u1160\7Q\2\2\u115f\u115c")
        buf.write("\3\2\2\2\u115f\u1160\3\2\2\2\u1160\u1161\3\2\2\2\u1161")
        buf.write("\u1162\5\u0226\u0114\2\u1162\u1163\7c\2\2\u1163\u1164")
        buf.write("\5\u0246\u0124\2\u1164\u1168\3\2\2\2\u1165\u1166\7\u020f")
        buf.write("\2\2\u1166\u1168\5\u0226\u0114\2\u1167\u1158\3\2\2\2\u1167")
        buf.write("\u115a\3\2\2\2\u1167\u1165\3\2\2\2\u1168\u0187\3\2\2\2")
        buf.write("\u1169\u116a\7\67\2\2\u116a\u116b\5\u0246\u0124\2\u116b")
        buf.write("\u116e\5\u023a\u011e\2\u116c\u116d\78\2\2\u116d\u116f")
        buf.write("\5\u028c\u0147\2\u116e\u116c\3\2\2\2\u116e\u116f\3\2\2")
        buf.write("\2\u116f\u0189\3\2\2\2\u1170\u1171\7\67\2\2\u1171\u1172")
        buf.write("\5\u0226\u0114\2\u1172\u1173\7,\2\2\u1173\u117a\7N\2\2")
        buf.write("\u1174\u117b\5\u022c\u0117\2\u1175\u1177\7\u00a8\2\2\u1176")
        buf.write("\u1178\7\u0289\2\2\u1177\u1176\3\2\2\2\u1177\u1178\3\2")
        buf.write("\2\2\u1178\u1179\3\2\2\2\u1179\u117b\7\u045b\2\2\u117a")
        buf.write("\u1174\3\2\2\2\u117a\u1175\3\2\2\2\u117b\u018b\3\2\2\2")
        buf.write("\u117c\u117d\7\67\2\2\u117d\u117e\5\u0226\u0114\2\u117e")
        buf.write("\u117f\7\64\2\2\u117f\u1180\7N\2\2\u1180\u1181\5\u00b6")
        buf.write("\\\2\u1181\u018d\3\2\2\2\u1182\u1183\7\67\2\2\u1183\u1184")
        buf.write("\tB\2\2\u1184\u1185\7\u01b7\2\2\u1185\u1186\7N\2\2\u1186")
        buf.write("\u118b\5\u0190\u00c9\2\u1187\u1188\7\u044e\2\2\u1188\u118a")
        buf.write("\5\u0190\u00c9\2\u1189\u1187\3\2\2\2\u118a\u118d\3\2\2")
        buf.write("\2\u118b\u1189\3\2\2\2\u118b\u118c\3\2\2\2\u118c\u118e")
        buf.write("\3\2\2\2\u118d\u118b\3\2\2\2\u118e\u118f\5\u0172\u00ba")
        buf.write("\2\u118f\u018f\3\2\2\2\u1190\u119c\5\u022c\u0117\2\u1191")
        buf.write("\u1193\7\u00a8\2\2\u1192\u1194\7\u0289\2\2\u1193\u1192")
        buf.write("\3\2\2\2\u1193\u1194\3\2\2\2\u1194\u1195\3\2\2\2\u1195")
        buf.write("\u119c\7\u045b\2\2\u1196\u119c\5\u0226\u0114\2\u1197\u119c")
        buf.write("\7\u00a9\2\2\u1198\u1199\7{\2\2\u1199\u119c\7\u01b0\2")
        buf.write("\2\u119a\u119c\7\u00a7\2\2\u119b\u1190\3\2\2\2\u119b\u1191")
        buf.write("\3\2\2\2\u119b\u1196\3\2\2\2\u119b\u1197\3\2\2\2\u119b")
        buf.write("\u1198\3\2\2\2\u119b\u119a\3\2\2\2\u119c\u0191\3\2\2\2")
        buf.write("\u119d\u11a0\5\24\13\2\u119e\u11a0\5\6\4\2\u119f\u119d")
        buf.write("\3\2\2\2\u119f\u119e\3\2\2\2\u11a0\u11a1\3\2\2\2\u11a1")
        buf.write("\u11a2\7\u044f\2\2\u11a2\u0193\3\2\2\2\u11a3\u11a6\7\u00c2")
        buf.write("\2\2\u11a4\u11a7\5\u0238\u011d\2\u11a5\u11a7\5\u028c\u0147")
        buf.write("\2\u11a6\u11a4\3\2\2\2\u11a6\u11a5\3\2\2\2\u11a7\u11a8")
        buf.write("\3\2\2\2\u11a8\u11aa\7\u00b3\2\2\u11a9\u11ab\5\u0192\u00ca")
        buf.write("\2\u11aa\u11a9\3\2\2\2\u11ab\u11ac\3\2\2\2\u11ac\u11aa")
        buf.write("\3\2\2\2\u11ac\u11ad\3\2\2\2\u11ad\u0195\3\2\2\2\u11ae")
        buf.write("\u11af\7D\2\2\u11af\u11b0\5\u028c\u0147\2\u11b0\u11b2")
        buf.write("\7\u00b3\2\2\u11b1\u11b3\5\u0192\u00ca\2\u11b2\u11b1\3")
        buf.write("\2\2\2\u11b3\u11b4\3\2\2\2\u11b4\u11b2\3\2\2\2\u11b4\u11b5")
        buf.write("\3\2\2\2\u11b5\u0197\3\2\2\2\u11b6\u11b7\7\27\2\2\u11b7")
        buf.write("\u11b8\7\u0285\2\2\u11b8\u11bd\5\u01ac\u00d7\2\u11b9\u11ba")
        buf.write("\7\u044e\2\2\u11ba\u11bc\5\u01ac\u00d7\2\u11bb\u11b9\3")
        buf.write("\2\2\2\u11bc\u11bf\3\2\2\2\u11bd\u11bb\3\2\2\2\u11bd\u11be")
        buf.write("\3\2\2\2\u11be\u11ed\3\2\2\2\u11bf\u11bd\3\2\2\2\u11c0")
        buf.write("\u11c1\7\27\2\2\u11c1\u11c3\7\u0285\2\2\u11c2\u11c4\5")
        buf.write("\u025c\u012f\2\u11c3\u11c2\3\2\2\2\u11c3\u11c4\3\2\2\2")
        buf.write("\u11c4\u11c5\3\2\2\2\u11c5\u11ca\5\u01ae\u00d8\2\u11c6")
        buf.write("\u11c7\7\u044e\2\2\u11c7\u11c9\5\u01ae\u00d8\2\u11c8\u11c6")
        buf.write("\3\2\2\2\u11c9\u11cc\3\2\2\2\u11ca\u11c8\3\2\2\2\u11ca")
        buf.write("\u11cb\3\2\2\2\u11cb\u11db\3\2\2\2\u11cc\u11ca\3\2\2\2")
        buf.write("\u11cd\u11d9\7\u0096\2\2\u11ce\u11da\7\u0205\2\2\u11cf")
        buf.write("\u11d6\5\u01b0\u00d9\2\u11d0\u11d2\7\32\2\2\u11d1\u11d0")
        buf.write("\3\2\2\2\u11d1\u11d2\3\2\2\2\u11d2\u11d3\3\2\2\2\u11d3")
        buf.write("\u11d5\5\u01b0\u00d9\2\u11d4\u11d1\3\2\2\2\u11d5\u11d8")
        buf.write("\3\2\2\2\u11d6\u11d4\3\2\2\2\u11d6\u11d7\3\2\2\2\u11d7")
        buf.write("\u11da\3\2\2\2\u11d8\u11d6\3\2\2\2\u11d9\u11ce\3\2\2\2")
        buf.write("\u11d9\u11cf\3\2\2\2\u11da\u11dc\3\2\2\2\u11db\u11cd\3")
        buf.write("\2\2\2\u11db\u11dc\3\2\2\2\u11dc\u11e3\3\2\2\2\u11dd\u11df")
        buf.write("\7\u00c5\2\2\u11de\u11e0\5\u01b2\u00da\2\u11df\u11de\3")
        buf.write("\2\2\2\u11e0\u11e1\3\2\2\2\u11e1\u11df\3\2\2\2\u11e1\u11e2")
        buf.write("\3\2\2\2\u11e2\u11e4\3\2\2\2\u11e3\u11dd\3\2\2\2\u11e3")
        buf.write("\u11e4\3\2\2\2\u11e4\u11e9\3\2\2\2\u11e5\u11e8\5\u01b4")
        buf.write("\u00db\2\u11e6\u11e8\5\u01b6\u00dc\2\u11e7\u11e5\3\2\2")
        buf.write("\2\u11e7\u11e6\3\2\2\2\u11e8\u11eb\3\2\2\2\u11e9\u11e7")
        buf.write("\3\2\2\2\u11e9\u11ea\3\2\2\2\u11ea\u11ed\3\2\2\2\u11eb")
        buf.write("\u11e9\3\2\2\2\u11ec\u11b6\3\2\2\2\u11ec\u11c0\3\2\2\2")
        buf.write("\u11ed\u0199\3\2\2\2\u11ee\u11ef\7\60\2\2\u11ef\u11f0")
        buf.write("\7\u0285\2\2\u11f0\u11f5\5\u01ae\u00d8\2\u11f1\u11f2\7")
        buf.write("\u044e\2\2\u11f2\u11f4\5\u01ae\u00d8\2\u11f3\u11f1\3\2")
        buf.write("\2\2\u11f4\u11f7\3\2\2\2\u11f5\u11f3\3\2\2\2\u11f5\u11f6")
        buf.write("\3\2\2\2\u11f6\u1225\3\2\2\2\u11f7\u11f5\3\2\2\2\u11f8")
        buf.write("\u11f9\7\60\2\2\u11f9\u11fb\7\u0285\2\2\u11fa\u11fc\5")
        buf.write("\u025e\u0130\2\u11fb\u11fa\3\2\2\2\u11fb\u11fc\3\2\2\2")
        buf.write("\u11fc\u11fd\3\2\2\2\u11fd\u1202\5\u01ae\u00d8\2\u11fe")
        buf.write("\u11ff\7\u044e\2\2\u11ff\u1201\5\u01ae\u00d8\2\u1200\u11fe")
        buf.write("\3\2\2\2\u1201\u1204\3\2\2\2\u1202\u1200\3\2\2\2\u1202")
        buf.write("\u1203\3\2\2\2\u1203\u1213\3\2\2\2\u1204\u1202\3\2\2\2")
        buf.write("\u1205\u1211\7\u0096\2\2\u1206\u1212\7\u0205\2\2\u1207")
        buf.write("\u120e\5\u01b0\u00d9\2\u1208\u120a\7\32\2\2\u1209\u1208")
        buf.write("\3\2\2\2\u1209\u120a\3\2\2\2\u120a\u120b\3\2\2\2\u120b")
        buf.write("\u120d\5\u01b0\u00d9\2\u120c\u1209\3\2\2\2\u120d\u1210")
        buf.write("\3\2\2\2\u120e\u120c\3\2\2\2\u120e\u120f\3\2\2\2\u120f")
        buf.write("\u1212\3\2\2\2\u1210\u120e\3\2\2\2\u1211\u1206\3\2\2\2")
        buf.write("\u1211\u1207\3\2\2\2\u1212\u1214\3\2\2\2\u1213\u1205\3")
        buf.write("\2\2\2\u1213\u1214\3\2\2\2\u1214\u121b\3\2\2\2\u1215\u1217")
        buf.write("\7\u00c5\2\2\u1216\u1218\5\u01b2\u00da\2\u1217\u1216\3")
        buf.write("\2\2\2\u1218\u1219\3\2\2\2\u1219\u1217\3\2\2\2\u1219\u121a")
        buf.write("\3\2\2\2\u121a\u121c\3\2\2\2\u121b\u1215\3\2\2\2\u121b")
        buf.write("\u121c\3\2\2\2\u121c\u1221\3\2\2\2\u121d\u1220\5\u01b4")
        buf.write("\u00db\2\u121e\u1220\5\u01b6\u00dc\2\u121f\u121d\3\2\2")
        buf.write("\2\u121f\u121e\3\2\2\2\u1220\u1223\3\2\2\2\u1221\u121f")
        buf.write("\3\2\2\2\u1221\u1222\3\2\2\2\u1222\u1225\3\2\2\2\u1223")
        buf.write("\u1221\3\2\2\2\u1224\u11ee\3\2\2\2\u1224\u11f8\3\2\2\2")
        buf.write("\u1225\u019b\3\2\2\2\u1226\u1227\7A\2\2\u1227\u1229\7")
        buf.write("\u0285\2\2\u1228\u122a\5\u025c\u012f\2\u1229\u1228\3\2")
        buf.write("\2\2\u1229\u122a\3\2\2\2\u122a\u122b\3\2\2\2\u122b\u1230")
        buf.write("\5\u0214\u010b\2\u122c\u122d\7\u044e\2\2\u122d\u122f\5")
        buf.write("\u0214\u010b\2\u122e\u122c\3\2\2\2\u122f\u1232\3\2\2\2")
        buf.write("\u1230\u122e\3\2\2\2\u1230\u1231\3\2\2\2\u1231\u019d\3")
        buf.write("\2\2\2\u1232\u1230\3\2\2\2\u1233\u1234\7U\2\2\u1234\u1239")
        buf.write("\5\u01b8\u00dd\2\u1235\u1236\7\u044e\2\2\u1236\u1238\5")
        buf.write("\u01b8\u00dd\2\u1237\u1235\3\2\2\2\u1238\u123b\3\2\2\2")
        buf.write("\u1239\u1237\3\2\2\2\u1239\u123a\3\2\2\2\u123a\u123c\3")
        buf.write("\2\2\2\u123b\u1239\3\2\2\2\u123c\u123e\7\177\2\2\u123d")
        buf.write("\u123f\tC\2\2\u123e\u123d\3\2\2\2\u123e\u123f\3\2\2\2")
        buf.write("\u123f\u1240\3\2\2\2\u1240\u1241\5\u01bc\u00df\2\u1241")
        buf.write("\u1242\7\u00b4\2\2\u1242\u1247\5\u01ae\u00d8\2\u1243\u1244")
        buf.write("\7\u044e\2\2\u1244\u1246\5\u01ae\u00d8\2\u1245\u1243\3")
        buf.write("\2\2\2\u1246\u1249\3\2\2\2\u1247\u1245\3\2\2\2\u1247\u1248")
        buf.write("\3\2\2\2\u1248\u1258\3\2\2\2\u1249\u1247\3\2\2\2\u124a")
        buf.write("\u1256\7\u0096\2\2\u124b\u1257\7\u0205\2\2\u124c\u1253")
        buf.write("\5\u01b0\u00d9\2\u124d\u124f\7\32\2\2\u124e\u124d\3\2")
        buf.write("\2\2\u124e\u124f\3\2\2\2\u124f\u1250\3\2\2\2\u1250\u1252")
        buf.write("\5\u01b0\u00d9\2\u1251\u124e\3\2\2\2\u1252\u1255\3\2\2")
        buf.write("\2\u1253\u1251\3\2\2\2\u1253\u1254\3\2\2\2\u1254\u1257")
        buf.write("\3\2\2\2\u1255\u1253\3\2\2\2\u1256\u124b\3\2\2\2\u1256")
        buf.write("\u124c\3\2\2\2\u1257\u1259\3\2\2\2\u1258\u124a\3\2\2\2")
        buf.write("\u1258\u1259\3\2\2\2\u1259\u1263\3\2\2\2\u125a\u1260\7")
        buf.write("\u00c5\2\2\u125b\u125c\7U\2\2\u125c\u125f\7\u0081\2\2")
        buf.write("\u125d\u125f\5\u01b2\u00da\2\u125e\u125b\3\2\2\2\u125e")
        buf.write("\u125d\3\2\2\2\u125f\u1262\3\2\2\2\u1260\u125e\3\2\2\2")
        buf.write("\u1260\u1261\3\2\2\2\u1261\u1264\3\2\2\2\u1262\u1260\3")
        buf.write("\2\2\2\u1263\u125a\3\2\2\2\u1263\u1264\3\2\2\2\u1264\u126b")
        buf.write("\3\2\2\2\u1265\u1266\7\34\2\2\u1266\u1267\5\u0214\u010b")
        buf.write("\2\u1267\u1268\7\u00c5\2\2\u1268\u1269\7\u0242\2\2\u1269")
        buf.write("\u126a\5\u01a0\u00d1\2\u126a\u126c\3\2\2\2\u126b\u1265")
        buf.write("\3\2\2\2\u126b\u126c\3\2\2\2\u126c\u128b\3\2\2\2\u126d")
        buf.write("\u126e\7U\2\2\u126e\u1273\5\u0226\u0114\2\u126f\u1270")
        buf.write("\7\u044e\2\2\u1270\u1272\5\u0226\u0114\2\u1271\u126f\3")
        buf.write("\2\2\2\u1272\u1275\3\2\2\2\u1273\u1271\3\2\2\2\u1273\u1274")
        buf.write("\3\2\2\2\u1274\u1276\3\2\2\2\u1275\u1273\3\2\2\2\u1276")
        buf.write("\u1279\7\u00b4\2\2\u1277\u127a\5\u0214\u010b\2\u1278\u127a")
        buf.write("\5\u0226\u0114\2\u1279\u1277\3\2\2\2\u1279\u1278\3\2\2")
        buf.write("\2\u127a\u1282\3\2\2\2\u127b\u127e\7\u044e\2\2\u127c\u127f")
        buf.write("\5\u0214\u010b\2\u127d\u127f\5\u0226\u0114\2\u127e\u127c")
        buf.write("\3\2\2\2\u127e\u127d\3\2\2\2\u127f\u1281\3\2\2\2\u1280")
        buf.write("\u127b\3\2\2\2\u1281\u1284\3\2\2\2\u1282\u1280\3\2\2\2")
        buf.write("\u1282\u1283\3\2\2\2\u1283\u1288\3\2\2\2\u1284\u1282\3")
        buf.write("\2\2\2\u1285\u1286\7\u00c5\2\2\u1286\u1287\7\u046a\2\2")
        buf.write("\u1287\u1289\7\u0081\2\2\u1288\u1285\3\2\2\2\u1288\u1289")
        buf.write("\3\2\2\2\u1289\u128b\3\2\2\2\u128a\u1233\3\2\2\2\u128a")
        buf.write("\u126d\3\2\2\2\u128b\u019f\3\2\2\2\u128c\u12a3\78\2\2")
        buf.write("\u128d\u12a3\7\u0205\2\2\u128e\u1298\7\26\2\2\u128f\u1290")
        buf.write("\7H\2\2\u1290\u1295\5\u0214\u010b\2\u1291\u1292\7\u044e")
        buf.write("\2\2\u1292\u1294\5\u0214\u010b\2\u1293\u1291\3\2\2\2\u1294")
        buf.write("\u1297\3\2\2\2\u1295\u1293\3\2\2\2\u1295\u1296\3\2\2\2")
        buf.write("\u1296\u1299\3\2\2\2\u1297\u1295\3\2\2\2\u1298\u128f\3")
        buf.write("\2\2\2\u1298\u1299\3\2\2\2\u1299\u12a3\3\2\2\2\u129a\u129f")
        buf.write("\5\u0214\u010b\2\u129b\u129c\7\u044e\2\2\u129c\u129e\5")
        buf.write("\u0214\u010b\2\u129d\u129b\3\2\2\2\u129e\u12a1\3\2\2\2")
        buf.write("\u129f\u129d\3\2\2\2\u129f\u12a0\3\2\2\2\u12a0\u12a3\3")
        buf.write("\2\2\2\u12a1\u129f\3\2\2\2\u12a2\u128c\3\2\2\2\u12a2\u128d")
        buf.write("\3\2\2\2\u12a2\u128e\3\2\2\2\u12a2\u129a\3\2\2\2\u12a3")
        buf.write("\u01a1\3\2\2\2\u12a4\u12a5\7U\2\2\u12a5\u12a6\7\u0227")
        buf.write("\2\2\u12a6\u12a7\7\177\2\2\u12a7\u12a8\5\u0214\u010b\2")
        buf.write("\u12a8\u12a9\7\u00b4\2\2\u12a9\u12ae\5\u0214\u010b\2\u12aa")
        buf.write("\u12ab\7\u044e\2\2\u12ab\u12ad\5\u0214\u010b\2\u12ac\u12aa")
        buf.write("\3\2\2\2\u12ad\u12b0\3\2\2\2\u12ae\u12ac\3\2\2\2\u12ae")
        buf.write("\u12af\3\2\2\2\u12af\u12b4\3\2\2\2\u12b0\u12ae\3\2\2\2")
        buf.write("\u12b1\u12b2\7\u00c5\2\2\u12b2\u12b3\7U\2\2\u12b3\u12b5")
        buf.write("\7\u0081\2\2\u12b4\u12b1\3\2\2\2\u12b4\u12b5\3\2\2\2\u12b5")
        buf.write("\u01a3\3\2\2\2\u12b6\u12b7\7\u0093\2\2\u12b7\u12b8\7\u0285")
        buf.write("\2\2\u12b8\u12bd\5\u01be\u00e0\2\u12b9\u12ba\7\u044e\2")
        buf.write("\2\u12ba\u12bc\5\u01be\u00e0\2\u12bb\u12b9\3\2\2\2\u12bc")
        buf.write("\u12bf\3\2\2\2\u12bd\u12bb\3\2\2\2\u12bd\u12be\3\2\2\2")
        buf.write("\u12be\u01a5\3\2\2\2\u12bf\u12bd\3\2\2\2\u12c0\u12c1\7")
        buf.write("\u009b\2\2\u12c1\u12c6\5\u01b8\u00dd\2\u12c2\u12c3\7\u044e")
        buf.write("\2\2\u12c3\u12c5\5\u01b8\u00dd\2\u12c4\u12c2\3\2\2\2\u12c5")
        buf.write("\u12c8\3\2\2\2\u12c6\u12c4\3\2\2\2\u12c6\u12c7\3\2\2\2")
        buf.write("\u12c7\u12c9\3\2\2\2\u12c8\u12c6\3\2\2\2\u12c9\u12cb\7")
        buf.write("\177\2\2\u12ca\u12cc\tC\2\2\u12cb\u12ca\3\2\2\2\u12cb")
        buf.write("\u12cc\3\2\2\2\u12cc\u12cd\3\2\2\2\u12cd\u12ce\5\u01bc")
        buf.write("\u00df\2\u12ce\u12cf\7Q\2\2\u12cf\u12d4\5\u0214\u010b")
        buf.write("\2\u12d0\u12d1\7\u044e\2\2\u12d1\u12d3\5\u0214\u010b\2")
        buf.write("\u12d2\u12d0\3\2\2\2\u12d3\u12d6\3\2\2\2\u12d4\u12d2\3")
        buf.write("\2\2\2\u12d4\u12d5\3\2\2\2\u12d5\u1301\3\2\2\2\u12d6\u12d4")
        buf.write("\3\2\2\2\u12d7\u12d8\7\u009b\2\2\u12d8\u12da\7\26\2\2")
        buf.write("\u12d9\u12db\7\u02ac\2\2\u12da\u12d9\3\2\2\2\u12da\u12db")
        buf.write("\3\2\2\2\u12db\u12dc\3\2\2\2\u12dc\u12dd\7\u044e\2\2\u12dd")
        buf.write("\u12de\7U\2\2\u12de\u12df\7\u0081\2\2\u12df\u12e0\7Q\2")
        buf.write("\2\u12e0\u12e5\5\u0214\u010b\2\u12e1\u12e2\7\u044e\2\2")
        buf.write("\u12e2\u12e4\5\u0214\u010b\2\u12e3\u12e1\3\2\2\2\u12e4")
        buf.write("\u12e7\3\2\2\2\u12e5\u12e3\3\2\2\2\u12e5\u12e6\3\2\2\2")
        buf.write("\u12e6\u1301\3\2\2\2\u12e7\u12e5\3\2\2\2\u12e8\u12e9\7")
        buf.write("\u009b\2\2\u12e9\u12ee\5\u0226\u0114\2\u12ea\u12eb\7\u044e")
        buf.write("\2\2\u12eb\u12ed\5\u0226\u0114\2\u12ec\u12ea\3\2\2\2\u12ed")
        buf.write("\u12f0\3\2\2\2\u12ee\u12ec\3\2\2\2\u12ee\u12ef\3\2\2\2")
        buf.write("\u12ef\u12f1\3\2\2\2\u12f0\u12ee\3\2\2\2\u12f1\u12f4\7")
        buf.write("Q\2\2\u12f2\u12f5\5\u0214\u010b\2\u12f3\u12f5\5\u0226")
        buf.write("\u0114\2\u12f4\u12f2\3\2\2\2\u12f4\u12f3\3\2\2\2\u12f5")
        buf.write("\u12fd\3\2\2\2\u12f6\u12f9\7\u044e\2\2\u12f7\u12fa\5\u0214")
        buf.write("\u010b\2\u12f8\u12fa\5\u0226\u0114\2\u12f9\u12f7\3\2\2")
        buf.write("\2\u12f9\u12f8\3\2\2\2\u12fa\u12fc\3\2\2\2\u12fb\u12f6")
        buf.write("\3\2\2\2\u12fc\u12ff\3\2\2\2\u12fd\u12fb\3\2\2\2\u12fd")
        buf.write("\u12fe\3\2\2\2\u12fe\u1301\3\2\2\2\u12ff\u12fd\3\2\2\2")
        buf.write("\u1300\u12c0\3\2\2\2\u1300\u12d7\3\2\2\2\u1300\u12e8\3")
        buf.write("\2\2\2\u1301\u01a7\3\2\2\2\u1302\u1303\7\u009b\2\2\u1303")
        buf.write("\u1304\7\u0227\2\2\u1304\u1305\7\177\2\2\u1305\u1306\5")
        buf.write("\u0214\u010b\2\u1306\u1307\7Q\2\2\u1307\u130c\5\u0214")
        buf.write("\u010b\2\u1308\u1309\7\u044e\2\2\u1309\u130b\5\u0214\u010b")
        buf.write("\2\u130a\u1308\3\2\2\2\u130b\u130e\3\2\2\2\u130c\u130a")
        buf.write("\3\2\2\2\u130c\u130d\3\2\2\2\u130d\u01a9\3\2\2\2\u130e")
        buf.write("\u130c\3\2\2\2\u130f\u1310\7\u00a1\2\2\u1310\u1313\7\u0219")
        buf.write("\2\2\u1311\u1312\7N\2\2\u1312\u1314\5\u0214\u010b\2\u1313")
        buf.write("\u1311\3\2\2\2\u1313\u1314\3\2\2\2\u1314\u1315\3\2\2\2")
        buf.write("\u1315\u1318\7\u0443\2\2\u1316\u1319\5\u0286\u0144\2\u1317")
        buf.write("\u1319\7\u045b\2\2\u1318\u1316\3\2\2\2\u1318\u1317\3\2")
        buf.write("\2\2\u1319\u01ab\3\2\2\2\u131a\u131b\5\u0214\u010b\2\u131b")
        buf.write("\u131c\5\u01b4\u00db\2\u131c\u01ad\3\2\2\2\u131d\u131e")
        buf.write("\5\u0214\u010b\2\u131e\u131f\7\u01bc\2\2\u131f\u1320\7")
        buf.write("\"\2\2\u1320\u1321\7\u0219\2\2\u1321\u1322\7\u045b\2\2")
        buf.write("\u1322\u133a\3\2\2\2\u1323\u1324\5\u0214\u010b\2\u1324")
        buf.write("\u1327\7\u01bc\2\2\u1325\u1326\7\u00c5\2\2\u1326\u1328")
        buf.write("\5\u0224\u0113\2\u1327\u1325\3\2\2\2\u1327\u1328\3\2\2")
        buf.write("\2\u1328\u1329\3\2\2\2\u1329\u132a\7\"\2\2\u132a\u132e")
        buf.write("\7\u045b\2\2\u132b\u132c\7\u0099\2\2\u132c\u132d\7\62")
        buf.write("\2\2\u132d\u132f\7\u0219\2\2\u132e\u132b\3\2\2\2\u132e")
        buf.write("\u132f\3\2\2\2\u132f\u133a\3\2\2\2\u1330\u1331\5\u0214")
        buf.write("\u010b\2\u1331\u1332\7\u01bc\2\2\u1332\u1333\7\u00c5\2")
        buf.write("\2\u1333\u1336\5\u0224\u0113\2\u1334\u1335\7\34\2\2\u1335")
        buf.write("\u1337\7\u045b\2\2\u1336\u1334\3\2\2\2\u1336\u1337\3\2")
        buf.write("\2\2\u1337\u133a\3\2\2\2\u1338\u133a\5\u0214\u010b\2\u1339")
        buf.write("\u131d\3\2\2\2\u1339\u1323\3\2\2\2\u1339\u1330\3\2\2\2")
        buf.write("\u1339\u1338\3\2\2\2\u133a\u01af\3\2\2\2\u133b\u1344\7")
        buf.write("\u00ad\2\2\u133c\u1344\7\u0294\2\2\u133d\u133e\7\u0168")
        buf.write("\2\2\u133e\u1344\7\u045b\2\2\u133f\u1340\7\u01cb\2\2\u1340")
        buf.write("\u1344\7\u045b\2\2\u1341\u1342\7\u026c\2\2\u1342\u1344")
        buf.write("\7\u045b\2\2\u1343\u133b\3\2\2\2\u1343\u133c\3\2\2\2\u1343")
        buf.write("\u133d\3\2\2\2\u1343\u133f\3\2\2\2\u1343\u1341\3\2\2\2")
        buf.write("\u1344\u01b1\3\2\2\2\u1345\u1346\7\u01ed\2\2\u1346\u134e")
        buf.write("\5\u022c\u0117\2\u1347\u1348\7\u01f0\2\2\u1348\u134e\5")
        buf.write("\u022c\u0117\2\u1349\u134a\7\u01ec\2\2\u134a\u134e\5\u022c")
        buf.write("\u0117\2\u134b\u134c\7\u01f1\2\2\u134c\u134e\5\u022c\u0117")
        buf.write("\2\u134d\u1345\3\2\2\2\u134d\u1347\3\2\2\2\u134d\u1349")
        buf.write("\3\2\2\2\u134d\u134b\3\2\2\2\u134e\u01b3\3\2\2\2\u134f")
        buf.write("\u1350\7\u0219\2\2\u1350\u1357\7\u01a2\2\2\u1351\u1358")
        buf.write("\78\2\2\u1352\u1358\7\u0201\2\2\u1353\u1354\7b\2\2\u1354")
        buf.write("\u1355\5\u022c\u0117\2\u1355\u1356\7\u029e\2\2\u1356\u1358")
        buf.write("\3\2\2\2\u1357\u1351\3\2\2\2\u1357\u1352\3\2\2\2\u1357")
        buf.write("\u1353\3\2\2\2\u1357\u1358\3\2\2\2\u1358\u01b5\3\2\2\2")
        buf.write("\u1359\u135a\7\u014e\2\2\u135a\u135b\tD\2\2\u135b\u01b7")
        buf.write("\3\2\2\2\u135c\u1361\5\u01ba\u00de\2\u135d\u135e\5\u0262")
        buf.write("\u0132\2\u135e\u135f\5\u0246\u0124\2\u135f\u1360\5\u0264")
        buf.write("\u0133\2\u1360\u1362\3\2\2\2\u1361\u135d\3\2\2\2\u1361")
        buf.write("\u1362\3\2\2\2\u1362\u01b9\3\2\2\2\u1363\u1365\7\26\2")
        buf.write("\2\u1364\u1366\7\u02ac\2\2\u1365\u1364\3\2\2\2\u1365\u1366")
        buf.write("\3\2\2\2\u1366\u13b3\3\2\2\2\u1367\u1369\7\27\2\2\u1368")
        buf.write("\u136a\7\u02a5\2\2\u1369\u1368\3\2\2\2\u1369\u136a\3\2")
        buf.write("\2\2\u136a\u13b3\3\2\2\2\u136b\u1373\7\60\2\2\u136c\u136d")
        buf.write("\7\u0275\2\2\u136d\u1374\7\u02a4\2\2\u136e\u1374\7\u02a5")
        buf.write("\2\2\u136f\u1374\7\u028b\2\2\u1370\u1374\7\u0285\2\2\u1371")
        buf.write("\u1374\7\u0273\2\2\u1372\u1374\7\u0242\2\2\u1373\u136c")
        buf.write("\3\2\2\2\u1373\u136e\3\2\2\2\u1373\u136f\3\2\2\2\u1373")
        buf.write("\u1370\3\2\2\2\u1373\u1371\3\2\2\2\u1373\u1372\3\2\2\2")
        buf.write("\u1373\u1374\3\2\2\2\u1374\u13b3\3\2\2\2\u1375\u13b3\7")
        buf.write(":\2\2\u1376\u1378\7A\2\2\u1377\u1379\7\u0242\2\2\u1378")
        buf.write("\u1377\3\2\2\2\u1378\u1379\3\2\2\2\u1379\u13b3\3\2\2\2")
        buf.write("\u137a\u13b3\7\u019d\2\2\u137b\u13b3\7\u02a6\2\2\u137c")
        buf.write("\u13b3\7\u02a7\2\2\u137d\u137e\7U\2\2\u137e\u13b3\7\u0081")
        buf.write("\2\2\u137f\u13b3\7]\2\2\u1380\u13b3\7a\2\2\u1381\u1382")
        buf.write("\7r\2\2\u1382\u13b3\7\u02a4\2\2\u1383\u13b3\7\u02a8\2")
        buf.write("\2\u1384\u13b3\7\u0227\2\2\u1385\u13b3\7\u0090\2\2\u1386")
        buf.write("\u13b3\7\u02a9\2\2\u1387\u1388\7\u023c\2\2\u1388\u13b3")
        buf.write("\tE\2\2\u1389\u13b3\7\u00a0\2\2\u138a\u138b\7\u00a3\2")
        buf.write("\2\u138b\u13b3\tF\2\2\u138c\u13b3\7\u02aa\2\2\u138d\u13b3")
        buf.write("\7\u02ab\2\2\u138e\u13b3\7\u00b6\2\2\u138f\u13b3\7\u00bd")
        buf.write("\2\2\u1390\u13b3\7\u00be\2\2\u1391\u13b3\7\u02ad\2\2\u1392")
        buf.write("\u13b3\7\u02ae\2\2\u1393\u13b3\7\u02af\2\2\u1394\u13b3")
        buf.write("\7\u02b0\2\2\u1395\u13b3\7\u02b1\2\2\u1396\u13b3\7\u02b2")
        buf.write("\2\2\u1397\u13b3\7\u02b3\2\2\u1398\u13b3\7\u02b4\2\2\u1399")
        buf.write("\u13b3\7\u02b5\2\2\u139a\u13b3\7\u02b6\2\2\u139b\u13b3")
        buf.write("\7\u02b7\2\2\u139c\u13b3\7\u02b8\2\2\u139d\u13b3\7\u02b9")
        buf.write("\2\2\u139e\u13b3\7\u02ba\2\2\u139f\u13b3\7\u02bb\2\2\u13a0")
        buf.write("\u13b3\7\u02bc\2\2\u13a1\u13b3\7\u02bd\2\2\u13a2\u13b3")
        buf.write("\7\u02be\2\2\u13a3\u13b3\7\u02bf\2\2\u13a4\u13b3\7\u02c0")
        buf.write("\2\2\u13a5\u13b3\7\u02c1\2\2\u13a6\u13b3\7\u02c2\2\2\u13a7")
        buf.write("\u13b3\7\u02c3\2\2\u13a8\u13b3\7\u02c4\2\2\u13a9\u13b3")
        buf.write("\7\u02c5\2\2\u13aa\u13b3\7\u02c6\2\2\u13ab\u13b3\7\u02c7")
        buf.write("\2\2\u13ac\u13b3\7\u02c8\2\2\u13ad\u13b3\7\u0415\2\2\u13ae")
        buf.write("\u13b3\7\u02c9\2\2\u13af\u13b3\7\u02ca\2\2\u13b0\u13b3")
        buf.write("\7\u02cb\2\2\u13b1\u13b3\7\u02cc\2\2\u13b2\u1363\3\2\2")
        buf.write("\2\u13b2\u1367\3\2\2\2\u13b2\u136b\3\2\2\2\u13b2\u1375")
        buf.write("\3\2\2\2\u13b2\u1376\3\2\2\2\u13b2\u137a\3\2\2\2\u13b2")
        buf.write("\u137b\3\2\2\2\u13b2\u137c\3\2\2\2\u13b2\u137d\3\2\2\2")
        buf.write("\u13b2\u137f\3\2\2\2\u13b2\u1380\3\2\2\2\u13b2\u1381\3")
        buf.write("\2\2\2\u13b2\u1383\3\2\2\2\u13b2\u1384\3\2\2\2\u13b2\u1385")
        buf.write("\3\2\2\2\u13b2\u1386\3\2\2\2\u13b2\u1387\3\2\2\2\u13b2")
        buf.write("\u1389\3\2\2\2\u13b2\u138a\3\2\2\2\u13b2\u138c\3\2\2\2")
        buf.write("\u13b2\u138d\3\2\2\2\u13b2\u138e\3\2\2\2\u13b2\u138f\3")
        buf.write("\2\2\2\u13b2\u1390\3\2\2\2\u13b2\u1391\3\2\2\2\u13b2\u1392")
        buf.write("\3\2\2\2\u13b2\u1393\3\2\2\2\u13b2\u1394\3\2\2\2\u13b2")
        buf.write("\u1395\3\2\2\2\u13b2\u1396\3\2\2\2\u13b2\u1397\3\2\2\2")
        buf.write("\u13b2\u1398\3\2\2\2\u13b2\u1399\3\2\2\2\u13b2\u139a\3")
        buf.write("\2\2\2\u13b2\u139b\3\2\2\2\u13b2\u139c\3\2\2\2\u13b2\u139d")
        buf.write("\3\2\2\2\u13b2\u139e\3\2\2\2\u13b2\u139f\3\2\2\2\u13b2")
        buf.write("\u13a0\3\2\2\2\u13b2\u13a1\3\2\2\2\u13b2\u13a2\3\2\2\2")
        buf.write("\u13b2\u13a3\3\2\2\2\u13b2\u13a4\3\2\2\2\u13b2\u13a5\3")
        buf.write("\2\2\2\u13b2\u13a6\3\2\2\2\u13b2\u13a7\3\2\2\2\u13b2\u13a8")
        buf.write("\3\2\2\2\u13b2\u13a9\3\2\2\2\u13b2\u13aa\3\2\2\2\u13b2")
        buf.write("\u13ab\3\2\2\2\u13b2\u13ac\3\2\2\2\u13b2\u13ad\3\2\2\2")
        buf.write("\u13b2\u13ae\3\2\2\2\u13b2\u13af\3\2\2\2\u13b2\u13b0\3")
        buf.write("\2\2\2\u13b2\u13b1\3\2\2\2\u13b3\u01bb\3\2\2\2\u13b4\u13c5")
        buf.write("\7\u043c\2\2\u13b5\u13b6\7\u043c\2\2\u13b6\u13b7\7\u044b")
        buf.write("\2\2\u13b7\u13c5\7\u043c\2\2\u13b8\u13b9\5\u0226\u0114")
        buf.write("\2\u13b9\u13ba\7\u044b\2\2\u13ba\u13bb\7\u043c\2\2\u13bb")
        buf.write("\u13c5\3\2\2\2\u13bc\u13bd\5\u0226\u0114\2\u13bd\u13be")
        buf.write("\7\u044b\2\2\u13be\u13bf\5\u0226\u0114\2\u13bf\u13c5\3")
        buf.write("\2\2\2\u13c0\u13c1\5\u0226\u0114\2\u13c1\u13c2\5\u022a")
        buf.write("\u0116\2\u13c2\u13c5\3\2\2\2\u13c3\u13c5\5\u0226\u0114")
        buf.write("\2\u13c4\u13b4\3\2\2\2\u13c4\u13b5\3\2\2\2\u13c4\u13b8")
        buf.write("\3\2\2\2\u13c4\u13bc\3\2\2\2\u13c4\u13c0\3\2\2\2\u13c4")
        buf.write("\u13c3\3\2\2\2\u13c5\u01bd\3\2\2\2\u13c6\u13c7\5\u0214")
        buf.write("\u010b\2\u13c7\u13c8\7\u00b4\2\2\u13c8\u13c9\5\u0214\u010b")
        buf.write("\2\u13c9\u01bf\3\2\2\2\u13ca\u13cc\7\31\2\2\u13cb\u13cd")
        buf.write("\tG\2\2\u13cc\u13cb\3\2\2\2\u13cc\u13cd\3\2\2\2\u13cd")
        buf.write("\u13ce\3\2\2\2\u13ce\u13cf\7\u00b1\2\2\u13cf\u13e1\5\u0248")
        buf.write("\u0125\2\u13d0\u13d1\7\u00bd\2\2\u13d1\u13d2\7Y\2\2\u13d2")
        buf.write("\u13d3\7\177\2\2\u13d3\u13d8\5\u0210\u0109\2\u13d4\u13d5")
        buf.write("\7\u044e\2\2\u13d5\u13d7\5\u0210\u0109\2\u13d6\u13d4\3")
        buf.write("\2\2\2\u13d7\u13da\3\2\2\2\u13d8\u13d6\3\2\2\2\u13d8\u13d9")
        buf.write("\3\2\2\2\u13d9\u13df\3\2\2\2\u13da\u13d8\3\2\2\2\u13db")
        buf.write("\u13dc\7\u00c5\2\2\u13dc\u13dd\5\u022c\u0117\2\u13dd\u13de")
        buf.write("\7!\2\2\u13de\u13e0\3\2\2\2\u13df\u13db\3\2\2\2\u13df")
        buf.write("\u13e0\3\2\2\2\u13e0\u13e2\3\2\2\2\u13e1\u13d0\3\2\2\2")
        buf.write("\u13e1\u13e2\3\2\2\2\u13e2\u13ee\3\2\2\2\u13e3\u13e4\7")
        buf.write("A\2\2\u13e4\u13e5\7Y\2\2\u13e5\u13e6\7\177\2\2\u13e6\u13eb")
        buf.write("\5\u0210\u0109\2\u13e7\u13e8\7\u044e\2\2\u13e8\u13ea\5")
        buf.write("\u0210\u0109\2\u13e9\u13e7\3\2\2\2\u13ea\u13ed\3\2\2\2")
        buf.write("\u13eb\u13e9\3\2\2\2\u13eb\u13ec\3\2\2\2\u13ec\u13ef\3")
        buf.write("\2\2\2\u13ed\u13eb\3\2\2\2\u13ee\u13e3\3\2\2\2\u13ee\u13ef")
        buf.write("\3\2\2\2\u13ef\u01c1\3\2\2\2\u13f0\u13f1\7)\2\2\u13f1")
        buf.write("\u13f2\7\u00b1\2\2\u13f2\u13f6\5\u0248\u0125\2\u13f3\u13f5")
        buf.write("\5\u01ca\u00e6\2\u13f4\u13f3\3\2\2\2\u13f5\u13f8\3\2\2")
        buf.write("\2\u13f6\u13f4\3\2\2\2\u13f6\u13f7\3\2\2\2\u13f7\u01c3")
        buf.write("\3\2\2\2\u13f8\u13f6\3\2\2\2\u13f9\u13fa\7\u0166\2\2\u13fa")
        buf.write("\u13fb\7\u00b1\2\2\u13fb\u13fd\5\u0248\u0125\2\u13fc\u13fe")
        buf.write("\tH\2\2\u13fd\u13fc\3\2\2\2\u13fd\u13fe\3\2\2\2\u13fe")
        buf.write("\u01c5\3\2\2\2\u13ff\u1401\7\u0080\2\2\u1400\u1402\tG")
        buf.write("\2\2\u1401\u1400\3\2\2\2\u1401\u1402\3\2\2\2\u1402\u1403")
        buf.write("\3\2\2\2\u1403\u1404\tI\2\2\u1404\u1405\5\u0248\u0125")
        buf.write("\2\u1405\u01c7\3\2\2\2\u1406\u1408\7\u0234\2\2\u1407\u1409")
        buf.write("\tG\2\2\u1408\u1407\3\2\2\2\u1408\u1409\3\2\2\2\u1409")
        buf.write("\u140a\3\2\2\2\u140a\u140b\7\u00b1\2\2\u140b\u140d\5\u0248")
        buf.write("\u0125\2\u140c\u140e\7\u0229\2\2\u140d\u140c\3\2\2\2\u140d")
        buf.write("\u140e\3\2\2\2\u140e\u1410\3\2\2\2\u140f\u1411\7\u01a4")
        buf.write("\2\2\u1410\u140f\3\2\2\2\u1410\u1411\3\2\2\2\u1411\u1413")
        buf.write("\3\2\2\2\u1412\u1414\7\u0286\2\2\u1413\u1412\3\2\2\2\u1413")
        buf.write("\u1414\3\2\2\2\u1414\u01c9\3\2\2\2\u1415\u1416\7N\2\2")
        buf.write("\u1416\u141d\7\u0284\2\2\u1417\u141d\7\u0229\2\2\u1418")
        buf.write("\u141d\7\u01a6\2\2\u1419\u141d\7\u01f2\2\2\u141a\u141d")
        buf.write("\7\u01a4\2\2\u141b\u141d\7\u0164\2\2\u141c\u1415\3\2\2")
        buf.write("\2\u141c\u1417\3\2\2\2\u141c\u1418\3\2\2\2\u141c\u1419")
        buf.write("\3\2\2\2\u141c\u141a\3\2\2\2\u141c\u141b\3\2\2\2\u141d")
        buf.write("\u01cb\3\2\2\2\u141e\u1420\7\60\2\2\u141f\u1421\7\u0151")
        buf.write("\2\2\u1420\u141f\3\2\2\2\u1420\u1421\3\2\2\2\u1421\u1422")
        buf.write("\3\2\2\2\u1422\u1423\7\u01b2\2\2\u1423\u1424\5\u0226\u0114")
        buf.write("\2\u1424\u1425\7\u0241\2\2\u1425\u1426\tJ\2\2\u1426\u1427")
        buf.write("\7\u0257\2\2\u1427\u1428\7\u045b\2\2\u1428\u01cd\3\2\2")
        buf.write("\2\u1429\u142a\7\u01c3\2\2\u142a\u142b\7\u021b\2\2\u142b")
        buf.write("\u142c\5\u0226\u0114\2\u142c\u142d\7\u0257\2\2\u142d\u142e")
        buf.write("\7\u045b\2\2\u142e\u01cf\3\2\2\2\u142f\u1430\7\u0281\2")
        buf.write("\2\u1430\u1431\7\u021b\2\2\u1431\u1432\5\u0226\u0114\2")
        buf.write("\u1432\u01d1\3\2\2\2\u1433\u1434\7\u00a1\2\2\u1434\u1435")
        buf.write("\5\u01d6\u00ec\2\u1435\u1436\tK\2\2\u1436\u143e\5\u028c")
        buf.write("\u0147\2\u1437\u1438\7\u044e\2\2\u1438\u1439\5\u01d6\u00ec")
        buf.write("\2\u1439\u143a\tK\2\2\u143a\u143b\5\u028c\u0147\2\u143b")
        buf.write("\u143d\3\2\2\2\u143c\u1437\3\2\2\2\u143d\u1440\3\2\2\2")
        buf.write("\u143e\u143c\3\2\2\2\u143e\u143f\3\2\2\2\u143f\u1467\3")
        buf.write("\2\2\2\u1440\u143e\3\2\2\2\u1441\u1445\7\u00a1\2\2\u1442")
        buf.write("\u1443\7(\2\2\u1443\u1446\7\u00a1\2\2\u1444\u1446\7\u032c")
        buf.write("\2\2\u1445\u1442\3\2\2\2\u1445\u1444\3\2\2\2\u1446\u1449")
        buf.write("\3\2\2\2\u1447\u144a\5\u0218\u010d\2\u1448\u144a\78\2")
        buf.write("\2\u1449\u1447\3\2\2\2\u1449\u1448\3\2\2\2\u144a\u1467")
        buf.write("\3\2\2\2\u144b\u144c\7\u00a1\2\2\u144c\u1453\7\u01ff\2")
        buf.write("\2\u144d\u1450\5\u0218\u010d\2\u144e\u144f\7*\2\2\u144f")
        buf.write("\u1451\5\u021a\u010e\2\u1450\u144e\3\2\2\2\u1450\u1451")
        buf.write("\3\2\2\2\u1451\u1454\3\2\2\2\u1452\u1454\78\2\2\u1453")
        buf.write("\u144d\3\2\2\2\u1453\u1452\3\2\2\2\u1454\u1467\3\2\2\2")
        buf.write("\u1455\u1467\5\u01aa\u00d6\2\u1456\u1467\5\u012c\u0097")
        buf.write("\2\u1457\u1467\5\u012a\u0096\2\u1458\u1459\7\u00a1\2\2")
        buf.write("\u1459\u145a\5\u020c\u0107\2\u145a\u145b\tK\2\2\u145b")
        buf.write("\u1463\5\u028c\u0147\2\u145c\u145d\7\u044e\2\2\u145d\u145e")
        buf.write("\5\u020c\u0107\2\u145e\u145f\tK\2\2\u145f\u1460\5\u028c")
        buf.write("\u0147\2\u1460\u1462\3\2\2\2\u1461\u145c\3\2\2\2\u1462")
        buf.write("\u1465\3\2\2\2\u1463\u1461\3\2\2\2\u1463\u1464\3\2\2\2")
        buf.write("\u1464\u1467\3\2\2\2\u1465\u1463\3\2\2\2\u1466\u1433\3")
        buf.write("\2\2\2\u1466\u1441\3\2\2\2\u1466\u144b\3\2\2\2\u1466\u1455")
        buf.write("\3\2\2\2\u1466\u1456\3\2\2\2\u1466\u1457\3\2\2\2\u1466")
        buf.write("\u1458\3\2\2\2\u1467\u01d3\3\2\2\2\u1468\u1469\7\u00a3")
        buf.write("\2\2\u1469\u146a\t9\2\2\u146a\u1501\7\u01d6\2\2\u146b")
        buf.write("\u146c\7\u00a3\2\2\u146c\u146d\tL\2\2\u146d\u1470\7\u019e")
        buf.write("\2\2\u146e\u146f\7\\\2\2\u146f\u1471\7\u045b\2\2\u1470")
        buf.write("\u146e\3\2\2\2\u1470\u1471\3\2\2\2\u1471\u1474\3\2\2\2")
        buf.write("\u1472\u1473\7Q\2\2\u1473\u1475\5\u022c\u0117\2\u1474")
        buf.write("\u1472\3\2\2\2\u1474\u1475\3\2\2\2\u1475\u147d\3\2\2\2")
        buf.write("\u1476\u147a\7n\2\2\u1477\u1478\5\u022c\u0117\2\u1478")
        buf.write("\u1479\7\u044e\2\2\u1479\u147b\3\2\2\2\u147a\u1477\3\2")
        buf.write("\2\2\u147a\u147b\3\2\2\2\u147b\u147c\3\2\2\2\u147c\u147e")
        buf.write("\5\u022c\u0117\2\u147d\u1476\3\2\2\2\u147d\u147e\3\2\2")
        buf.write("\2\u147e\u1501\3\2\2\2\u147f\u1480\7\u00a3\2\2\u1480\u1482")
        buf.write("\5\u01d8\u00ed\2\u1481\u1483\5\u01da\u00ee\2\u1482\u1481")
        buf.write("\3\2\2\2\u1482\u1483\3\2\2\2\u1483\u1501\3\2\2\2\u1484")
        buf.write("\u1486\7\u00a3\2\2\u1485\u1487\7\u01b1\2\2\u1486\u1485")
        buf.write("\3\2\2\2\u1486\u1487\3\2\2\2\u1487\u1488\3\2\2\2\u1488")
        buf.write("\u1489\t\'\2\2\u1489\u148a\tM\2\2\u148a\u148d\5\u020e")
        buf.write("\u0108\2\u148b\u148c\tM\2\2\u148c\u148e\5\u0226\u0114")
        buf.write("\2\u148d\u148b\3\2\2\2\u148d\u148e\3\2\2\2\u148e\u1490")
        buf.write("\3\2\2\2\u148f\u1491\5\u01da\u00ee\2\u1490\u148f\3\2\2")
        buf.write("\2\u1490\u1491\3\2\2\2\u1491\u1501\3\2\2\2\u1492\u1493")
        buf.write("\7\u00a3\2\2\u1493\u1494\7\60\2\2\u1494\u1496\t\2\2\2")
        buf.write("\u1495\u1497\5\u025e\u0130\2\u1496\u1495\3\2\2\2\u1496")
        buf.write("\u1497\3\2\2\2\u1497\u1498\3\2\2\2\u1498\u1501\5\u0226")
        buf.write("\u0114\2\u1499\u149a\7\u00a3\2\2\u149a\u149b\7\60\2\2")
        buf.write("\u149b\u149c\tN\2\2\u149c\u1501\5\u020c\u0107\2\u149d")
        buf.write("\u149e\7\u00a3\2\2\u149e\u149f\7\60\2\2\u149f\u14a0\7")
        buf.write("\u0285\2\2\u14a0\u1501\5\u0214\u010b\2\u14a1\u14a2\7\u00a3")
        buf.write("\2\2\u14a2\u14a3\7\u0197\2\2\u14a3\u14a4\5\u021c\u010f")
        buf.write("\2\u14a4\u14a5\tO\2\2\u14a5\u1501\3\2\2\2\u14a6\u14a7")
        buf.write("\7\u00a3\2\2\u14a7\u1501\5\u01dc\u00ef\2\u14a8\u14a9\7")
        buf.write("\u00a3\2\2\u14a9\u14aa\tP\2\2\u14aa\u14ae\7n\2\2\u14ab")
        buf.write("\u14ac\5\u022c\u0117\2\u14ac\u14ad\7\u044e\2\2\u14ad\u14af")
        buf.write("\3\2\2\2\u14ae\u14ab\3\2\2\2\u14ae\u14af\3\2\2\2\u14af")
        buf.write("\u14b0\3\2\2\2\u14b0\u1501\5\u022c\u0117\2\u14b1\u14b2")
        buf.write("\7\u00a3\2\2\u14b2\u14b3\7\u0124\2\2\u14b3\u14b4\5\u0262")
        buf.write("\u0132\2\u14b4\u14b5\7\u043c\2\2\u14b5\u14b6\5\u0264\u0133")
        buf.write("\2\u14b6\u14b7\tP\2\2\u14b7\u1501\3\2\2\2\u14b8\u14b9")
        buf.write("\7\u00a3\2\2\u14b9\u14bc\5\u01de\u00f0\2\u14ba\u14bb\t")
        buf.write("M\2\2\u14bb\u14bd\5\u0226\u0114\2\u14bc\u14ba\3\2\2\2")
        buf.write("\u14bc\u14bd\3\2\2\2\u14bd\u14bf\3\2\2\2\u14be\u14c0\5")
        buf.write("\u01da\u00ee\2\u14bf\u14be\3\2\2\2\u14bf\u14c0\3\2\2\2")
        buf.write("\u14c0\u1501\3\2\2\2\u14c1\u14c2\7\u00a3\2\2\u14c2\u14c3")
        buf.write("\tQ\2\2\u14c3\u14c4\7\u016d\2\2\u14c4\u1501\5\u020c\u0107")
        buf.write("\2\u14c5\u14c6\7\u00a3\2\2\u14c6\u14c9\7\u01b5\2\2\u14c7")
        buf.write("\u14c8\7N\2\2\u14c8\u14ca\5\u0214\u010b\2\u14c9\u14c7")
        buf.write("\3\2\2\2\u14c9\u14ca\3\2\2\2\u14ca\u1501\3\2\2\2\u14cb")
        buf.write("\u14cc\7\u00a3\2\2\u14cc\u14cd\tR\2\2\u14cd\u14ce\tM\2")
        buf.write("\2\u14ce\u14d1\5\u020e\u0108\2\u14cf\u14d0\tM\2\2\u14d0")
        buf.write("\u14d2\5\u0226\u0114\2\u14d1\u14cf\3\2\2\2\u14d1\u14d2")
        buf.write("\3\2\2\2\u14d2\u14d5\3\2\2\2\u14d3\u14d4\7\u00c3\2\2\u14d4")
        buf.write("\u14d6\5\u028c\u0147\2\u14d5\u14d3\3\2\2\2\u14d5\u14d6")
        buf.write("\3\2\2\2\u14d6\u1501\3\2\2\2\u14d7\u14d8\7\u00a3\2\2\u14d8")
        buf.write("\u14d9\7\u020f\2\2\u14d9\u14dc\7\u02a4\2\2\u14da\u14db")
        buf.write("\tM\2\2\u14db\u14dd\5\u0226\u0114\2\u14dc\u14da\3\2\2")
        buf.write("\2\u14dc\u14dd\3\2\2\2\u14dd\u14df\3\2\2\2\u14de\u14e0")
        buf.write("\5\u01da\u00ee\2\u14df\u14de\3\2\2\2\u14df\u14e0\3\2\2")
        buf.write("\2\u14e0\u1501\3\2\2\2\u14e1\u14e2\7\u00a3\2\2\u14e2\u14e3")
        buf.write("\7\u0225\2\2\u14e3\u14e8\5\u01e0\u00f1\2\u14e4\u14e5\7")
        buf.write("\u044e\2\2\u14e5\u14e7\5\u01e0\u00f1\2\u14e6\u14e4\3\2")
        buf.write("\2\2\u14e7\u14ea\3\2\2\2\u14e8\u14e6\3\2\2\2\u14e8\u14e9")
        buf.write("\3\2\2\2\u14e9\u14ee\3\2\2\2\u14ea\u14e8\3\2\2\2\u14eb")
        buf.write("\u14ec\7N\2\2\u14ec\u14ed\7\u0228\2\2\u14ed\u14ef\5\u022c")
        buf.write("\u0117\2\u14ee\u14eb\3\2\2\2\u14ee\u14ef\3\2\2\2\u14ef")
        buf.write("\u14f0\3\2\2\2\u14f0\u14f4\7n\2\2\u14f1\u14f2\5\u022c")
        buf.write("\u0117\2\u14f2\u14f3\7\u044e\2\2\u14f3\u14f5\3\2\2\2\u14f4")
        buf.write("\u14f1\3\2\2\2\u14f4\u14f5\3\2\2\2\u14f5\u14f6\3\2\2\2")
        buf.write("\u14f6\u14f7\5\u022c\u0117\2\u14f7\u1501\3\2\2\2\u14f8")
        buf.write("\u14f9\7\u00a3\2\2\u14f9\u14fa\7\u0252\2\2\u14fa\u14fe")
        buf.write("\7\u0266\2\2\u14fb\u14fc\7N\2\2\u14fc\u14fd\7\u0165\2")
        buf.write("\2\u14fd\u14ff\7\u045b\2\2\u14fe\u14fb\3\2\2\2\u14fe\u14ff")
        buf.write("\3\2\2\2\u14ff\u1501\3\2\2\2\u1500\u1468\3\2\2\2\u1500")
        buf.write("\u146b\3\2\2\2\u1500\u147f\3\2\2\2\u1500\u1484\3\2\2\2")
        buf.write("\u1500\u1492\3\2\2\2\u1500\u1499\3\2\2\2\u1500\u149d\3")
        buf.write("\2\2\2\u1500\u14a1\3\2\2\2\u1500\u14a6\3\2\2\2\u1500\u14a8")
        buf.write("\3\2\2\2\u1500\u14b1\3\2\2\2\u1500\u14b8\3\2\2\2\u1500")
        buf.write("\u14c1\3\2\2\2\u1500\u14c5\3\2\2\2\u1500\u14cb\3\2\2\2")
        buf.write("\u1500\u14d7\3\2\2\2\u1500\u14e1\3\2\2\2\u1500\u14f8\3")
        buf.write("\2\2\2\u1501\u01d5\3\2\2\2\u1502\u150d\7\u0467\2\2\u1503")
        buf.write("\u150d\7\u0468\2\2\u1504\u1505\7\u0450\2\2\u1505\u1507")
        buf.write("\7\u0450\2\2\u1506\u1504\3\2\2\2\u1506\u1507\3\2\2\2\u1507")
        buf.write("\u1508\3\2\2\2\u1508\u150a\tS\2\2\u1509\u1506\3\2\2\2")
        buf.write("\u1509\u150a\3\2\2\2\u150a\u150b\3\2\2\2\u150b\u150d\5")
        buf.write("\u0226\u0114\2\u150c\u1502\3\2\2\2\u150c\u1503\3\2\2\2")
        buf.write("\u150c\u1509\3\2\2\2\u150d\u01d7\3\2\2\2\u150e\u150f\7")
        buf.write("(\2\2\u150f\u151c\7\u00a1\2\2\u1510\u151c\7\u032f\2\2")
        buf.write("\u1511\u151c\7\66\2\2\u1512\u151c\7\u009f\2\2\u1513\u1514")
        buf.write("\7\u01b2\2\2\u1514\u151c\7\u0266\2\2\u1515\u1516\7\u008b")
        buf.write("\2\2\u1516\u151c\7\u0266\2\2\u1517\u1519\t8\2\2\u1518")
        buf.write("\u1517\3\2\2\2\u1518\u1519\3\2\2\2\u1519\u151a\3\2\2\2")
        buf.write("\u151a\u151c\tT\2\2\u151b\u150e\3\2\2\2\u151b\u1510\3")
        buf.write("\2\2\2\u151b\u1511\3\2\2\2\u151b\u1512\3\2\2\2\u151b\u1513")
        buf.write("\3\2\2\2\u151b\u1515\3\2\2\2\u151b\u1518\3\2\2\2\u151c")
        buf.write("\u01d9\3\2\2\2\u151d\u151e\7m\2\2\u151e\u1522\7\u045b")
        buf.write("\2\2\u151f\u1520\7\u00c3\2\2\u1520\u1522\5\u028c\u0147")
        buf.write("\2\u1521\u151d\3\2\2\2\u1521\u151f\3\2\2\2\u1522\u01db")
        buf.write("\3\2\2\2\u1523\u1525\7\u0268\2\2\u1524\u1523\3\2\2\2\u1524")
        buf.write("\u1525\3\2\2\2\u1525\u1526\3\2\2\2\u1526\u1535\7\u0198")
        buf.write("\2\2\u1527\u1528\7\u01d7\2\2\u1528\u1535\7\u0266\2\2\u1529")
        buf.write("\u1535\7\u021d\2\2\u152a\u1535\7\u02ac\2\2\u152b\u152d")
        buf.write("\7\u01b1\2\2\u152c\u152b\3\2\2\2\u152c\u152d\3\2\2\2\u152d")
        buf.write("\u152e\3\2\2\2\u152e\u1535\7\u0224\2\2\u152f\u1535\7\u0226")
        buf.write("\2\2\u1530\u1531\7\u0252\2\2\u1531\u1535\7\u01bb\2\2\u1532")
        buf.write("\u1535\7\u0155\2\2\u1533\u1535\7\u0180\2\2\u1534\u1524")
        buf.write("\3\2\2\2\u1534\u1527\3\2\2\2\u1534\u1529\3\2\2\2\u1534")
        buf.write("\u152a\3\2\2\2\u1534\u152c\3\2\2\2\u1534\u152f\3\2\2\2")
        buf.write("\u1534\u1530\3\2\2\2\u1534\u1532\3\2\2\2\u1534\u1533\3")
        buf.write("\2\2\2\u1535\u01dd\3\2\2\2\u1536\u153f\7\u019e\2\2\u1537")
        buf.write("\u1538\7\u00b1\2\2\u1538\u153f\7\u0266\2\2\u1539\u153b")
        buf.write("\7\u01b1\2\2\u153a\u1539\3\2\2\2\u153a\u153b\3\2\2\2\u153b")
        buf.write("\u153c\3\2\2\2\u153c\u153f\7\u02a4\2\2\u153d\u153f\7\u027b")
        buf.write("\2\2\u153e\u1536\3\2\2\2\u153e\u1537\3\2\2\2\u153e\u153a")
        buf.write("\3\2\2\2\u153e\u153d\3\2\2\2\u153f\u01df\3\2\2\2\u1540")
        buf.write("\u154d\7\26\2\2\u1541\u1542\7\u015d\2\2\u1542\u154d\7")
        buf.write("\u01c7\2\2\u1543\u1544\7\u017f\2\2\u1544\u154d\7\u0271")
        buf.write("\2\2\u1545\u154d\7\u0182\2\2\u1546\u154d\7\u01c9\2\2\u1547")
        buf.write("\u154d\7\u02fb\2\2\u1548\u1549\7\u0214\2\2\u1549\u154d")
        buf.write("\7\u01a7\2\2\u154a\u154d\7\u0259\2\2\u154b\u154d\7\u0270")
        buf.write("\2\2\u154c\u1540\3\2\2\2\u154c\u1541\3\2\2\2\u154c\u1543")
        buf.write("\3\2\2\2\u154c\u1545\3\2\2\2\u154c\u1546\3\2\2\2\u154c")
        buf.write("\u1547\3\2\2\2\u154c\u1548\3\2\2\2\u154c\u154a\3\2\2\2")
        buf.write("\u154c\u154b\3\2\2\2\u154d\u01e1\3\2\2\2\u154e\u154f\7")
        buf.write("\u015b\2\2\u154f\u1550\7\u045b\2\2\u1550\u01e3\3\2\2\2")
        buf.write("\u1551\u1552\7\u0161\2\2\u1552\u1553\7]\2\2\u1553\u1558")
        buf.write("\5\u01f0\u00f9\2\u1554\u1555\7\u044e\2\2\u1555\u1557\5")
        buf.write("\u01f0\u00f9\2\u1556\u1554\3\2\2\2\u1557\u155a\3\2\2\2")
        buf.write("\u1558\u1556\3\2\2\2\u1558\u1559\3\2\2\2\u1559\u1563\3")
        buf.write("\2\2\2\u155a\u1558\3\2\2\2\u155b\u155c\7\u0089\2\2\u155c")
        buf.write("\u155f\5\u0262\u0132\2\u155d\u1560\5\u0246\u0124\2\u155e")
        buf.write("\u1560\7\26\2\2\u155f\u155d\3\2\2\2\u155f\u155e\3\2\2")
        buf.write("\2\u1560\u1561\3\2\2\2\u1561\u1562\5\u0264\u0133\2\u1562")
        buf.write("\u1564\3\2\2\2\u1563\u155b\3\2\2\2\u1563\u1564\3\2\2\2")
        buf.write("\u1564\u1565\3\2\2\2\u1565\u1566\7\\\2\2\u1566\u1567\5")
        buf.write("\u0226\u0114\2\u1567\u01e5\3\2\2\2\u1568\u156a\7\u01ad")
        buf.write("\2\2\u1569\u156b\tG\2\2\u156a\u1569\3\2\2\2\u156a\u156b")
        buf.write("\3\2\2\2\u156b\u156c\3\2\2\2\u156c\u1571\5\u01f2\u00fa")
        buf.write("\2\u156d\u156e\7\u044e\2\2\u156e\u1570\5\u01f2\u00fa\2")
        buf.write("\u156f\u156d\3\2\2\2\u1570\u1573\3\2\2\2\u1571\u156f\3")
        buf.write("\2\2\2\u1571\u1572\3\2\2\2\u1572\u01e7\3\2\2\2\u1573\u1571")
        buf.write("\3\2\2\2\u1574\u1576\7i\2\2\u1575\u1577\tU\2\2\u1576\u1575")
        buf.write("\3\2\2\2\u1576\u1577\3\2\2\2\u1577\u1579\3\2\2\2\u1578")
        buf.write("\u157a\5\u022c\u0117\2\u1579\u1578\3\2\2\2\u157a\u157b")
        buf.write("\3\2\2\2\u157b\u1579\3\2\2\2\u157b\u157c\3\2\2\2\u157c")
        buf.write("\u01e9\3\2\2\2\u157d\u157e\7q\2\2\u157e\u157f\7]\2\2\u157f")
        buf.write("\u1580\7c\2\2\u1580\u1581\7\u0161\2\2\u1581\u1586\5\u01f6")
        buf.write("\u00fc\2\u1582\u1583\7\u044e\2\2\u1583\u1585\5\u01f6\u00fc")
        buf.write("\2\u1584\u1582\3\2\2\2\u1585\u1588\3\2\2\2\u1586\u1584")
        buf.write("\3\2\2\2\u1586\u1587\3\2\2\2\u1587\u01eb\3\2\2\2\u1588")
        buf.write("\u1586\3\2\2\2\u1589\u158a\7\u023d\2\2\u158a\u158b\7\u0228")
        buf.write("\2\2\u158b\u158c\7\u0161\2\2\u158c\u01ed\3\2\2\2\u158d")
        buf.write("\u158e\7\u02aa\2\2\u158e\u01ef\3\2\2\2\u158f\u1597\5\u020e")
        buf.write("\u0108\2\u1590\u1592\t\24\2\2\u1591\u1590\3\2\2\2\u1591")
        buf.write("\u1592\3\2\2\2\u1592\u1593\3\2\2\2\u1593\u1594\5\u0262")
        buf.write("\u0132\2\u1594\u1595\5\u0246\u0124\2\u1595\u1596\5\u0264")
        buf.write("\u0133\2\u1596\u1598\3\2\2\2\u1597\u1591\3\2\2\2\u1597")
        buf.write("\u1598\3\2\2\2\u1598\u01f1\3\2\2\2\u1599\u15ac\7\u018a")
        buf.write("\2\2\u159a\u15ac\7\u01bb\2\2\u159b\u159d\tV\2\2\u159c")
        buf.write("\u159b\3\2\2\2\u159c\u159d\3\2\2\2\u159d\u159e\3\2\2\2")
        buf.write("\u159e\u15ac\7\u01d6\2\2\u159f\u15ac\7\u0210\2\2\u15a0")
        buf.write("\u15ac\7\u02ac\2\2\u15a1\u15a2\7\u0228\2\2\u15a2\u15ac")
        buf.write("\7\u0161\2\2\u15a3\u15ac\7\u0266\2\2\u15a4\u15ac\7\u0287")
        buf.write("\2\2\u15a5\u15a9\7\u02a4\2\2\u15a6\u15a7\7\u00c5\2\2\u15a7")
        buf.write("\u15a8\7\u008e\2\2\u15a8\u15aa\7r\2\2\u15a9\u15a6\3\2")
        buf.write("\2\2\u15a9\u15aa\3\2\2\2\u15aa\u15ac\3\2\2\2\u15ab\u1599")
        buf.write("\3\2\2\2\u15ab\u159a\3\2\2\2\u15ab\u159c\3\2\2\2\u15ab")
        buf.write("\u159f\3\2\2\2\u15ab\u15a0\3\2\2\2\u15ab\u15a1\3\2\2\2")
        buf.write("\u15ab\u15a3\3\2\2\2\u15ab\u15a4\3\2\2\2\u15ab\u15a5\3")
        buf.write("\2\2\2\u15ac\u15b8\3\2\2\2\u15ad\u15ae\7\u022e\2\2\u15ae")
        buf.write("\u15b0\7\u01d6\2\2\u15af\u15b1\5\u0152\u00aa\2\u15b0\u15af")
        buf.write("\3\2\2\2\u15b0\u15b1\3\2\2\2\u15b1\u15b8\3\2\2\2\u15b2")
        buf.write("\u15b3\7\u02a4\2\2\u15b3\u15b5\5\u0248\u0125\2\u15b4\u15b6")
        buf.write("\5\u01f4\u00fb\2\u15b5\u15b4\3\2\2\2\u15b5\u15b6\3\2\2")
        buf.write("\2\u15b6\u15b8\3\2\2\2\u15b7\u15ab\3\2\2\2\u15b7\u15ad")
        buf.write("\3\2\2\2\u15b7\u15b2\3\2\2\2\u15b8\u01f3\3\2\2\2\u15b9")
        buf.write("\u15ba\7\u00c5\2\2\u15ba\u15bb\7\u008e\2\2\u15bb\u15bf")
        buf.write("\7r\2\2\u15bc\u15bd\7N\2\2\u15bd\u15bf\7\u01a3\2\2\u15be")
        buf.write("\u15b9\3\2\2\2\u15be\u15bc\3\2\2\2\u15bf\u01f5\3\2\2\2")
        buf.write("\u15c0\u15c9\5\u020e\u0108\2\u15c1\u15c2\7\u0089\2\2\u15c2")
        buf.write("\u15c5\5\u0262\u0132\2\u15c3\u15c6\5\u0246\u0124\2\u15c4")
        buf.write("\u15c6\7\26\2\2\u15c5\u15c3\3\2\2\2\u15c5\u15c4\3\2\2")
        buf.write("\2\u15c6\u15c7\3\2\2\2\u15c7\u15c8\5\u0264\u0133\2\u15c8")
        buf.write("\u15ca\3\2\2\2\u15c9\u15c1\3\2\2\2\u15c9\u15ca\3\2\2\2")
        buf.write("\u15ca\u15d2\3\2\2\2\u15cb\u15cd\t\24\2\2\u15cc\u15cb")
        buf.write("\3\2\2\2\u15cc\u15cd\3\2\2\2\u15cd\u15ce\3\2\2\2\u15ce")
        buf.write("\u15cf\5\u0262\u0132\2\u15cf\u15d0\5\u0246\u0124\2\u15d0")
        buf.write("\u15d1\5\u0264\u0133\2\u15d1\u15d3\3\2\2\2\u15d2\u15cc")
        buf.write("\3\2\2\2\u15d2\u15d3\3\2\2\2\u15d3\u15d6\3\2\2\2\u15d4")
        buf.write("\u15d5\7[\2\2\u15d5\u15d7\7\u01d0\2\2\u15d6\u15d4\3\2")
        buf.write("\2\2\u15d6\u15d7\3\2\2\2\u15d7\u01f7\3\2\2\2\u15d8\u15d9")
        buf.write("\tW\2\2\u15d9\u15dc\5\u020e\u0108\2\u15da\u15dd\5\u0226")
        buf.write("\u0114\2\u15db\u15dd\7\u045b\2\2\u15dc\u15da\3\2\2\2\u15dc")
        buf.write("\u15db\3\2\2\2\u15dc\u15dd\3\2\2\2\u15dd\u01f9\3\2\2\2")
        buf.write("\u15de\u15e2\tW\2\2\u15df\u15e0\tX\2\2\u15e0\u15e1\7\u0443")
        buf.write("\2\2\u15e1\u15e3\tY\2\2\u15e2\u15df\3\2\2\2\u15e2\u15e3")
        buf.write("\3\2\2\2\u15e3\u15e4\3\2\2\2\u15e4\u15e5\5\u020a\u0106")
        buf.write("\2\u15e5\u01fb\3\2\2\2\u15e6\u15e7\7\u01b9\2\2\u15e7\u15e8")
        buf.write("\7\u045b\2\2\u15e8\u01fd\3\2\2\2\u15e9\u15ea\7\u00bf\2")
        buf.write("\2\u15ea\u15eb\5\u0226\u0114\2\u15eb\u01ff\3\2\2\2\u15ec")
        buf.write("\u15f4\7\u00a4\2\2\u15ed\u15ef\7\u00a8\2\2\u15ee\u15f0")
        buf.write("\7\u0289\2\2\u15ef\u15ee\3\2\2\2\u15ef\u15f0\3\2\2\2\u15f0")
        buf.write("\u15f1\3\2\2\2\u15f1\u15f5\5\u0230\u0119\2\u15f2\u15f5")
        buf.write("\7\u0463\2\2\u15f3\u15f5\7\u0464\2\2\u15f4\u15ed\3\2\2")
        buf.write("\2\u15f4\u15f2\3\2\2\2\u15f4\u15f3\3\2\2\2\u15f5\u15ff")
        buf.write("\3\2\2\2\u15f6\u15f7\7\u00a1\2\2\u15f7\u15fc\5\u0204\u0103")
        buf.write("\2\u15f8\u15f9\7\u044e\2\2\u15f9\u15fb\5\u0204\u0103\2")
        buf.write("\u15fa\u15f8\3\2\2\2\u15fb\u15fe\3\2\2\2\u15fc\u15fa\3")
        buf.write("\2\2\2\u15fc\u15fd\3\2\2\2\u15fd\u1600\3\2\2\2\u15fe\u15fc")
        buf.write("\3\2\2\2\u15ff\u15f6\3\2\2\2\u15ff\u1600\3\2\2\2\u1600")
        buf.write("\u0201\3\2\2\2\u1601\u1609\7\u0097\2\2\u1602\u1604\7\u00a8")
        buf.write("\2\2\u1603\u1605\7\u0289\2\2\u1604\u1603\3\2\2\2\u1604")
        buf.write("\u1605\3\2\2\2\u1605\u1606\3\2\2\2\u1606\u160a\5\u0230")
        buf.write("\u0119\2\u1607\u160a\7\u0463\2\2\u1608\u160a\7\u0464\2")
        buf.write("\2\u1609\u1602\3\2\2\2\u1609\u1607\3\2\2\2\u1609\u1608")
        buf.write("\3\2\2\2\u1609\u160a\3\2\2\2\u160a\u1614\3\2\2\2\u160b")
        buf.write("\u160c\7\u00a1\2\2\u160c\u1611\5\u0204\u0103\2\u160d\u160e")
        buf.write("\7\u044e\2\2\u160e\u1610\5\u0204\u0103\2\u160f\u160d\3")
        buf.write("\2\2\2\u1610\u1613\3\2\2\2\u1611\u160f\3\2\2\2\u1611\u1612")
        buf.write("\3\2\2\2\u1612\u1615\3\2\2\2\u1613\u1611\3\2\2\2\u1614")
        buf.write("\u160b\3\2\2\2\u1614\u1615\3\2\2\2\u1615\u0203\3\2\2\2")
        buf.write("\u1616\u1617\tZ\2\2\u1617\u161c\7\u0443\2\2\u1618\u161d")
        buf.write("\5\u0230\u0119\2\u1619\u161d\7\u045c\2\2\u161a\u161d\5")
        buf.write("\u0216\u010c\2\u161b\u161d\5\u0228\u0115\2\u161c\u1618")
        buf.write("\3\2\2\2\u161c\u1619\3\2\2\2\u161c\u161a\3\2\2\2\u161c")
        buf.write("\u161b\3\2\2\2\u161d\u0205\3\2\2\2\u161e\u1620\7T\2\2")
        buf.write("\u161f\u1621\t[\2\2\u1620\u161f\3\2\2\2\u1620\u1621\3")
        buf.write("\2\2\2\u1621\u1622\3\2\2\2\u1622\u1642\7>\2\2\u1623\u1624")
        buf.write("\5\u01d6\u00ec\2\u1624\u1625\7\u0443\2\2\u1625\u162d\t")
        buf.write("\\\2\2\u1626\u1627\7\u044e\2\2\u1627\u1628\5\u01d6\u00ec")
        buf.write("\2\u1628\u1629\7\u0443\2\2\u1629\u162a\t\\\2\2\u162a\u162c")
        buf.write("\3\2\2\2\u162b\u1626\3\2\2\2\u162c\u162f\3\2\2\2\u162d")
        buf.write("\u162b\3\2\2\2\u162d\u162e\3\2\2\2\u162e\u1643\3\2\2\2")
        buf.write("\u162f\u162d\3\2\2\2\u1630\u1633\7,\2\2\u1631\u1634\5")
        buf.write("\u022c\u0117\2\u1632\u1634\5\u01d6\u00ec\2\u1633\u1631")
        buf.write("\3\2\2\2\u1633\u1632\3\2\2\2\u1634\u1635\3\2\2\2\u1635")
        buf.write("\u1636\5\u01d6\u00ec\2\u1636\u1637\7\u0443\2\2\u1637\u163f")
        buf.write("\5\u0208\u0105\2\u1638\u1639\7\u044e\2\2\u1639\u163a\5")
        buf.write("\u01d6\u00ec\2\u163a\u163b\7\u0443\2\2\u163b\u163c\5\u0208")
        buf.write("\u0105\2\u163c\u163e\3\2\2\2\u163d\u1638\3\2\2\2\u163e")
        buf.write("\u1641\3\2\2\2\u163f\u163d\3\2\2\2\u163f\u1640\3\2\2\2")
        buf.write("\u1640\u1643\3\2\2\2\u1641\u163f\3\2\2\2\u1642\u1623\3")
        buf.write("\2\2\2\u1642\u1630\3\2\2\2\u1643\u0207\3\2\2\2\u1644\u1645")
        buf.write("\t]\2\2\u1645\u0209\3\2\2\2\u1646\u164c\5\u00b6\\\2\u1647")
        buf.write("\u164c\5\u00a8U\2\u1648\u164c\5\u00aeX\2\u1649\u164c\5")
        buf.write("\u00b4[\2\u164a\u164c\5\u00b8]\2\u164b\u1646\3\2\2\2\u164b")
        buf.write("\u1647\3\2\2\2\u164b\u1648\3\2\2\2\u164b\u1649\3\2\2\2")
        buf.write("\u164b\u164a\3\2\2\2\u164c\u1651\3\2\2\2\u164d\u164e\7")
        buf.write("N\2\2\u164e\u164f\7\u0179\2\2\u164f\u1651\5\u0226\u0114")
        buf.write("\2\u1650\u164b\3\2\2\2\u1650\u164d\3\2\2\2\u1651\u020b")
        buf.write("\3\2\2\2\u1652\u1656\5\u0226\u0114\2\u1653\u1657\7\u0462")
        buf.write("\2\2\u1654\u1655\7\u044b\2\2\u1655\u1657\5\u0226\u0114")
        buf.write("\2\u1656\u1653\3\2\2\2\u1656\u1654\3\2\2\2\u1656\u1657")
        buf.write("\3\2\2\2\u1657\u020d\3\2\2\2\u1658\u1659\5\u020c\u0107")
        buf.write("\2\u1659\u020f\3\2\2\2\u165a\u165f\5\u0226\u0114\2\u165b")
        buf.write("\u165d\5\u022a\u0116\2\u165c\u165e\5\u022a\u0116\2\u165d")
        buf.write("\u165c\3\2\2\2\u165d\u165e\3\2\2\2\u165e\u1660\3\2\2\2")
        buf.write("\u165f\u165b\3\2\2\2\u165f\u1660\3\2\2\2\u1660\u1667\3")
        buf.write("\2\2\2\u1661\u1662\13\2\2\2\u1662\u1664\5\u022a\u0116")
        buf.write("\2\u1663\u1665\5\u022a\u0116\2\u1664\u1663\3\2\2\2\u1664")
        buf.write("\u1665\3\2\2\2\u1665\u1667\3\2\2\2\u1666\u165a\3\2\2\2")
        buf.write("\u1666\u1661\3\2\2\2\u1667\u0211\3\2\2\2\u1668\u166b\5")
        buf.write("\u0226\u0114\2\u1669\u166b\7\u045b\2\2\u166a\u1668\3\2")
        buf.write("\2\2\u166a\u1669\3\2\2\2\u166b\u1670\3\2\2\2\u166c\u166d")
        buf.write("\5\u0262\u0132\2\u166d\u166e\5\u022c\u0117\2\u166e\u166f")
        buf.write("\5\u0264\u0133\2\u166f\u1671\3\2\2\2\u1670\u166c\3\2\2")
        buf.write("\2\u1670\u1671\3\2\2\2\u1671\u1674\3\2\2\2\u1672\u1674")
        buf.write("\5\u028c\u0147\2\u1673\u166a\3\2\2\2\u1673\u1672\3\2\2")
        buf.write("\2\u1674\u1676\3\2\2\2\u1675\u1677\t.\2\2\u1676\u1675")
        buf.write("\3\2\2\2\u1676\u1677\3\2\2\2\u1677\u0213\3\2\2\2\u1678")
        buf.write("\u1679\t^\2\2\u1679\u0215\3\2\2\2\u167a\u167b\t_\2\2\u167b")
        buf.write("\u0217\3\2\2\2\u167c\u1681\7\u00e7\2\2\u167d\u1681\5\u029e")
        buf.write("\u0150\2\u167e\u1681\7\u045b\2\2\u167f\u1681\7\u0458\2")
        buf.write("\2\u1680\u167c\3\2\2\2\u1680\u167d\3\2\2\2\u1680\u167e")
        buf.write("\3\2\2\2\u1680\u167f\3\2\2\2\u1681\u0219\3\2\2\2\u1682")
        buf.write("\u1685\5\u0226\u0114\2\u1683\u1685\7\u045b\2\2\u1684\u1682")
        buf.write("\3\2\2\2\u1684\u1683\3\2\2\2\u1685\u021b\3\2\2\2\u1686")
        buf.write("\u1687\t`\2\2\u1687\u021d\3\2\2\2\u1688\u1689\5\u022c")
        buf.write("\u0117\2\u1689\u168a\7\u0440\2\2\u168a\u168b\5\u022c\u0117")
        buf.write("\2\u168b\u168c\7\u0440\2\2\u168c\u168d\5\u022c\u0117\2")
        buf.write("\u168d\u168e\7\u0440\2\2\u168e\u168f\5\u022c\u0117\2\u168f")
        buf.write("\u1690\7\u0440\2\2\u1690\u1696\5\u022c\u0117\2\u1691\u1692")
        buf.write("\7\u0457\2\2\u1692\u1693\5\u022c\u0117\2\u1693\u1694\7")
        buf.write("\u0440\2\2\u1694\u1695\5\u022c\u0117\2\u1695\u1697\3\2")
        buf.write("\2\2\u1696\u1691\3\2\2\2\u1697\u1698\3\2\2\2\u1698\u1696")
        buf.write("\3\2\2\2\u1698\u1699\3\2\2\2\u1699\u021f\3\2\2\2\u169a")
        buf.write("\u16a1\5\u0222\u0112\2\u169b\u169c\7\u044e\2\2\u169c\u169f")
        buf.write("\5\u0222\u0112\2\u169d\u169e\7\u044e\2\2\u169e\u16a0\5")
        buf.write("\u022c\u0117\2\u169f\u169d\3\2\2\2\u169f\u16a0\3\2\2\2")
        buf.write("\u16a0\u16a2\3\2\2\2\u16a1\u169b\3\2\2\2\u16a1\u16a2\3")
        buf.write("\2\2\2\u16a2\u0221\3\2\2\2\u16a3\u16ab\7\u045b\2\2\u16a4")
        buf.write("\u16ab\7\u0460\2\2\u16a5\u16a7\7\u045d\2\2\u16a6\u16a5")
        buf.write("\3\2\2\2\u16a7\u16a8\3\2\2\2\u16a8\u16a6\3\2\2\2\u16a8")
        buf.write("\u16a9\3\2\2\2\u16a9\u16ab\3\2\2\2\u16aa\u16a3\3\2\2\2")
        buf.write("\u16aa\u16a4\3\2\2\2\u16aa\u16a6\3\2\2\2\u16ab\u0223\3")
        buf.write("\2\2\2\u16ac\u16af\5\u0226\u0114\2\u16ad\u16af\7\u045b")
        buf.write("\2\2\u16ae\u16ac\3\2\2\2\u16ae\u16ad\3\2\2\2\u16af\u0225")
        buf.write("\3\2\2\2\u16b0\u16b4\5\u0228\u0115\2\u16b1\u16b4\7\u0464")
        buf.write("\2\2\u16b2\u16b4\7\u0458\2\2\u16b3\u16b0\3\2\2\2\u16b3")
        buf.write("\u16b1\3\2\2\2\u16b3\u16b2\3\2\2\2\u16b4\u0227\3\2\2\2")
        buf.write("\u16b5\u16bf\7\u0463\2\2\u16b6\u16bf\5\u029e\u0150\2\u16b7")
        buf.write("\u16bf\5\u02a0\u0151\2\u16b8\u16bf\5\u021c\u010f\2\u16b9")
        buf.write("\u16bf\5\u02a2\u0152\2\u16ba\u16bf\5\u02a4\u0153\2\u16bb")
        buf.write("\u16bf\5\u02a6\u0154\2\u16bc\u16bf\5\u02a8\u0155\2\u16bd")
        buf.write("\u16bf\5\u02aa\u0156\2\u16be\u16b5\3\2\2\2\u16be\u16b6")
        buf.write("\3\2\2\2\u16be\u16b7\3\2\2\2\u16be\u16b8\3\2\2\2\u16be")
        buf.write("\u16b9\3\2\2\2\u16be\u16ba\3\2\2\2\u16be\u16bb\3\2\2\2")
        buf.write("\u16be\u16bc\3\2\2\2\u16be\u16bd\3\2\2\2\u16bf\u0229\3")
        buf.write("\2\2\2\u16c0\u16c4\7\u0462\2\2\u16c1\u16c2\7\u044b\2\2")
        buf.write("\u16c2\u16c4\5\u0226\u0114\2\u16c3\u16c0\3\2\2\2\u16c3")
        buf.write("\u16c1\3\2\2\2\u16c4\u022b\3\2\2\2\u16c5\u16c6\ta\2\2")
        buf.write("\u16c6\u022d\3\2\2\2\u16c7\u16ca\7\u0459\2\2\u16c8\u16ca")
        buf.write("\5\u022c\u0117\2\u16c9\u16c7\3\2\2\2\u16c9\u16c8\3\2\2")
        buf.write("\2\u16ca\u022f\3\2\2\2\u16cb\u16cd\7\u0461\2\2\u16cc\u16cb")
        buf.write("\3\2\2\2\u16cc\u16cd\3\2\2\2\u16cd\u16ce\3\2\2\2\u16ce")
        buf.write("\u16d1\7\u045b\2\2\u16cf\u16d1\7\u045a\2\2\u16d0\u16cc")
        buf.write("\3\2\2\2\u16d0\u16cf\3\2\2\2\u16d1\u16d3\3\2\2\2\u16d2")
        buf.write("\u16d4\7\u045b\2\2\u16d3\u16d2\3\2\2\2\u16d4\u16d5\3\2")
        buf.write("\2\2\u16d5\u16d3\3\2\2\2\u16d5\u16d6\3\2\2\2\u16d6\u16e3")
        buf.write("\3\2\2\2\u16d7\u16d9\7\u0461\2\2\u16d8\u16d7\3\2\2\2\u16d8")
        buf.write("\u16d9\3\2\2\2\u16d9\u16da\3\2\2\2\u16da\u16dd\7\u045b")
        buf.write("\2\2\u16db\u16dd\7\u045a\2\2\u16dc\u16d8\3\2\2\2\u16dc")
        buf.write("\u16db\3\2\2\2\u16dd\u16e0\3\2\2\2\u16de\u16df\7*\2\2")
        buf.write("\u16df\u16e1\5\u021a\u010e\2\u16e0\u16de\3\2\2\2\u16e0")
        buf.write("\u16e1\3\2\2\2\u16e1\u16e3\3\2\2\2\u16e2\u16d0\3\2\2\2")
        buf.write("\u16e2\u16dc\3\2\2\2\u16e3\u0231\3\2\2\2\u16e4\u16e5\t")
        buf.write("b\2\2\u16e5\u0233\3\2\2\2\u16e6\u16e8\7\u0461\2\2\u16e7")
        buf.write("\u16e6\3\2\2\2\u16e7\u16e8\3\2\2\2\u16e8\u16e9\3\2\2\2")
        buf.write("\u16e9\u16ea\7\u045d\2\2\u16ea\u0235\3\2\2\2\u16eb\u16ed")
        buf.write("\7{\2\2\u16ec\u16eb\3\2\2\2\u16ec\u16ed\3\2\2\2\u16ed")
        buf.write("\u16ee\3\2\2\2\u16ee\u16ef\tc\2\2\u16ef\u0237\3\2\2\2")
        buf.write("\u16f0\u16fd\5\u0230\u0119\2\u16f1\u16fd\5\u022c\u0117")
        buf.write("\2\u16f2\u16f3\7\u0440\2\2\u16f3\u16fd\5\u022c\u0117\2")
        buf.write("\u16f4\u16fd\5\u0234\u011b\2\u16f5\u16fd\5\u0232\u011a")
        buf.write("\2\u16f6\u16fd\7\u045e\2\2\u16f7\u16fd\7\u0460\2\2\u16f8")
        buf.write("\u16fa\7{\2\2\u16f9\u16f8\3\2\2\2\u16f9\u16fa\3\2\2\2")
        buf.write("\u16fa\u16fb\3\2\2\2\u16fb\u16fd\tc\2\2\u16fc\u16f0\3")
        buf.write("\2\2\2\u16fc\u16f1\3\2\2\2\u16fc\u16f2\3\2\2\2\u16fc\u16f4")
        buf.write("\3\2\2\2\u16fc\u16f5\3\2\2\2\u16fc\u16f6\3\2\2\2\u16fc")
        buf.write("\u16f7\3\2\2\2\u16fc\u16f9\3\2\2\2\u16fd\u0239\3\2\2\2")
        buf.write("\u16fe\u1700\td\2\2\u16ff\u1701\7\u00f3\2\2\u1700\u16ff")
        buf.write("\3\2\2\2\u1700\u1701\3\2\2\2\u1701\u1703\3\2\2\2\u1702")
        buf.write("\u1704\5\u0240\u0121\2\u1703\u1702\3\2\2\2\u1703\u1704")
        buf.write("\3\2\2\2\u1704\u1706\3\2\2\2\u1705\u1707\7\u00e7\2\2\u1706")
        buf.write("\u1705\3\2\2\2\u1706\u1707\3\2\2\2\u1707\u170e\3\2\2\2")
        buf.write("\u1708\u1709\7(\2\2\u1709\u170c\7\u00a1\2\2\u170a\u170c")
        buf.write("\7\u032c\2\2\u170b\u1708\3\2\2\2\u170b\u170a\3\2\2\2\u170c")
        buf.write("\u170d\3\2\2\2\u170d\u170f\5\u0218\u010d\2\u170e\u170b")
        buf.write("\3\2\2\2\u170e\u170f\3\2\2\2\u170f\u1713\3\2\2\2\u1710")
        buf.write("\u1711\7*\2\2\u1711\u1714\5\u021a\u010e\2\u1712\u1714")
        buf.write("\7\u00e7\2\2\u1713\u1710\3\2\2\2\u1713\u1712\3\2\2\2\u1713")
        buf.write("\u1714\3\2\2\2\u1714\u1782\3\2\2\2\u1715\u1716\7\u00e6")
        buf.write("\2\2\u1716\u1718\te\2\2\u1717\u1719\5\u0240\u0121\2\u1718")
        buf.write("\u1717\3\2\2\2\u1718\u1719\3\2\2\2\u1719\u171b\3\2\2\2")
        buf.write("\u171a\u171c\7\u00e7\2\2\u171b\u171a\3\2\2\2\u171b\u171c")
        buf.write("\3\2\2\2\u171c\u1782\3\2\2\2\u171d\u171e\7\u0200\2\2\u171e")
        buf.write("\u1720\7\u00e4\2\2\u171f\u1721\5\u0240\u0121\2\u1720\u171f")
        buf.write("\3\2\2\2\u1720\u1721\3\2\2\2\u1721\u1723\3\2\2\2\u1722")
        buf.write("\u1724\7\u00e7\2\2\u1723\u1722\3\2\2\2\u1723\u1724\3\2")
        buf.write("\2\2\u1724\u1782\3\2\2\2\u1725\u1726\7\u00e6\2\2\u1726")
        buf.write("\u1727\tf\2\2\u1727\u1729\7\u00f3\2\2\u1728\u172a\5\u0240")
        buf.write("\u0121\2\u1729\u1728\3\2\2\2\u1729\u172a\3\2\2\2\u172a")
        buf.write("\u172c\3\2\2\2\u172b\u172d\7\u00e7\2\2\u172c\u172b\3\2")
        buf.write("\2\2\u172c\u172d\3\2\2\2\u172d\u1782\3\2\2\2\u172e\u1730")
        buf.write("\tg\2\2\u172f\u1731\5\u0240\u0121\2\u1730\u172f\3\2\2")
        buf.write("\2\u1730\u1731\3\2\2\2\u1731\u1733\3\2\2\2\u1732\u1734")
        buf.write("\th\2\2\u1733\u1732\3\2\2\2\u1733\u1734\3\2\2\2\u1734")
        buf.write("\u1736\3\2\2\2\u1735\u1737\7\u00c8\2\2\u1736\u1735\3\2")
        buf.write("\2\2\u1736\u1737\3\2\2\2\u1737\u1782\3\2\2\2\u1738\u173a")
        buf.write("\7\u00d5\2\2\u1739\u173b\5\u0242\u0122\2\u173a\u1739\3")
        buf.write("\2\2\2\u173a\u173b\3\2\2\2\u173b\u173d\3\2\2\2\u173c\u173e")
        buf.write("\th\2\2\u173d\u173c\3\2\2\2\u173d\u173e\3\2\2\2\u173e")
        buf.write("\u1740\3\2\2\2\u173f\u1741\7\u00c8\2\2\u1740\u173f\3\2")
        buf.write("\2\2\u1740\u1741\3\2\2\2\u1741\u1782\3\2\2\2\u1742\u1744")
        buf.write("\7\u00d6\2\2\u1743\u1745\7\u00d7\2\2\u1744\u1743\3\2\2")
        buf.write("\2\u1744\u1745\3\2\2\2\u1745\u1747\3\2\2\2\u1746\u1748")
        buf.write("\5\u0242\u0122\2\u1747\u1746\3\2\2\2\u1747\u1748\3\2\2")
        buf.write("\2\u1748\u174a\3\2\2\2\u1749\u174b\th\2\2\u174a\u1749")
        buf.write("\3\2\2\2\u174a\u174b\3\2\2\2\u174b\u174d\3\2\2\2\u174c")
        buf.write("\u174e\7\u00c8\2\2\u174d\u174c\3\2\2\2\u174d\u174e\3\2")
        buf.write("\2\2\u174e\u1782\3\2\2\2\u174f\u1751\ti\2\2\u1750\u1752")
        buf.write("\5\u0244\u0123\2\u1751\u1750\3\2\2\2\u1751\u1752\3\2\2")
        buf.write("\2\u1752\u1754\3\2\2\2\u1753\u1755\th\2\2\u1754\u1753")
        buf.write("\3\2\2\2\u1754\u1755\3\2\2\2\u1755\u1757\3\2\2\2\u1756")
        buf.write("\u1758\7\u00c8\2\2\u1757\u1756\3\2\2\2\u1757\u1758\3\2")
        buf.write("\2\2\u1758\u1782\3\2\2\2\u1759\u1782\tj\2\2\u175a\u175c")
        buf.write("\tk\2\2\u175b\u175d\5\u0240\u0121\2\u175c\u175b\3\2\2")
        buf.write("\2\u175c\u175d\3\2\2\2\u175d\u1782\3\2\2\2\u175e\u175f")
        buf.write("\tl\2\2\u175f\u1761\5\u023c\u011f\2\u1760\u1762\7\u00e7")
        buf.write("\2\2\u1761\u1760\3\2\2\2\u1761\u1762\3\2\2\2\u1762\u1769")
        buf.write("\3\2\2\2\u1763\u1764\7(\2\2\u1764\u1767\7\u00a1\2\2\u1765")
        buf.write("\u1767\7\u032c\2\2\u1766\u1763\3\2\2\2\u1766\u1765\3\2")
        buf.write("\2\2\u1767\u1768\3\2\2\2\u1768\u176a\5\u0218\u010d\2\u1769")
        buf.write("\u1766\3\2\2\2\u1769\u176a\3\2\2\2\u176a\u1782\3\2\2\2")
        buf.write("\u176b\u1782\tm\2\2\u176c\u176e\7\u00ec\2\2\u176d\u176f")
        buf.write("\7\u00e4\2\2\u176e\u176d\3\2\2\2\u176e\u176f\3\2\2\2\u176f")
        buf.write("\u1771\3\2\2\2\u1770\u1772\7\u00e7\2\2\u1771\u1770\3\2")
        buf.write("\2\2\u1771\u1772\3\2\2\2\u1772\u1779\3\2\2\2\u1773\u1774")
        buf.write("\7(\2\2\u1774\u1777\7\u00a1\2\2\u1775\u1777\7\u032c\2")
        buf.write("\2\u1776\u1773\3\2\2\2\u1776\u1775\3\2\2\2\u1777\u1778")
        buf.write("\3\2\2\2\u1778\u177a\5\u0218\u010d\2\u1779\u1776\3\2\2")
        buf.write("\2\u1779\u177a\3\2\2\2\u177a\u177d\3\2\2\2\u177b\u177c")
        buf.write("\7*\2\2\u177c\u177e\5\u021a\u010e\2\u177d\u177b\3\2\2")
        buf.write("\2\u177d\u177e\3\2\2\2\u177e\u1782\3\2\2\2\u177f\u1780")
        buf.write("\7\u00ec\2\2\u1780\u1782\7\u00e8\2\2\u1781\u16fe\3\2\2")
        buf.write("\2\u1781\u1715\3\2\2\2\u1781\u171d\3\2\2\2\u1781\u1725")
        buf.write("\3\2\2\2\u1781\u172e\3\2\2\2\u1781\u1738\3\2\2\2\u1781")
        buf.write("\u1742\3\2\2\2\u1781\u174f\3\2\2\2\u1781\u1759\3\2\2\2")
        buf.write("\u1781\u175a\3\2\2\2\u1781\u175e\3\2\2\2\u1781\u176b\3")
        buf.write("\2\2\2\u1781\u176c\3\2\2\2\u1781\u177f\3\2\2\2\u1782\u023b")
        buf.write("\3\2\2\2\u1783\u1784\5\u0262\u0132\2\u1784\u1789\7\u045b")
        buf.write("\2\2\u1785\u1786\7\u044e\2\2\u1786\u1788\7\u045b\2\2\u1787")
        buf.write("\u1785\3\2\2\2\u1788\u178b\3\2\2\2\u1789\u1787\3\2\2\2")
        buf.write("\u1789\u178a\3\2\2\2\u178a\u178c\3\2\2\2\u178b\u1789\3")
        buf.write("\2\2\2\u178c\u178d\5\u0264\u0133\2\u178d\u023d\3\2\2\2")
        buf.write("\u178e\u1790\tn\2\2\u178f\u1791\5\u0240\u0121\2\u1790")
        buf.write("\u178f\3\2\2\2\u1790\u1791\3\2\2\2\u1791\u17aa\3\2\2\2")
        buf.write("\u1792\u1794\7\u00e3\2\2\u1793\u1795\5\u0240\u0121\2\u1794")
        buf.write("\u1793\3\2\2\2\u1794\u1795\3\2\2\2\u1795\u179c\3\2\2\2")
        buf.write("\u1796\u1797\7(\2\2\u1797\u179a\7\u00a1\2\2\u1798\u179a")
        buf.write("\7\u032c\2\2\u1799\u1796\3\2\2\2\u1799\u1798\3\2\2\2\u179a")
        buf.write("\u179b\3\2\2\2\u179b\u179d\5\u0218\u010d\2\u179c\u1799")
        buf.write("\3\2\2\2\u179c\u179d\3\2\2\2\u179d\u17aa\3\2\2\2\u179e")
        buf.write("\u17aa\to\2\2\u179f\u17a1\7\u00db\2\2\u17a0\u17a2\5\u0242")
        buf.write("\u0122\2\u17a1\u17a0\3\2\2\2\u17a1\u17a2\3\2\2\2\u17a2")
        buf.write("\u17aa\3\2\2\2\u17a3\u17a5\th\2\2\u17a4\u17a6\7\u00d3")
        buf.write("\2\2\u17a5\u17a4\3\2\2\2\u17a5\u17a6\3\2\2\2\u17a6\u17aa")
        buf.write("\3\2\2\2\u17a7\u17a8\7\u00bc\2\2\u17a8\u17aa\7\33\2\2")
        buf.write("\u17a9\u178e\3\2\2\2\u17a9\u1792\3\2\2\2\u17a9\u179e\3")
        buf.write("\2\2\2\u17a9\u179f\3\2\2\2\u17a9\u17a3\3\2\2\2\u17a9\u17a7")
        buf.write("\3\2\2\2\u17aa\u023f\3\2\2\2\u17ab\u17ac\5\u0262\u0132")
        buf.write("\2\u17ac\u17ad\5\u022c\u0117\2\u17ad\u17ae\5\u0264\u0133")
        buf.write("\2\u17ae\u0241\3\2\2\2\u17af\u17b0\5\u0262\u0132\2\u17b0")
        buf.write("\u17b1\5\u022c\u0117\2\u17b1\u17b2\7\u044e\2\2\u17b2\u17b3")
        buf.write("\5\u022c\u0117\2\u17b3\u17b4\5\u0264\u0133\2\u17b4\u0243")
        buf.write("\3\2\2\2\u17b5\u17b6\5\u0262\u0132\2\u17b6\u17b9\5\u022c")
        buf.write("\u0117\2\u17b7\u17b8\7\u044e\2\2\u17b8\u17ba\5\u022c\u0117")
        buf.write("\2\u17b9\u17b7\3\2\2\2\u17b9\u17ba\3\2\2\2\u17ba\u17bb")
        buf.write("\3\2\2\2\u17bb\u17bc\5\u0264\u0133\2\u17bc\u0245\3\2\2")
        buf.write("\2\u17bd\u17c2\5\u0226\u0114\2\u17be\u17bf\7\u044e\2\2")
        buf.write("\u17bf\u17c1\5\u0226\u0114\2\u17c0\u17be\3\2\2\2\u17c1")
        buf.write("\u17c4\3\2\2\2\u17c2\u17c0\3\2\2\2\u17c2\u17c3\3\2\2\2")
        buf.write("\u17c3\u0247\3\2\2\2\u17c4\u17c2\3\2\2\2\u17c5\u17ca\5")
        buf.write("\u020e\u0108\2\u17c6\u17c7\7\u044e\2\2\u17c7\u17c9\5\u020e")
        buf.write("\u0108\2\u17c8\u17c6\3\2\2\2\u17c9\u17cc\3\2\2\2\u17ca")
        buf.write("\u17c8\3\2\2\2\u17ca\u17cb\3\2\2\2\u17cb\u0249\3\2\2\2")
        buf.write("\u17cc\u17ca\3\2\2\2\u17cd\u17ce\5\u0262\u0132\2\u17ce")
        buf.write("\u17d3\5\u0212\u010a\2\u17cf\u17d0\7\u044e\2\2\u17d0\u17d2")
        buf.write("\5\u0212\u010a\2\u17d1\u17cf\3\2\2\2\u17d2\u17d5\3\2\2")
        buf.write("\2\u17d3\u17d1\3\2\2\2\u17d3\u17d4\3\2\2\2\u17d4\u17d6")
        buf.write("\3\2\2\2\u17d5\u17d3\3\2\2\2\u17d6\u17d7\5\u0264\u0133")
        buf.write("\2\u17d7\u024b\3\2\2\2\u17d8\u17dd\5\u028c\u0147\2\u17d9")
        buf.write("\u17da\7\u044e\2\2\u17da\u17dc\5\u028c\u0147\2\u17db\u17d9")
        buf.write("\3\2\2\2\u17dc\u17df\3\2\2\2\u17dd\u17db\3\2\2\2\u17dd")
        buf.write("\u17de\3\2\2\2\u17de\u024d\3\2\2\2\u17df\u17dd\3\2\2\2")
        buf.write("\u17e0\u17e5\5\u025a\u012e\2\u17e1\u17e2\7\u044e\2\2\u17e2")
        buf.write("\u17e4\5\u025a\u012e\2\u17e3\u17e1\3\2\2\2\u17e4\u17e7")
        buf.write("\3\2\2\2\u17e5\u17e3\3\2\2\2\u17e5\u17e6\3\2\2\2\u17e6")
        buf.write("\u024f\3\2\2\2\u17e7\u17e5\3\2\2\2\u17e8\u17ed\5\u0238")
        buf.write("\u011d\2\u17e9\u17ea\7\u044e\2\2\u17ea\u17ec\5\u0238\u011d")
        buf.write("\2\u17eb\u17e9\3\2\2\2\u17ec\u17ef\3\2\2\2\u17ed\u17eb")
        buf.write("\3\2\2\2\u17ed\u17ee\3\2\2\2\u17ee\u0251\3\2\2\2\u17ef")
        buf.write("\u17ed\3\2\2\2\u17f0\u17f5\7\u045b\2\2\u17f1\u17f2\7\u044e")
        buf.write("\2\2\u17f2\u17f4\7\u045b\2\2\u17f3\u17f1\3\2\2\2\u17f4")
        buf.write("\u17f7\3\2\2\2\u17f5\u17f3\3\2\2\2\u17f5\u17f6\3\2\2\2")
        buf.write("\u17f6\u0253\3\2\2\2\u17f7\u17f5\3\2\2\2\u17f8\u17fd\7")
        buf.write("\u0467\2\2\u17f9\u17fa\7\u044e\2\2\u17fa\u17fc\7\u0467")
        buf.write("\2\2\u17fb\u17f9\3\2\2\2\u17fc\u17ff\3\2\2\2\u17fd\u17fb")
        buf.write("\3\2\2\2\u17fd\u17fe\3\2\2\2\u17fe\u0255\3\2\2\2\u17ff")
        buf.write("\u17fd\3\2\2\2\u1800\u180b\7}\2\2\u1801\u1803\5\u0292")
        buf.write("\u014a\2\u1802\u1801\3\2\2\2\u1802\u1803\3\2\2\2\u1803")
        buf.write("\u1804\3\2\2\2\u1804\u180b\5\u0238\u011d\2\u1805\u180b")
        buf.write("\5\u0258\u012d\2\u1806\u1807\5\u0262\u0132\2\u1807\u1808")
        buf.write("\5\u028c\u0147\2\u1808\u1809\5\u0264\u0133\2\u1809\u180b")
        buf.write("\3\2\2\2\u180a\u1800\3\2\2\2\u180a\u1802\3\2\2\2\u180a")
        buf.write("\u1805\3\2\2\2\u180a\u1806\3\2\2\2\u180b\u180f\3\2\2\2")
        buf.write("\u180c\u180d\7\177\2\2\u180d\u180e\7\u00bd\2\2\u180e\u1810")
        buf.write("\5\u0258\u012d\2\u180f\u180c\3\2\2\2\u180f\u1810\3\2\2")
        buf.write("\2\u1810\u0257\3\2\2\2\u1811\u1818\tp\2\2\u1812\u1814")
        buf.write("\5\u0262\u0132\2\u1813\u1815\5\u022c\u0117\2\u1814\u1813")
        buf.write("\3\2\2\2\u1814\u1815\3\2\2\2\u1815\u1816\3\2\2\2\u1816")
        buf.write("\u1817\5\u0264\u0133\2\u1817\u1819\3\2\2\2\u1818\u1812")
        buf.write("\3\2\2\2\u1818\u1819\3\2\2\2\u1819\u1822\3\2\2\2\u181a")
        buf.write("\u181b\7\u0145\2\2\u181b\u181d\5\u0262\u0132\2\u181c\u181e")
        buf.write("\5\u022c\u0117\2\u181d\u181c\3\2\2\2\u181d\u181e\3\2\2")
        buf.write("\2\u181e\u181f\3\2\2\2\u181f\u1820\5\u0264\u0133\2\u1820")
        buf.write("\u1822\3\2\2\2\u1821\u1811\3\2\2\2\u1821\u181a\3\2\2\2")
        buf.write("\u1822\u0259\3\2\2\2\u1823\u1826\5\u028c\u0147\2\u1824")
        buf.write("\u1826\78\2\2\u1825\u1823\3\2\2\2\u1825\u1824\3\2\2\2")
        buf.write("\u1826\u025b\3\2\2\2\u1827\u1828\7Z\2\2\u1828\u1829\7")
        buf.write("I\2\2\u1829\u025d\3\2\2\2\u182a\u182b\7Z\2\2\u182b\u182c")
        buf.write("\7{\2\2\u182c\u182d\7I\2\2\u182d\u025f\3\2\2\2\u182e\u1841")
        buf.write("\5\u0266\u0134\2\u182f\u1841\5\u026e\u0138\2\u1830\u1841")
        buf.write("\5\u0270\u0139\2\u1831\u1832\5\u0284\u0143\2\u1832\u1834")
        buf.write("\5\u0262\u0132\2\u1833\u1835\5\u0288\u0145\2\u1834\u1833")
        buf.write("\3\2\2\2\u1834\u1835\3\2\2\2\u1835\u1836\3\2\2\2\u1836")
        buf.write("\u1837\5\u0264\u0133\2\u1837\u1841\3\2\2\2\u1838\u1839")
        buf.write("\5\u020c\u0107\2\u1839\u183b\5\u0262\u0132\2\u183a\u183c")
        buf.write("\5\u0288\u0145\2\u183b\u183a\3\2\2\2\u183b\u183c\3\2\2")
        buf.write("\2\u183c\u183d\3\2\2\2\u183d\u183e\5\u0264\u0133\2\u183e")
        buf.write("\u1841\3\2\2\2\u183f\u1841\5\u0286\u0144\2\u1840\u182e")
        buf.write("\3\2\2\2\u1840\u182f\3\2\2\2\u1840\u1830\3\2\2\2\u1840")
        buf.write("\u1831\3\2\2\2\u1840\u1838\3\2\2\2\u1840\u183f\3\2\2\2")
        buf.write("\u1841\u0261\3\2\2\2\u1842\u1843\7\u044c\2\2\u1843\u0263")
        buf.write("\3\2\2\2\u1844\u1845\7\u044d\2\2\u1845\u0265\3\2\2\2\u1846")
        buf.write("\u184a\tq\2\2\u1847\u1848\5\u0262\u0132\2\u1848\u1849")
        buf.write("\5\u0264\u0133\2\u1849\u184b\3\2\2\2\u184a\u1847\3\2\2")
        buf.write("\2\u184a\u184b\3\2\2\2\u184b\u1908\3\2\2\2\u184c\u184d")
        buf.write("\7/\2\2\u184d\u184e\5\u0262\u0132\2\u184e\u184f\5\u028c")
        buf.write("\u0147\2\u184f\u1850\7\u044e\2\2\u1850\u1851\5\u023e\u0120")
        buf.write("\2\u1851\u1852\5\u0264\u0133\2\u1852\u1908\3\2\2\2\u1853")
        buf.write("\u1854\7/\2\2\u1854\u1855\5\u0262\u0132\2\u1855\u1856")
        buf.write("\5\u028c\u0147\2\u1856\u1857\7\u00c0\2\2\u1857\u1858\5")
        buf.write("\u0218\u010d\2\u1858\u1859\5\u0264\u0133\2\u1859\u1908")
        buf.write("\3\2\2\2\u185a\u185b\7&\2\2\u185b\u185c\5\u0262\u0132")
        buf.write("\2\u185c\u185d\5\u028c\u0147\2\u185d\u185e\7\34\2\2\u185e")
        buf.write("\u185f\5\u023e\u0120\2\u185f\u1860\5\u0264\u0133\2\u1860")
        buf.write("\u1908\3\2\2\2\u1861\u1862\7\u00c1\2\2\u1862\u1863\5\u0262")
        buf.write("\u0132\2\u1863\u1864\5\u0210\u0109\2\u1864\u1865\5\u0264")
        buf.write("\u0133\2\u1865\u1908\3\2\2\2\u1866\u1867\7%\2\2\u1867")
        buf.write("\u1869\5\u028c\u0147\2\u1868\u186a\5\u0268\u0135\2\u1869")
        buf.write("\u1868\3\2\2\2\u186a\u186b\3\2\2\2\u186b\u1869\3\2\2\2")
        buf.write("\u186b\u186c\3\2\2\2\u186c\u186f\3\2\2\2\u186d\u186e\7")
        buf.write("C\2\2\u186e\u1870\5\u028a\u0146\2\u186f\u186d\3\2\2\2")
        buf.write("\u186f\u1870\3\2\2\2\u1870\u1871\3\2\2\2\u1871\u1872\7")
        buf.write("\u0195\2\2\u1872\u1908\3\2\2\2\u1873\u1875\7%\2\2\u1874")
        buf.write("\u1876\5\u0268\u0135\2\u1875\u1874\3\2\2\2\u1876\u1877")
        buf.write("\3\2\2\2\u1877\u1875\3\2\2\2\u1877\u1878\3\2\2\2\u1878")
        buf.write("\u187b\3\2\2\2\u1879\u187a\7C\2\2\u187a\u187c\5\u028a")
        buf.write("\u0146\2\u187b\u1879\3\2\2\2\u187b\u187c\3\2\2\2\u187c")
        buf.write("\u187d\3\2\2\2\u187d\u187e\7\u0195\2\2\u187e\u1908\3\2")
        buf.write("\2\2\u187f\u1880\7\u00e3\2\2\u1880\u1881\5\u0262\u0132")
        buf.write("\2\u1881\u1884\5\u0288\u0145\2\u1882\u1883\7\u00c0\2\2")
        buf.write("\u1883\u1885\5\u0218\u010d\2\u1884\u1882\3\2\2\2\u1884")
        buf.write("\u1885\3\2\2\2\u1885\u1886\3\2\2\2\u1886\u1887\5\u0264")
        buf.write("\u0133\2\u1887\u1908\3\2\2\2\u1888\u1889\7\u0146\2\2\u1889")
        buf.write("\u188c\5\u0262\u0132\2\u188a\u188d\5\u0230\u0119\2\u188b")
        buf.write("\u188d\5\u028c\u0147\2\u188c\u188a\3\2\2\2\u188c\u188b")
        buf.write("\3\2\2\2\u188d\u188e\3\2\2\2\u188e\u1891\7\\\2\2\u188f")
        buf.write("\u1892\5\u0230\u0119\2\u1890\u1892\5\u028c\u0147\2\u1891")
        buf.write("\u188f\3\2\2\2\u1891\u1890\3\2\2\2\u1892\u1893\3\2\2\2")
        buf.write("\u1893\u1894\5\u0264\u0133\2\u1894\u1908\3\2\2\2\u1895")
        buf.write("\u1896\tr\2\2\u1896\u1899\5\u0262\u0132\2\u1897\u189a")
        buf.write("\5\u0230\u0119\2\u1898\u189a\5\u028c\u0147\2\u1899\u1897")
        buf.write("\3\2\2\2\u1899\u1898\3\2\2\2\u189a\u189b\3\2\2\2\u189b")
        buf.write("\u189e\7Q\2\2\u189c\u189f\5\u022c\u0117\2\u189d\u189f")
        buf.write("\5\u028c\u0147\2\u189e\u189c\3\2\2\2\u189e\u189d\3\2\2")
        buf.write("\2\u189f\u18a5\3\2\2\2\u18a0\u18a3\7N\2\2\u18a1\u18a4")
        buf.write("\5\u022c\u0117\2\u18a2\u18a4\5\u028c\u0147\2\u18a3\u18a1")
        buf.write("\3\2\2\2\u18a3\u18a2\3\2\2\2\u18a4\u18a6\3\2\2\2\u18a5")
        buf.write("\u18a0\3\2\2\2\u18a5\u18a6\3\2\2\2\u18a6\u18a7\3\2\2\2")
        buf.write("\u18a7\u18a8\5\u0264\u0133\2\u18a8\u1908\3\2\2\2\u18a9")
        buf.write("\u18aa\7\u014a\2\2\u18aa\u18ab\5\u0262\u0132\2\u18ab\u18ae")
        buf.write("\ts\2\2\u18ac\u18af\5\u0230\u0119\2\u18ad\u18af\5\u028c")
        buf.write("\u0147\2\u18ae\u18ac\3\2\2\2\u18ae\u18ad\3\2\2\2\u18ae")
        buf.write("\u18af\3\2\2\2\u18af\u18b0\3\2\2\2\u18b0\u18b3\7Q\2\2")
        buf.write("\u18b1\u18b4\5\u0230\u0119\2\u18b2\u18b4\5\u028c\u0147")
        buf.write("\2\u18b3\u18b1\3\2\2\2\u18b3\u18b2\3\2\2\2\u18b4\u18b5")
        buf.write("\3\2\2\2\u18b5\u18b6\5\u0264\u0133\2\u18b6\u1908\3\2\2")
        buf.write("\2\u18b7\u18b8\7\u014a\2\2\u18b8\u18bb\5\u0262\u0132\2")
        buf.write("\u18b9\u18bc\5\u0230\u0119\2\u18ba\u18bc\5\u028c\u0147")
        buf.write("\2\u18bb\u18b9\3\2\2\2\u18bb\u18ba\3\2\2\2\u18bc\u18bd")
        buf.write("\3\2\2\2\u18bd\u18c0\7Q\2\2\u18be\u18c1\5\u0230\u0119")
        buf.write("\2\u18bf\u18c1\5\u028c\u0147\2\u18c0\u18be\3\2\2\2\u18c0")
        buf.write("\u18bf\3\2\2\2\u18c1\u18c2\3\2\2\2\u18c2\u18c3\5\u0264")
        buf.write("\u0133\2\u18c3\u1908\3\2\2\2\u18c4\u18c5\7\u042e\2\2\u18c5")
        buf.write("\u18c8\5\u0262\u0132\2\u18c6\u18c9\5\u0230\u0119\2\u18c7")
        buf.write("\u18c9\5\u028c\u0147\2\u18c8\u18c6\3\2\2\2\u18c8\u18c7")
        buf.write("\3\2\2\2\u18c9\u18d0\3\2\2\2\u18ca\u18cb\7\34\2\2\u18cb")
        buf.write("\u18cc\tt\2\2\u18cc\u18cd\5\u0262\u0132\2\u18cd\u18ce")
        buf.write("\5\u022c\u0117\2\u18ce\u18cf\5\u0264\u0133\2\u18cf\u18d1")
        buf.write("\3\2\2\2\u18d0\u18ca\3\2\2\2\u18d0\u18d1\3\2\2\2\u18d1")
        buf.write("\u18d3\3\2\2\2\u18d2\u18d4\5\u026a\u0136\2\u18d3\u18d2")
        buf.write("\3\2\2\2\u18d3\u18d4\3\2\2\2\u18d4\u18d5\3\2\2\2\u18d5")
        buf.write("\u18d6\5\u0264\u0133\2\u18d6\u1908\3\2\2\2\u18d7\u18d8")
        buf.write("\7\u0143\2\2\u18d8\u18d9\5\u0262\u0132\2\u18d9\u18da\5")
        buf.write("<\37\2\u18da\u18dd\7Q\2\2\u18db\u18de\5\u0230\u0119\2")
        buf.write("\u18dc\u18de\5\u028c\u0147\2\u18dd\u18db\3\2\2\2\u18dd")
        buf.write("\u18dc\3\2\2\2\u18de\u18df\3\2\2\2\u18df\u18e0\5\u0264")
        buf.write("\u0133\2\u18e0\u1908\3\2\2\2\u18e1\u18e2\7\u0366\2\2\u18e2")
        buf.write("\u18e3\5\u0262\u0132\2\u18e3\u18e4\tu\2\2\u18e4\u18e5")
        buf.write("\7\u044e\2\2\u18e5\u18e6\5\u0230\u0119\2\u18e6\u18e7\5")
        buf.write("\u0264\u0133\2\u18e7\u1908\3\2\2\2\u18e8\u18e9\7\u0109")
        buf.write("\2\2\u18e9\u18ea\5\u0262\u0132\2\u18ea\u18eb\5\u028c\u0147")
        buf.write("\2\u18eb\u18ec\7\u044e\2\2\u18ec\u18ef\5\u028c\u0147\2")
        buf.write("\u18ed\u18ee\7\u0240\2\2\u18ee\u18f0\5\u023e\u0120\2\u18ef")
        buf.write("\u18ed\3\2\2\2\u18ef\u18f0\3\2\2\2\u18f0\u18f9\3\2\2\2")
        buf.write("\u18f1\u18f6\7}\2\2\u18f2\u18f6\7\u0199\2\2\u18f3\u18f4")
        buf.write("\78\2\2\u18f4\u18f6\5\u0256\u012c\2\u18f5\u18f1\3\2\2")
        buf.write("\2\u18f5\u18f2\3\2\2\2\u18f5\u18f3\3\2\2\2\u18f6\u18f7")
        buf.write("\3\2\2\2\u18f7\u18f8\7\177\2\2\u18f8\u18fa\7E\2\2\u18f9")
        buf.write("\u18f5\3\2\2\2\u18f9\u18fa\3\2\2\2\u18fa\u1903\3\2\2\2")
        buf.write("\u18fb\u1900\7}\2\2\u18fc\u1900\7\u0199\2\2\u18fd\u18fe")
        buf.write("\78\2\2\u18fe\u1900\5\u0256\u012c\2\u18ff\u18fb\3\2\2")
        buf.write("\2\u18ff\u18fc\3\2\2\2\u18ff\u18fd\3\2\2\2\u1900\u1901")
        buf.write("\3\2\2\2\u1901\u1902\7\177\2\2\u1902\u1904\7\u0199\2\2")
        buf.write("\u1903\u18ff\3\2\2\2\u1903\u1904\3\2\2\2\u1904\u1905\3")
        buf.write("\2\2\2\u1905\u1906\5\u0264\u0133\2\u1906\u1908\3\2\2\2")
        buf.write("\u1907\u1846\3\2\2\2\u1907\u184c\3\2\2\2\u1907\u1853\3")
        buf.write("\2\2\2\u1907\u185a\3\2\2\2\u1907\u1861\3\2\2\2\u1907\u1866")
        buf.write("\3\2\2\2\u1907\u1873\3\2\2\2\u1907\u187f\3\2\2\2\u1907")
        buf.write("\u1888\3\2\2\2\u1907\u1895\3\2\2\2\u1907\u18a9\3\2\2\2")
        buf.write("\u1907\u18b7\3\2\2\2\u1907\u18c4\3\2\2\2\u1907\u18d7\3")
        buf.write("\2\2\2\u1907\u18e1\3\2\2\2\u1907\u18e8\3\2\2\2\u1908\u0267")
        buf.write("\3\2\2\2\u1909\u190a\7\u00c2\2\2\u190a\u190b\5\u028a\u0146")
        buf.write("\2\u190b\u190c\7\u00b3\2\2\u190c\u190d\5\u028a\u0146\2")
        buf.write("\u190d\u0269\3\2\2\2\u190e\u190f\7\u01d2\2\2\u190f\u1914")
        buf.write("\5\u026c\u0137\2\u1910\u1911\7\u044e\2\2\u1911\u1913\5")
        buf.write("\u026c\u0137\2\u1912\u1910\3\2\2\2\u1913\u1916\3\2\2\2")
        buf.write("\u1914\u1912\3\2\2\2\u1914\u1915\3\2\2\2\u1915\u191d\3")
        buf.write("\2\2\2\u1916\u1914\3\2\2\2\u1917\u1918\7\u01d2\2\2\u1918")
        buf.write("\u1919\5\u022c\u0117\2\u1919\u191a\7\u0440\2\2\u191a\u191b")
        buf.write("\5\u022c\u0117\2\u191b\u191d\3\2\2\2\u191c\u190e\3\2\2")
        buf.write("\2\u191c\u1917\3\2\2\2\u191d\u026b\3\2\2\2\u191e\u1920")
        buf.write("\5\u022c\u0117\2\u191f\u1921\tv\2\2\u1920\u191f\3\2\2")
        buf.write("\2\u1920\u1921\3\2\2\2\u1921\u026d\3\2\2\2\u1922\u1923")
        buf.write("\tw\2\2\u1923\u1925\5\u0262\u0132\2\u1924\u1926\t*\2\2")
        buf.write("\u1925\u1924\3\2\2\2\u1925\u1926\3\2\2\2\u1926\u1927\3")
        buf.write("\2\2\2\u1927\u1928\5\u028a\u0146\2\u1928\u192a\5\u0264")
        buf.write("\u0133\2\u1929\u192b\5\u0272\u013a\2\u192a\u1929\3\2\2")
        buf.write("\2\u192a\u192b\3\2\2\2\u192b\u195e\3\2\2\2\u192c\u192d")
        buf.write("\7\u0124\2\2\u192d\u1935\5\u0262\u0132\2\u192e\u1936\7")
        buf.write("\u043c\2\2\u192f\u1931\7\26\2\2\u1930\u192f\3\2\2\2\u1930")
        buf.write("\u1931\3\2\2\2\u1931\u1932\3\2\2\2\u1932\u1936\5\u028a")
        buf.write("\u0146\2\u1933\u1934\7?\2\2\u1934\u1936\5\u0288\u0145")
        buf.write("\2\u1935\u192e\3\2\2\2\u1935\u1930\3\2\2\2\u1935\u1933")
        buf.write("\3\2\2\2\u1936\u1937\3\2\2\2\u1937\u1939\5\u0264\u0133")
        buf.write("\2\u1938\u193a\5\u0272\u013a\2\u1939\u1938\3\2\2\2\u1939")
        buf.write("\u193a\3\2\2\2\u193a\u195e\3\2\2\2\u193b\u193c\tx\2\2")
        buf.write("\u193c\u193e\5\u0262\u0132\2\u193d\u193f\7\26\2\2\u193e")
        buf.write("\u193d\3\2\2\2\u193e\u193f\3\2\2\2\u193f\u1940\3\2\2\2")
        buf.write("\u1940\u1941\5\u028a\u0146\2\u1941\u1943\5\u0264\u0133")
        buf.write("\2\u1942\u1944\5\u0272\u013a\2\u1943\u1942\3\2\2\2\u1943")
        buf.write("\u1944\3\2\2\2\u1944\u195e\3\2\2\2\u1945\u1946\7\u0128")
        buf.write("\2\2\u1946\u1948\5\u0262\u0132\2\u1947\u1949\7?\2\2\u1948")
        buf.write("\u1947\3\2\2\2\u1948\u1949\3\2\2\2\u1949\u194a\3\2\2\2")
        buf.write("\u194a\u1955\5\u0288\u0145\2\u194b\u194c\7\u0084\2\2\u194c")
        buf.write("\u194d\7\"\2\2\u194d\u1952\5\u00d4k\2\u194e\u194f\7\u044e")
        buf.write("\2\2\u194f\u1951\5\u00d4k\2\u1950\u194e\3\2\2\2\u1951")
        buf.write("\u1954\3\2\2\2\u1952\u1950\3\2\2\2\u1952\u1953\3\2\2\2")
        buf.write("\u1953\u1956\3\2\2\2\u1954\u1952\3\2\2\2\u1955\u194b\3")
        buf.write("\2\2\2\u1955\u1956\3\2\2\2\u1956\u1959\3\2\2\2\u1957\u1958")
        buf.write("\7\u00a2\2\2\u1958\u195a\7\u045b\2\2\u1959\u1957\3\2\2")
        buf.write("\2\u1959\u195a\3\2\2\2\u195a\u195b\3\2\2\2\u195b\u195c")
        buf.write("\5\u0264\u0133\2\u195c\u195e\3\2\2\2\u195d\u1922\3\2\2")
        buf.write("\2\u195d\u192c\3\2\2\2\u195d\u193b\3\2\2\2\u195d\u1945")
        buf.write("\3\2\2\2\u195e\u026f\3\2\2\2\u195f\u1960\ty\2\2\u1960")
        buf.write("\u1961\5\u0262\u0132\2\u1961\u1964\5\u028c\u0147\2\u1962")
        buf.write("\u1963\7\u044e\2\2\u1963\u1965\5\u022c\u0117\2\u1964\u1962")
        buf.write("\3\2\2\2\u1964\u1965\3\2\2\2\u1965\u1968\3\2\2\2\u1966")
        buf.write("\u1967\7\u044e\2\2\u1967\u1969\5\u022c\u0117\2\u1968\u1966")
        buf.write("\3\2\2\2\u1968\u1969\3\2\2\2\u1969\u196a\3\2\2\2\u196a")
        buf.write("\u196b\5\u0264\u0133\2\u196b\u196c\5\u0272\u013a\2\u196c")
        buf.write("\u1987\3\2\2\2\u196d\u196e\tz\2\2\u196e\u196f\5\u0262")
        buf.write("\u0132\2\u196f\u1970\5\u028c\u0147\2\u1970\u1971\5\u0264")
        buf.write("\u0133\2\u1971\u1972\5\u0272\u013a\2\u1972\u1987\3\2\2")
        buf.write("\2\u1973\u1974\t{\2\2\u1974\u1975\5\u0262\u0132\2\u1975")
        buf.write("\u1976\5\u0264\u0133\2\u1976\u1977\5\u0272\u013a\2\u1977")
        buf.write("\u1987\3\2\2\2\u1978\u1979\7\u012f\2\2\u1979\u197a\5\u0262")
        buf.write("\u0132\2\u197a\u197b\5\u028c\u0147\2\u197b\u197c\7\u044e")
        buf.write("\2\2\u197c\u197d\5\u022c\u0117\2\u197d\u197e\5\u0264\u0133")
        buf.write("\2\u197e\u197f\5\u0272\u013a\2\u197f\u1987\3\2\2\2\u1980")
        buf.write("\u1981\7\u012e\2\2\u1981\u1982\5\u0262\u0132\2\u1982\u1983")
        buf.write("\5\u022c\u0117\2\u1983\u1984\5\u0264\u0133\2\u1984\u1985")
        buf.write("\5\u0272\u013a\2\u1985\u1987\3\2\2\2\u1986\u195f\3\2\2")
        buf.write("\2\u1986\u196d\3\2\2\2\u1986\u1973\3\2\2\2\u1986\u1978")
        buf.write("\3\2\2\2\u1986\u1980\3\2\2\2\u1987\u0271\3\2\2\2\u1988")
        buf.write("\u1990\7\u0086\2\2\u1989\u198b\5\u0262\u0132\2\u198a\u198c")
        buf.write("\5\u0274\u013b\2\u198b\u198a\3\2\2\2\u198b\u198c\3\2\2")
        buf.write("\2\u198c\u198d\3\2\2\2\u198d\u198e\5\u0264\u0133\2\u198e")
        buf.write("\u1991\3\2\2\2\u198f\u1991\5\u0276\u013c\2\u1990\u1989")
        buf.write("\3\2\2\2\u1990\u198f\3\2\2\2\u1991\u0273\3\2\2\2\u1992")
        buf.write("\u1994\5\u0276\u013c\2\u1993\u1992\3\2\2\2\u1993\u1994")
        buf.write("\3\2\2\2\u1994\u1996\3\2\2\2\u1995\u1997\5\u0282\u0142")
        buf.write("\2\u1996\u1995\3\2\2\2\u1996\u1997\3\2\2\2\u1997\u1999")
        buf.write("\3\2\2\2\u1998\u199a\5\u00d2j\2\u1999\u1998\3\2\2\2\u1999")
        buf.write("\u199a\3\2\2\2\u199a\u199c\3\2\2\2\u199b\u199d\5\u0278")
        buf.write("\u013d\2\u199c\u199b\3\2\2\2\u199c\u199d\3\2\2\2\u199d")
        buf.write("\u0275\3\2\2\2\u199e\u199f\5\u0226\u0114\2\u199f\u0277")
        buf.write("\3\2\2\2\u19a0\u19a1\5\u027a\u013e\2\u19a1\u19a2\5\u027c")
        buf.write("\u013f\2\u19a2\u0279\3\2\2\2\u19a3\u19a4\t|\2\2\u19a4")
        buf.write("\u027b\3\2\2\2\u19a5\u19a8\5\u0280\u0141\2\u19a6\u19a8")
        buf.write("\5\u027e\u0140\2\u19a7\u19a5\3\2\2\2\u19a7\u19a6\3\2\2")
        buf.write("\2\u19a8\u027d\3\2\2\2\u19a9\u19aa\7\37\2\2\u19aa\u19ab")
        buf.write("\5\u0280\u0141\2\u19ab\u19ac\7\32\2\2\u19ac\u19ad\5\u0280")
        buf.write("\u0141\2\u19ad\u027f\3\2\2\2\u19ae\u19af\7\62\2\2\u19af")
        buf.write("\u19b6\7\u0246\2\2\u19b0\u19b1\7\u027d\2\2\u19b1\u19b6")
        buf.write("\t}\2\2\u19b2\u19b3\5\u028c\u0147\2\u19b3\u19b4\t}\2\2")
        buf.write("\u19b4\u19b6\3\2\2\2\u19b5\u19ae\3\2\2\2\u19b5\u19b0\3")
        buf.write("\2\2\2\u19b5\u19b2\3\2\2\2\u19b6\u0281\3\2\2\2\u19b7\u19b8")
        buf.write("\7\u0089\2\2\u19b8\u19b9\7\"\2\2\u19b9\u19be\5\u028c\u0147")
        buf.write("\2\u19ba\u19bb\7\u044e\2\2\u19bb\u19bd\5\u028c\u0147\2")
        buf.write("\u19bc\u19ba\3\2\2\2\u19bd\u19c0\3\2\2\2\u19be\u19bc\3")
        buf.write("\2\2\2\u19be\u19bf\3\2\2\2\u19bf\u0283\3\2\2\2\u19c0\u19be")
        buf.write("\3\2\2\2\u19c1\u19d9\5\u02aa\u0156\2\u19c2\u19d9\7\u02ce")
        buf.write("\2\2\u19c3\u19d9\7\u013f\2\2\u19c4\u19d9\7\u013b\2\2\u19c5")
        buf.write("\u19d9\7\u013c\2\2\u19c6\u19d9\7\u013d\2\2\u19c7\u19d9")
        buf.write("\7\u0140\2\2\u19c8\u19d9\7\u0141\2\2\u19c9\u19d9\7\u0142")
        buf.write("\2\2\u19ca\u19d9\7Z\2\2\u19cb\u19d9\7a\2\2\u19cc\u19d9")
        buf.write("\7\u013e\2\2\u19cd\u19d9\7\u0144\2\2\u19ce\u19d9\7\u01f6")
        buf.write("\2\2\u19cf\u19d9\7\u0145\2\2\u19d0\u19d9\7\u0095\2\2\u19d1")
        buf.write("\u19d9\7\u0147\2\2\u19d2\u19d9\7\u0148\2\2\u19d3\u19d9")
        buf.write("\7\u0149\2\2\u19d4\u19d9\7\u014a\2\2\u19d5\u19d9\7\u014b")
        buf.write("\2\2\u19d6\u19d9\7\u014c\2\2\u19d7\u19d9\7\u014d\2\2\u19d8")
        buf.write("\u19c1\3\2\2\2\u19d8\u19c2\3\2\2\2\u19d8\u19c3\3\2\2\2")
        buf.write("\u19d8\u19c4\3\2\2\2\u19d8\u19c5\3\2\2\2\u19d8\u19c6\3")
        buf.write("\2\2\2\u19d8\u19c7\3\2\2\2\u19d8\u19c8\3\2\2\2\u19d8\u19c9")
        buf.write("\3\2\2\2\u19d8\u19ca\3\2\2\2\u19d8\u19cb\3\2\2\2\u19d8")
        buf.write("\u19cc\3\2\2\2\u19d8\u19cd\3\2\2\2\u19d8\u19ce\3\2\2\2")
        buf.write("\u19d8\u19cf\3\2\2\2\u19d8\u19d0\3\2\2\2\u19d8\u19d1\3")
        buf.write("\2\2\2\u19d8\u19d2\3\2\2\2\u19d8\u19d3\3\2\2\2\u19d8\u19d4")
        buf.write("\3\2\2\2\u19d8\u19d5\3\2\2\2\u19d8\u19d6\3\2\2\2\u19d8")
        buf.write("\u19d7\3\2\2\2\u19d9\u0285\3\2\2\2\u19da\u19db\t~\2\2")
        buf.write("\u19db\u19dc\5\u0262\u0132\2\u19dc\u19dd\5\u028a\u0146")
        buf.write("\2\u19dd\u19de\5\u0264\u0133\2\u19de\u0287\3\2\2\2\u19df")
        buf.write("\u19e4\5\u0238\u011d\2\u19e0\u19e4\5\u0210\u0109\2\u19e1")
        buf.write("\u19e4\5\u0260\u0131\2\u19e2\u19e4\5\u028c\u0147\2\u19e3")
        buf.write("\u19df\3\2\2\2\u19e3\u19e0\3\2\2\2\u19e3\u19e1\3\2\2\2")
        buf.write("\u19e3\u19e2\3\2\2\2\u19e4\u19ee\3\2\2\2\u19e5\u19ea\7")
        buf.write("\u044e\2\2\u19e6\u19eb\5\u0238\u011d\2\u19e7\u19eb\5\u0210")
        buf.write("\u0109\2\u19e8\u19eb\5\u0260\u0131\2\u19e9\u19eb\5\u028c")
        buf.write("\u0147\2\u19ea\u19e6\3\2\2\2\u19ea\u19e7\3\2\2\2\u19ea")
        buf.write("\u19e8\3\2\2\2\u19ea\u19e9\3\2\2\2\u19eb\u19ed\3\2\2\2")
        buf.write("\u19ec\u19e5\3\2\2\2\u19ed\u19f0\3\2\2\2\u19ee\u19ec\3")
        buf.write("\2\2\2\u19ee\u19ef\3\2\2\2\u19ef\u0289\3\2\2\2\u19f0\u19ee")
        buf.write("\3\2\2\2\u19f1\u19f6\5\u0238\u011d\2\u19f2\u19f6\5\u0210")
        buf.write("\u0109\2\u19f3\u19f6\5\u0260\u0131\2\u19f4\u19f6\5\u028c")
        buf.write("\u0147\2\u19f5\u19f1\3\2\2\2\u19f5\u19f2\3\2\2\2\u19f5")
        buf.write("\u19f3\3\2\2\2\u19f5\u19f4\3\2\2\2\u19f6\u028b\3\2\2\2")
        buf.write("\u19f7\u19f8\b\u0147\1\2\u19f8\u19f9\t\177\2\2\u19f9\u1a03")
        buf.write("\5\u028c\u0147\6\u19fa\u19fb\5\u028e\u0148\2\u19fb\u19fd")
        buf.write("\7d\2\2\u19fc\u19fe\7{\2\2\u19fd\u19fc\3\2\2\2\u19fd\u19fe")
        buf.write("\3\2\2\2\u19fe\u19ff\3\2\2\2\u19ff\u1a00\t\u0080\2\2\u1a00")
        buf.write("\u1a03\3\2\2\2\u1a01\u1a03\5\u028e\u0148\2\u1a02\u19f7")
        buf.write("\3\2\2\2\u1a02\u19fa\3\2\2\2\u1a02\u1a01\3\2\2\2\u1a03")
        buf.write("\u1a0a\3\2\2\2\u1a04\u1a05\f\5\2\2\u1a05\u1a06\5\u0296")
        buf.write("\u014c\2\u1a06\u1a07\5\u028c\u0147\6\u1a07\u1a09\3\2\2")
        buf.write("\2\u1a08\u1a04\3\2\2\2\u1a09\u1a0c\3\2\2\2\u1a0a\u1a08")
        buf.write("\3\2\2\2\u1a0a\u1a0b\3\2\2\2\u1a0b\u028d\3\2\2\2\u1a0c")
        buf.write("\u1a0a\3\2\2\2\u1a0d\u1a10\b\u0148\1\2\u1a0e\u1a0f\7\u0467")
        buf.write("\2\2\u1a0f\u1a11\7\u0433\2\2\u1a10\u1a0e\3\2\2\2\u1a10")
        buf.write("\u1a11\3\2\2\2\u1a11\u1a12\3\2\2\2\u1a12\u1a13\5\u0290")
        buf.write("\u0149\2\u1a13\u1a54\3\2\2\2\u1a14\u1a15\f\n\2\2\u1a15")
        buf.write("\u1a16\5\u0294\u014b\2\u1a16\u1a17\5\u028e\u0148\13\u1a17")
        buf.write("\u1a53\3\2\2\2\u1a18\u1a1a\f\b\2\2\u1a19\u1a1b\7{\2\2")
        buf.write("\u1a1a\u1a19\3\2\2\2\u1a1a\u1a1b\3\2\2\2\u1a1b\u1a1c\3")
        buf.write("\2\2\2\u1a1c\u1a1d\7\37\2\2\u1a1d\u1a1e\5\u028e\u0148")
        buf.write("\2\u1a1e\u1a1f\7\32\2\2\u1a1f\u1a20\5\u028e\u0148\t\u1a20")
        buf.write("\u1a53\3\2\2\2\u1a21\u1a22\f\7\2\2\u1a22\u1a23\7\u0258")
        buf.write("\2\2\u1a23\u1a24\7m\2\2\u1a24\u1a53\5\u028e\u0148\b\u1a25")
        buf.write("\u1a27\f\5\2\2\u1a26\u1a28\7{\2\2\u1a27\u1a26\3\2\2\2")
        buf.write("\u1a27\u1a28\3\2\2\2\u1a28\u1a29\3\2\2\2\u1a29\u1a2a\t")
        buf.write("\u0081\2\2\u1a2a\u1a53\5\u028e\u0148\6\u1a2b\u1a2d\f\f")
        buf.write("\2\2\u1a2c\u1a2e\7{\2\2\u1a2d\u1a2c\3\2\2\2\u1a2d\u1a2e")
        buf.write("\3\2\2\2\u1a2e\u1a2f\3\2\2\2\u1a2f\u1a30\7\\\2\2\u1a30")
        buf.write("\u1a33\5\u0262\u0132\2\u1a31\u1a34\5\u00b6\\\2\u1a32\u1a34")
        buf.write("\5\u024c\u0127\2\u1a33\u1a31\3\2\2\2\u1a33\u1a32\3\2\2")
        buf.write("\2\u1a34\u1a35\3\2\2\2\u1a35\u1a36\5\u0264\u0133\2\u1a36")
        buf.write("\u1a53\3\2\2\2\u1a37\u1a38\f\13\2\2\u1a38\u1a39\7d\2\2")
        buf.write("\u1a39\u1a53\5\u0236\u011c\2\u1a3a\u1a3b\f\t\2\2\u1a3b")
        buf.write("\u1a3c\5\u0294\u014b\2\u1a3c\u1a3d\t\u0082\2\2\u1a3d\u1a3e")
        buf.write("\5\u0262\u0132\2\u1a3e\u1a3f\5\u00b6\\\2\u1a3f\u1a40\5")
        buf.write("\u0264\u0133\2\u1a40\u1a53\3\2\2\2\u1a41\u1a43\f\6\2\2")
        buf.write("\u1a42\u1a44\7{\2\2\u1a43\u1a42\3\2\2\2\u1a43\u1a44\3")
        buf.write("\2\2\2\u1a44\u1a45\3\2\2\2\u1a45\u1a46\7m\2\2\u1a46\u1a49")
        buf.write("\5\u028e\u0148\2\u1a47\u1a48\7\u019b\2\2\u1a48\u1a4a\7")
        buf.write("\u045b\2\2\u1a49\u1a47\3\2\2\2\u1a49\u1a4a\3\2\2\2\u1a4a")
        buf.write("\u1a53\3\2\2\2\u1a4b\u1a4c\f\3\2\2\u1a4c\u1a4d\7\u01f3")
        buf.write("\2\2\u1a4d\u1a4e\7\u0209\2\2\u1a4e\u1a4f\5\u0262\u0132")
        buf.write("\2\u1a4f\u1a50\5\u028e\u0148\2\u1a50\u1a51\5\u0264\u0133")
        buf.write("\2\u1a51\u1a53\3\2\2\2\u1a52\u1a14\3\2\2\2\u1a52\u1a18")
        buf.write("\3\2\2\2\u1a52\u1a21\3\2\2\2\u1a52\u1a25\3\2\2\2\u1a52")
        buf.write("\u1a2b\3\2\2\2\u1a52\u1a37\3\2\2\2\u1a52\u1a3a\3\2\2\2")
        buf.write("\u1a52\u1a41\3\2\2\2\u1a52\u1a4b\3\2\2\2\u1a53\u1a56\3")
        buf.write("\2\2\2\u1a54\u1a52\3\2\2\2\u1a54\u1a55\3\2\2\2\u1a55\u028f")
        buf.write("\3\2\2\2\u1a56\u1a54\3\2\2\2\u1a57\u1a58\b\u0149\1\2\u1a58")
        buf.write("\u1a85\5\u0238\u011d\2\u1a59\u1a85\5\u0210\u0109\2\u1a5a")
        buf.write("\u1a85\5\u0260\u0131\2\u1a5b\u1a85\5\u0216\u010c\2\u1a5c")
        buf.write("\u1a5d\5\u0292\u014a\2\u1a5d\u1a5e\5\u0290\u0149\f\u1a5e")
        buf.write("\u1a85\3\2\2\2\u1a5f\u1a60\7\u00e7\2\2\u1a60\u1a85\5\u0290")
        buf.write("\u0149\13\u1a61\u1a62\5\u0262\u0132\2\u1a62\u1a67\5\u028c")
        buf.write("\u0147\2\u1a63\u1a64\7\u044e\2\2\u1a64\u1a66\5\u028c\u0147")
        buf.write("\2\u1a65\u1a63\3\2\2\2\u1a66\u1a69\3\2\2\2\u1a67\u1a65")
        buf.write("\3\2\2\2\u1a67\u1a68\3\2\2\2\u1a68\u1a6a\3\2\2\2\u1a69")
        buf.write("\u1a67\3\2\2\2\u1a6a\u1a6b\5\u0264\u0133\2\u1a6b\u1a85")
        buf.write("\3\2\2\2\u1a6c\u1a6d\7\u0246\2\2\u1a6d\u1a6e\5\u0262\u0132")
        buf.write("\2\u1a6e\u1a71\5\u028c\u0147\2\u1a6f\u1a70\7\u044e\2\2")
        buf.write("\u1a70\u1a72\5\u028c\u0147\2\u1a71\u1a6f\3\2\2\2\u1a72")
        buf.write("\u1a73\3\2\2\2\u1a73\u1a71\3\2\2\2\u1a73\u1a74\3\2\2\2")
        buf.write("\u1a74\u1a75\3\2\2\2\u1a75\u1a76\5\u0264\u0133\2\u1a76")
        buf.write("\u1a85\3\2\2\2\u1a77\u1a78\7I\2\2\u1a78\u1a79\5\u0262")
        buf.write("\u0132\2\u1a79\u1a7a\5\u00b6\\\2\u1a7a\u1a7b\5\u0264\u0133")
        buf.write("\2\u1a7b\u1a85\3\2\2\2\u1a7c\u1a7d\5\u0262\u0132\2\u1a7d")
        buf.write("\u1a7e\5\u00b6\\\2\u1a7e\u1a7f\5\u0264\u0133\2\u1a7f\u1a85")
        buf.write("\3\2\2\2\u1a80\u1a81\7b\2\2\u1a81\u1a82\5\u028c\u0147")
        buf.write("\2\u1a82\u1a83\5<\37\2\u1a83\u1a85\3\2\2\2\u1a84\u1a57")
        buf.write("\3\2\2\2\u1a84\u1a59\3\2\2\2\u1a84\u1a5a\3\2\2\2\u1a84")
        buf.write("\u1a5b\3\2\2\2\u1a84\u1a5c\3\2\2\2\u1a84\u1a5f\3\2\2\2")
        buf.write("\u1a84\u1a61\3\2\2\2\u1a84\u1a6c\3\2\2\2\u1a84\u1a77\3")
        buf.write("\2\2\2\u1a84\u1a7c\3\2\2\2\u1a84\u1a80\3\2\2\2\u1a85\u1a97")
        buf.write("\3\2\2\2\u1a86\u1a87\f\5\2\2\u1a87\u1a88\5\u0298\u014d")
        buf.write("\2\u1a88\u1a89\5\u0290\u0149\6\u1a89\u1a96\3\2\2\2\u1a8a")
        buf.write("\u1a8b\f\4\2\2\u1a8b\u1a8c\5\u029a\u014e\2\u1a8c\u1a8d")
        buf.write("\5\u0290\u0149\5\u1a8d\u1a96\3\2\2\2\u1a8e\u1a8f\f\3\2")
        buf.write("\2\u1a8f\u1a90\5\u029c\u014f\2\u1a90\u1a91\5\u0290\u0149")
        buf.write("\4\u1a91\u1a96\3\2\2\2\u1a92\u1a93\f\16\2\2\u1a93\u1a94")
        buf.write("\7*\2\2\u1a94\u1a96\5\u021a\u010e\2\u1a95\u1a86\3\2\2")
        buf.write("\2\u1a95\u1a8a\3\2\2\2\u1a95\u1a8e\3\2\2\2\u1a95\u1a92")
        buf.write("\3\2\2\2\u1a96\u1a99\3\2\2\2\u1a97\u1a95\3\2\2\2\u1a97")
        buf.write("\u1a98\3\2\2\2\u1a98\u0291\3\2\2\2\u1a99\u1a97\3\2\2\2")
        buf.write("\u1a9a\u1a9b\t\u0083\2\2\u1a9b\u0293\3\2\2\2\u1a9c\u1aab")
        buf.write("\7\u0443\2\2\u1a9d\u1aab\7\u0444\2\2\u1a9e\u1aab\7\u0445")
        buf.write("\2\2\u1a9f\u1aa0\7\u0445\2\2\u1aa0\u1aab\7\u0443\2\2\u1aa1")
        buf.write("\u1aa2\7\u0444\2\2\u1aa2\u1aab\7\u0443\2\2\u1aa3\u1aa4")
        buf.write("\7\u0445\2\2\u1aa4\u1aab\7\u0444\2\2\u1aa5\u1aa6\7\u0446")
        buf.write("\2\2\u1aa6\u1aab\7\u0443\2\2\u1aa7\u1aa8\7\u0445\2\2\u1aa8")
        buf.write("\u1aa9\7\u0443\2\2\u1aa9\u1aab\7\u0444\2\2\u1aaa\u1a9c")
        buf.write("\3\2\2\2\u1aaa\u1a9d\3\2\2\2\u1aaa\u1a9e\3\2\2\2\u1aaa")
        buf.write("\u1a9f\3\2\2\2\u1aaa\u1aa1\3\2\2\2\u1aaa\u1aa3\3\2\2\2")
        buf.write("\u1aaa\u1aa5\3\2\2\2\u1aaa\u1aa7\3\2\2\2\u1aab\u0295\3")
        buf.write("\2\2\2\u1aac\u1ab4\7\32\2\2\u1aad\u1aae\7\u0449\2\2\u1aae")
        buf.write("\u1ab4\7\u0449\2\2\u1aaf\u1ab4\7\u00c7\2\2\u1ab0\u1ab4")
        buf.write("\7\u0083\2\2\u1ab1\u1ab2\7\u0448\2\2\u1ab2\u1ab4\7\u0448")
        buf.write("\2\2\u1ab3\u1aac\3\2\2\2\u1ab3\u1aad\3\2\2\2\u1ab3\u1aaf")
        buf.write("\3\2\2\2\u1ab3\u1ab0\3\2\2\2\u1ab3\u1ab1\3\2\2\2\u1ab4")
        buf.write("\u0297\3\2\2\2\u1ab5\u1ab6\7\u0445\2\2\u1ab6\u1abd\7\u0445")
        buf.write("\2\2\u1ab7\u1ab8\7\u0444\2\2\u1ab8\u1abd\7\u0444\2\2\u1ab9")
        buf.write("\u1abd\7\u0449\2\2\u1aba\u1abd\7\u044a\2\2\u1abb\u1abd")
        buf.write("\7\u0448\2\2\u1abc\u1ab5\3\2\2\2\u1abc\u1ab7\3\2\2\2\u1abc")
        buf.write("\u1ab9\3\2\2\2\u1abc\u1aba\3\2\2\2\u1abc\u1abb\3\2\2\2")
        buf.write("\u1abd\u0299\3\2\2\2\u1abe\u1abf\t\u0084\2\2\u1abf\u029b")
        buf.write("\3\2\2\2\u1ac0\u1ac1\7\u0440\2\2\u1ac1\u1ac6\7\u0444\2")
        buf.write("\2\u1ac2\u1ac3\7\u0440\2\2\u1ac3\u1ac4\7\u0444\2\2\u1ac4")
        buf.write("\u1ac6\7\u0444\2\2\u1ac5\u1ac0\3\2\2\2\u1ac5\u1ac2\3\2")
        buf.write("\2\2\u1ac6\u029d\3\2\2\2\u1ac7\u1ac8\t\u0085\2\2\u1ac8")
        buf.write("\u029f\3\2\2\2\u1ac9\u1aca\t\u0086\2\2\u1aca\u02a1\3\2")
        buf.write("\2\2\u1acb\u1acc\t\u0087\2\2\u1acc\u02a3\3\2\2\2\u1acd")
        buf.write("\u1ace\t\u0088\2\2\u1ace\u02a5\3\2\2\2\u1acf\u1ad0\t\u0089")
        buf.write("\2\2\u1ad0\u02a7\3\2\2\2\u1ad1\u1ad2\t\u008a\2\2\u1ad2")
        buf.write("\u02a9\3\2\2\2\u1ad3\u1ad4\t\u008b\2\2\u1ad4\u02ab\3\2")
        buf.write("\2\2\u03dd\u02ad\u02b1\u02b8\u02bb\u02be\u02c0\u02c6\u02c9")
        buf.write("\u02cc\u02d5\u02fc\u0308\u0313\u0324\u0329\u0335\u0350")
        buf.write("\u0359\u035e\u0364\u0369\u036d\u0376\u0379\u037c\u0380")
        buf.write("\u0387\u038a\u038f\u0397\u039c\u03a1\u03a4\u03a6\u03b2")
        buf.write("\u03b5\u03b9\u03bc\u03c0\u03c3\u03c7\u03ca\u03cd\u03d1")
        buf.write("\u03d4\u03d8\u03de\u03e4\u03ea\u03f1\u03f8\u03fe\u0404")
        buf.write("\u040d\u0412\u0422\u0429\u042d\u0437\u043b\u043f\u0443")
        buf.write("\u0447\u044c\u044f\u0452\u0455\u0458\u045e\u0462\u0468")
        buf.write("\u046d\u0470\u0473\u0475\u0480\u0484\u0487\u0495\u0498")
        buf.write("\u049c\u049f\u04a3\u04a6\u04aa\u04ad\u04b1\u04b4\u04b7")
        buf.write("\u04bb\u04be\u04c2\u04c8\u04d5\u04dc\u04e1\u04e4\u04e9")
        buf.write("\u04f1\u04f7\u04fb\u04fe\u0503\u0506\u050a\u050d\u0511")
        buf.write("\u0514\u051d\u051f\u0526\u052c\u0534\u0537\u053e\u0541")
        buf.write("\u0543\u0549\u054f\u0560\u0567\u056e\u0579\u057c\u0589")
        buf.write("\u0596\u059b\u05ab\u05b3\u05bd\u05c3\u05cf\u05d2\u05d7")
        buf.write("\u05e4\u05eb\u05f2\u05f4\u05fb\u05ff\u0601\u0606\u0609")
        buf.write("\u060f\u0614\u0616\u061a\u061d\u0620\u0626\u062b\u062d")
        buf.write("\u0632\u0639\u063b\u0642\u0647\u064b\u064e\u0656\u065e")
        buf.write("\u0660\u0668\u066c\u066f\u0675\u067a\u067d\u0683\u0686")
        buf.write("\u068a\u068d\u0691\u0696\u069a\u069f\u06a2\u06a6\u06aa")
        buf.write("\u06ae\u06b2\u06b7\u06bc\u06c1\u06c7\u06cc\u06d1\u06d7")
        buf.write("\u06dc\u06e1\u06e6\u06eb\u06f0\u06f5\u06fa\u06ff\u0704")
        buf.write("\u0709\u070f\u0717\u071d\u0729\u0730\u0732\u073a\u073f")
        buf.write("\u0742\u074a\u0750\u0760\u076c\u076e\u0771\u0779\u077f")
        buf.write("\u0785\u0792\u0799\u07a2\u07a7\u07b2\u07bb\u07c0\u07cc")
        buf.write("\u07d3\u07dc\u07e1\u07ed\u07f4\u07fd\u0802\u0809\u0812")
        buf.write("\u0817\u0819\u081e\u0826\u082f\u0833\u0836\u083a\u083f")
        buf.write("\u0845\u084b\u0850\u0855\u085a\u085f\u0862\u0867\u086c")
        buf.write("\u0876\u087a\u0881\u0886\u0889\u088e\u0891\u0895\u0899")
        buf.write("\u08a1\u08b4\u08b7\u08ba\u08be\u08c8\u08d5\u08dc\u08df")
        buf.write("\u08e8\u08eb\u08ee\u08f9\u08fc\u0900\u0908\u090b\u0910")
        buf.write("\u0918\u091e\u0922\u0926\u092b\u0930\u0937\u093b\u0946")
        buf.write("\u094e\u0951\u0957\u095d\u095f\u0964\u0967\u096d\u0973")
        buf.write("\u0975\u0979\u097c\u097f\u0985\u098b\u098e\u0994\u099a")
        buf.write("\u099c\u09a1\u09a9\u09ab\u09b4\u09b9\u09c1\u09c5\u09cd")
        buf.write("\u09d7\u09dc\u09e3\u09e7\u09eb\u0a0b\u0a0f\u0a1b\u0a1e")
        buf.write("\u0a27\u0a38\u0a44\u0a4b\u0a52\u0a61\u0a6e\u0a74\u0a7a")
        buf.write("\u0a80\u0a86\u0a8c\u0a92\u0a97\u0a9e\u0aa5\u0aac\u0ab1")
        buf.write("\u0ab4\u0ab6\u0ac4\u0acb\u0ad2\u0ad8\u0adc\u0ae0\u0ae7")
        buf.write("\u0aea\u0aef\u0af6\u0afd\u0b01\u0b0a\u0b13\u0b1c\u0b20")
        buf.write("\u0b24\u0b2d\u0b31\u0b34\u0b37\u0b3d\u0b41\u0b47\u0b50")
        buf.write("\u0b53\u0b5e\u0b61\u0b66\u0b69\u0b6e\u0b78\u0b7d\u0b83")
        buf.write("\u0b85\u0b8b\u0b8d\u0b93\u0b9b\u0ba0\u0ba8\u0bab\u0bb0")
        buf.write("\u0bb3\u0bb8\u0bc0\u0bc8\u0bce\u0bd6\u0bdb\u0be3\u0be6")
        buf.write("\u0bea\u0bed\u0bf5\u0bfb\u0c04\u0c07\u0c0b\u0c0f\u0c15")
        buf.write("\u0c19\u0c1d\u0c1f\u0c22\u0c25\u0c28\u0c2e\u0c32\u0c35")
        buf.write("\u0c38\u0c3b\u0c3e\u0c40\u0c44\u0c4a\u0c50\u0c56\u0c59")
        buf.write("\u0c5f\u0c63\u0c6b\u0c6f\u0c72\u0c75\u0c7e\u0c82\u0c85")
        buf.write("\u0c89\u0c8d\u0c90\u0c93\u0c98\u0c9e\u0ca2\u0cac\u0cb2")
        buf.write("\u0cb6\u0cbc\u0cc0\u0cc6\u0cc9\u0cd5\u0cd9\u0cdd\u0ce5")
        buf.write("\u0ce9\u0cf1\u0cf4\u0cf8\u0cfb\u0d03\u0d08\u0d0b\u0d0e")
        buf.write("\u0d12\u0d15\u0d1e\u0d23\u0d2c\u0d31\u0d38\u0d3f\u0d47")
        buf.write("\u0d4c\u0d54\u0d57\u0d5a\u0d61\u0d64\u0d6b\u0d6e\u0d76")
        buf.write("\u0d7c\u0d87\u0d8a\u0d95\u0d9b\u0d9f\u0daa\u0daf\u0db1")
        buf.write("\u0db6\u0dc2\u0dcc\u0de6\u0de9\u0dec\u0def\u0df2\u0df5")
        buf.write("\u0df8\u0dfb\u0dfe\u0e01\u0e04\u0e07\u0e09\u0e0f\u0e14")
        buf.write("\u0e1a\u0e1f\u0e22\u0e2c\u0e31\u0e34\u0e37\u0e3a\u0e3d")
        buf.write("\u0e40\u0e44\u0e4a\u0e4e\u0e58\u0e5c\u0e63\u0e6e\u0e71")
        buf.write("\u0e75\u0e78\u0e7c\u0e80\u0e83\u0e85\u0e8d\u0e99\u0e9f")
        buf.write("\u0ea1\u0ea7\u0ea9\u0eab\u0eb1\u0eb9\u0ec1\u0ec6\u0eca")
        buf.write("\u0ed5\u0eda\u0eee\u0ef3\u0ef9\u0f00\u0f05\u0f0e\u0f11")
        buf.write("\u0f15\u0f19\u0f1d\u0f20\u0f23\u0f26\u0f2a\u0f2e\u0f31")
        buf.write("\u0f34\u0f37\u0f3e\u0f42\u0f51\u0f5e\u0f66\u0f70\u0f74")
        buf.write("\u0f77\u0f7d\u0f80\u0f83\u0f8c\u0f95\u0f9f\u0fa3\u0fad")
        buf.write("\u0fb7\u0fbf\u0fc2\u0fcb\u0fce\u0fd2\u0fd7\u0fdb\u0fe4")
        buf.write("\u0fe7\u1006\u1009\u100d\u1045\u104a\u1066\u1074\u107b")
        buf.write("\u107f\u1085\u108d\u108f\u109a\u10a4\u10ab\u10b1\u10b9")
        buf.write("\u10be\u10c6\u10ce\u10d6\u10de\u10e4\u10e7\u10eb\u10f0")
        buf.write("\u10f5\u10fb\u10fd\u1108\u110d\u1114\u1116\u1124\u112a")
        buf.write("\u112f\u1134\u113a\u1141\u1149\u1151\u1156\u115c\u115f")
        buf.write("\u1167\u116e\u1177\u117a\u118b\u1193\u119b\u119f\u11a6")
        buf.write("\u11ac\u11b4\u11bd\u11c3\u11ca\u11d1\u11d6\u11d9\u11db")
        buf.write("\u11e1\u11e3\u11e7\u11e9\u11ec\u11f5\u11fb\u1202\u1209")
        buf.write("\u120e\u1211\u1213\u1219\u121b\u121f\u1221\u1224\u1229")
        buf.write("\u1230\u1239\u123e\u1247\u124e\u1253\u1256\u1258\u125e")
        buf.write("\u1260\u1263\u126b\u1273\u1279\u127e\u1282\u1288\u128a")
        buf.write("\u1295\u1298\u129f\u12a2\u12ae\u12b4\u12bd\u12c6\u12cb")
        buf.write("\u12d4\u12da\u12e5\u12ee\u12f4\u12f9\u12fd\u1300\u130c")
        buf.write("\u1313\u1318\u1327\u132e\u1336\u1339\u1343\u134d\u1357")
        buf.write("\u1361\u1365\u1369\u1373\u1378\u13b2\u13c4\u13cc\u13d8")
        buf.write("\u13df\u13e1\u13eb\u13ee\u13f6\u13fd\u1401\u1408\u140d")
        buf.write("\u1410\u1413\u141c\u1420\u143e\u1445\u1449\u1450\u1453")
        buf.write("\u1463\u1466\u1470\u1474\u147a\u147d\u1482\u1486\u148d")
        buf.write("\u1490\u1496\u14ae\u14bc\u14bf\u14c9\u14d1\u14d5\u14dc")
        buf.write("\u14df\u14e8\u14ee\u14f4\u14fe\u1500\u1506\u1509\u150c")
        buf.write("\u1518\u151b\u1521\u1524\u152c\u1534\u153a\u153e\u154c")
        buf.write("\u1558\u155f\u1563\u156a\u1571\u1576\u157b\u1586\u1591")
        buf.write("\u1597\u159c\u15a9\u15ab\u15b0\u15b5\u15b7\u15be\u15c5")
        buf.write("\u15c9\u15cc\u15d2\u15d6\u15dc\u15e2\u15ef\u15f4\u15fc")
        buf.write("\u15ff\u1604\u1609\u1611\u1614\u161c\u1620\u162d\u1633")
        buf.write("\u163f\u1642\u164b\u1650\u1656\u165d\u165f\u1664\u1666")
        buf.write("\u166a\u1670\u1673\u1676\u1680\u1684\u1698\u169f\u16a1")
        buf.write("\u16a8\u16aa\u16ae\u16b3\u16be\u16c3\u16c9\u16cc\u16d0")
        buf.write("\u16d5\u16d8\u16dc\u16e0\u16e2\u16e7\u16ec\u16f9\u16fc")
        buf.write("\u1700\u1703\u1706\u170b\u170e\u1713\u1718\u171b\u1720")
        buf.write("\u1723\u1729\u172c\u1730\u1733\u1736\u173a\u173d\u1740")
        buf.write("\u1744\u1747\u174a\u174d\u1751\u1754\u1757\u175c\u1761")
        buf.write("\u1766\u1769\u176e\u1771\u1776\u1779\u177d\u1781\u1789")
        buf.write("\u1790\u1794\u1799\u179c\u17a1\u17a5\u17a9\u17b9\u17c2")
        buf.write("\u17ca\u17d3\u17dd\u17e5\u17ed\u17f5\u17fd\u1802\u180a")
        buf.write("\u180f\u1814\u1818\u181d\u1821\u1825\u1834\u183b\u1840")
        buf.write("\u184a\u186b\u186f\u1877\u187b\u1884\u188c\u1891\u1899")
        buf.write("\u189e\u18a3\u18a5\u18ae\u18b3\u18bb\u18c0\u18c8\u18d0")
        buf.write("\u18d3\u18dd\u18ef\u18f5\u18f9\u18ff\u1903\u1907\u1914")
        buf.write("\u191c\u1920\u1925\u192a\u1930\u1935\u1939\u193e\u1943")
        buf.write("\u1948\u1952\u1955\u1959\u195d\u1964\u1968\u1986\u198b")
        buf.write("\u1990\u1993\u1996\u1999\u199c\u19a7\u19b5\u19be\u19d8")
        buf.write("\u19e3\u19ea\u19ee\u19f5\u19fd\u1a02\u1a0a\u1a10\u1a1a")
        buf.write("\u1a27\u1a2d\u1a33\u1a43\u1a49\u1a52\u1a54\u1a67\u1a73")
        buf.write("\u1a84\u1a95\u1a97\u1aaa\u1ab3\u1abc\u1ac5")
        return buf.getvalue()


class SpeakQlParser ( Parser ):

    grammarFileName = "SpeakQlParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'RETRIEVE'", "'SHOW ME'", "'DISPLAY'", 
                     "'PRESENT'", "'FIND'", "'IN TABLE'", "'FROM TABLE'", 
                     "'JOIN TABLE'", "'BY JOINING'", "'BY JOINING TABLE'", 
                     "'JOIN WITH'", "'JOIN WITH TABLE'", "'JOINED WITH'", 
                     "'JOINED WITH TABLE'", "'ADD'", "'ALL'", "'ALTER'", 
                     "'ALWAYS'", "'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", 
                     "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", "'BUCKETS'", 
                     "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", 
                     "'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", 
                     "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
                     "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_USER'", 
                     "'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", 
                     "'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", 
                     "'DETERMINISTIC'", "'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", 
                     "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'EMPTY'", 
                     "'ENCLOSED'", "'ESCAPED'", "'EXCEPT'", "'EXISTS'", 
                     "'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", 
                     "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", "'GENERATED'", 
                     "'GET'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", 
                     "'HISTOGRAM'", "'IF'", "'IGNORE'", "'IN'", "'INDEX'", 
                     "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", 
                     "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", 
                     "'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", 
                     "'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", 
                     "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
                     "'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATURAL'", 
                     "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", "'NUMBER'", 
                     "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", 
                     "'ORDER'", "'OUT'", "'OVER'", "'OUTER'", "'OUTFILE'", 
                     "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", 
                     "'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", 
                     "'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", 
                     "'RESIGNAL'", "'RESTRICT'", "'RETAIN'", "'RETURN'", 
                     "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", 
                     "'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", "'SIGNAL'", 
                     "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", 
                     "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
                     "'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", "'STARTING'", 
                     "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", "'THEN'", 
                     "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", 
                     "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
                     "'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", 
                     "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", "'XOR'", 
                     "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", 
                     "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", "'INT3'", 
                     "'INT4'", "'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", 
                     "'DOUBLE'", "'PRECISION'", "'FLOAT'", "'FLOAT4'", "'FLOAT8'", 
                     "'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", 
                     "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", 
                     "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", 
                     "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", 
                     "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", 
                     "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", 
                     "'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", 
                     "'HOUR_SECOND'", "'MINUTE_SECOND'", "'SECOND_MICROSECOND'", 
                     "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", 
                     "'JSON_ARRAY'", "'JSON_OBJECT'", "'JSON_QUOTE'", "'JSON_CONTAINS'", 
                     "'JSON_CONTAINS_PATH'", "'JSON_EXTRACT'", "'JSON_KEYS'", 
                     "'JSON_OVERLAPS'", "'JSON_SEARCH'", "'JSON_VALUE'", 
                     "'JSON_ARRAY_APPEND'", "'JSON_ARRAY_INSERT'", "'JSON_INSERT'", 
                     "'JSON_MERGE'", "'JSON_MERGE_PATCH'", "'JSON_MERGE_PRESERVE'", 
                     "'JSON_REMOVE'", "'JSON_REPLACE'", "'JSON_SET'", "'JSON_UNQUOTE'", 
                     "'JSON_DEPTH'", "'JSON_LENGTH'", "'JSON_TYPE'", "'JSON_VALID'", 
                     "'JSON_TABLE'", "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'", 
                     "'JSON_PRETTY'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", 
                     "'JSON_ARRAYAGG'", "'JSON_OBJECTAGG'", "'AVG'", "'BIT_AND'", 
                     "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'CUME_DIST'", 
                     "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", 
                     "'LAG'", "'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", 
                     "'NTILE'", "'NTH_VALUE'", "'PERCENT_RANK'", "'RANK'", 
                     "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
                     "'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", 
                     "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'LOCALTIME'", "'CURDATE'", "'CURTIME'", "'DATE_ADD'", 
                     "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", 
                     "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", 
                     "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", 
                     "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
                     "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", 
                     "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", 
                     "'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", 
                     "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", "'CHAIN'", 
                     "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
                     "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", 
                     "'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", 
                     "'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", "'COMPACT'", 
                     "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", 
                     "'CONNECT'", "'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", 
                     "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", "'CONTAINS'", 
                     "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CURSOR_NAME'", 
                     "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", 
                     "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", 
                     "'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", 
                     "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", 
                     "'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", 
                     "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", 
                     "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", 
                     "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
                     "'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", 
                     "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWING'", 
                     "'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", 
                     "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", 
                     "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", 
                     "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", 
                     "'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", 
                     "'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'", 
                     "'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", 
                     "'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", 
                     "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", 
                     "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
                     "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", 
                     "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", "'MASTER_PASSWORD'", 
                     "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", "'MASTER_SSL'", 
                     "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
                     "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", 
                     "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", "'MASTER_USER'", 
                     "'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", 
                     "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
                     "'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", 
                     "'MESSAGE_TEXT'", "'MID'", "'MIGRATE'", "'MIN_ROWS'", 
                     "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", 
                     "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", 
                     "'NO'", "'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", 
                     "'OFFSET'", "'OF'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", 
                     "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", 
                     "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", 
                     "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", 
                     "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", 
                     "'PORT'", "'PRECEDES'", "'PRECEDING'", "'PREPARE'", 
                     "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", 
                     "'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", 
                     "'RECOVER'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", 
                     "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", 
                     "'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", 
                     "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", 
                     "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", 
                     "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", 
                     "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", "'RETURNS'", 
                     "'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", 
                     "'ROWS'", "'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", 
                     "'SECURITY'", "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", 
                     "'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", 
                     "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", 
                     "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", 
                     "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", 
                     "'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", 
                     "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", "'STATUS'", 
                     "'STOP'", "'STORAGE'", "'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", 
                     "'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", 
                     "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", 
                     "'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", 
                     "'TRADITIONAL'", "'TRANSACTION'", "'TRANSACTIONAL'", 
                     "'TRIGGERS'", "'TRUNCATE'", "'UNBOUNDED'", "'UNDEFINED'", 
                     "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", 
                     "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", 
                     "'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", "'VARIABLES'", 
                     "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", "'WARNINGS'", 
                     "'WINDOW'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", 
                     "'XA'", "'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", 
                     "'INTERNAL'", "'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", 
                     "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
                     "'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", 
                     "'RELOAD'", "'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", 
                     "'APPLICATION_PASSWORD_ADMIN'", "'AUDIT_ADMIN'", "'BACKUP_ADMIN'", 
                     "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", "'CLONE_ADMIN'", 
                     "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", 
                     "'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", 
                     "'FLUSH_TABLES'", "'FLUSH_USER_RESOURCES'", "'GROUP_REPLICATION_ADMIN'", 
                     "'INNODB_REDO_LOG_ARCHIVE'", "'INNODB_REDO_LOG_ENABLE'", 
                     "'NDB_STORED_USER'", "'PERSIST_RO_VARIABLES_ADMIN'", 
                     "'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", 
                     "'RESOURCE_GROUP_ADMIN'", "'RESOURCE_GROUP_USER'", 
                     "'ROLE_ADMIN'", "'SERVICE_CONNECTION_ADMIN'", "<INVALID>", 
                     "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", 
                     "'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", 
                     "'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", "'BIG5'", 
                     "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", 
                     "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
                     "'EUCKR'", "'GB18030'", "'GB2312'", "'GBK'", "'GEOSTD8'", 
                     "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", 
                     "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", 
                     "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", 
                     "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", 
                     "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", 
                     "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", 
                     "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", 
                     "'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", 
                     "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", 
                     "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", 
                     "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
                     "'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", 
                     "'AES_ENCRYPT'", "'AREA'", "'ASBINARY'", "'ASIN'", 
                     "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
                     "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", 
                     "'ASYMMETRIC_VERIFY'", "'ATAN'", "'ATAN2'", "'BENCHMARK'", 
                     "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", 
                     "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", 
                     "'CHARACTER_LENGTH'", "'CHARSET'", "'CHAR_LENGTH'", 
                     "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", "'CONCAT'", 
                     "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
                     "'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", 
                     "'CREATE_ASYMMETRIC_PUB_KEY'", "'CREATE_DH_PARAMETERS'", 
                     "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", "'DATE_FORMAT'", 
                     "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
                     "'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", 
                     "'DIMENSION'", "'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", 
                     "'ENDPOINT'", "'ENVELOPE'", "'EQUALS'", "'EXP'", "'EXPORT_SET'", 
                     "'EXTERIORRING'", "'EXTRACTVALUE'", "'FIELD'", "'FIND_IN_SET'", 
                     "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
                     "'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", 
                     "'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", 
                     "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
                     "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", 
                     "'GEOMFROMTEXT'", "'GEOMFROMWKB'", "'GET_FORMAT'", 
                     "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", "'GTID_SUBSET'", 
                     "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
                     "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", 
                     "'INTERIORRINGN'", "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", 
                     "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", "'IS_IPV4'", 
                     "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", 
                     "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
                     "'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
                     "'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", 
                     "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", 
                     "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", 
                     "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
                     "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", 
                     "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
                     "'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", 
                     "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
                     "'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", 
                     "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", 
                     "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", 
                     "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
                     "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", 
                     "'POINTFROMTEXT'", "'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", 
                     "'POLYFROMWKB'", "'POLYGONFROMTEXT'", "'POLYGONFROMWKB'", 
                     "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
                     "'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", 
                     "'ROW_COUNT'", "'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", 
                     "'SESSION_USER'", "'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", 
                     "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", 
                     "'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", 
                     "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", 
                     "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", 
                     "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
                     "'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", 
                     "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", 
                     "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
                     "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
                     "'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", 
                     "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", 
                     "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", "'ST_INTERSECTS'", 
                     "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
                     "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
                     "'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
                     "'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", 
                     "'ST_POINTFROMWKB'", "'ST_POINTN'", "'ST_POLYFROMTEXT'", 
                     "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", "'ST_POLYGONFROMWKB'", 
                     "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
                     "'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", 
                     "'ST_Y'", "'SUBDATE'", "'SUBSTRING_INDEX'", "'SUBTIME'", 
                     "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", "'TIMESTAMPADD'", 
                     "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
                     "'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", 
                     "'UCASE'", "'UNCOMPRESS'", "'UNCOMPRESSED_LENGTH'", 
                     "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", "'UPPER'", 
                     "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
                     "'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", 
                     "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", "'WITHIN'", 
                     "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", 
                     "'/'", "'%'", "'+'", "'-'", "'DIV'", "'MOD'", "'='", 
                     "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", 
                     "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", 
                     "'''", "'\"'", "'`'", "':'" ]

    symbolicNames = [ "<INVALID>", "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", 
                      "LINE_COMMENT", "RETRIEVE", "SHOW_ME", "DISPLAY", 
                      "PRESENT", "FIND", "IN_TABLE", "FROM_TABLE", "JOIN_TABLE", 
                      "BY_JOINING", "BY_JOINING_TABLE", "JOIN_WITH", "JOIN_WITH_TABLE", 
                      "JOINED_WITH", "JOINED_WITH_TABLE", "ADD", "ALL", 
                      "ALTER", "ALWAYS", "ANALYZE", "AND", "ARRAY", "AS", 
                      "ASC", "BEFORE", "BETWEEN", "BOTH", "BUCKETS", "BY", 
                      "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", 
                      "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", 
                      "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", 
                      "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", 
                      "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", 
                      "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", 
                      "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", "EMPTY", 
                      "ENCLOSED", "ESCAPED", "EXCEPT", "EXISTS", "EXIT", 
                      "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", 
                      "FROM", "FULLTEXT", "GENERATED", "GET", "GRANT", "GROUP", 
                      "HAVING", "HIGH_PRIORITY", "HISTOGRAM", "IF", "IGNORE", 
                      "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSERT", 
                      "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", 
                      "KEYS", "KILL", "LEADING", "LEAVE", "LEFT", "LIKE", 
                      "LIMIT", "LINEAR", "LINES", "LOAD", "LOCK", "LOOP", 
                      "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
                      "MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", 
                      "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "NUMBER", "ON", 
                      "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", 
                      "OUT", "OVER", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", 
                      "PROCEDURE", "PURGE", "RANGE", "READ", "READS", "REFERENCES", 
                      "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", 
                      "REQUIRE", "RESIGNAL", "RESTRICT", "RETAIN", "RETURN", 
                      "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", 
                      "SET", "SEPARATOR", "SHOW", "SIGNAL", "SPATIAL", "SQL", 
                      "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", 
                      "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SSL", 
                      "STACKED", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
                      "THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", 
                      "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", 
                      "USAGE", "USE", "USING", "VALUES", "WHEN", "WHERE", 
                      "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", 
                      "SMALLINT", "MEDIUMINT", "MIDDLEINT", "INT", "INT1", 
                      "INT2", "INT3", "INT4", "INT8", "INTEGER", "BIGINT", 
                      "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", 
                      "FLOAT8", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", 
                      "TIMESTAMP", "DATETIME", "YEAR", "CHAR", "VARCHAR", 
                      "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", "TINYBLOB", 
                      "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", 
                      "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", 
                      "SERIAL", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", 
                      "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", 
                      "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
                      "DAY_MICROSECOND", "JSON_ARRAY", "JSON_OBJECT", "JSON_QUOTE", 
                      "JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_EXTRACT", 
                      "JSON_KEYS", "JSON_OVERLAPS", "JSON_SEARCH", "JSON_VALUE", 
                      "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_INSERT", 
                      "JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", 
                      "JSON_REMOVE", "JSON_REPLACE", "JSON_SET", "JSON_UNQUOTE", 
                      "JSON_DEPTH", "JSON_LENGTH", "JSON_TYPE", "JSON_VALID", 
                      "JSON_TABLE", "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", 
                      "JSON_PRETTY", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", 
                      "JSON_ARRAYAGG", "JSON_OBJECTAGG", "AVG", "BIT_AND", 
                      "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", "DENSE_RANK", 
                      "FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", 
                      "LEAD", "MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", 
                      "RANK", "ROW_NUMBER", "STD", "STDDEV", "STDDEV_POP", 
                      "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", 
                      "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", 
                      "EXTRACT", "LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", 
                      "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", 
                      "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", 
                      "ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", 
                      "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", 
                      "BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", 
                      "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", 
                      "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", 
                      "CLASS_ORIGIN", "CLIENT", "CLOSE", "COALESCE", "CODE", 
                      "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", "COMMENT", 
                      "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", 
                      "CONCURRENT", "CONNECT", "CONNECTION", "CONSISTENT", 
                      "CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", 
                      "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", 
                      "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
                      "DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", 
                      "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", 
                      "DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", 
                      "ENGINE", "ENGINES", "ERROR", "ERRORS", "ESCAPE", 
                      "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", 
                      "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", 
                      "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", 
                      "FIXED", "FLUSH", "FOLLOWING", "FOLLOWS", "FOUND", 
                      "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", 
                      "GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HOST", 
                      "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT", 
                      "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", 
                      "INSTALL", "INSTANCE", "INVISIBLE", "INVOKER", "IO", 
                      "IO_THREAD", "IPC", "ISOLATION", "ISSUER", "JSON", 
                      "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", "LESS", 
                      "LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", 
                      "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", 
                      "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", 
                      "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", 
                      "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", 
                      "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", 
                      "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", 
                      "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
                      "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
                      "MAX_USER_CONNECTIONS", "MEDIUM", "MEMBER", "MERGE", 
                      "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", "MODE", 
                      "MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", 
                      "NAMES", "NCHAR", "NEVER", "NEXT", "NO", "NODEGROUP", 
                      "NONE", "ODBC", "OFFLINE", "OFFSET", "OF", "OJ", "OLD_PASSWORD", 
                      "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", 
                      "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER", 
                      "PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", 
                      "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", 
                      "PRECEDES", "PRECEDING", "PREPARE", "PRESERVE", "PREV", 
                      "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "QUERY", 
                      "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", 
                      "REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", 
                      "RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", 
                      "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", 
                      "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
                      "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", 
                      "RESUME", "RETURNED_SQLSTATE", "RETURNING", "RETURNS", 
                      "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", 
                      "ROW_FORMAT", "SAVEPOINT", "SCHEDULE", "SECURITY", 
                      "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", 
                      "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", 
                      "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", 
                      "SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", 
                      "SQL_NO_CACHE", "SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", 
                      "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", "STATUS", 
                      "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", 
                      "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", 
                      "SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", "TABLE_TYPE", 
                      "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", 
                      "TRANSACTIONAL", "TRIGGERS", "TRUNCATE", "UNBOUNDED", 
                      "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", 
                      "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", 
                      "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES", 
                      "VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", 
                      "WINDOW", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", 
                      "XML", "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", 
                      "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", "SECOND", 
                      "MICROSECOND", "TABLES", "ROUTINE", "EXECUTE", "FILE", 
                      "PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", 
                      "APPLICATION_PASSWORD_ADMIN", "AUDIT_ADMIN", "BACKUP_ADMIN", 
                      "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", "CLONE_ADMIN", 
                      "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", "FIREWALL_ADMIN", 
                      "FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", 
                      "FLUSH_TABLES", "FLUSH_USER_RESOURCES", "GROUP_REPLICATION_ADMIN", 
                      "INNODB_REDO_LOG_ARCHIVE", "INNODB_REDO_LOG_ENABLE", 
                      "NDB_STORED_USER", "PERSIST_RO_VARIABLES_ADMIN", "REPLICATION_APPLIER", 
                      "REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", 
                      "RESOURCE_GROUP_USER", "ROLE_ADMIN", "SERVICE_CONNECTION_ADMIN", 
                      "SESSION_VARIABLES_ADMIN", "SET_USER_ID", "SHOW_ROUTINE", 
                      "SYSTEM_VARIABLES_ADMIN", "TABLE_ENCRYPTION_ADMIN", 
                      "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", "ARMSCII8", 
                      "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", 
                      "CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", 
                      "EUCKR", "GB18030", "GB2312", "GBK", "GEOSTD8", "GREEK", 
                      "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", 
                      "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", 
                      "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", 
                      "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", 
                      "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", 
                      "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", 
                      "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE", "COMMITTED", 
                      "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
                      "GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", 
                      "MULTIPOINT", "MULTIPOLYGON", "POINT", "POLYGON", 
                      "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
                      "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", 
                      "ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", 
                      "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", 
                      "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", 
                      "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
                      "CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", 
                      "COERCIBILITY", "COLLATION", "COMPRESS", "CONCAT", 
                      "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
                      "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", 
                      "CREATE_ASYMMETRIC_PUB_KEY", "CREATE_DH_PARAMETERS", 
                      "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
                      "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", 
                      "DECODE", "DEGREES", "DES_DECRYPT", "DES_ENCRYPT", 
                      "DIMENSION", "DISJOINT", "ELT", "ENCODE", "ENCRYPT", 
                      "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", 
                      "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
                      "FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", 
                      "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
                      "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", 
                      "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", 
                      "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", 
                      "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", 
                      "GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", 
                      "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN", 
                      "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", 
                      "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
                      "IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", 
                      "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB", 
                      "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", 
                      "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
                      "LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", 
                      "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", 
                      "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", "MLINEFROMTEXT", 
                      "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", "MPOINTFROMWKB", 
                      "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
                      "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", 
                      "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", 
                      "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
                      "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", 
                      "PERIOD_DIFF", "PI", "POINTFROMTEXT", "POINTFROMWKB", 
                      "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
                      "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
                      "RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", 
                      "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", 
                      "SESSION_USER", "SHA", "SHA1", "SHA2", "SCHEMA_NAME", 
                      "SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", 
                      "SQRT", "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", 
                      "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", 
                      "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
                      "ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", 
                      "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", 
                      "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
                      "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
                      "ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", 
                      "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
                      "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", 
                      "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
                      "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", 
                      "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
                      "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", 
                      "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
                      "ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", 
                      "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
                      "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", 
                      "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", 
                      "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", "TAN", 
                      "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", 
                      "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", 
                      "TO_SECONDS", "UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", 
                      "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", "UUID", 
                      "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", 
                      "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
                      "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
                      "X_FUNCTION", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
                      "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
                      "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", 
                      "PLUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
                      "LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", 
                      "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "DOT", "LR_BRACKET", 
                      "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", 
                      "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", 
                      "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON_SYMB", 
                      "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
                      "START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", 
                      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", 
                      "NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME", 
                      "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
                      "IP_ADDRESS", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION", 
                      "ADMIN", "OPTIONAL" ]

    RULE_root = 0
    RULE_sqlStatements = 1
    RULE_sqlStatement = 2
    RULE_emptyStatement = 3
    RULE_ddlStatement = 4
    RULE_dmlStatement = 5
    RULE_transactionStatement = 6
    RULE_replicationStatement = 7
    RULE_preparedStatement = 8
    RULE_compoundStatement = 9
    RULE_administrationStatement = 10
    RULE_utilityStatement = 11
    RULE_createDatabase = 12
    RULE_createEvent = 13
    RULE_createIndex = 14
    RULE_createLogfileGroup = 15
    RULE_createProcedure = 16
    RULE_createFunction = 17
    RULE_createServer = 18
    RULE_createTable = 19
    RULE_createTablespaceInnodb = 20
    RULE_createTablespaceNdb = 21
    RULE_createTrigger = 22
    RULE_createView = 23
    RULE_createDatabaseOption = 24
    RULE_ownerStatement = 25
    RULE_scheduleExpression = 26
    RULE_timestampValue = 27
    RULE_intervalExpr = 28
    RULE_intervalType = 29
    RULE_enableType = 30
    RULE_indexType = 31
    RULE_indexOption = 32
    RULE_procedureParameter = 33
    RULE_functionParameter = 34
    RULE_routineOption = 35
    RULE_serverOption = 36
    RULE_createDefinitions = 37
    RULE_createDefinition = 38
    RULE_columnDefinition = 39
    RULE_columnConstraint = 40
    RULE_tableConstraint = 41
    RULE_referenceDefinition = 42
    RULE_referenceAction = 43
    RULE_referenceControlType = 44
    RULE_indexColumnDefinition = 45
    RULE_tableOption = 46
    RULE_tableType = 47
    RULE_tablespaceStorage = 48
    RULE_partitionDefinitions = 49
    RULE_partitionFunctionDefinition = 50
    RULE_subpartitionFunctionDefinition = 51
    RULE_partitionDefinition = 52
    RULE_partitionDefinerAtom = 53
    RULE_partitionDefinerVector = 54
    RULE_subpartitionDefinition = 55
    RULE_partitionOption = 56
    RULE_alterDatabase = 57
    RULE_alterEvent = 58
    RULE_alterFunction = 59
    RULE_alterInstance = 60
    RULE_alterLogfileGroup = 61
    RULE_alterProcedure = 62
    RULE_alterServer = 63
    RULE_alterTable = 64
    RULE_alterTablespace = 65
    RULE_alterView = 66
    RULE_alterSpecification = 67
    RULE_dropDatabase = 68
    RULE_dropEvent = 69
    RULE_dropIndex = 70
    RULE_dropLogfileGroup = 71
    RULE_dropProcedure = 72
    RULE_dropFunction = 73
    RULE_dropServer = 74
    RULE_dropTable = 75
    RULE_dropTablespace = 76
    RULE_dropTrigger = 77
    RULE_dropView = 78
    RULE_renameTable = 79
    RULE_renameTableClause = 80
    RULE_truncateTable = 81
    RULE_callStatement = 82
    RULE_deleteStatement = 83
    RULE_doStatement = 84
    RULE_handlerStatement = 85
    RULE_insertStatement = 86
    RULE_loadDataStatement = 87
    RULE_loadXmlStatement = 88
    RULE_replaceStatement = 89
    RULE_selectStatement = 90
    RULE_updateStatement = 91
    RULE_insertStatementValue = 92
    RULE_updatedElement = 93
    RULE_assignmentField = 94
    RULE_lockClause = 95
    RULE_singleDeleteStatement = 96
    RULE_multipleDeleteStatement = 97
    RULE_handlerOpenStatement = 98
    RULE_handlerReadIndexStatement = 99
    RULE_handlerReadStatement = 100
    RULE_handlerCloseStatement = 101
    RULE_singleUpdateStatement = 102
    RULE_multipleUpdateStatement = 103
    RULE_orderByClause = 104
    RULE_orderByExpression = 105
    RULE_tableSources = 106
    RULE_tableSource = 107
    RULE_tableSourceItem = 108
    RULE_indexHint = 109
    RULE_indexHintType = 110
    RULE_joinPart = 111
    RULE_joinKeyword = 112
    RULE_queryExpression = 113
    RULE_queryExpressionNointo = 114
    RULE_querySpecification = 115
    RULE_selectModifierExpression = 116
    RULE_selectExpression = 117
    RULE_tableExpression = 118
    RULE_selectClause = 119
    RULE_selectKeyword = 120
    RULE_querySpecificationNointo = 121
    RULE_unionParenthesis = 122
    RULE_unionStatement = 123
    RULE_selectSpec = 124
    RULE_selectElements = 125
    RULE_selectElementDelimiter = 126
    RULE_selectElement = 127
    RULE_selectIntoExpression = 128
    RULE_selectFieldsInto = 129
    RULE_selectLinesInto = 130
    RULE_fromClause = 131
    RULE_fromKeyword = 132
    RULE_groupByClause = 133
    RULE_havingClause = 134
    RULE_windowClause = 135
    RULE_groupByItem = 136
    RULE_limitClause = 137
    RULE_limitClauseAtom = 138
    RULE_startTransaction = 139
    RULE_beginWork = 140
    RULE_commitWork = 141
    RULE_rollbackWork = 142
    RULE_savepointStatement = 143
    RULE_rollbackStatement = 144
    RULE_releaseStatement = 145
    RULE_lockTables = 146
    RULE_unlockTables = 147
    RULE_setAutocommitStatement = 148
    RULE_setTransactionStatement = 149
    RULE_transactionMode = 150
    RULE_lockTableElement = 151
    RULE_lockAction = 152
    RULE_transactionOption = 153
    RULE_transactionLevel = 154
    RULE_changeMaster = 155
    RULE_changeReplicationFilter = 156
    RULE_purgeBinaryLogs = 157
    RULE_resetMaster = 158
    RULE_resetSlave = 159
    RULE_startSlave = 160
    RULE_stopSlave = 161
    RULE_startGroupReplication = 162
    RULE_stopGroupReplication = 163
    RULE_masterOption = 164
    RULE_stringMasterOption = 165
    RULE_decimalMasterOption = 166
    RULE_boolMasterOption = 167
    RULE_channelOption = 168
    RULE_replicationFilter = 169
    RULE_tablePair = 170
    RULE_threadType = 171
    RULE_untilOption = 172
    RULE_connectionOption = 173
    RULE_gtuidSet = 174
    RULE_xaStartTransaction = 175
    RULE_xaEndTransaction = 176
    RULE_xaPrepareStatement = 177
    RULE_xaCommitWork = 178
    RULE_xaRollbackWork = 179
    RULE_xaRecoverWork = 180
    RULE_prepareStatement = 181
    RULE_executeStatement = 182
    RULE_deallocatePrepare = 183
    RULE_routineBody = 184
    RULE_blockStatement = 185
    RULE_caseStatement = 186
    RULE_ifStatement = 187
    RULE_iterateStatement = 188
    RULE_leaveStatement = 189
    RULE_loopStatement = 190
    RULE_repeatStatement = 191
    RULE_returnStatement = 192
    RULE_whileStatement = 193
    RULE_cursorStatement = 194
    RULE_declareVariable = 195
    RULE_declareCondition = 196
    RULE_declareCursor = 197
    RULE_declareHandler = 198
    RULE_handlerConditionValue = 199
    RULE_procedureSqlStatement = 200
    RULE_caseAlternative = 201
    RULE_elifAlternative = 202
    RULE_alterUser = 203
    RULE_createUser = 204
    RULE_dropUser = 205
    RULE_grantStatement = 206
    RULE_roleOption = 207
    RULE_grantProxy = 208
    RULE_renameUser = 209
    RULE_revokeStatement = 210
    RULE_revokeProxy = 211
    RULE_setPasswordStatement = 212
    RULE_userSpecification = 213
    RULE_userAuthOption = 214
    RULE_tlsOption = 215
    RULE_userResourceOption = 216
    RULE_userPasswordOption = 217
    RULE_userLockOption = 218
    RULE_privelegeClause = 219
    RULE_privilege = 220
    RULE_privilegeLevel = 221
    RULE_renameUserClause = 222
    RULE_analyzeTable = 223
    RULE_checkTable = 224
    RULE_checksumTable = 225
    RULE_optimizeTable = 226
    RULE_repairTable = 227
    RULE_checkTableOption = 228
    RULE_createUdfunction = 229
    RULE_installPlugin = 230
    RULE_uninstallPlugin = 231
    RULE_setStatement = 232
    RULE_showStatement = 233
    RULE_variableClause = 234
    RULE_showCommonEntity = 235
    RULE_showFilter = 236
    RULE_showGlobalInfoClause = 237
    RULE_showSchemaEntity = 238
    RULE_showProfileType = 239
    RULE_binlogStatement = 240
    RULE_cacheIndexStatement = 241
    RULE_flushStatement = 242
    RULE_killStatement = 243
    RULE_loadIndexIntoCache = 244
    RULE_resetStatement = 245
    RULE_shutdownStatement = 246
    RULE_tableIndexes = 247
    RULE_flushOption = 248
    RULE_flushTableOption = 249
    RULE_loadedTableIndexes = 250
    RULE_simpleDescribeStatement = 251
    RULE_fullDescribeStatement = 252
    RULE_helpStatement = 253
    RULE_useStatement = 254
    RULE_signalStatement = 255
    RULE_resignalStatement = 256
    RULE_signalConditionInformation = 257
    RULE_diagnosticsStatement = 258
    RULE_diagnosticsConditionInformationName = 259
    RULE_describeObjectClause = 260
    RULE_fullId = 261
    RULE_tableName = 262
    RULE_fullColumnName = 263
    RULE_indexColumnName = 264
    RULE_userName = 265
    RULE_mysqlVariable = 266
    RULE_charsetName = 267
    RULE_collationName = 268
    RULE_engineName = 269
    RULE_uuidSet = 270
    RULE_xid = 271
    RULE_xuidStringId = 272
    RULE_authPlugin = 273
    RULE_uid = 274
    RULE_simpleId = 275
    RULE_dottedId = 276
    RULE_decimalLiteral = 277
    RULE_fileSizeLiteral = 278
    RULE_stringLiteral = 279
    RULE_booleanLiteral = 280
    RULE_hexadecimalLiteral = 281
    RULE_nullNotnull = 282
    RULE_constant = 283
    RULE_dataType = 284
    RULE_collectionOptions = 285
    RULE_convertedDataType = 286
    RULE_lengthOneDimension = 287
    RULE_lengthTwoDimension = 288
    RULE_lengthTwoOptionalDimension = 289
    RULE_uidList = 290
    RULE_tables = 291
    RULE_indexColumnNames = 292
    RULE_expressions = 293
    RULE_expressionsWithDefaults = 294
    RULE_constants = 295
    RULE_simpleStrings = 296
    RULE_userVariables = 297
    RULE_defaultValue = 298
    RULE_currentTimestamp = 299
    RULE_expressionOrDefault = 300
    RULE_ifExists = 301
    RULE_ifNotExists = 302
    RULE_functionCall = 303
    RULE_leftParen = 304
    RULE_rightParen = 305
    RULE_specificFunction = 306
    RULE_caseFuncAlternative = 307
    RULE_levelsInWeightString = 308
    RULE_levelInWeightListElement = 309
    RULE_aggregateWindowedFunction = 310
    RULE_nonAggregateWindowedFunction = 311
    RULE_overClause = 312
    RULE_windowSpec = 313
    RULE_windowName = 314
    RULE_frameClause = 315
    RULE_frameUnits = 316
    RULE_frameExtent = 317
    RULE_frameBetween = 318
    RULE_frameRange = 319
    RULE_partitionClause = 320
    RULE_scalarFunctionName = 321
    RULE_passwordFunctionClause = 322
    RULE_functionArgs = 323
    RULE_functionArg = 324
    RULE_expression = 325
    RULE_predicate = 326
    RULE_expressionAtom = 327
    RULE_unaryOperator = 328
    RULE_comparisonOperator = 329
    RULE_logicalOperator = 330
    RULE_bitOperator = 331
    RULE_mathOperator = 332
    RULE_jsonOperator = 333
    RULE_charsetNameBase = 334
    RULE_transactionLevelBase = 335
    RULE_privilegesBase = 336
    RULE_intervalTypeBase = 337
    RULE_dataTypeBase = 338
    RULE_keywordsCanBeId = 339
    RULE_functionNameBase = 340

    ruleNames =  [ "root", "sqlStatements", "sqlStatement", "emptyStatement", 
                   "ddlStatement", "dmlStatement", "transactionStatement", 
                   "replicationStatement", "preparedStatement", "compoundStatement", 
                   "administrationStatement", "utilityStatement", "createDatabase", 
                   "createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
                   "createFunction", "createServer", "createTable", "createTablespaceInnodb", 
                   "createTablespaceNdb", "createTrigger", "createView", 
                   "createDatabaseOption", "ownerStatement", "scheduleExpression", 
                   "timestampValue", "intervalExpr", "intervalType", "enableType", 
                   "indexType", "indexOption", "procedureParameter", "functionParameter", 
                   "routineOption", "serverOption", "createDefinitions", 
                   "createDefinition", "columnDefinition", "columnConstraint", 
                   "tableConstraint", "referenceDefinition", "referenceAction", 
                   "referenceControlType", "indexColumnDefinition", "tableOption", 
                   "tableType", "tablespaceStorage", "partitionDefinitions", 
                   "partitionFunctionDefinition", "subpartitionFunctionDefinition", 
                   "partitionDefinition", "partitionDefinerAtom", "partitionDefinerVector", 
                   "subpartitionDefinition", "partitionOption", "alterDatabase", 
                   "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup", 
                   "alterProcedure", "alterServer", "alterTable", "alterTablespace", 
                   "alterView", "alterSpecification", "dropDatabase", "dropEvent", 
                   "dropIndex", "dropLogfileGroup", "dropProcedure", "dropFunction", 
                   "dropServer", "dropTable", "dropTablespace", "dropTrigger", 
                   "dropView", "renameTable", "renameTableClause", "truncateTable", 
                   "callStatement", "deleteStatement", "doStatement", "handlerStatement", 
                   "insertStatement", "loadDataStatement", "loadXmlStatement", 
                   "replaceStatement", "selectStatement", "updateStatement", 
                   "insertStatementValue", "updatedElement", "assignmentField", 
                   "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
                   "handlerOpenStatement", "handlerReadIndexStatement", 
                   "handlerReadStatement", "handlerCloseStatement", "singleUpdateStatement", 
                   "multipleUpdateStatement", "orderByClause", "orderByExpression", 
                   "tableSources", "tableSource", "tableSourceItem", "indexHint", 
                   "indexHintType", "joinPart", "joinKeyword", "queryExpression", 
                   "queryExpressionNointo", "querySpecification", "selectModifierExpression", 
                   "selectExpression", "tableExpression", "selectClause", 
                   "selectKeyword", "querySpecificationNointo", "unionParenthesis", 
                   "unionStatement", "selectSpec", "selectElements", "selectElementDelimiter", 
                   "selectElement", "selectIntoExpression", "selectFieldsInto", 
                   "selectLinesInto", "fromClause", "fromKeyword", "groupByClause", 
                   "havingClause", "windowClause", "groupByItem", "limitClause", 
                   "limitClauseAtom", "startTransaction", "beginWork", "commitWork", 
                   "rollbackWork", "savepointStatement", "rollbackStatement", 
                   "releaseStatement", "lockTables", "unlockTables", "setAutocommitStatement", 
                   "setTransactionStatement", "transactionMode", "lockTableElement", 
                   "lockAction", "transactionOption", "transactionLevel", 
                   "changeMaster", "changeReplicationFilter", "purgeBinaryLogs", 
                   "resetMaster", "resetSlave", "startSlave", "stopSlave", 
                   "startGroupReplication", "stopGroupReplication", "masterOption", 
                   "stringMasterOption", "decimalMasterOption", "boolMasterOption", 
                   "channelOption", "replicationFilter", "tablePair", "threadType", 
                   "untilOption", "connectionOption", "gtuidSet", "xaStartTransaction", 
                   "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", 
                   "xaRollbackWork", "xaRecoverWork", "prepareStatement", 
                   "executeStatement", "deallocatePrepare", "routineBody", 
                   "blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
                   "leaveStatement", "loopStatement", "repeatStatement", 
                   "returnStatement", "whileStatement", "cursorStatement", 
                   "declareVariable", "declareCondition", "declareCursor", 
                   "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
                   "caseAlternative", "elifAlternative", "alterUser", "createUser", 
                   "dropUser", "grantStatement", "roleOption", "grantProxy", 
                   "renameUser", "revokeStatement", "revokeProxy", "setPasswordStatement", 
                   "userSpecification", "userAuthOption", "tlsOption", "userResourceOption", 
                   "userPasswordOption", "userLockOption", "privelegeClause", 
                   "privilege", "privilegeLevel", "renameUserClause", "analyzeTable", 
                   "checkTable", "checksumTable", "optimizeTable", "repairTable", 
                   "checkTableOption", "createUdfunction", "installPlugin", 
                   "uninstallPlugin", "setStatement", "showStatement", "variableClause", 
                   "showCommonEntity", "showFilter", "showGlobalInfoClause", 
                   "showSchemaEntity", "showProfileType", "binlogStatement", 
                   "cacheIndexStatement", "flushStatement", "killStatement", 
                   "loadIndexIntoCache", "resetStatement", "shutdownStatement", 
                   "tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes", 
                   "simpleDescribeStatement", "fullDescribeStatement", "helpStatement", 
                   "useStatement", "signalStatement", "resignalStatement", 
                   "signalConditionInformation", "diagnosticsStatement", 
                   "diagnosticsConditionInformationName", "describeObjectClause", 
                   "fullId", "tableName", "fullColumnName", "indexColumnName", 
                   "userName", "mysqlVariable", "charsetName", "collationName", 
                   "engineName", "uuidSet", "xid", "xuidStringId", "authPlugin", 
                   "uid", "simpleId", "dottedId", "decimalLiteral", "fileSizeLiteral", 
                   "stringLiteral", "booleanLiteral", "hexadecimalLiteral", 
                   "nullNotnull", "constant", "dataType", "collectionOptions", 
                   "convertedDataType", "lengthOneDimension", "lengthTwoDimension", 
                   "lengthTwoOptionalDimension", "uidList", "tables", "indexColumnNames", 
                   "expressions", "expressionsWithDefaults", "constants", 
                   "simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
                   "expressionOrDefault", "ifExists", "ifNotExists", "functionCall", 
                   "leftParen", "rightParen", "specificFunction", "caseFuncAlternative", 
                   "levelsInWeightString", "levelInWeightListElement", "aggregateWindowedFunction", 
                   "nonAggregateWindowedFunction", "overClause", "windowSpec", 
                   "windowName", "frameClause", "frameUnits", "frameExtent", 
                   "frameBetween", "frameRange", "partitionClause", "scalarFunctionName", 
                   "passwordFunctionClause", "functionArgs", "functionArg", 
                   "expression", "predicate", "expressionAtom", "unaryOperator", 
                   "comparisonOperator", "logicalOperator", "bitOperator", 
                   "mathOperator", "jsonOperator", "charsetNameBase", "transactionLevelBase", 
                   "privilegesBase", "intervalTypeBase", "dataTypeBase", 
                   "keywordsCanBeId", "functionNameBase" ]

    EOF = Token.EOF
    SPACE=1
    SPEC_MYSQL_COMMENT=2
    COMMENT_INPUT=3
    LINE_COMMENT=4
    RETRIEVE=5
    SHOW_ME=6
    DISPLAY=7
    PRESENT=8
    FIND=9
    IN_TABLE=10
    FROM_TABLE=11
    JOIN_TABLE=12
    BY_JOINING=13
    BY_JOINING_TABLE=14
    JOIN_WITH=15
    JOIN_WITH_TABLE=16
    JOINED_WITH=17
    JOINED_WITH_TABLE=18
    ADD=19
    ALL=20
    ALTER=21
    ALWAYS=22
    ANALYZE=23
    AND=24
    ARRAY=25
    AS=26
    ASC=27
    BEFORE=28
    BETWEEN=29
    BOTH=30
    BUCKETS=31
    BY=32
    CALL=33
    CASCADE=34
    CASE=35
    CAST=36
    CHANGE=37
    CHARACTER=38
    CHECK=39
    COLLATE=40
    COLUMN=41
    CONDITION=42
    CONSTRAINT=43
    CONTINUE=44
    CONVERT=45
    CREATE=46
    CROSS=47
    CURRENT=48
    CURRENT_USER=49
    CURSOR=50
    DATABASE=51
    DATABASES=52
    DECLARE=53
    DEFAULT=54
    DELAYED=55
    DELETE=56
    DESC=57
    DESCRIBE=58
    DETERMINISTIC=59
    DIAGNOSTICS=60
    DISTINCT=61
    DISTINCTROW=62
    DROP=63
    EACH=64
    ELSE=65
    ELSEIF=66
    EMPTY=67
    ENCLOSED=68
    ESCAPED=69
    EXCEPT=70
    EXISTS=71
    EXIT=72
    EXPLAIN=73
    FALSE=74
    FETCH=75
    FOR=76
    FORCE=77
    FOREIGN=78
    FROM=79
    FULLTEXT=80
    GENERATED=81
    GET=82
    GRANT=83
    GROUP=84
    HAVING=85
    HIGH_PRIORITY=86
    HISTOGRAM=87
    IF=88
    IGNORE=89
    IN=90
    INDEX=91
    INFILE=92
    INNER=93
    INOUT=94
    INSERT=95
    INTERVAL=96
    INTO=97
    IS=98
    ITERATE=99
    JOIN=100
    KEY=101
    KEYS=102
    KILL=103
    LEADING=104
    LEAVE=105
    LEFT=106
    LIKE=107
    LIMIT=108
    LINEAR=109
    LINES=110
    LOAD=111
    LOCK=112
    LOOP=113
    LOW_PRIORITY=114
    MASTER_BIND=115
    MASTER_SSL_VERIFY_SERVER_CERT=116
    MATCH=117
    MAXVALUE=118
    MODIFIES=119
    NATURAL=120
    NOT=121
    NO_WRITE_TO_BINLOG=122
    NULL_LITERAL=123
    NUMBER=124
    ON=125
    OPTIMIZE=126
    OPTION=127
    OPTIONALLY=128
    OR=129
    ORDER=130
    OUT=131
    OVER=132
    OUTER=133
    OUTFILE=134
    PARTITION=135
    PRIMARY=136
    PROCEDURE=137
    PURGE=138
    RANGE=139
    READ=140
    READS=141
    REFERENCES=142
    REGEXP=143
    RELEASE=144
    RENAME=145
    REPEAT=146
    REPLACE=147
    REQUIRE=148
    RESIGNAL=149
    RESTRICT=150
    RETAIN=151
    RETURN=152
    REVOKE=153
    RIGHT=154
    RLIKE=155
    SCHEMA=156
    SCHEMAS=157
    SELECT=158
    SET=159
    SEPARATOR=160
    SHOW=161
    SIGNAL=162
    SPATIAL=163
    SQL=164
    SQLEXCEPTION=165
    SQLSTATE=166
    SQLWARNING=167
    SQL_BIG_RESULT=168
    SQL_CALC_FOUND_ROWS=169
    SQL_SMALL_RESULT=170
    SSL=171
    STACKED=172
    STARTING=173
    STRAIGHT_JOIN=174
    TABLE=175
    TERMINATED=176
    THEN=177
    TO=178
    TRAILING=179
    TRIGGER=180
    TRUE=181
    UNDO=182
    UNION=183
    UNIQUE=184
    UNLOCK=185
    UNSIGNED=186
    UPDATE=187
    USAGE=188
    USE=189
    USING=190
    VALUES=191
    WHEN=192
    WHERE=193
    WHILE=194
    WITH=195
    WRITE=196
    XOR=197
    ZEROFILL=198
    TINYINT=199
    SMALLINT=200
    MEDIUMINT=201
    MIDDLEINT=202
    INT=203
    INT1=204
    INT2=205
    INT3=206
    INT4=207
    INT8=208
    INTEGER=209
    BIGINT=210
    REAL=211
    DOUBLE=212
    PRECISION=213
    FLOAT=214
    FLOAT4=215
    FLOAT8=216
    DECIMAL=217
    DEC=218
    NUMERIC=219
    DATE=220
    TIME=221
    TIMESTAMP=222
    DATETIME=223
    YEAR=224
    CHAR=225
    VARCHAR=226
    NVARCHAR=227
    NATIONAL=228
    BINARY=229
    VARBINARY=230
    TINYBLOB=231
    BLOB=232
    MEDIUMBLOB=233
    LONG=234
    LONGBLOB=235
    TINYTEXT=236
    TEXT=237
    MEDIUMTEXT=238
    LONGTEXT=239
    ENUM=240
    VARYING=241
    SERIAL=242
    YEAR_MONTH=243
    DAY_HOUR=244
    DAY_MINUTE=245
    DAY_SECOND=246
    HOUR_MINUTE=247
    HOUR_SECOND=248
    MINUTE_SECOND=249
    SECOND_MICROSECOND=250
    MINUTE_MICROSECOND=251
    HOUR_MICROSECOND=252
    DAY_MICROSECOND=253
    JSON_ARRAY=254
    JSON_OBJECT=255
    JSON_QUOTE=256
    JSON_CONTAINS=257
    JSON_CONTAINS_PATH=258
    JSON_EXTRACT=259
    JSON_KEYS=260
    JSON_OVERLAPS=261
    JSON_SEARCH=262
    JSON_VALUE=263
    JSON_ARRAY_APPEND=264
    JSON_ARRAY_INSERT=265
    JSON_INSERT=266
    JSON_MERGE=267
    JSON_MERGE_PATCH=268
    JSON_MERGE_PRESERVE=269
    JSON_REMOVE=270
    JSON_REPLACE=271
    JSON_SET=272
    JSON_UNQUOTE=273
    JSON_DEPTH=274
    JSON_LENGTH=275
    JSON_TYPE=276
    JSON_VALID=277
    JSON_TABLE=278
    JSON_SCHEMA_VALID=279
    JSON_SCHEMA_VALIDATION_REPORT=280
    JSON_PRETTY=281
    JSON_STORAGE_FREE=282
    JSON_STORAGE_SIZE=283
    JSON_ARRAYAGG=284
    JSON_OBJECTAGG=285
    AVG=286
    BIT_AND=287
    BIT_OR=288
    BIT_XOR=289
    COUNT=290
    CUME_DIST=291
    DENSE_RANK=292
    FIRST_VALUE=293
    GROUP_CONCAT=294
    LAG=295
    LAST_VALUE=296
    LEAD=297
    MAX=298
    MIN=299
    NTILE=300
    NTH_VALUE=301
    PERCENT_RANK=302
    RANK=303
    ROW_NUMBER=304
    STD=305
    STDDEV=306
    STDDEV_POP=307
    STDDEV_SAMP=308
    SUM=309
    VAR_POP=310
    VAR_SAMP=311
    VARIANCE=312
    CURRENT_DATE=313
    CURRENT_TIME=314
    CURRENT_TIMESTAMP=315
    LOCALTIME=316
    CURDATE=317
    CURTIME=318
    DATE_ADD=319
    DATE_SUB=320
    EXTRACT=321
    LOCALTIMESTAMP=322
    NOW=323
    POSITION=324
    SUBSTR=325
    SUBSTRING=326
    SYSDATE=327
    TRIM=328
    UTC_DATE=329
    UTC_TIME=330
    UTC_TIMESTAMP=331
    ACCOUNT=332
    ACTION=333
    AFTER=334
    AGGREGATE=335
    ALGORITHM=336
    ANY=337
    AT=338
    AUTHORS=339
    AUTOCOMMIT=340
    AUTOEXTEND_SIZE=341
    AUTO_INCREMENT=342
    AVG_ROW_LENGTH=343
    BEGIN=344
    BINLOG=345
    BIT=346
    BLOCK=347
    BOOL=348
    BOOLEAN=349
    BTREE=350
    CACHE=351
    CASCADED=352
    CHAIN=353
    CHANGED=354
    CHANNEL=355
    CHECKSUM=356
    PAGE_CHECKSUM=357
    CIPHER=358
    CLASS_ORIGIN=359
    CLIENT=360
    CLOSE=361
    COALESCE=362
    CODE=363
    COLUMNS=364
    COLUMN_FORMAT=365
    COLUMN_NAME=366
    COMMENT=367
    COMMIT=368
    COMPACT=369
    COMPLETION=370
    COMPRESSED=371
    COMPRESSION=372
    CONCURRENT=373
    CONNECT=374
    CONNECTION=375
    CONSISTENT=376
    CONSTRAINT_CATALOG=377
    CONSTRAINT_SCHEMA=378
    CONSTRAINT_NAME=379
    CONTAINS=380
    CONTEXT=381
    CONTRIBUTORS=382
    COPY=383
    CPU=384
    CURSOR_NAME=385
    DATA=386
    DATAFILE=387
    DEALLOCATE=388
    DEFAULT_AUTH=389
    DEFINER=390
    DELAY_KEY_WRITE=391
    DES_KEY_FILE=392
    DIRECTORY=393
    DISABLE=394
    DISCARD=395
    DISK=396
    DO=397
    DUMPFILE=398
    DUPLICATE=399
    DYNAMIC=400
    ENABLE=401
    ENCRYPTION=402
    END=403
    ENDS=404
    ENGINE=405
    ENGINES=406
    ERROR=407
    ERRORS=408
    ESCAPE=409
    EVEN=410
    EVENT=411
    EVENTS=412
    EVERY=413
    EXCHANGE=414
    EXCLUSIVE=415
    EXPIRE=416
    EXPORT=417
    EXTENDED=418
    EXTENT_SIZE=419
    FAST=420
    FAULTS=421
    FIELDS=422
    FILE_BLOCK_SIZE=423
    FILTER=424
    FIRST=425
    FIXED=426
    FLUSH=427
    FOLLOWING=428
    FOLLOWS=429
    FOUND=430
    FULL=431
    FUNCTION=432
    GENERAL=433
    GLOBAL=434
    GRANTS=435
    GROUP_REPLICATION=436
    HANDLER=437
    HASH=438
    HELP=439
    HOST=440
    HOSTS=441
    IDENTIFIED=442
    IGNORE_SERVER_IDS=443
    IMPORT=444
    INDEXES=445
    INITIAL_SIZE=446
    INPLACE=447
    INSERT_METHOD=448
    INSTALL=449
    INSTANCE=450
    INVISIBLE=451
    INVOKER=452
    IO=453
    IO_THREAD=454
    IPC=455
    ISOLATION=456
    ISSUER=457
    JSON=458
    KEY_BLOCK_SIZE=459
    LANGUAGE=460
    LAST=461
    LEAVES=462
    LESS=463
    LEVEL=464
    LIST=465
    LOCAL=466
    LOGFILE=467
    LOGS=468
    MASTER=469
    MASTER_AUTO_POSITION=470
    MASTER_CONNECT_RETRY=471
    MASTER_DELAY=472
    MASTER_HEARTBEAT_PERIOD=473
    MASTER_HOST=474
    MASTER_LOG_FILE=475
    MASTER_LOG_POS=476
    MASTER_PASSWORD=477
    MASTER_PORT=478
    MASTER_RETRY_COUNT=479
    MASTER_SSL=480
    MASTER_SSL_CA=481
    MASTER_SSL_CAPATH=482
    MASTER_SSL_CERT=483
    MASTER_SSL_CIPHER=484
    MASTER_SSL_CRL=485
    MASTER_SSL_CRLPATH=486
    MASTER_SSL_KEY=487
    MASTER_TLS_VERSION=488
    MASTER_USER=489
    MAX_CONNECTIONS_PER_HOUR=490
    MAX_QUERIES_PER_HOUR=491
    MAX_ROWS=492
    MAX_SIZE=493
    MAX_UPDATES_PER_HOUR=494
    MAX_USER_CONNECTIONS=495
    MEDIUM=496
    MEMBER=497
    MERGE=498
    MESSAGE_TEXT=499
    MID=500
    MIGRATE=501
    MIN_ROWS=502
    MODE=503
    MODIFY=504
    MUTEX=505
    MYSQL=506
    MYSQL_ERRNO=507
    NAME=508
    NAMES=509
    NCHAR=510
    NEVER=511
    NEXT=512
    NO=513
    NODEGROUP=514
    NONE=515
    ODBC=516
    OFFLINE=517
    OFFSET=518
    OF=519
    OJ=520
    OLD_PASSWORD=521
    ONE=522
    ONLINE=523
    ONLY=524
    OPEN=525
    OPTIMIZER_COSTS=526
    OPTIONS=527
    OWNER=528
    PACK_KEYS=529
    PAGE=530
    PARSER=531
    PARTIAL=532
    PARTITIONING=533
    PARTITIONS=534
    PASSWORD=535
    PHASE=536
    PLUGIN=537
    PLUGIN_DIR=538
    PLUGINS=539
    PORT=540
    PRECEDES=541
    PRECEDING=542
    PREPARE=543
    PRESERVE=544
    PREV=545
    PROCESSLIST=546
    PROFILE=547
    PROFILES=548
    PROXY=549
    QUERY=550
    QUICK=551
    REBUILD=552
    RECOVER=553
    REDO_BUFFER_SIZE=554
    REDUNDANT=555
    RELAY=556
    RELAY_LOG_FILE=557
    RELAY_LOG_POS=558
    RELAYLOG=559
    REMOVE=560
    REORGANIZE=561
    REPAIR=562
    REPLICATE_DO_DB=563
    REPLICATE_DO_TABLE=564
    REPLICATE_IGNORE_DB=565
    REPLICATE_IGNORE_TABLE=566
    REPLICATE_REWRITE_DB=567
    REPLICATE_WILD_DO_TABLE=568
    REPLICATE_WILD_IGNORE_TABLE=569
    REPLICATION=570
    RESET=571
    RESUME=572
    RETURNED_SQLSTATE=573
    RETURNING=574
    RETURNS=575
    ROLE=576
    ROLLBACK=577
    ROLLUP=578
    ROTATE=579
    ROW=580
    ROWS=581
    ROW_FORMAT=582
    SAVEPOINT=583
    SCHEDULE=584
    SECURITY=585
    SERVER=586
    SESSION=587
    SHARE=588
    SHARED=589
    SIGNED=590
    SIMPLE=591
    SLAVE=592
    SLOW=593
    SNAPSHOT=594
    SOCKET=595
    SOME=596
    SONAME=597
    SOUNDS=598
    SOURCE=599
    SQL_AFTER_GTIDS=600
    SQL_AFTER_MTS_GAPS=601
    SQL_BEFORE_GTIDS=602
    SQL_BUFFER_RESULT=603
    SQL_CACHE=604
    SQL_NO_CACHE=605
    SQL_THREAD=606
    START=607
    STARTS=608
    STATS_AUTO_RECALC=609
    STATS_PERSISTENT=610
    STATS_SAMPLE_PAGES=611
    STATUS=612
    STOP=613
    STORAGE=614
    STORED=615
    STRING=616
    SUBCLASS_ORIGIN=617
    SUBJECT=618
    SUBPARTITION=619
    SUBPARTITIONS=620
    SUSPEND=621
    SWAPS=622
    SWITCHES=623
    TABLE_NAME=624
    TABLESPACE=625
    TABLE_TYPE=626
    TEMPORARY=627
    TEMPTABLE=628
    THAN=629
    TRADITIONAL=630
    TRANSACTION=631
    TRANSACTIONAL=632
    TRIGGERS=633
    TRUNCATE=634
    UNBOUNDED=635
    UNDEFINED=636
    UNDOFILE=637
    UNDO_BUFFER_SIZE=638
    UNINSTALL=639
    UNKNOWN=640
    UNTIL=641
    UPGRADE=642
    USER=643
    USE_FRM=644
    USER_RESOURCES=645
    VALIDATION=646
    VALUE=647
    VARIABLES=648
    VIEW=649
    VIRTUAL=650
    VISIBLE=651
    WAIT=652
    WARNINGS=653
    WINDOW=654
    WITHOUT=655
    WORK=656
    WRAPPER=657
    X509=658
    XA=659
    XML=660
    EUR=661
    USA=662
    JIS=663
    ISO=664
    INTERNAL=665
    QUARTER=666
    MONTH=667
    DAY=668
    HOUR=669
    MINUTE=670
    WEEK=671
    SECOND=672
    MICROSECOND=673
    TABLES=674
    ROUTINE=675
    EXECUTE=676
    FILE=677
    PROCESS=678
    RELOAD=679
    SHUTDOWN=680
    SUPER=681
    PRIVILEGES=682
    APPLICATION_PASSWORD_ADMIN=683
    AUDIT_ADMIN=684
    BACKUP_ADMIN=685
    BINLOG_ADMIN=686
    BINLOG_ENCRYPTION_ADMIN=687
    CLONE_ADMIN=688
    CONNECTION_ADMIN=689
    ENCRYPTION_KEY_ADMIN=690
    FIREWALL_ADMIN=691
    FIREWALL_USER=692
    FLUSH_OPTIMIZER_COSTS=693
    FLUSH_STATUS=694
    FLUSH_TABLES=695
    FLUSH_USER_RESOURCES=696
    GROUP_REPLICATION_ADMIN=697
    INNODB_REDO_LOG_ARCHIVE=698
    INNODB_REDO_LOG_ENABLE=699
    NDB_STORED_USER=700
    PERSIST_RO_VARIABLES_ADMIN=701
    REPLICATION_APPLIER=702
    REPLICATION_SLAVE_ADMIN=703
    RESOURCE_GROUP_ADMIN=704
    RESOURCE_GROUP_USER=705
    ROLE_ADMIN=706
    SERVICE_CONNECTION_ADMIN=707
    SESSION_VARIABLES_ADMIN=708
    SET_USER_ID=709
    SHOW_ROUTINE=710
    SYSTEM_VARIABLES_ADMIN=711
    TABLE_ENCRYPTION_ADMIN=712
    VERSION_TOKEN_ADMIN=713
    XA_RECOVER_ADMIN=714
    ARMSCII8=715
    ASCII=716
    BIG5=717
    CP1250=718
    CP1251=719
    CP1256=720
    CP1257=721
    CP850=722
    CP852=723
    CP866=724
    CP932=725
    DEC8=726
    EUCJPMS=727
    EUCKR=728
    GB18030=729
    GB2312=730
    GBK=731
    GEOSTD8=732
    GREEK=733
    HEBREW=734
    HP8=735
    KEYBCS2=736
    KOI8R=737
    KOI8U=738
    LATIN1=739
    LATIN2=740
    LATIN5=741
    LATIN7=742
    MACCE=743
    MACROMAN=744
    SJIS=745
    SWE7=746
    TIS620=747
    UCS2=748
    UJIS=749
    UTF16=750
    UTF16LE=751
    UTF32=752
    UTF8=753
    UTF8MB3=754
    UTF8MB4=755
    ARCHIVE=756
    BLACKHOLE=757
    CSV=758
    FEDERATED=759
    INNODB=760
    MEMORY=761
    MRG_MYISAM=762
    MYISAM=763
    NDB=764
    NDBCLUSTER=765
    PERFORMANCE_SCHEMA=766
    TOKUDB=767
    REPEATABLE=768
    COMMITTED=769
    UNCOMMITTED=770
    SERIALIZABLE=771
    GEOMETRYCOLLECTION=772
    GEOMCOLLECTION=773
    GEOMETRY=774
    LINESTRING=775
    MULTILINESTRING=776
    MULTIPOINT=777
    MULTIPOLYGON=778
    POINT=779
    POLYGON=780
    ABS=781
    ACOS=782
    ADDDATE=783
    ADDTIME=784
    AES_DECRYPT=785
    AES_ENCRYPT=786
    AREA=787
    ASBINARY=788
    ASIN=789
    ASTEXT=790
    ASWKB=791
    ASWKT=792
    ASYMMETRIC_DECRYPT=793
    ASYMMETRIC_DERIVE=794
    ASYMMETRIC_ENCRYPT=795
    ASYMMETRIC_SIGN=796
    ASYMMETRIC_VERIFY=797
    ATAN=798
    ATAN2=799
    BENCHMARK=800
    BIN=801
    BIT_COUNT=802
    BIT_LENGTH=803
    BUFFER=804
    CATALOG_NAME=805
    CEIL=806
    CEILING=807
    CENTROID=808
    CHARACTER_LENGTH=809
    CHARSET=810
    CHAR_LENGTH=811
    COERCIBILITY=812
    COLLATION=813
    COMPRESS=814
    CONCAT=815
    CONCAT_WS=816
    CONNECTION_ID=817
    CONV=818
    CONVERT_TZ=819
    COS=820
    COT=821
    CRC32=822
    CREATE_ASYMMETRIC_PRIV_KEY=823
    CREATE_ASYMMETRIC_PUB_KEY=824
    CREATE_DH_PARAMETERS=825
    CREATE_DIGEST=826
    CROSSES=827
    DATEDIFF=828
    DATE_FORMAT=829
    DAYNAME=830
    DAYOFMONTH=831
    DAYOFWEEK=832
    DAYOFYEAR=833
    DECODE=834
    DEGREES=835
    DES_DECRYPT=836
    DES_ENCRYPT=837
    DIMENSION=838
    DISJOINT=839
    ELT=840
    ENCODE=841
    ENCRYPT=842
    ENDPOINT=843
    ENVELOPE=844
    EQUALS=845
    EXP=846
    EXPORT_SET=847
    EXTERIORRING=848
    EXTRACTVALUE=849
    FIELD=850
    FIND_IN_SET=851
    FLOOR=852
    FORMAT=853
    FOUND_ROWS=854
    FROM_BASE64=855
    FROM_DAYS=856
    FROM_UNIXTIME=857
    GEOMCOLLFROMTEXT=858
    GEOMCOLLFROMWKB=859
    GEOMETRYCOLLECTIONFROMTEXT=860
    GEOMETRYCOLLECTIONFROMWKB=861
    GEOMETRYFROMTEXT=862
    GEOMETRYFROMWKB=863
    GEOMETRYN=864
    GEOMETRYTYPE=865
    GEOMFROMTEXT=866
    GEOMFROMWKB=867
    GET_FORMAT=868
    GET_LOCK=869
    GLENGTH=870
    GREATEST=871
    GTID_SUBSET=872
    GTID_SUBTRACT=873
    HEX=874
    IFNULL=875
    INET6_ATON=876
    INET6_NTOA=877
    INET_ATON=878
    INET_NTOA=879
    INSTR=880
    INTERIORRINGN=881
    INTERSECTS=882
    ISCLOSED=883
    ISEMPTY=884
    ISNULL=885
    ISSIMPLE=886
    IS_FREE_LOCK=887
    IS_IPV4=888
    IS_IPV4_COMPAT=889
    IS_IPV4_MAPPED=890
    IS_IPV6=891
    IS_USED_LOCK=892
    LAST_INSERT_ID=893
    LCASE=894
    LEAST=895
    LENGTH=896
    LINEFROMTEXT=897
    LINEFROMWKB=898
    LINESTRINGFROMTEXT=899
    LINESTRINGFROMWKB=900
    LN=901
    LOAD_FILE=902
    LOCATE=903
    LOG=904
    LOG10=905
    LOG2=906
    LOWER=907
    LPAD=908
    LTRIM=909
    MAKEDATE=910
    MAKETIME=911
    MAKE_SET=912
    MASTER_POS_WAIT=913
    MBRCONTAINS=914
    MBRDISJOINT=915
    MBREQUAL=916
    MBRINTERSECTS=917
    MBROVERLAPS=918
    MBRTOUCHES=919
    MBRWITHIN=920
    MD5=921
    MLINEFROMTEXT=922
    MLINEFROMWKB=923
    MONTHNAME=924
    MPOINTFROMTEXT=925
    MPOINTFROMWKB=926
    MPOLYFROMTEXT=927
    MPOLYFROMWKB=928
    MULTILINESTRINGFROMTEXT=929
    MULTILINESTRINGFROMWKB=930
    MULTIPOINTFROMTEXT=931
    MULTIPOINTFROMWKB=932
    MULTIPOLYGONFROMTEXT=933
    MULTIPOLYGONFROMWKB=934
    NAME_CONST=935
    NULLIF=936
    NUMGEOMETRIES=937
    NUMINTERIORRINGS=938
    NUMPOINTS=939
    OCT=940
    OCTET_LENGTH=941
    ORD=942
    OVERLAPS=943
    PERIOD_ADD=944
    PERIOD_DIFF=945
    PI=946
    POINTFROMTEXT=947
    POINTFROMWKB=948
    POINTN=949
    POLYFROMTEXT=950
    POLYFROMWKB=951
    POLYGONFROMTEXT=952
    POLYGONFROMWKB=953
    POW=954
    POWER=955
    QUOTE=956
    RADIANS=957
    RAND=958
    RANDOM_BYTES=959
    RELEASE_LOCK=960
    REVERSE=961
    ROUND=962
    ROW_COUNT=963
    RPAD=964
    RTRIM=965
    SEC_TO_TIME=966
    SESSION_USER=967
    SHA=968
    SHA1=969
    SHA2=970
    SCHEMA_NAME=971
    SIGN=972
    SIN=973
    SLEEP=974
    SOUNDEX=975
    SQL_THREAD_WAIT_AFTER_GTIDS=976
    SQRT=977
    SRID=978
    STARTPOINT=979
    STRCMP=980
    STR_TO_DATE=981
    ST_AREA=982
    ST_ASBINARY=983
    ST_ASTEXT=984
    ST_ASWKB=985
    ST_ASWKT=986
    ST_BUFFER=987
    ST_CENTROID=988
    ST_CONTAINS=989
    ST_CROSSES=990
    ST_DIFFERENCE=991
    ST_DIMENSION=992
    ST_DISJOINT=993
    ST_DISTANCE=994
    ST_ENDPOINT=995
    ST_ENVELOPE=996
    ST_EQUALS=997
    ST_EXTERIORRING=998
    ST_GEOMCOLLFROMTEXT=999
    ST_GEOMCOLLFROMTXT=1000
    ST_GEOMCOLLFROMWKB=1001
    ST_GEOMETRYCOLLECTIONFROMTEXT=1002
    ST_GEOMETRYCOLLECTIONFROMWKB=1003
    ST_GEOMETRYFROMTEXT=1004
    ST_GEOMETRYFROMWKB=1005
    ST_GEOMETRYN=1006
    ST_GEOMETRYTYPE=1007
    ST_GEOMFROMTEXT=1008
    ST_GEOMFROMWKB=1009
    ST_INTERIORRINGN=1010
    ST_INTERSECTION=1011
    ST_INTERSECTS=1012
    ST_ISCLOSED=1013
    ST_ISEMPTY=1014
    ST_ISSIMPLE=1015
    ST_LINEFROMTEXT=1016
    ST_LINEFROMWKB=1017
    ST_LINESTRINGFROMTEXT=1018
    ST_LINESTRINGFROMWKB=1019
    ST_NUMGEOMETRIES=1020
    ST_NUMINTERIORRING=1021
    ST_NUMINTERIORRINGS=1022
    ST_NUMPOINTS=1023
    ST_OVERLAPS=1024
    ST_POINTFROMTEXT=1025
    ST_POINTFROMWKB=1026
    ST_POINTN=1027
    ST_POLYFROMTEXT=1028
    ST_POLYFROMWKB=1029
    ST_POLYGONFROMTEXT=1030
    ST_POLYGONFROMWKB=1031
    ST_SRID=1032
    ST_STARTPOINT=1033
    ST_SYMDIFFERENCE=1034
    ST_TOUCHES=1035
    ST_UNION=1036
    ST_WITHIN=1037
    ST_X=1038
    ST_Y=1039
    SUBDATE=1040
    SUBSTRING_INDEX=1041
    SUBTIME=1042
    SYSTEM_USER=1043
    TAN=1044
    TIMEDIFF=1045
    TIMESTAMPADD=1046
    TIMESTAMPDIFF=1047
    TIME_FORMAT=1048
    TIME_TO_SEC=1049
    TOUCHES=1050
    TO_BASE64=1051
    TO_DAYS=1052
    TO_SECONDS=1053
    UCASE=1054
    UNCOMPRESS=1055
    UNCOMPRESSED_LENGTH=1056
    UNHEX=1057
    UNIX_TIMESTAMP=1058
    UPDATEXML=1059
    UPPER=1060
    UUID=1061
    UUID_SHORT=1062
    VALIDATE_PASSWORD_STRENGTH=1063
    VERSION=1064
    WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1065
    WEEKDAY=1066
    WEEKOFYEAR=1067
    WEIGHT_STRING=1068
    WITHIN=1069
    YEARWEEK=1070
    Y_FUNCTION=1071
    X_FUNCTION=1072
    VAR_ASSIGN=1073
    PLUS_ASSIGN=1074
    MINUS_ASSIGN=1075
    MULT_ASSIGN=1076
    DIV_ASSIGN=1077
    MOD_ASSIGN=1078
    AND_ASSIGN=1079
    XOR_ASSIGN=1080
    OR_ASSIGN=1081
    STAR=1082
    DIVIDE=1083
    MODULE=1084
    PLUS=1085
    MINUS=1086
    DIV=1087
    MOD=1088
    EQUAL_SYMBOL=1089
    GREATER_SYMBOL=1090
    LESS_SYMBOL=1091
    EXCLAMATION_SYMBOL=1092
    BIT_NOT_OP=1093
    BIT_OR_OP=1094
    BIT_AND_OP=1095
    BIT_XOR_OP=1096
    DOT=1097
    LR_BRACKET=1098
    RR_BRACKET=1099
    COMMA=1100
    SEMI=1101
    AT_SIGN=1102
    ZERO_DECIMAL=1103
    ONE_DECIMAL=1104
    TWO_DECIMAL=1105
    SINGLE_QUOTE_SYMB=1106
    DOUBLE_QUOTE_SYMB=1107
    REVERSE_QUOTE_SYMB=1108
    COLON_SYMB=1109
    CHARSET_REVERSE_QOUTE_STRING=1110
    FILESIZE_LITERAL=1111
    START_NATIONAL_STRING_LITERAL=1112
    STRING_LITERAL=1113
    DECIMAL_LITERAL=1114
    HEXADECIMAL_LITERAL=1115
    REAL_LITERAL=1116
    NULL_SPEC_LITERAL=1117
    BIT_STRING=1118
    STRING_CHARSET_NAME=1119
    DOT_ID=1120
    ID=1121
    REVERSE_QUOTE_ID=1122
    STRING_USER_NAME=1123
    IP_ADDRESS=1124
    LOCAL_ID=1125
    GLOBAL_ID=1126
    ERROR_RECONGNIGION=1127
    ADMIN=1128
    OPTIONAL=1129

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SpeakQlParser.EOF, 0)

        def sqlStatements(self):
            return self.getTypedRuleContext(SpeakQlParser.SqlStatementsContext,0)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.MINUS)
            else:
                return self.getToken(SpeakQlParser.MINUS, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = SpeakQlParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SpeakQlParser.RETRIEVE) | (1 << SpeakQlParser.SHOW_ME) | (1 << SpeakQlParser.DISPLAY) | (1 << SpeakQlParser.PRESENT) | (1 << SpeakQlParser.FIND) | (1 << SpeakQlParser.IN_TABLE) | (1 << SpeakQlParser.FROM_TABLE) | (1 << SpeakQlParser.ALTER) | (1 << SpeakQlParser.ANALYZE) | (1 << SpeakQlParser.CALL) | (1 << SpeakQlParser.CHANGE) | (1 << SpeakQlParser.CHECK) | (1 << SpeakQlParser.CREATE) | (1 << SpeakQlParser.DELETE) | (1 << SpeakQlParser.DESC) | (1 << SpeakQlParser.DESCRIBE) | (1 << SpeakQlParser.DROP))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (SpeakQlParser.EXPLAIN - 73)) | (1 << (SpeakQlParser.FROM - 73)) | (1 << (SpeakQlParser.GET - 73)) | (1 << (SpeakQlParser.GRANT - 73)) | (1 << (SpeakQlParser.GROUP - 73)) | (1 << (SpeakQlParser.HAVING - 73)) | (1 << (SpeakQlParser.INSERT - 73)) | (1 << (SpeakQlParser.INTO - 73)) | (1 << (SpeakQlParser.KILL - 73)) | (1 << (SpeakQlParser.LIMIT - 73)) | (1 << (SpeakQlParser.LOAD - 73)) | (1 << (SpeakQlParser.LOCK - 73)) | (1 << (SpeakQlParser.OPTIMIZE - 73)) | (1 << (SpeakQlParser.ORDER - 73)))) != 0) or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (SpeakQlParser.PURGE - 138)) | (1 << (SpeakQlParser.RELEASE - 138)) | (1 << (SpeakQlParser.RENAME - 138)) | (1 << (SpeakQlParser.REPLACE - 138)) | (1 << (SpeakQlParser.RESIGNAL - 138)) | (1 << (SpeakQlParser.REVOKE - 138)) | (1 << (SpeakQlParser.SELECT - 138)) | (1 << (SpeakQlParser.SET - 138)) | (1 << (SpeakQlParser.SHOW - 138)) | (1 << (SpeakQlParser.SIGNAL - 138)) | (1 << (SpeakQlParser.UNLOCK - 138)) | (1 << (SpeakQlParser.UPDATE - 138)) | (1 << (SpeakQlParser.USE - 138)) | (1 << (SpeakQlParser.WHERE - 138)))) != 0) or ((((_la - 344)) & ~0x3f) == 0 and ((1 << (_la - 344)) & ((1 << (SpeakQlParser.BEGIN - 344)) | (1 << (SpeakQlParser.BINLOG - 344)) | (1 << (SpeakQlParser.CACHE - 344)) | (1 << (SpeakQlParser.CHECKSUM - 344)) | (1 << (SpeakQlParser.COMMIT - 344)) | (1 << (SpeakQlParser.DEALLOCATE - 344)) | (1 << (SpeakQlParser.DO - 344)))) != 0) or ((((_la - 427)) & ~0x3f) == 0 and ((1 << (_la - 427)) & ((1 << (SpeakQlParser.FLUSH - 427)) | (1 << (SpeakQlParser.HANDLER - 427)) | (1 << (SpeakQlParser.HELP - 427)) | (1 << (SpeakQlParser.INSTALL - 427)))) != 0) or ((((_la - 543)) & ~0x3f) == 0 and ((1 << (_la - 543)) & ((1 << (SpeakQlParser.PREPARE - 543)) | (1 << (SpeakQlParser.REPAIR - 543)) | (1 << (SpeakQlParser.RESET - 543)) | (1 << (SpeakQlParser.ROLLBACK - 543)) | (1 << (SpeakQlParser.SAVEPOINT - 543)))) != 0) or ((((_la - 607)) & ~0x3f) == 0 and ((1 << (_la - 607)) & ((1 << (SpeakQlParser.START - 607)) | (1 << (SpeakQlParser.STOP - 607)) | (1 << (SpeakQlParser.TRUNCATE - 607)) | (1 << (SpeakQlParser.UNINSTALL - 607)) | (1 << (SpeakQlParser.WINDOW - 607)) | (1 << (SpeakQlParser.XA - 607)))) != 0) or _la==SpeakQlParser.EXECUTE or _la==SpeakQlParser.SHUTDOWN or _la==SpeakQlParser.LR_BRACKET or _la==SpeakQlParser.SEMI:
                self.state = 682
                self.sqlStatements()


            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.MINUS:
                self.state = 685
                self.match(SpeakQlParser.MINUS)
                self.state = 686
                self.match(SpeakQlParser.MINUS)


            self.state = 689
            self.match(SpeakQlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.SqlStatementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.SqlStatementContext,i)


        def emptyStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.EmptyStatementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.EmptyStatementContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.SEMI)
            else:
                return self.getToken(SpeakQlParser.SEMI, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.MINUS)
            else:
                return self.getToken(SpeakQlParser.MINUS, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_sqlStatements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatements" ):
                listener.enterSqlStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatements" ):
                listener.exitSqlStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlStatements" ):
                return visitor.visitSqlStatements(self)
            else:
                return visitor.visitChildren(self)




    def sqlStatements(self):

        localctx = SpeakQlParser.SqlStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sqlStatements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 700
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SpeakQlParser.RETRIEVE, SpeakQlParser.SHOW_ME, SpeakQlParser.DISPLAY, SpeakQlParser.PRESENT, SpeakQlParser.FIND, SpeakQlParser.IN_TABLE, SpeakQlParser.FROM_TABLE, SpeakQlParser.ALTER, SpeakQlParser.ANALYZE, SpeakQlParser.CALL, SpeakQlParser.CHANGE, SpeakQlParser.CHECK, SpeakQlParser.CREATE, SpeakQlParser.DELETE, SpeakQlParser.DESC, SpeakQlParser.DESCRIBE, SpeakQlParser.DROP, SpeakQlParser.EXPLAIN, SpeakQlParser.FROM, SpeakQlParser.GET, SpeakQlParser.GRANT, SpeakQlParser.GROUP, SpeakQlParser.HAVING, SpeakQlParser.INSERT, SpeakQlParser.INTO, SpeakQlParser.KILL, SpeakQlParser.LIMIT, SpeakQlParser.LOAD, SpeakQlParser.LOCK, SpeakQlParser.OPTIMIZE, SpeakQlParser.ORDER, SpeakQlParser.PURGE, SpeakQlParser.RELEASE, SpeakQlParser.RENAME, SpeakQlParser.REPLACE, SpeakQlParser.RESIGNAL, SpeakQlParser.REVOKE, SpeakQlParser.SELECT, SpeakQlParser.SET, SpeakQlParser.SHOW, SpeakQlParser.SIGNAL, SpeakQlParser.UNLOCK, SpeakQlParser.UPDATE, SpeakQlParser.USE, SpeakQlParser.WHERE, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.CACHE, SpeakQlParser.CHECKSUM, SpeakQlParser.COMMIT, SpeakQlParser.DEALLOCATE, SpeakQlParser.DO, SpeakQlParser.FLUSH, SpeakQlParser.HANDLER, SpeakQlParser.HELP, SpeakQlParser.INSTALL, SpeakQlParser.PREPARE, SpeakQlParser.REPAIR, SpeakQlParser.RESET, SpeakQlParser.ROLLBACK, SpeakQlParser.SAVEPOINT, SpeakQlParser.START, SpeakQlParser.STOP, SpeakQlParser.TRUNCATE, SpeakQlParser.UNINSTALL, SpeakQlParser.WINDOW, SpeakQlParser.XA, SpeakQlParser.EXECUTE, SpeakQlParser.SHUTDOWN, SpeakQlParser.LR_BRACKET]:
                        self.state = 691
                        self.sqlStatement()
                        self.state = 694
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SpeakQlParser.MINUS:
                            self.state = 692
                            self.match(SpeakQlParser.MINUS)
                            self.state = 693
                            self.match(SpeakQlParser.MINUS)


                        self.state = 697
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                        if la_ == 1:
                            self.state = 696
                            self.match(SpeakQlParser.SEMI)


                        pass
                    elif token in [SpeakQlParser.SEMI]:
                        self.state = 699
                        self.emptyStatement()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 704
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

            self.state = 714
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.RETRIEVE, SpeakQlParser.SHOW_ME, SpeakQlParser.DISPLAY, SpeakQlParser.PRESENT, SpeakQlParser.FIND, SpeakQlParser.IN_TABLE, SpeakQlParser.FROM_TABLE, SpeakQlParser.ALTER, SpeakQlParser.ANALYZE, SpeakQlParser.CALL, SpeakQlParser.CHANGE, SpeakQlParser.CHECK, SpeakQlParser.CREATE, SpeakQlParser.DELETE, SpeakQlParser.DESC, SpeakQlParser.DESCRIBE, SpeakQlParser.DROP, SpeakQlParser.EXPLAIN, SpeakQlParser.FROM, SpeakQlParser.GET, SpeakQlParser.GRANT, SpeakQlParser.GROUP, SpeakQlParser.HAVING, SpeakQlParser.INSERT, SpeakQlParser.INTO, SpeakQlParser.KILL, SpeakQlParser.LIMIT, SpeakQlParser.LOAD, SpeakQlParser.LOCK, SpeakQlParser.OPTIMIZE, SpeakQlParser.ORDER, SpeakQlParser.PURGE, SpeakQlParser.RELEASE, SpeakQlParser.RENAME, SpeakQlParser.REPLACE, SpeakQlParser.RESIGNAL, SpeakQlParser.REVOKE, SpeakQlParser.SELECT, SpeakQlParser.SET, SpeakQlParser.SHOW, SpeakQlParser.SIGNAL, SpeakQlParser.UNLOCK, SpeakQlParser.UPDATE, SpeakQlParser.USE, SpeakQlParser.WHERE, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.CACHE, SpeakQlParser.CHECKSUM, SpeakQlParser.COMMIT, SpeakQlParser.DEALLOCATE, SpeakQlParser.DO, SpeakQlParser.FLUSH, SpeakQlParser.HANDLER, SpeakQlParser.HELP, SpeakQlParser.INSTALL, SpeakQlParser.PREPARE, SpeakQlParser.REPAIR, SpeakQlParser.RESET, SpeakQlParser.ROLLBACK, SpeakQlParser.SAVEPOINT, SpeakQlParser.START, SpeakQlParser.STOP, SpeakQlParser.TRUNCATE, SpeakQlParser.UNINSTALL, SpeakQlParser.WINDOW, SpeakQlParser.XA, SpeakQlParser.EXECUTE, SpeakQlParser.SHUTDOWN, SpeakQlParser.LR_BRACKET]:
                self.state = 705
                self.sqlStatement()
                self.state = 711
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 708
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SpeakQlParser.MINUS:
                        self.state = 706
                        self.match(SpeakQlParser.MINUS)
                        self.state = 707
                        self.match(SpeakQlParser.MINUS)


                    self.state = 710
                    self.match(SpeakQlParser.SEMI)


                pass
            elif token in [SpeakQlParser.SEMI]:
                self.state = 713
                self.emptyStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ddlStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.DdlStatementContext,0)


        def dmlStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.DmlStatementContext,0)


        def transactionStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.TransactionStatementContext,0)


        def replicationStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.ReplicationStatementContext,0)


        def preparedStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.PreparedStatementContext,0)


        def administrationStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.AdministrationStatementContext,0)


        def utilityStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.UtilityStatementContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_sqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatement" ):
                listener.enterSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatement" ):
                listener.exitSqlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlStatement" ):
                return visitor.visitSqlStatement(self)
            else:
                return visitor.visitChildren(self)




    def sqlStatement(self):

        localctx = SpeakQlParser.SqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sqlStatement)
        try:
            self.state = 723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 716
                self.ddlStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 717
                self.dmlStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 718
                self.transactionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 719
                self.replicationStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 720
                self.preparedStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 721
                self.administrationStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 722
                self.utilityStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(SpeakQlParser.SEMI, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStatement" ):
                return visitor.visitEmptyStatement(self)
            else:
                return visitor.visitChildren(self)




    def emptyStatement(self):

        localctx = SpeakQlParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_emptyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(SpeakQlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DdlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createDatabase(self):
            return self.getTypedRuleContext(SpeakQlParser.CreateDatabaseContext,0)


        def createEvent(self):
            return self.getTypedRuleContext(SpeakQlParser.CreateEventContext,0)


        def createIndex(self):
            return self.getTypedRuleContext(SpeakQlParser.CreateIndexContext,0)


        def createLogfileGroup(self):
            return self.getTypedRuleContext(SpeakQlParser.CreateLogfileGroupContext,0)


        def createProcedure(self):
            return self.getTypedRuleContext(SpeakQlParser.CreateProcedureContext,0)


        def createFunction(self):
            return self.getTypedRuleContext(SpeakQlParser.CreateFunctionContext,0)


        def createServer(self):
            return self.getTypedRuleContext(SpeakQlParser.CreateServerContext,0)


        def createTable(self):
            return self.getTypedRuleContext(SpeakQlParser.CreateTableContext,0)


        def createTablespaceInnodb(self):
            return self.getTypedRuleContext(SpeakQlParser.CreateTablespaceInnodbContext,0)


        def createTablespaceNdb(self):
            return self.getTypedRuleContext(SpeakQlParser.CreateTablespaceNdbContext,0)


        def createTrigger(self):
            return self.getTypedRuleContext(SpeakQlParser.CreateTriggerContext,0)


        def createView(self):
            return self.getTypedRuleContext(SpeakQlParser.CreateViewContext,0)


        def alterDatabase(self):
            return self.getTypedRuleContext(SpeakQlParser.AlterDatabaseContext,0)


        def alterEvent(self):
            return self.getTypedRuleContext(SpeakQlParser.AlterEventContext,0)


        def alterFunction(self):
            return self.getTypedRuleContext(SpeakQlParser.AlterFunctionContext,0)


        def alterInstance(self):
            return self.getTypedRuleContext(SpeakQlParser.AlterInstanceContext,0)


        def alterLogfileGroup(self):
            return self.getTypedRuleContext(SpeakQlParser.AlterLogfileGroupContext,0)


        def alterProcedure(self):
            return self.getTypedRuleContext(SpeakQlParser.AlterProcedureContext,0)


        def alterServer(self):
            return self.getTypedRuleContext(SpeakQlParser.AlterServerContext,0)


        def alterTable(self):
            return self.getTypedRuleContext(SpeakQlParser.AlterTableContext,0)


        def alterTablespace(self):
            return self.getTypedRuleContext(SpeakQlParser.AlterTablespaceContext,0)


        def alterView(self):
            return self.getTypedRuleContext(SpeakQlParser.AlterViewContext,0)


        def dropDatabase(self):
            return self.getTypedRuleContext(SpeakQlParser.DropDatabaseContext,0)


        def dropEvent(self):
            return self.getTypedRuleContext(SpeakQlParser.DropEventContext,0)


        def dropIndex(self):
            return self.getTypedRuleContext(SpeakQlParser.DropIndexContext,0)


        def dropLogfileGroup(self):
            return self.getTypedRuleContext(SpeakQlParser.DropLogfileGroupContext,0)


        def dropProcedure(self):
            return self.getTypedRuleContext(SpeakQlParser.DropProcedureContext,0)


        def dropFunction(self):
            return self.getTypedRuleContext(SpeakQlParser.DropFunctionContext,0)


        def dropServer(self):
            return self.getTypedRuleContext(SpeakQlParser.DropServerContext,0)


        def dropTable(self):
            return self.getTypedRuleContext(SpeakQlParser.DropTableContext,0)


        def dropTablespace(self):
            return self.getTypedRuleContext(SpeakQlParser.DropTablespaceContext,0)


        def dropTrigger(self):
            return self.getTypedRuleContext(SpeakQlParser.DropTriggerContext,0)


        def dropView(self):
            return self.getTypedRuleContext(SpeakQlParser.DropViewContext,0)


        def renameTable(self):
            return self.getTypedRuleContext(SpeakQlParser.RenameTableContext,0)


        def truncateTable(self):
            return self.getTypedRuleContext(SpeakQlParser.TruncateTableContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_ddlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdlStatement" ):
                listener.enterDdlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdlStatement" ):
                listener.exitDdlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDdlStatement" ):
                return visitor.visitDdlStatement(self)
            else:
                return visitor.visitChildren(self)




    def ddlStatement(self):

        localctx = SpeakQlParser.DdlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_ddlStatement)
        try:
            self.state = 762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 727
                self.createDatabase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 728
                self.createEvent()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 729
                self.createIndex()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 730
                self.createLogfileGroup()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 731
                self.createProcedure()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 732
                self.createFunction()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 733
                self.createServer()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 734
                self.createTable()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 735
                self.createTablespaceInnodb()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 736
                self.createTablespaceNdb()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 737
                self.createTrigger()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 738
                self.createView()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 739
                self.alterDatabase()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 740
                self.alterEvent()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 741
                self.alterFunction()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 742
                self.alterInstance()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 743
                self.alterLogfileGroup()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 744
                self.alterProcedure()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 745
                self.alterServer()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 746
                self.alterTable()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 747
                self.alterTablespace()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 748
                self.alterView()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 749
                self.dropDatabase()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 750
                self.dropEvent()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 751
                self.dropIndex()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 752
                self.dropLogfileGroup()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 753
                self.dropProcedure()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 754
                self.dropFunction()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 755
                self.dropServer()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 756
                self.dropTable()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 757
                self.dropTablespace()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 758
                self.dropTrigger()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 759
                self.dropView()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 760
                self.renameTable()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 761
                self.truncateTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.InsertStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.UpdateStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.DeleteStatementContext,0)


        def replaceStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.ReplaceStatementContext,0)


        def callStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.CallStatementContext,0)


        def loadDataStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.LoadDataStatementContext,0)


        def loadXmlStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.LoadXmlStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.DoStatementContext,0)


        def handlerStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.HandlerStatementContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_dmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlStatement" ):
                listener.enterDmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlStatement" ):
                listener.exitDmlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDmlStatement" ):
                return visitor.visitDmlStatement(self)
            else:
                return visitor.visitChildren(self)




    def dmlStatement(self):

        localctx = SpeakQlParser.DmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_dmlStatement)
        try:
            self.state = 774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 764
                self.selectStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 765
                self.insertStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 766
                self.updateStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 767
                self.deleteStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 768
                self.replaceStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 769
                self.callStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 770
                self.loadDataStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 771
                self.loadXmlStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 772
                self.doStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 773
                self.handlerStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def startTransaction(self):
            return self.getTypedRuleContext(SpeakQlParser.StartTransactionContext,0)


        def beginWork(self):
            return self.getTypedRuleContext(SpeakQlParser.BeginWorkContext,0)


        def commitWork(self):
            return self.getTypedRuleContext(SpeakQlParser.CommitWorkContext,0)


        def rollbackWork(self):
            return self.getTypedRuleContext(SpeakQlParser.RollbackWorkContext,0)


        def savepointStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SavepointStatementContext,0)


        def rollbackStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.RollbackStatementContext,0)


        def releaseStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.ReleaseStatementContext,0)


        def lockTables(self):
            return self.getTypedRuleContext(SpeakQlParser.LockTablesContext,0)


        def unlockTables(self):
            return self.getTypedRuleContext(SpeakQlParser.UnlockTablesContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_transactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionStatement" ):
                listener.enterTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionStatement" ):
                listener.exitTransactionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionStatement" ):
                return visitor.visitTransactionStatement(self)
            else:
                return visitor.visitChildren(self)




    def transactionStatement(self):

        localctx = SpeakQlParser.TransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_transactionStatement)
        try:
            self.state = 785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 776
                self.startTransaction()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 777
                self.beginWork()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 778
                self.commitWork()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 779
                self.rollbackWork()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 780
                self.savepointStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 781
                self.rollbackStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 782
                self.releaseStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 783
                self.lockTables()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 784
                self.unlockTables()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def changeMaster(self):
            return self.getTypedRuleContext(SpeakQlParser.ChangeMasterContext,0)


        def changeReplicationFilter(self):
            return self.getTypedRuleContext(SpeakQlParser.ChangeReplicationFilterContext,0)


        def purgeBinaryLogs(self):
            return self.getTypedRuleContext(SpeakQlParser.PurgeBinaryLogsContext,0)


        def resetMaster(self):
            return self.getTypedRuleContext(SpeakQlParser.ResetMasterContext,0)


        def resetSlave(self):
            return self.getTypedRuleContext(SpeakQlParser.ResetSlaveContext,0)


        def startSlave(self):
            return self.getTypedRuleContext(SpeakQlParser.StartSlaveContext,0)


        def stopSlave(self):
            return self.getTypedRuleContext(SpeakQlParser.StopSlaveContext,0)


        def startGroupReplication(self):
            return self.getTypedRuleContext(SpeakQlParser.StartGroupReplicationContext,0)


        def stopGroupReplication(self):
            return self.getTypedRuleContext(SpeakQlParser.StopGroupReplicationContext,0)


        def xaStartTransaction(self):
            return self.getTypedRuleContext(SpeakQlParser.XaStartTransactionContext,0)


        def xaEndTransaction(self):
            return self.getTypedRuleContext(SpeakQlParser.XaEndTransactionContext,0)


        def xaPrepareStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.XaPrepareStatementContext,0)


        def xaCommitWork(self):
            return self.getTypedRuleContext(SpeakQlParser.XaCommitWorkContext,0)


        def xaRollbackWork(self):
            return self.getTypedRuleContext(SpeakQlParser.XaRollbackWorkContext,0)


        def xaRecoverWork(self):
            return self.getTypedRuleContext(SpeakQlParser.XaRecoverWorkContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_replicationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplicationStatement" ):
                listener.enterReplicationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplicationStatement" ):
                listener.exitReplicationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplicationStatement" ):
                return visitor.visitReplicationStatement(self)
            else:
                return visitor.visitChildren(self)




    def replicationStatement(self):

        localctx = SpeakQlParser.ReplicationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_replicationStatement)
        try:
            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 787
                self.changeMaster()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 788
                self.changeReplicationFilter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 789
                self.purgeBinaryLogs()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 790
                self.resetMaster()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 791
                self.resetSlave()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 792
                self.startSlave()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 793
                self.stopSlave()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 794
                self.startGroupReplication()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 795
                self.stopGroupReplication()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 796
                self.xaStartTransaction()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 797
                self.xaEndTransaction()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 798
                self.xaPrepareStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 799
                self.xaCommitWork()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 800
                self.xaRollbackWork()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 801
                self.xaRecoverWork()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreparedStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prepareStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.PrepareStatementContext,0)


        def executeStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.ExecuteStatementContext,0)


        def deallocatePrepare(self):
            return self.getTypedRuleContext(SpeakQlParser.DeallocatePrepareContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_preparedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreparedStatement" ):
                listener.enterPreparedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreparedStatement" ):
                listener.exitPreparedStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreparedStatement" ):
                return visitor.visitPreparedStatement(self)
            else:
                return visitor.visitChildren(self)




    def preparedStatement(self):

        localctx = SpeakQlParser.PreparedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_preparedStatement)
        try:
            self.state = 807
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.PREPARE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 804
                self.prepareStatement()
                pass
            elif token in [SpeakQlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 805
                self.executeStatement()
                pass
            elif token in [SpeakQlParser.DROP, SpeakQlParser.DEALLOCATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 806
                self.deallocatePrepare()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.BlockStatementContext,0)


        def caseStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.CaseStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.IfStatementContext,0)


        def leaveStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.LeaveStatementContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.LoopStatementContext,0)


        def repeatStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.RepeatStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.WhileStatementContext,0)


        def iterateStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.IterateStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.ReturnStatementContext,0)


        def cursorStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.CursorStatementContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundStatement" ):
                return visitor.visitCompoundStatement(self)
            else:
                return visitor.visitChildren(self)




    def compoundStatement(self):

        localctx = SpeakQlParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_compoundStatement)
        try:
            self.state = 819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 809
                self.blockStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 810
                self.caseStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 811
                self.ifStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 812
                self.leaveStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 813
                self.loopStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 814
                self.repeatStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 815
                self.whileStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 816
                self.iterateStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 817
                self.returnStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 818
                self.cursorStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdministrationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterUser(self):
            return self.getTypedRuleContext(SpeakQlParser.AlterUserContext,0)


        def createUser(self):
            return self.getTypedRuleContext(SpeakQlParser.CreateUserContext,0)


        def dropUser(self):
            return self.getTypedRuleContext(SpeakQlParser.DropUserContext,0)


        def grantStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.GrantStatementContext,0)


        def grantProxy(self):
            return self.getTypedRuleContext(SpeakQlParser.GrantProxyContext,0)


        def renameUser(self):
            return self.getTypedRuleContext(SpeakQlParser.RenameUserContext,0)


        def revokeStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.RevokeStatementContext,0)


        def revokeProxy(self):
            return self.getTypedRuleContext(SpeakQlParser.RevokeProxyContext,0)


        def analyzeTable(self):
            return self.getTypedRuleContext(SpeakQlParser.AnalyzeTableContext,0)


        def checkTable(self):
            return self.getTypedRuleContext(SpeakQlParser.CheckTableContext,0)


        def checksumTable(self):
            return self.getTypedRuleContext(SpeakQlParser.ChecksumTableContext,0)


        def optimizeTable(self):
            return self.getTypedRuleContext(SpeakQlParser.OptimizeTableContext,0)


        def repairTable(self):
            return self.getTypedRuleContext(SpeakQlParser.RepairTableContext,0)


        def createUdfunction(self):
            return self.getTypedRuleContext(SpeakQlParser.CreateUdfunctionContext,0)


        def installPlugin(self):
            return self.getTypedRuleContext(SpeakQlParser.InstallPluginContext,0)


        def uninstallPlugin(self):
            return self.getTypedRuleContext(SpeakQlParser.UninstallPluginContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SetStatementContext,0)


        def showStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.ShowStatementContext,0)


        def binlogStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.BinlogStatementContext,0)


        def cacheIndexStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.CacheIndexStatementContext,0)


        def flushStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.FlushStatementContext,0)


        def killStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.KillStatementContext,0)


        def loadIndexIntoCache(self):
            return self.getTypedRuleContext(SpeakQlParser.LoadIndexIntoCacheContext,0)


        def resetStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.ResetStatementContext,0)


        def shutdownStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.ShutdownStatementContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_administrationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdministrationStatement" ):
                listener.enterAdministrationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdministrationStatement" ):
                listener.exitAdministrationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdministrationStatement" ):
                return visitor.visitAdministrationStatement(self)
            else:
                return visitor.visitChildren(self)




    def administrationStatement(self):

        localctx = SpeakQlParser.AdministrationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_administrationStatement)
        try:
            self.state = 846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 821
                self.alterUser()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 822
                self.createUser()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 823
                self.dropUser()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 824
                self.grantStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 825
                self.grantProxy()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 826
                self.renameUser()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 827
                self.revokeStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 828
                self.revokeProxy()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 829
                self.analyzeTable()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 830
                self.checkTable()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 831
                self.checksumTable()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 832
                self.optimizeTable()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 833
                self.repairTable()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 834
                self.createUdfunction()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 835
                self.installPlugin()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 836
                self.uninstallPlugin()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 837
                self.setStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 838
                self.showStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 839
                self.binlogStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 840
                self.cacheIndexStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 841
                self.flushStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 842
                self.killStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 843
                self.loadIndexIntoCache()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 844
                self.resetStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 845
                self.shutdownStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UtilityStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDescribeStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SimpleDescribeStatementContext,0)


        def fullDescribeStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.FullDescribeStatementContext,0)


        def helpStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.HelpStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.UseStatementContext,0)


        def signalStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SignalStatementContext,0)


        def resignalStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.ResignalStatementContext,0)


        def diagnosticsStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.DiagnosticsStatementContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_utilityStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtilityStatement" ):
                listener.enterUtilityStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtilityStatement" ):
                listener.exitUtilityStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUtilityStatement" ):
                return visitor.visitUtilityStatement(self)
            else:
                return visitor.visitChildren(self)




    def utilityStatement(self):

        localctx = SpeakQlParser.UtilityStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_utilityStatement)
        try:
            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 848
                self.simpleDescribeStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 849
                self.fullDescribeStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 850
                self.helpStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 851
                self.useStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 852
                self.signalStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 853
                self.resignalStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 854
                self.diagnosticsStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbFormat = None # Token

        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def DATABASE(self):
            return self.getToken(SpeakQlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(SpeakQlParser.SCHEMA, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(SpeakQlParser.IfNotExistsContext,0)


        def createDatabaseOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.CreateDatabaseOptionContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_createDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabase" ):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabase" ):
                listener.exitCreateDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDatabase" ):
                return visitor.visitCreateDatabase(self)
            else:
                return visitor.visitChildren(self)




    def createDatabase(self):

        localctx = SpeakQlParser.CreateDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_createDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(SpeakQlParser.CREATE)
            self.state = 858
            localctx.dbFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.DATABASE or _la==SpeakQlParser.SCHEMA):
                localctx.dbFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IF:
                self.state = 859
                self.ifNotExists()


            self.state = 862
            self.uid()
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SpeakQlParser.CHARACTER) | (1 << SpeakQlParser.COLLATE) | (1 << SpeakQlParser.DEFAULT))) != 0) or _la==SpeakQlParser.CHARSET:
                self.state = 863
                self.createDatabaseOption()
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)

        def EVENT(self):
            return self.getToken(SpeakQlParser.EVENT, 0)

        def fullId(self):
            return self.getTypedRuleContext(SpeakQlParser.FullIdContext,0)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.ON)
            else:
                return self.getToken(SpeakQlParser.ON, i)

        def SCHEDULE(self):
            return self.getToken(SpeakQlParser.SCHEDULE, 0)

        def scheduleExpression(self):
            return self.getTypedRuleContext(SpeakQlParser.ScheduleExpressionContext,0)


        def DO(self):
            return self.getToken(SpeakQlParser.DO, 0)

        def routineBody(self):
            return self.getTypedRuleContext(SpeakQlParser.RoutineBodyContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.OwnerStatementContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(SpeakQlParser.IfNotExistsContext,0)


        def COMPLETION(self):
            return self.getToken(SpeakQlParser.COMPLETION, 0)

        def PRESERVE(self):
            return self.getToken(SpeakQlParser.PRESERVE, 0)

        def enableType(self):
            return self.getTypedRuleContext(SpeakQlParser.EnableTypeContext,0)


        def COMMENT(self):
            return self.getToken(SpeakQlParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def NOT(self):
            return self.getToken(SpeakQlParser.NOT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_createEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateEvent" ):
                listener.enterCreateEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateEvent" ):
                listener.exitCreateEvent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateEvent" ):
                return visitor.visitCreateEvent(self)
            else:
                return visitor.visitChildren(self)




    def createEvent(self):

        localctx = SpeakQlParser.CreateEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_createEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.match(SpeakQlParser.CREATE)
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.DEFINER:
                self.state = 870
                self.ownerStatement()


            self.state = 873
            self.match(SpeakQlParser.EVENT)
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IF:
                self.state = 874
                self.ifNotExists()


            self.state = 877
            self.fullId()
            self.state = 878
            self.match(SpeakQlParser.ON)
            self.state = 879
            self.match(SpeakQlParser.SCHEDULE)
            self.state = 880
            self.scheduleExpression()
            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.ON:
                self.state = 881
                self.match(SpeakQlParser.ON)
                self.state = 882
                self.match(SpeakQlParser.COMPLETION)
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.NOT:
                    self.state = 883
                    self.match(SpeakQlParser.NOT)


                self.state = 886
                self.match(SpeakQlParser.PRESERVE)


            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.DISABLE or _la==SpeakQlParser.ENABLE:
                self.state = 889
                self.enableType()


            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.COMMENT:
                self.state = 892
                self.match(SpeakQlParser.COMMENT)
                self.state = 893
                self.match(SpeakQlParser.STRING_LITERAL)


            self.state = 896
            self.match(SpeakQlParser.DO)
            self.state = 897
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.intimeAction = None # Token
            self.indexCategory = None # Token
            self.algType = None # Token
            self.lockType = None # Token

        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def ON(self):
            return self.getToken(SpeakQlParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexColumnNamesContext,0)


        def indexType(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexTypeContext,0)


        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.IndexOptionContext,i)


        def ALGORITHM(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.ALGORITHM)
            else:
                return self.getToken(SpeakQlParser.ALGORITHM, i)

        def LOCK(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.LOCK)
            else:
                return self.getToken(SpeakQlParser.LOCK, i)

        def ONLINE(self):
            return self.getToken(SpeakQlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(SpeakQlParser.OFFLINE, 0)

        def UNIQUE(self):
            return self.getToken(SpeakQlParser.UNIQUE, 0)

        def FULLTEXT(self):
            return self.getToken(SpeakQlParser.FULLTEXT, 0)

        def SPATIAL(self):
            return self.getToken(SpeakQlParser.SPATIAL, 0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.DEFAULT)
            else:
                return self.getToken(SpeakQlParser.DEFAULT, i)

        def INPLACE(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.INPLACE)
            else:
                return self.getToken(SpeakQlParser.INPLACE, i)

        def COPY(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COPY)
            else:
                return self.getToken(SpeakQlParser.COPY, i)

        def NONE(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.NONE)
            else:
                return self.getToken(SpeakQlParser.NONE, i)

        def SHARED(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.SHARED)
            else:
                return self.getToken(SpeakQlParser.SHARED, i)

        def EXCLUSIVE(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.EXCLUSIVE)
            else:
                return self.getToken(SpeakQlParser.EXCLUSIVE, i)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(SpeakQlParser.EQUAL_SYMBOL, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_createIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateIndex" ):
                return visitor.visitCreateIndex(self)
            else:
                return visitor.visitChildren(self)




    def createIndex(self):

        localctx = SpeakQlParser.CreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_createIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.match(SpeakQlParser.CREATE)
            self.state = 901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.OFFLINE or _la==SpeakQlParser.ONLINE:
                self.state = 900
                localctx.intimeAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.OFFLINE or _la==SpeakQlParser.ONLINE):
                    localctx.intimeAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.FULLTEXT or _la==SpeakQlParser.SPATIAL or _la==SpeakQlParser.UNIQUE:
                self.state = 903
                localctx.indexCategory = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.FULLTEXT or _la==SpeakQlParser.SPATIAL or _la==SpeakQlParser.UNIQUE):
                    localctx.indexCategory = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 906
            self.match(SpeakQlParser.INDEX)
            self.state = 907
            self.uid()
            self.state = 909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.USING:
                self.state = 908
                self.indexType()


            self.state = 911
            self.match(SpeakQlParser.ON)
            self.state = 912
            self.tableName()
            self.state = 913
            self.indexColumnNames()
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.USING or _la==SpeakQlParser.WITH or _la==SpeakQlParser.COMMENT or _la==SpeakQlParser.INVISIBLE or _la==SpeakQlParser.KEY_BLOCK_SIZE or _la==SpeakQlParser.VISIBLE:
                self.state = 914
                self.indexOption()
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 932
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 930
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SpeakQlParser.ALGORITHM]:
                        self.state = 920
                        self.match(SpeakQlParser.ALGORITHM)
                        self.state = 922
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SpeakQlParser.EQUAL_SYMBOL:
                            self.state = 921
                            self.match(SpeakQlParser.EQUAL_SYMBOL)


                        self.state = 924
                        localctx.algType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.COPY or _la==SpeakQlParser.INPLACE):
                            localctx.algType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [SpeakQlParser.LOCK]:
                        self.state = 925
                        self.match(SpeakQlParser.LOCK)
                        self.state = 927
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SpeakQlParser.EQUAL_SYMBOL:
                            self.state = 926
                            self.match(SpeakQlParser.EQUAL_SYMBOL)


                        self.state = 929
                        localctx.lockType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.EXCLUSIVE or _la==SpeakQlParser.NONE or _la==SpeakQlParser.SHARED):
                            localctx.lockType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 934
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateLogfileGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.undoFile = None # Token
            self.initSize = None # FileSizeLiteralContext
            self.undoSize = None # FileSizeLiteralContext
            self.redoSize = None # FileSizeLiteralContext
            self.comment = None # Token

        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)

        def LOGFILE(self):
            return self.getToken(SpeakQlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(SpeakQlParser.GROUP, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)


        def ADD(self):
            return self.getToken(SpeakQlParser.ADD, 0)

        def UNDOFILE(self):
            return self.getToken(SpeakQlParser.UNDOFILE, 0)

        def ENGINE(self):
            return self.getToken(SpeakQlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(SpeakQlParser.EngineNameContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.STRING_LITERAL)
            else:
                return self.getToken(SpeakQlParser.STRING_LITERAL, i)

        def INITIAL_SIZE(self):
            return self.getToken(SpeakQlParser.INITIAL_SIZE, 0)

        def UNDO_BUFFER_SIZE(self):
            return self.getToken(SpeakQlParser.UNDO_BUFFER_SIZE, 0)

        def REDO_BUFFER_SIZE(self):
            return self.getToken(SpeakQlParser.REDO_BUFFER_SIZE, 0)

        def NODEGROUP(self):
            return self.getToken(SpeakQlParser.NODEGROUP, 0)

        def WAIT(self):
            return self.getToken(SpeakQlParser.WAIT, 0)

        def COMMENT(self):
            return self.getToken(SpeakQlParser.COMMENT, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(SpeakQlParser.EQUAL_SYMBOL, i)

        def fileSizeLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.FileSizeLiteralContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.FileSizeLiteralContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_createLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateLogfileGroup" ):
                listener.enterCreateLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateLogfileGroup" ):
                listener.exitCreateLogfileGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateLogfileGroup" ):
                return visitor.visitCreateLogfileGroup(self)
            else:
                return visitor.visitChildren(self)




    def createLogfileGroup(self):

        localctx = SpeakQlParser.CreateLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_createLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.match(SpeakQlParser.CREATE)
            self.state = 936
            self.match(SpeakQlParser.LOGFILE)
            self.state = 937
            self.match(SpeakQlParser.GROUP)
            self.state = 938
            self.uid()
            self.state = 939
            self.match(SpeakQlParser.ADD)
            self.state = 940
            self.match(SpeakQlParser.UNDOFILE)
            self.state = 941
            localctx.undoFile = self.match(SpeakQlParser.STRING_LITERAL)
            self.state = 947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.INITIAL_SIZE:
                self.state = 942
                self.match(SpeakQlParser.INITIAL_SIZE)
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 943
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 946
                localctx.initSize = self.fileSizeLiteral()


            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.UNDO_BUFFER_SIZE:
                self.state = 949
                self.match(SpeakQlParser.UNDO_BUFFER_SIZE)
                self.state = 951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 950
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 953
                localctx.undoSize = self.fileSizeLiteral()


            self.state = 961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.REDO_BUFFER_SIZE:
                self.state = 956
                self.match(SpeakQlParser.REDO_BUFFER_SIZE)
                self.state = 958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 957
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 960
                localctx.redoSize = self.fileSizeLiteral()


            self.state = 968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.NODEGROUP:
                self.state = 963
                self.match(SpeakQlParser.NODEGROUP)
                self.state = 965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 964
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 967
                self.uid()


            self.state = 971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.WAIT:
                self.state = 970
                self.match(SpeakQlParser.WAIT)


            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.COMMENT:
                self.state = 973
                self.match(SpeakQlParser.COMMENT)
                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 974
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 977
                localctx.comment = self.match(SpeakQlParser.STRING_LITERAL)


            self.state = 980
            self.match(SpeakQlParser.ENGINE)
            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.EQUAL_SYMBOL:
                self.state = 981
                self.match(SpeakQlParser.EQUAL_SYMBOL)


            self.state = 984
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)

        def PROCEDURE(self):
            return self.getToken(SpeakQlParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(SpeakQlParser.FullIdContext,0)


        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def routineBody(self):
            return self.getTypedRuleContext(SpeakQlParser.RoutineBodyContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.OwnerStatementContext,0)


        def procedureParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ProcedureParameterContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ProcedureParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_createProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateProcedure" ):
                listener.enterCreateProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateProcedure" ):
                listener.exitCreateProcedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateProcedure" ):
                return visitor.visitCreateProcedure(self)
            else:
                return visitor.visitChildren(self)




    def createProcedure(self):

        localctx = SpeakQlParser.CreateProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_createProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.match(SpeakQlParser.CREATE)
            self.state = 988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.DEFINER:
                self.state = 987
                self.ownerStatement()


            self.state = 990
            self.match(SpeakQlParser.PROCEDURE)
            self.state = 991
            self.fullId()
            self.state = 992
            self.leftParen()
            self.state = 994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.IN - 48)) | (1 << (SpeakQlParser.INOUT - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.OUT - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                self.state = 993
                self.procedureParameter()


            self.state = 1000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 996
                self.match(SpeakQlParser.COMMA)
                self.state = 997
                self.procedureParameter()
                self.state = 1002
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1003
            self.rightParen()
            self.state = 1007
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1004
                    self.routineOption() 
                self.state = 1009
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 1010
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(SpeakQlParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(SpeakQlParser.FullIdContext,0)


        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def RETURNS(self):
            return self.getToken(SpeakQlParser.RETURNS, 0)

        def dataType(self):
            return self.getTypedRuleContext(SpeakQlParser.DataTypeContext,0)


        def routineBody(self):
            return self.getTypedRuleContext(SpeakQlParser.RoutineBodyContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.ReturnStatementContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.OwnerStatementContext,0)


        def functionParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.FunctionParameterContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.FunctionParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_createFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFunction" ):
                return visitor.visitCreateFunction(self)
            else:
                return visitor.visitChildren(self)




    def createFunction(self):

        localctx = SpeakQlParser.CreateFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_createFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.match(SpeakQlParser.CREATE)
            self.state = 1014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.DEFINER:
                self.state = 1013
                self.ownerStatement()


            self.state = 1016
            self.match(SpeakQlParser.FUNCTION)
            self.state = 1017
            self.fullId()
            self.state = 1018
            self.leftParen()
            self.state = 1020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                self.state = 1019
                self.functionParameter()


            self.state = 1026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 1022
                self.match(SpeakQlParser.COMMA)
                self.state = 1023
                self.functionParameter()
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1029
            self.rightParen()
            self.state = 1030
            self.match(SpeakQlParser.RETURNS)
            self.state = 1031
            self.dataType()
            self.state = 1035
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1032
                    self.routineOption() 
                self.state = 1037
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 1040
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.RETRIEVE, SpeakQlParser.SHOW_ME, SpeakQlParser.DISPLAY, SpeakQlParser.PRESENT, SpeakQlParser.FIND, SpeakQlParser.IN_TABLE, SpeakQlParser.FROM_TABLE, SpeakQlParser.ALTER, SpeakQlParser.ANALYZE, SpeakQlParser.CALL, SpeakQlParser.CHANGE, SpeakQlParser.CHECK, SpeakQlParser.CREATE, SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DELETE, SpeakQlParser.DESC, SpeakQlParser.DESCRIBE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.DROP, SpeakQlParser.EXCEPT, SpeakQlParser.EXPLAIN, SpeakQlParser.FROM, SpeakQlParser.GET, SpeakQlParser.GRANT, SpeakQlParser.GROUP, SpeakQlParser.HAVING, SpeakQlParser.INSERT, SpeakQlParser.INTO, SpeakQlParser.KILL, SpeakQlParser.LEFT, SpeakQlParser.LIMIT, SpeakQlParser.LOAD, SpeakQlParser.LOCK, SpeakQlParser.NUMBER, SpeakQlParser.OPTIMIZE, SpeakQlParser.ORDER, SpeakQlParser.PURGE, SpeakQlParser.RELEASE, SpeakQlParser.RENAME, SpeakQlParser.REPLACE, SpeakQlParser.RESIGNAL, SpeakQlParser.REVOKE, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.SELECT, SpeakQlParser.SET, SpeakQlParser.SHOW, SpeakQlParser.SIGNAL, SpeakQlParser.STACKED, SpeakQlParser.UNLOCK, SpeakQlParser.UPDATE, SpeakQlParser.USE, SpeakQlParser.WHERE, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WINDOW, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.LR_BRACKET, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.OPTIONAL]:
                self.state = 1038
                self.routineBody()
                pass
            elif token in [SpeakQlParser.RETURN]:
                self.state = 1039
                self.returnStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.wrapperName = None # Token

        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)

        def SERVER(self):
            return self.getToken(SpeakQlParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def FOREIGN(self):
            return self.getToken(SpeakQlParser.FOREIGN, 0)

        def DATA(self):
            return self.getToken(SpeakQlParser.DATA, 0)

        def WRAPPER(self):
            return self.getToken(SpeakQlParser.WRAPPER, 0)

        def OPTIONS(self):
            return self.getToken(SpeakQlParser.OPTIONS, 0)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def serverOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ServerOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ServerOptionContext,i)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def MYSQL(self):
            return self.getToken(SpeakQlParser.MYSQL, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_createServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateServer" ):
                listener.enterCreateServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateServer" ):
                listener.exitCreateServer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateServer" ):
                return visitor.visitCreateServer(self)
            else:
                return visitor.visitChildren(self)




    def createServer(self):

        localctx = SpeakQlParser.CreateServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_createServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.match(SpeakQlParser.CREATE)
            self.state = 1043
            self.match(SpeakQlParser.SERVER)
            self.state = 1044
            self.uid()
            self.state = 1045
            self.match(SpeakQlParser.FOREIGN)
            self.state = 1046
            self.match(SpeakQlParser.DATA)
            self.state = 1047
            self.match(SpeakQlParser.WRAPPER)
            self.state = 1048
            localctx.wrapperName = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.MYSQL or _la==SpeakQlParser.STRING_LITERAL):
                localctx.wrapperName = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1049
            self.match(SpeakQlParser.OPTIONS)
            self.state = 1050
            self.leftParen()
            self.state = 1051
            self.serverOption()
            self.state = 1056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 1052
                self.match(SpeakQlParser.COMMA)
                self.state = 1053
                self.serverOption()
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1059
            self.rightParen()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_createTable

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CopyCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.CreateTableContext
            super().__init__(parser)
            self.parenthesisTable = None # TableNameContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)
        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.TableNameContext,i)

        def LIKE(self):
            return self.getToken(SpeakQlParser.LIKE, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def TEMPORARY(self):
            return self.getToken(SpeakQlParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(SpeakQlParser.IfNotExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyCreateTable" ):
                listener.enterCopyCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyCreateTable" ):
                listener.exitCopyCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopyCreateTable" ):
                return visitor.visitCopyCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ColumnCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.CreateTableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(SpeakQlParser.CreateDefinitionsContext,0)

        def TEMPORARY(self):
            return self.getToken(SpeakQlParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(SpeakQlParser.IfNotExistsContext,0)

        def tableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.TableOptionContext,i)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(SpeakQlParser.PartitionDefinitionsContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnCreateTable" ):
                listener.enterColumnCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnCreateTable" ):
                listener.exitColumnCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnCreateTable" ):
                return visitor.visitColumnCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class QueryCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.CreateTableContext
            super().__init__(parser)
            self.keyViolate = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectStatementContext,0)

        def TEMPORARY(self):
            return self.getToken(SpeakQlParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(SpeakQlParser.IfNotExistsContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(SpeakQlParser.CreateDefinitionsContext,0)

        def tableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.TableOptionContext,i)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(SpeakQlParser.PartitionDefinitionsContext,0)

        def AS(self):
            return self.getToken(SpeakQlParser.AS, 0)
        def IGNORE(self):
            return self.getToken(SpeakQlParser.IGNORE, 0)
        def REPLACE(self):
            return self.getToken(SpeakQlParser.REPLACE, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryCreateTable" ):
                listener.enterQueryCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryCreateTable" ):
                listener.exitQueryCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryCreateTable" ):
                return visitor.visitQueryCreateTable(self)
            else:
                return visitor.visitChildren(self)



    def createTable(self):

        localctx = SpeakQlParser.CreateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_createTable)
        self._la = 0 # Token type
        try:
            self.state = 1139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.CopyCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1061
                self.match(SpeakQlParser.CREATE)
                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.TEMPORARY:
                    self.state = 1062
                    self.match(SpeakQlParser.TEMPORARY)


                self.state = 1065
                self.match(SpeakQlParser.TABLE)
                self.state = 1067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.IF:
                    self.state = 1066
                    self.ifNotExists()


                self.state = 1069
                self.tableName()
                self.state = 1077
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.LIKE]:
                    self.state = 1070
                    self.match(SpeakQlParser.LIKE)
                    self.state = 1071
                    self.tableName()
                    pass
                elif token in [SpeakQlParser.LR_BRACKET]:
                    self.state = 1072
                    self.leftParen()
                    self.state = 1073
                    self.match(SpeakQlParser.LIKE)
                    self.state = 1074
                    localctx.parenthesisTable = self.tableName()
                    self.state = 1075
                    self.rightParen()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = SpeakQlParser.QueryCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1079
                self.match(SpeakQlParser.CREATE)
                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.TEMPORARY:
                    self.state = 1080
                    self.match(SpeakQlParser.TEMPORARY)


                self.state = 1083
                self.match(SpeakQlParser.TABLE)
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.IF:
                    self.state = 1084
                    self.ifNotExists()


                self.state = 1087
                self.tableName()
                self.state = 1089
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 1088
                    self.createDefinitions()


                self.state = 1101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 38)) & ~0x3f) == 0 and ((1 << (_la - 38)) & ((1 << (SpeakQlParser.CHARACTER - 38)) | (1 << (SpeakQlParser.COLLATE - 38)) | (1 << (SpeakQlParser.DEFAULT - 38)) | (1 << (SpeakQlParser.INDEX - 38)))) != 0) or _la==SpeakQlParser.UNION or ((((_la - 342)) & ~0x3f) == 0 and ((1 << (_la - 342)) & ((1 << (SpeakQlParser.AUTO_INCREMENT - 342)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 342)) | (1 << (SpeakQlParser.CHECKSUM - 342)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 342)) | (1 << (SpeakQlParser.COMMENT - 342)) | (1 << (SpeakQlParser.COMPRESSION - 342)) | (1 << (SpeakQlParser.CONNECTION - 342)) | (1 << (SpeakQlParser.DATA - 342)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 342)) | (1 << (SpeakQlParser.ENCRYPTION - 342)) | (1 << (SpeakQlParser.ENGINE - 342)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (SpeakQlParser.INSERT_METHOD - 448)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 448)) | (1 << (SpeakQlParser.MAX_ROWS - 448)) | (1 << (SpeakQlParser.MIN_ROWS - 448)))) != 0) or ((((_la - 529)) & ~0x3f) == 0 and ((1 << (_la - 529)) & ((1 << (SpeakQlParser.PACK_KEYS - 529)) | (1 << (SpeakQlParser.PASSWORD - 529)) | (1 << (SpeakQlParser.ROW_FORMAT - 529)))) != 0) or ((((_la - 609)) & ~0x3f) == 0 and ((1 << (_la - 609)) & ((1 << (SpeakQlParser.STATS_AUTO_RECALC - 609)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 609)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 609)) | (1 << (SpeakQlParser.STORAGE - 609)) | (1 << (SpeakQlParser.TABLESPACE - 609)) | (1 << (SpeakQlParser.TABLE_TYPE - 609)))) != 0) or _la==SpeakQlParser.CHARSET:
                    self.state = 1091
                    self.tableOption()
                    self.state = 1098
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 38)) & ~0x3f) == 0 and ((1 << (_la - 38)) & ((1 << (SpeakQlParser.CHARACTER - 38)) | (1 << (SpeakQlParser.COLLATE - 38)) | (1 << (SpeakQlParser.DEFAULT - 38)) | (1 << (SpeakQlParser.INDEX - 38)))) != 0) or _la==SpeakQlParser.UNION or ((((_la - 342)) & ~0x3f) == 0 and ((1 << (_la - 342)) & ((1 << (SpeakQlParser.AUTO_INCREMENT - 342)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 342)) | (1 << (SpeakQlParser.CHECKSUM - 342)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 342)) | (1 << (SpeakQlParser.COMMENT - 342)) | (1 << (SpeakQlParser.COMPRESSION - 342)) | (1 << (SpeakQlParser.CONNECTION - 342)) | (1 << (SpeakQlParser.DATA - 342)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 342)) | (1 << (SpeakQlParser.ENCRYPTION - 342)) | (1 << (SpeakQlParser.ENGINE - 342)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (SpeakQlParser.INSERT_METHOD - 448)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 448)) | (1 << (SpeakQlParser.MAX_ROWS - 448)) | (1 << (SpeakQlParser.MIN_ROWS - 448)))) != 0) or ((((_la - 529)) & ~0x3f) == 0 and ((1 << (_la - 529)) & ((1 << (SpeakQlParser.PACK_KEYS - 529)) | (1 << (SpeakQlParser.PASSWORD - 529)) | (1 << (SpeakQlParser.ROW_FORMAT - 529)))) != 0) or ((((_la - 609)) & ~0x3f) == 0 and ((1 << (_la - 609)) & ((1 << (SpeakQlParser.STATS_AUTO_RECALC - 609)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 609)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 609)) | (1 << (SpeakQlParser.STORAGE - 609)) | (1 << (SpeakQlParser.TABLESPACE - 609)) | (1 << (SpeakQlParser.TABLE_TYPE - 609)))) != 0) or _la==SpeakQlParser.CHARSET or _la==SpeakQlParser.COMMA:
                        self.state = 1093
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SpeakQlParser.COMMA:
                            self.state = 1092
                            self.match(SpeakQlParser.COMMA)


                        self.state = 1095
                        self.tableOption()
                        self.state = 1100
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.PARTITION:
                    self.state = 1103
                    self.partitionDefinitions()


                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.IGNORE or _la==SpeakQlParser.REPLACE:
                    self.state = 1106
                    localctx.keyViolate = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.IGNORE or _la==SpeakQlParser.REPLACE):
                        localctx.keyViolate = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.AS:
                    self.state = 1109
                    self.match(SpeakQlParser.AS)


                self.state = 1112
                self.selectStatement()
                pass

            elif la_ == 3:
                localctx = SpeakQlParser.ColumnCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1114
                self.match(SpeakQlParser.CREATE)
                self.state = 1116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.TEMPORARY:
                    self.state = 1115
                    self.match(SpeakQlParser.TEMPORARY)


                self.state = 1118
                self.match(SpeakQlParser.TABLE)
                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.IF:
                    self.state = 1119
                    self.ifNotExists()


                self.state = 1122
                self.tableName()
                self.state = 1123
                self.createDefinitions()
                self.state = 1134
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 1124
                    self.tableOption()
                    self.state = 1131
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1126
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==SpeakQlParser.COMMA:
                                self.state = 1125
                                self.match(SpeakQlParser.COMMA)


                            self.state = 1128
                            self.tableOption() 
                        self.state = 1133
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,71,self._ctx)



                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.PARTITION:
                    self.state = 1136
                    self.partitionDefinitions()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTablespaceInnodbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.datafile = None # Token
            self.fileBlockSize = None # FileSizeLiteralContext

        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)

        def TABLESPACE(self):
            return self.getToken(SpeakQlParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def ADD(self):
            return self.getToken(SpeakQlParser.ADD, 0)

        def DATAFILE(self):
            return self.getToken(SpeakQlParser.DATAFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def FILE_BLOCK_SIZE(self):
            return self.getToken(SpeakQlParser.FILE_BLOCK_SIZE, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(SpeakQlParser.EQUAL_SYMBOL, i)

        def ENGINE(self):
            return self.getToken(SpeakQlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(SpeakQlParser.EngineNameContext,0)


        def fileSizeLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.FileSizeLiteralContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_createTablespaceInnodb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTablespaceInnodb" ):
                listener.enterCreateTablespaceInnodb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTablespaceInnodb" ):
                listener.exitCreateTablespaceInnodb(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTablespaceInnodb" ):
                return visitor.visitCreateTablespaceInnodb(self)
            else:
                return visitor.visitChildren(self)




    def createTablespaceInnodb(self):

        localctx = SpeakQlParser.CreateTablespaceInnodbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_createTablespaceInnodb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.match(SpeakQlParser.CREATE)
            self.state = 1142
            self.match(SpeakQlParser.TABLESPACE)
            self.state = 1143
            self.uid()
            self.state = 1144
            self.match(SpeakQlParser.ADD)
            self.state = 1145
            self.match(SpeakQlParser.DATAFILE)
            self.state = 1146
            localctx.datafile = self.match(SpeakQlParser.STRING_LITERAL)
            self.state = 1150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.FILE_BLOCK_SIZE:
                self.state = 1147
                self.match(SpeakQlParser.FILE_BLOCK_SIZE)
                self.state = 1148
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 1149
                localctx.fileBlockSize = self.fileSizeLiteral()


            self.state = 1157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.ENGINE:
                self.state = 1152
                self.match(SpeakQlParser.ENGINE)
                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1153
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1156
                self.engineName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTablespaceNdbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.datafile = None # Token
            self.extentSize = None # FileSizeLiteralContext
            self.initialSize = None # FileSizeLiteralContext
            self.autoextendSize = None # FileSizeLiteralContext
            self.maxSize = None # FileSizeLiteralContext
            self.comment = None # Token

        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)

        def TABLESPACE(self):
            return self.getToken(SpeakQlParser.TABLESPACE, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)


        def ADD(self):
            return self.getToken(SpeakQlParser.ADD, 0)

        def DATAFILE(self):
            return self.getToken(SpeakQlParser.DATAFILE, 0)

        def USE(self):
            return self.getToken(SpeakQlParser.USE, 0)

        def LOGFILE(self):
            return self.getToken(SpeakQlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(SpeakQlParser.GROUP, 0)

        def ENGINE(self):
            return self.getToken(SpeakQlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(SpeakQlParser.EngineNameContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.STRING_LITERAL)
            else:
                return self.getToken(SpeakQlParser.STRING_LITERAL, i)

        def EXTENT_SIZE(self):
            return self.getToken(SpeakQlParser.EXTENT_SIZE, 0)

        def INITIAL_SIZE(self):
            return self.getToken(SpeakQlParser.INITIAL_SIZE, 0)

        def AUTOEXTEND_SIZE(self):
            return self.getToken(SpeakQlParser.AUTOEXTEND_SIZE, 0)

        def MAX_SIZE(self):
            return self.getToken(SpeakQlParser.MAX_SIZE, 0)

        def NODEGROUP(self):
            return self.getToken(SpeakQlParser.NODEGROUP, 0)

        def WAIT(self):
            return self.getToken(SpeakQlParser.WAIT, 0)

        def COMMENT(self):
            return self.getToken(SpeakQlParser.COMMENT, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(SpeakQlParser.EQUAL_SYMBOL, i)

        def fileSizeLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.FileSizeLiteralContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.FileSizeLiteralContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_createTablespaceNdb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTablespaceNdb" ):
                listener.enterCreateTablespaceNdb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTablespaceNdb" ):
                listener.exitCreateTablespaceNdb(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTablespaceNdb" ):
                return visitor.visitCreateTablespaceNdb(self)
            else:
                return visitor.visitChildren(self)




    def createTablespaceNdb(self):

        localctx = SpeakQlParser.CreateTablespaceNdbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_createTablespaceNdb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1159
            self.match(SpeakQlParser.CREATE)
            self.state = 1160
            self.match(SpeakQlParser.TABLESPACE)
            self.state = 1161
            self.uid()
            self.state = 1162
            self.match(SpeakQlParser.ADD)
            self.state = 1163
            self.match(SpeakQlParser.DATAFILE)
            self.state = 1164
            localctx.datafile = self.match(SpeakQlParser.STRING_LITERAL)
            self.state = 1165
            self.match(SpeakQlParser.USE)
            self.state = 1166
            self.match(SpeakQlParser.LOGFILE)
            self.state = 1167
            self.match(SpeakQlParser.GROUP)
            self.state = 1168
            self.uid()
            self.state = 1174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.EXTENT_SIZE:
                self.state = 1169
                self.match(SpeakQlParser.EXTENT_SIZE)
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1170
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1173
                localctx.extentSize = self.fileSizeLiteral()


            self.state = 1181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.INITIAL_SIZE:
                self.state = 1176
                self.match(SpeakQlParser.INITIAL_SIZE)
                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1177
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1180
                localctx.initialSize = self.fileSizeLiteral()


            self.state = 1188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.AUTOEXTEND_SIZE:
                self.state = 1183
                self.match(SpeakQlParser.AUTOEXTEND_SIZE)
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1184
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1187
                localctx.autoextendSize = self.fileSizeLiteral()


            self.state = 1195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.MAX_SIZE:
                self.state = 1190
                self.match(SpeakQlParser.MAX_SIZE)
                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1191
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1194
                localctx.maxSize = self.fileSizeLiteral()


            self.state = 1202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.NODEGROUP:
                self.state = 1197
                self.match(SpeakQlParser.NODEGROUP)
                self.state = 1199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1198
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1201
                self.uid()


            self.state = 1205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.WAIT:
                self.state = 1204
                self.match(SpeakQlParser.WAIT)


            self.state = 1212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.COMMENT:
                self.state = 1207
                self.match(SpeakQlParser.COMMENT)
                self.state = 1209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1208
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1211
                localctx.comment = self.match(SpeakQlParser.STRING_LITERAL)


            self.state = 1214
            self.match(SpeakQlParser.ENGINE)
            self.state = 1216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.EQUAL_SYMBOL:
                self.state = 1215
                self.match(SpeakQlParser.EQUAL_SYMBOL)


            self.state = 1218
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTriggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.thisTrigger = None # FullIdContext
            self.triggerTime = None # Token
            self.triggerEvent = None # Token
            self.triggerPlace = None # Token
            self.otherTrigger = None # FullIdContext

        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(SpeakQlParser.TRIGGER, 0)

        def ON(self):
            return self.getToken(SpeakQlParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def FOR(self):
            return self.getToken(SpeakQlParser.FOR, 0)

        def EACH(self):
            return self.getToken(SpeakQlParser.EACH, 0)

        def ROW(self):
            return self.getToken(SpeakQlParser.ROW, 0)

        def routineBody(self):
            return self.getTypedRuleContext(SpeakQlParser.RoutineBodyContext,0)


        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.FullIdContext,i)


        def BEFORE(self):
            return self.getToken(SpeakQlParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(SpeakQlParser.AFTER, 0)

        def INSERT(self):
            return self.getToken(SpeakQlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(SpeakQlParser.UPDATE, 0)

        def DELETE(self):
            return self.getToken(SpeakQlParser.DELETE, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.OwnerStatementContext,0)


        def FOLLOWS(self):
            return self.getToken(SpeakQlParser.FOLLOWS, 0)

        def PRECEDES(self):
            return self.getToken(SpeakQlParser.PRECEDES, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_createTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTrigger" ):
                listener.enterCreateTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTrigger" ):
                listener.exitCreateTrigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTrigger" ):
                return visitor.visitCreateTrigger(self)
            else:
                return visitor.visitChildren(self)




    def createTrigger(self):

        localctx = SpeakQlParser.CreateTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_createTrigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.match(SpeakQlParser.CREATE)
            self.state = 1222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.DEFINER:
                self.state = 1221
                self.ownerStatement()


            self.state = 1224
            self.match(SpeakQlParser.TRIGGER)
            self.state = 1225
            localctx.thisTrigger = self.fullId()
            self.state = 1226
            localctx.triggerTime = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.BEFORE or _la==SpeakQlParser.AFTER):
                localctx.triggerTime = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1227
            localctx.triggerEvent = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.DELETE or _la==SpeakQlParser.INSERT or _la==SpeakQlParser.UPDATE):
                localctx.triggerEvent = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1228
            self.match(SpeakQlParser.ON)
            self.state = 1229
            self.tableName()
            self.state = 1230
            self.match(SpeakQlParser.FOR)
            self.state = 1231
            self.match(SpeakQlParser.EACH)
            self.state = 1232
            self.match(SpeakQlParser.ROW)
            self.state = 1235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 1233
                localctx.triggerPlace = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.FOLLOWS or _la==SpeakQlParser.PRECEDES):
                    localctx.triggerPlace = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1234
                localctx.otherTrigger = self.fullId()


            self.state = 1237
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algType = None # Token
            self.secContext = None # Token
            self.checkOption = None # Token

        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(SpeakQlParser.VIEW, 0)

        def fullId(self):
            return self.getTypedRuleContext(SpeakQlParser.FullIdContext,0)


        def AS(self):
            return self.getToken(SpeakQlParser.AS, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectStatementContext,0)


        def OR(self):
            return self.getToken(SpeakQlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(SpeakQlParser.REPLACE, 0)

        def ALGORITHM(self):
            return self.getToken(SpeakQlParser.ALGORITHM, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.OwnerStatementContext,0)


        def SQL(self):
            return self.getToken(SpeakQlParser.SQL, 0)

        def SECURITY(self):
            return self.getToken(SpeakQlParser.SECURITY, 0)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def WITH(self):
            return self.getToken(SpeakQlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(SpeakQlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(SpeakQlParser.OPTION, 0)

        def UNDEFINED(self):
            return self.getToken(SpeakQlParser.UNDEFINED, 0)

        def MERGE(self):
            return self.getToken(SpeakQlParser.MERGE, 0)

        def TEMPTABLE(self):
            return self.getToken(SpeakQlParser.TEMPTABLE, 0)

        def DEFINER(self):
            return self.getToken(SpeakQlParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(SpeakQlParser.INVOKER, 0)

        def CASCADED(self):
            return self.getToken(SpeakQlParser.CASCADED, 0)

        def LOCAL(self):
            return self.getToken(SpeakQlParser.LOCAL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_createView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateView" ):
                return visitor.visitCreateView(self)
            else:
                return visitor.visitChildren(self)




    def createView(self):

        localctx = SpeakQlParser.CreateViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_createView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.match(SpeakQlParser.CREATE)
            self.state = 1242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.OR:
                self.state = 1240
                self.match(SpeakQlParser.OR)
                self.state = 1241
                self.match(SpeakQlParser.REPLACE)


            self.state = 1247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.ALGORITHM:
                self.state = 1244
                self.match(SpeakQlParser.ALGORITHM)
                self.state = 1245
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 1246
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.MERGE or _la==SpeakQlParser.TEMPTABLE or _la==SpeakQlParser.UNDEFINED):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.DEFINER:
                self.state = 1249
                self.ownerStatement()


            self.state = 1255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.SQL:
                self.state = 1252
                self.match(SpeakQlParser.SQL)
                self.state = 1253
                self.match(SpeakQlParser.SECURITY)
                self.state = 1254
                localctx.secContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.DEFINER or _la==SpeakQlParser.INVOKER):
                    localctx.secContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1257
            self.match(SpeakQlParser.VIEW)
            self.state = 1258
            self.fullId()
            self.state = 1263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.LR_BRACKET:
                self.state = 1259
                self.leftParen()
                self.state = 1260
                self.uidList()
                self.state = 1261
                self.rightParen()


            self.state = 1265
            self.match(SpeakQlParser.AS)
            self.state = 1266
            self.selectStatement()
            self.state = 1273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.WITH:
                self.state = 1267
                self.match(SpeakQlParser.WITH)
                self.state = 1269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.CASCADED or _la==SpeakQlParser.LOCAL:
                    self.state = 1268
                    localctx.checkOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.CASCADED or _la==SpeakQlParser.LOCAL):
                        localctx.checkOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1271
                self.match(SpeakQlParser.CHECK)
                self.state = 1272
                self.match(SpeakQlParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(SpeakQlParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)

        def CHARSET(self):
            return self.getToken(SpeakQlParser.CHARSET, 0)

        def charsetName(self):
            return self.getTypedRuleContext(SpeakQlParser.CharsetNameContext,0)


        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.DEFAULT)
            else:
                return self.getToken(SpeakQlParser.DEFAULT, i)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def COLLATE(self):
            return self.getToken(SpeakQlParser.COLLATE, 0)

        def collationName(self):
            return self.getTypedRuleContext(SpeakQlParser.CollationNameContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_createDatabaseOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabaseOption" ):
                listener.enterCreateDatabaseOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabaseOption" ):
                listener.exitCreateDatabaseOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDatabaseOption" ):
                return visitor.visitCreateDatabaseOption(self)
            else:
                return visitor.visitChildren(self)




    def createDatabaseOption(self):

        localctx = SpeakQlParser.CreateDatabaseOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_createDatabaseOption)
        self._la = 0 # Token type
        try:
            self.state = 1298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.DEFAULT:
                    self.state = 1275
                    self.match(SpeakQlParser.DEFAULT)


                self.state = 1281
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.CHARACTER]:
                    self.state = 1278
                    self.match(SpeakQlParser.CHARACTER)
                    self.state = 1279
                    self.match(SpeakQlParser.SET)
                    pass
                elif token in [SpeakQlParser.CHARSET]:
                    self.state = 1280
                    self.match(SpeakQlParser.CHARSET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1283
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1288
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.BINARY, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL]:
                    self.state = 1286
                    self.charsetName()
                    pass
                elif token in [SpeakQlParser.DEFAULT]:
                    self.state = 1287
                    self.match(SpeakQlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.DEFAULT:
                    self.state = 1290
                    self.match(SpeakQlParser.DEFAULT)


                self.state = 1293
                self.match(SpeakQlParser.COLLATE)
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1294
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1297
                self.collationName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OwnerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFINER(self):
            return self.getToken(SpeakQlParser.DEFINER, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(SpeakQlParser.UserNameContext,0)


        def CURRENT_USER(self):
            return self.getToken(SpeakQlParser.CURRENT_USER, 0)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_ownerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOwnerStatement" ):
                listener.enterOwnerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOwnerStatement" ):
                listener.exitOwnerStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOwnerStatement" ):
                return visitor.visitOwnerStatement(self)
            else:
                return visitor.visitChildren(self)




    def ownerStatement(self):

        localctx = SpeakQlParser.OwnerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_ownerStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.match(SpeakQlParser.DEFINER)
            self.state = 1301
            self.match(SpeakQlParser.EQUAL_SYMBOL)
            self.state = 1309
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.STRING_USER_NAME]:
                self.state = 1302
                self.userName()
                pass
            elif token in [SpeakQlParser.CURRENT_USER]:
                self.state = 1303
                self.match(SpeakQlParser.CURRENT_USER)
                self.state = 1307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LR_BRACKET:
                    self.state = 1304
                    self.leftParen()
                    self.state = 1305
                    self.rightParen()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScheduleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_scheduleExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PreciseScheduleContext(ScheduleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ScheduleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AT(self):
            return self.getToken(SpeakQlParser.AT, 0)
        def timestampValue(self):
            return self.getTypedRuleContext(SpeakQlParser.TimestampValueContext,0)

        def intervalExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.IntervalExprContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.IntervalExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreciseSchedule" ):
                listener.enterPreciseSchedule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreciseSchedule" ):
                listener.exitPreciseSchedule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreciseSchedule" ):
                return visitor.visitPreciseSchedule(self)
            else:
                return visitor.visitChildren(self)


    class IntervalScheduleContext(ScheduleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ScheduleExpressionContext
            super().__init__(parser)
            self.startTimestamp = None # TimestampValueContext
            self._intervalExpr = None # IntervalExprContext
            self.startIntervals = list() # of IntervalExprContexts
            self.endTimestamp = None # TimestampValueContext
            self.endIntervals = list() # of IntervalExprContexts
            self.copyFrom(ctx)

        def EVERY(self):
            return self.getToken(SpeakQlParser.EVERY, 0)
        def intervalType(self):
            return self.getTypedRuleContext(SpeakQlParser.IntervalTypeContext,0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)

        def STARTS(self):
            return self.getToken(SpeakQlParser.STARTS, 0)
        def ENDS(self):
            return self.getToken(SpeakQlParser.ENDS, 0)
        def timestampValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.TimestampValueContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.TimestampValueContext,i)

        def intervalExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.IntervalExprContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.IntervalExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalSchedule" ):
                listener.enterIntervalSchedule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalSchedule" ):
                listener.exitIntervalSchedule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalSchedule" ):
                return visitor.visitIntervalSchedule(self)
            else:
                return visitor.visitChildren(self)



    def scheduleExpression(self):

        localctx = SpeakQlParser.ScheduleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_scheduleExpression)
        self._la = 0 # Token type
        try:
            self.state = 1345
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.AT]:
                localctx = SpeakQlParser.PreciseScheduleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1311
                self.match(SpeakQlParser.AT)
                self.state = 1312
                self.timestampValue()
                self.state = 1316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.PLUS:
                    self.state = 1313
                    self.intervalExpr()
                    self.state = 1318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SpeakQlParser.EVERY]:
                localctx = SpeakQlParser.IntervalScheduleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1319
                self.match(SpeakQlParser.EVERY)
                self.state = 1322
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 1320
                    self.decimalLiteral()
                    pass

                elif la_ == 2:
                    self.state = 1321
                    self.expression(0)
                    pass


                self.state = 1324
                self.intervalType()
                self.state = 1333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.STARTS:
                    self.state = 1325
                    self.match(SpeakQlParser.STARTS)
                    self.state = 1326
                    localctx.startTimestamp = self.timestampValue()
                    self.state = 1330
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SpeakQlParser.PLUS:
                        self.state = 1327
                        localctx._intervalExpr = self.intervalExpr()
                        localctx.startIntervals.append(localctx._intervalExpr)
                        self.state = 1332
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.ENDS:
                    self.state = 1335
                    self.match(SpeakQlParser.ENDS)
                    self.state = 1336
                    localctx.endTimestamp = self.timestampValue()
                    self.state = 1340
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SpeakQlParser.PLUS:
                        self.state = 1337
                        localctx._intervalExpr = self.intervalExpr()
                        localctx.endIntervals.append(localctx._intervalExpr)
                        self.state = 1342
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimestampValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SpeakQlParser.CURRENT_TIMESTAMP, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_timestampValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestampValue" ):
                listener.enterTimestampValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestampValue" ):
                listener.exitTimestampValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimestampValue" ):
                return visitor.visitTimestampValue(self)
            else:
                return visitor.visitChildren(self)




    def timestampValue(self):

        localctx = SpeakQlParser.TimestampValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_timestampValue)
        try:
            self.state = 1351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1347
                self.match(SpeakQlParser.CURRENT_TIMESTAMP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1348
                self.stringLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1349
                self.decimalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1350
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(SpeakQlParser.PLUS, 0)

        def INTERVAL(self):
            return self.getToken(SpeakQlParser.INTERVAL, 0)

        def intervalType(self):
            return self.getTypedRuleContext(SpeakQlParser.IntervalTypeContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_intervalExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpr" ):
                listener.enterIntervalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpr" ):
                listener.exitIntervalExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalExpr" ):
                return visitor.visitIntervalExpr(self)
            else:
                return visitor.visitChildren(self)




    def intervalExpr(self):

        localctx = SpeakQlParser.IntervalExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_intervalExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1353
            self.match(SpeakQlParser.PLUS)
            self.state = 1354
            self.match(SpeakQlParser.INTERVAL)
            self.state = 1357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1355
                self.decimalLiteral()
                pass

            elif la_ == 2:
                self.state = 1356
                self.expression(0)
                pass


            self.state = 1359
            self.intervalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalTypeBase(self):
            return self.getTypedRuleContext(SpeakQlParser.IntervalTypeBaseContext,0)


        def YEAR(self):
            return self.getToken(SpeakQlParser.YEAR, 0)

        def YEAR_MONTH(self):
            return self.getToken(SpeakQlParser.YEAR_MONTH, 0)

        def DAY_HOUR(self):
            return self.getToken(SpeakQlParser.DAY_HOUR, 0)

        def DAY_MINUTE(self):
            return self.getToken(SpeakQlParser.DAY_MINUTE, 0)

        def DAY_SECOND(self):
            return self.getToken(SpeakQlParser.DAY_SECOND, 0)

        def HOUR_MINUTE(self):
            return self.getToken(SpeakQlParser.HOUR_MINUTE, 0)

        def HOUR_SECOND(self):
            return self.getToken(SpeakQlParser.HOUR_SECOND, 0)

        def MINUTE_SECOND(self):
            return self.getToken(SpeakQlParser.MINUTE_SECOND, 0)

        def SECOND_MICROSECOND(self):
            return self.getToken(SpeakQlParser.SECOND_MICROSECOND, 0)

        def MINUTE_MICROSECOND(self):
            return self.getToken(SpeakQlParser.MINUTE_MICROSECOND, 0)

        def HOUR_MICROSECOND(self):
            return self.getToken(SpeakQlParser.HOUR_MICROSECOND, 0)

        def DAY_MICROSECOND(self):
            return self.getToken(SpeakQlParser.DAY_MICROSECOND, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_intervalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalType" ):
                listener.enterIntervalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalType" ):
                listener.exitIntervalType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalType" ):
                return visitor.visitIntervalType(self)
            else:
                return visitor.visitChildren(self)




    def intervalType(self):

        localctx = SpeakQlParser.IntervalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_intervalType)
        try:
            self.state = 1374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1361
                self.intervalTypeBase()
                pass
            elif token in [SpeakQlParser.YEAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1362
                self.match(SpeakQlParser.YEAR)
                pass
            elif token in [SpeakQlParser.YEAR_MONTH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1363
                self.match(SpeakQlParser.YEAR_MONTH)
                pass
            elif token in [SpeakQlParser.DAY_HOUR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1364
                self.match(SpeakQlParser.DAY_HOUR)
                pass
            elif token in [SpeakQlParser.DAY_MINUTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1365
                self.match(SpeakQlParser.DAY_MINUTE)
                pass
            elif token in [SpeakQlParser.DAY_SECOND]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1366
                self.match(SpeakQlParser.DAY_SECOND)
                pass
            elif token in [SpeakQlParser.HOUR_MINUTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1367
                self.match(SpeakQlParser.HOUR_MINUTE)
                pass
            elif token in [SpeakQlParser.HOUR_SECOND]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1368
                self.match(SpeakQlParser.HOUR_SECOND)
                pass
            elif token in [SpeakQlParser.MINUTE_SECOND]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1369
                self.match(SpeakQlParser.MINUTE_SECOND)
                pass
            elif token in [SpeakQlParser.SECOND_MICROSECOND]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1370
                self.match(SpeakQlParser.SECOND_MICROSECOND)
                pass
            elif token in [SpeakQlParser.MINUTE_MICROSECOND]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1371
                self.match(SpeakQlParser.MINUTE_MICROSECOND)
                pass
            elif token in [SpeakQlParser.HOUR_MICROSECOND]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1372
                self.match(SpeakQlParser.HOUR_MICROSECOND)
                pass
            elif token in [SpeakQlParser.DAY_MICROSECOND]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1373
                self.match(SpeakQlParser.DAY_MICROSECOND)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(SpeakQlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(SpeakQlParser.DISABLE, 0)

        def ON(self):
            return self.getToken(SpeakQlParser.ON, 0)

        def SLAVE(self):
            return self.getToken(SpeakQlParser.SLAVE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_enableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnableType" ):
                listener.enterEnableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnableType" ):
                listener.exitEnableType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnableType" ):
                return visitor.visitEnableType(self)
            else:
                return visitor.visitChildren(self)




    def enableType(self):

        localctx = SpeakQlParser.EnableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_enableType)
        try:
            self.state = 1381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1376
                self.match(SpeakQlParser.ENABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1377
                self.match(SpeakQlParser.DISABLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1378
                self.match(SpeakQlParser.DISABLE)
                self.state = 1379
                self.match(SpeakQlParser.ON)
                self.state = 1380
                self.match(SpeakQlParser.SLAVE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(SpeakQlParser.USING, 0)

        def BTREE(self):
            return self.getToken(SpeakQlParser.BTREE, 0)

        def HASH(self):
            return self.getToken(SpeakQlParser.HASH, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_indexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexType" ):
                listener.enterIndexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexType" ):
                listener.exitIndexType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexType" ):
                return visitor.visitIndexType(self)
            else:
                return visitor.visitChildren(self)




    def indexType(self):

        localctx = SpeakQlParser.IndexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_indexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1383
            self.match(SpeakQlParser.USING)
            self.state = 1384
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.BTREE or _la==SpeakQlParser.HASH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEY_BLOCK_SIZE(self):
            return self.getToken(SpeakQlParser.KEY_BLOCK_SIZE, 0)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.FileSizeLiteralContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def indexType(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexTypeContext,0)


        def WITH(self):
            return self.getToken(SpeakQlParser.WITH, 0)

        def PARSER(self):
            return self.getToken(SpeakQlParser.PARSER, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def COMMENT(self):
            return self.getToken(SpeakQlParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def INVISIBLE(self):
            return self.getToken(SpeakQlParser.INVISIBLE, 0)

        def VISIBLE(self):
            return self.getToken(SpeakQlParser.VISIBLE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_indexOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexOption" ):
                listener.enterIndexOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexOption" ):
                listener.exitIndexOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexOption" ):
                return visitor.visitIndexOption(self)
            else:
                return visitor.visitChildren(self)




    def indexOption(self):

        localctx = SpeakQlParser.IndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_indexOption)
        self._la = 0 # Token type
        try:
            self.state = 1399
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.KEY_BLOCK_SIZE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1386
                self.match(SpeakQlParser.KEY_BLOCK_SIZE)
                self.state = 1388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1387
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1390
                self.fileSizeLiteral()
                pass
            elif token in [SpeakQlParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1391
                self.indexType()
                pass
            elif token in [SpeakQlParser.WITH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1392
                self.match(SpeakQlParser.WITH)
                self.state = 1393
                self.match(SpeakQlParser.PARSER)
                self.state = 1394
                self.uid()
                pass
            elif token in [SpeakQlParser.COMMENT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1395
                self.match(SpeakQlParser.COMMENT)
                self.state = 1396
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.INVISIBLE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1397
                self.match(SpeakQlParser.INVISIBLE)
                pass
            elif token in [SpeakQlParser.VISIBLE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1398
                self.match(SpeakQlParser.VISIBLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.direction = None # Token

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def dataType(self):
            return self.getTypedRuleContext(SpeakQlParser.DataTypeContext,0)


        def IN(self):
            return self.getToken(SpeakQlParser.IN, 0)

        def OUT(self):
            return self.getToken(SpeakQlParser.OUT, 0)

        def INOUT(self):
            return self.getToken(SpeakQlParser.INOUT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_procedureParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureParameter" ):
                listener.enterProcedureParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureParameter" ):
                listener.exitProcedureParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureParameter" ):
                return visitor.visitProcedureParameter(self)
            else:
                return visitor.visitChildren(self)




    def procedureParameter(self):

        localctx = SpeakQlParser.ProcedureParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_procedureParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SpeakQlParser.IN - 90)) | (1 << (SpeakQlParser.INOUT - 90)) | (1 << (SpeakQlParser.OUT - 90)))) != 0):
                self.state = 1401
                localctx.direction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SpeakQlParser.IN - 90)) | (1 << (SpeakQlParser.INOUT - 90)) | (1 << (SpeakQlParser.OUT - 90)))) != 0)):
                    localctx.direction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1404
            self.uid()
            self.state = 1405
            self.dataType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def dataType(self):
            return self.getTypedRuleContext(SpeakQlParser.DataTypeContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_functionParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionParameter" ):
                listener.enterFunctionParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionParameter" ):
                listener.exitFunctionParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionParameter" ):
                return visitor.visitFunctionParameter(self)
            else:
                return visitor.visitChildren(self)




    def functionParameter(self):

        localctx = SpeakQlParser.FunctionParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_functionParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1407
            self.uid()
            self.state = 1408
            self.dataType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_routineOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RoutineBehaviorContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DETERMINISTIC(self):
            return self.getToken(SpeakQlParser.DETERMINISTIC, 0)
        def NOT(self):
            return self.getToken(SpeakQlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineBehavior" ):
                listener.enterRoutineBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineBehavior" ):
                listener.exitRoutineBehavior(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineBehavior" ):
                return visitor.visitRoutineBehavior(self)
            else:
                return visitor.visitChildren(self)


    class RoutineLanguageContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LANGUAGE(self):
            return self.getToken(SpeakQlParser.LANGUAGE, 0)
        def SQL(self):
            return self.getToken(SpeakQlParser.SQL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineLanguage" ):
                listener.enterRoutineLanguage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineLanguage" ):
                listener.exitRoutineLanguage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineLanguage" ):
                return visitor.visitRoutineLanguage(self)
            else:
                return visitor.visitChildren(self)


    class RoutineCommentContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SpeakQlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineComment" ):
                listener.enterRoutineComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineComment" ):
                listener.exitRoutineComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineComment" ):
                return visitor.visitRoutineComment(self)
            else:
                return visitor.visitChildren(self)


    class RoutineSecurityContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.RoutineOptionContext
            super().__init__(parser)
            self.context = None # Token
            self.copyFrom(ctx)

        def SQL(self):
            return self.getToken(SpeakQlParser.SQL, 0)
        def SECURITY(self):
            return self.getToken(SpeakQlParser.SECURITY, 0)
        def DEFINER(self):
            return self.getToken(SpeakQlParser.DEFINER, 0)
        def INVOKER(self):
            return self.getToken(SpeakQlParser.INVOKER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineSecurity" ):
                listener.enterRoutineSecurity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineSecurity" ):
                listener.exitRoutineSecurity(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineSecurity" ):
                return visitor.visitRoutineSecurity(self)
            else:
                return visitor.visitChildren(self)


    class RoutineDataContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTAINS(self):
            return self.getToken(SpeakQlParser.CONTAINS, 0)
        def SQL(self):
            return self.getToken(SpeakQlParser.SQL, 0)
        def NO(self):
            return self.getToken(SpeakQlParser.NO, 0)
        def READS(self):
            return self.getToken(SpeakQlParser.READS, 0)
        def DATA(self):
            return self.getToken(SpeakQlParser.DATA, 0)
        def MODIFIES(self):
            return self.getToken(SpeakQlParser.MODIFIES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineData" ):
                listener.enterRoutineData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineData" ):
                listener.exitRoutineData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineData" ):
                return visitor.visitRoutineData(self)
            else:
                return visitor.visitChildren(self)



    def routineOption(self):

        localctx = SpeakQlParser.RoutineOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_routineOption)
        self._la = 0 # Token type
        try:
            self.state = 1433
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.COMMENT]:
                localctx = SpeakQlParser.RoutineCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1410
                self.match(SpeakQlParser.COMMENT)
                self.state = 1411
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.LANGUAGE]:
                localctx = SpeakQlParser.RoutineLanguageContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1412
                self.match(SpeakQlParser.LANGUAGE)
                self.state = 1413
                self.match(SpeakQlParser.SQL)
                pass
            elif token in [SpeakQlParser.DETERMINISTIC, SpeakQlParser.NOT]:
                localctx = SpeakQlParser.RoutineBehaviorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.NOT:
                    self.state = 1414
                    self.match(SpeakQlParser.NOT)


                self.state = 1417
                self.match(SpeakQlParser.DETERMINISTIC)
                pass
            elif token in [SpeakQlParser.MODIFIES, SpeakQlParser.READS, SpeakQlParser.CONTAINS, SpeakQlParser.NO]:
                localctx = SpeakQlParser.RoutineDataContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1428
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.CONTAINS]:
                    self.state = 1418
                    self.match(SpeakQlParser.CONTAINS)
                    self.state = 1419
                    self.match(SpeakQlParser.SQL)
                    pass
                elif token in [SpeakQlParser.NO]:
                    self.state = 1420
                    self.match(SpeakQlParser.NO)
                    self.state = 1421
                    self.match(SpeakQlParser.SQL)
                    pass
                elif token in [SpeakQlParser.READS]:
                    self.state = 1422
                    self.match(SpeakQlParser.READS)
                    self.state = 1423
                    self.match(SpeakQlParser.SQL)
                    self.state = 1424
                    self.match(SpeakQlParser.DATA)
                    pass
                elif token in [SpeakQlParser.MODIFIES]:
                    self.state = 1425
                    self.match(SpeakQlParser.MODIFIES)
                    self.state = 1426
                    self.match(SpeakQlParser.SQL)
                    self.state = 1427
                    self.match(SpeakQlParser.DATA)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [SpeakQlParser.SQL]:
                localctx = SpeakQlParser.RoutineSecurityContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1430
                self.match(SpeakQlParser.SQL)
                self.state = 1431
                self.match(SpeakQlParser.SECURITY)
                self.state = 1432
                localctx.context = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.DEFINER or _la==SpeakQlParser.INVOKER):
                    localctx.context = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOST(self):
            return self.getToken(SpeakQlParser.HOST, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def DATABASE(self):
            return self.getToken(SpeakQlParser.DATABASE, 0)

        def USER(self):
            return self.getToken(SpeakQlParser.USER, 0)

        def PASSWORD(self):
            return self.getToken(SpeakQlParser.PASSWORD, 0)

        def SOCKET(self):
            return self.getToken(SpeakQlParser.SOCKET, 0)

        def OWNER(self):
            return self.getToken(SpeakQlParser.OWNER, 0)

        def PORT(self):
            return self.getToken(SpeakQlParser.PORT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_serverOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerOption" ):
                listener.enterServerOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerOption" ):
                listener.exitServerOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitServerOption" ):
                return visitor.visitServerOption(self)
            else:
                return visitor.visitChildren(self)




    def serverOption(self):

        localctx = SpeakQlParser.ServerOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_serverOption)
        try:
            self.state = 1449
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.HOST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1435
                self.match(SpeakQlParser.HOST)
                self.state = 1436
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.DATABASE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1437
                self.match(SpeakQlParser.DATABASE)
                self.state = 1438
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.USER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1439
                self.match(SpeakQlParser.USER)
                self.state = 1440
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.PASSWORD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1441
                self.match(SpeakQlParser.PASSWORD)
                self.state = 1442
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.SOCKET]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1443
                self.match(SpeakQlParser.SOCKET)
                self.state = 1444
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.OWNER]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1445
                self.match(SpeakQlParser.OWNER)
                self.state = 1446
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.PORT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1447
                self.match(SpeakQlParser.PORT)
                self.state = 1448
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDefinitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def createDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.CreateDefinitionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.CreateDefinitionContext,i)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_createDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDefinitions" ):
                listener.enterCreateDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDefinitions" ):
                listener.exitCreateDefinitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDefinitions" ):
                return visitor.visitCreateDefinitions(self)
            else:
                return visitor.visitChildren(self)




    def createDefinitions(self):

        localctx = SpeakQlParser.CreateDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_createDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self.leftParen()
            self.state = 1452
            self.createDefinition()
            self.state = 1457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 1453
                self.match(SpeakQlParser.COMMA)
                self.state = 1454
                self.createDefinition()
                self.state = 1459
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1460
            self.rightParen()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_createDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(SpeakQlParser.ColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDeclaration" ):
                listener.enterColumnDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDeclaration" ):
                listener.exitColumnDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDeclaration" ):
                return visitor.visitColumnDeclaration(self)
            else:
                return visitor.visitChildren(self)


    class ConstraintDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableConstraint(self):
            return self.getTypedRuleContext(SpeakQlParser.TableConstraintContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintDeclaration" ):
                listener.enterConstraintDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintDeclaration" ):
                listener.exitConstraintDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraintDeclaration" ):
                return visitor.visitConstraintDeclaration(self)
            else:
                return visitor.visitChildren(self)


    class IndexDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexColumnDefinition(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexDeclaration" ):
                listener.enterIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexDeclaration" ):
                listener.exitIndexDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexDeclaration" ):
                return visitor.visitIndexDeclaration(self)
            else:
                return visitor.visitChildren(self)



    def createDefinition(self):

        localctx = SpeakQlParser.CreateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_createDefinition)
        try:
            self.state = 1467
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.OPTIONAL]:
                localctx = SpeakQlParser.ColumnDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1462
                self.uid()
                self.state = 1463
                self.columnDefinition()
                pass
            elif token in [SpeakQlParser.CHECK, SpeakQlParser.CONSTRAINT, SpeakQlParser.FOREIGN, SpeakQlParser.PRIMARY, SpeakQlParser.UNIQUE]:
                localctx = SpeakQlParser.ConstraintDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1465
                self.tableConstraint()
                pass
            elif token in [SpeakQlParser.FULLTEXT, SpeakQlParser.INDEX, SpeakQlParser.KEY, SpeakQlParser.SPATIAL]:
                localctx = SpeakQlParser.IndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1466
                self.indexColumnDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(SpeakQlParser.DataTypeContext,0)


        def columnConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ColumnConstraintContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ColumnConstraintContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDefinition" ):
                return visitor.visitColumnDefinition(self)
            else:
                return visitor.visitChildren(self)




    def columnDefinition(self):

        localctx = SpeakQlParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_columnDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1469
            self.dataType()
            self.state = 1473
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1470
                    self.columnConstraint() 
                self.state = 1475
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_columnConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StorageColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ColumnConstraintContext
            super().__init__(parser)
            self.storageval = None # Token
            self.copyFrom(ctx)

        def STORAGE(self):
            return self.getToken(SpeakQlParser.STORAGE, 0)
        def DISK(self):
            return self.getToken(SpeakQlParser.DISK, 0)
        def MEMORY(self):
            return self.getToken(SpeakQlParser.MEMORY, 0)
        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageColumnConstraint" ):
                listener.enterStorageColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageColumnConstraint" ):
                listener.exitStorageColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageColumnConstraint" ):
                return visitor.visitStorageColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class VisibilityColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VISIBLE(self):
            return self.getToken(SpeakQlParser.VISIBLE, 0)
        def INVISIBLE(self):
            return self.getToken(SpeakQlParser.INVISIBLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibilityColumnConstraint" ):
                listener.enterVisibilityColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibilityColumnConstraint" ):
                listener.exitVisibilityColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibilityColumnConstraint" ):
                return visitor.visitVisibilityColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AutoIncrementColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AUTO_INCREMENT(self):
            return self.getToken(SpeakQlParser.AUTO_INCREMENT, 0)
        def ON(self):
            return self.getToken(SpeakQlParser.ON, 0)
        def UPDATE(self):
            return self.getToken(SpeakQlParser.UPDATE, 0)
        def currentTimestamp(self):
            return self.getTypedRuleContext(SpeakQlParser.CurrentTimestampContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAutoIncrementColumnConstraint" ):
                listener.enterAutoIncrementColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAutoIncrementColumnConstraint" ):
                listener.exitAutoIncrementColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAutoIncrementColumnConstraint" ):
                return visitor.visitAutoIncrementColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class CommentColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SpeakQlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentColumnConstraint" ):
                listener.enterCommentColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentColumnConstraint" ):
                listener.exitCommentColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentColumnConstraint" ):
                return visitor.visitCommentColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class UniqueKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(SpeakQlParser.UNIQUE, 0)
        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyColumnConstraint" ):
                listener.enterUniqueKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyColumnConstraint" ):
                listener.exitUniqueKeyColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUniqueKeyColumnConstraint" ):
                return visitor.visitUniqueKeyColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class SerialDefaultColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SERIAL(self):
            return self.getToken(SpeakQlParser.SERIAL, 0)
        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)
        def VALUE(self):
            return self.getToken(SpeakQlParser.VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSerialDefaultColumnConstraint" ):
                listener.enterSerialDefaultColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSerialDefaultColumnConstraint" ):
                listener.exitSerialDefaultColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSerialDefaultColumnConstraint" ):
                return visitor.visitSerialDefaultColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class GeneratedColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AS(self):
            return self.getToken(SpeakQlParser.AS, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def GENERATED(self):
            return self.getToken(SpeakQlParser.GENERATED, 0)
        def ALWAYS(self):
            return self.getToken(SpeakQlParser.ALWAYS, 0)
        def VIRTUAL(self):
            return self.getToken(SpeakQlParser.VIRTUAL, 0)
        def STORED(self):
            return self.getToken(SpeakQlParser.STORED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneratedColumnConstraint" ):
                listener.enterGeneratedColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneratedColumnConstraint" ):
                listener.exitGeneratedColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneratedColumnConstraint" ):
                return visitor.visitGeneratedColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class FormatColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ColumnConstraintContext
            super().__init__(parser)
            self.colformat = None # Token
            self.copyFrom(ctx)

        def COLUMN_FORMAT(self):
            return self.getToken(SpeakQlParser.COLUMN_FORMAT, 0)
        def FIXED(self):
            return self.getToken(SpeakQlParser.FIXED, 0)
        def DYNAMIC(self):
            return self.getToken(SpeakQlParser.DYNAMIC, 0)
        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormatColumnConstraint" ):
                listener.enterFormatColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormatColumnConstraint" ):
                listener.exitFormatColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormatColumnConstraint" ):
                return visitor.visitFormatColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class CollateColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLLATE(self):
            return self.getToken(SpeakQlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(SpeakQlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollateColumnConstraint" ):
                listener.enterCollateColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollateColumnConstraint" ):
                listener.exitCollateColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollateColumnConstraint" ):
                return visitor.visitCollateColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class PrimaryKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)
        def PRIMARY(self):
            return self.getToken(SpeakQlParser.PRIMARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyColumnConstraint" ):
                listener.enterPrimaryKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyColumnConstraint" ):
                listener.exitPrimaryKeyColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryKeyColumnConstraint" ):
                return visitor.visitPrimaryKeyColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class CheckColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ColumnConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(SpeakQlParser.CHECK, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def CONSTRAINT(self):
            return self.getToken(SpeakQlParser.CONSTRAINT, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckColumnConstraint" ):
                listener.enterCheckColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckColumnConstraint" ):
                listener.exitCheckColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheckColumnConstraint" ):
                return visitor.visitCheckColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class NullColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nullNotnull(self):
            return self.getTypedRuleContext(SpeakQlParser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullColumnConstraint" ):
                listener.enterNullColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullColumnConstraint" ):
                listener.exitNullColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullColumnConstraint" ):
                return visitor.visitNullColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class DefaultColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)
        def defaultValue(self):
            return self.getTypedRuleContext(SpeakQlParser.DefaultValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultColumnConstraint" ):
                listener.enterDefaultColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultColumnConstraint" ):
                listener.exitDefaultColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultColumnConstraint" ):
                return visitor.visitDefaultColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class ReferenceColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def referenceDefinition(self):
            return self.getTypedRuleContext(SpeakQlParser.ReferenceDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceColumnConstraint" ):
                listener.enterReferenceColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceColumnConstraint" ):
                listener.exitReferenceColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceColumnConstraint" ):
                return visitor.visitReferenceColumnConstraint(self)
            else:
                return visitor.visitChildren(self)



    def columnConstraint(self):

        localctx = SpeakQlParser.ColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_columnConstraint)
        self._la = 0 # Token type
        try:
            self.state = 1529
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.NOT, SpeakQlParser.NULL_LITERAL, SpeakQlParser.NULL_SPEC_LITERAL]:
                localctx = SpeakQlParser.NullColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1476
                self.nullNotnull()
                pass
            elif token in [SpeakQlParser.DEFAULT]:
                localctx = SpeakQlParser.DefaultColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1477
                self.match(SpeakQlParser.DEFAULT)
                self.state = 1478
                self.defaultValue()
                pass
            elif token in [SpeakQlParser.VISIBLE]:
                localctx = SpeakQlParser.VisibilityColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1479
                self.match(SpeakQlParser.VISIBLE)
                pass
            elif token in [SpeakQlParser.INVISIBLE]:
                localctx = SpeakQlParser.VisibilityColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1480
                self.match(SpeakQlParser.INVISIBLE)
                pass
            elif token in [SpeakQlParser.ON, SpeakQlParser.AUTO_INCREMENT]:
                localctx = SpeakQlParser.AutoIncrementColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1485
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.AUTO_INCREMENT]:
                    self.state = 1481
                    self.match(SpeakQlParser.AUTO_INCREMENT)
                    pass
                elif token in [SpeakQlParser.ON]:
                    self.state = 1482
                    self.match(SpeakQlParser.ON)
                    self.state = 1483
                    self.match(SpeakQlParser.UPDATE)
                    self.state = 1484
                    self.currentTimestamp()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [SpeakQlParser.KEY, SpeakQlParser.PRIMARY]:
                localctx = SpeakQlParser.PrimaryKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.PRIMARY:
                    self.state = 1487
                    self.match(SpeakQlParser.PRIMARY)


                self.state = 1490
                self.match(SpeakQlParser.KEY)
                pass
            elif token in [SpeakQlParser.UNIQUE]:
                localctx = SpeakQlParser.UniqueKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1491
                self.match(SpeakQlParser.UNIQUE)
                self.state = 1493
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                if la_ == 1:
                    self.state = 1492
                    self.match(SpeakQlParser.KEY)


                pass
            elif token in [SpeakQlParser.COMMENT]:
                localctx = SpeakQlParser.CommentColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1495
                self.match(SpeakQlParser.COMMENT)
                self.state = 1496
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.COLUMN_FORMAT]:
                localctx = SpeakQlParser.FormatColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1497
                self.match(SpeakQlParser.COLUMN_FORMAT)
                self.state = 1498
                localctx.colformat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.DYNAMIC or _la==SpeakQlParser.FIXED):
                    localctx.colformat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SpeakQlParser.STORAGE]:
                localctx = SpeakQlParser.StorageColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1499
                self.match(SpeakQlParser.STORAGE)
                self.state = 1500
                localctx.storageval = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.DISK or _la==SpeakQlParser.MEMORY):
                    localctx.storageval = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SpeakQlParser.REFERENCES]:
                localctx = SpeakQlParser.ReferenceColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1501
                self.referenceDefinition()
                pass
            elif token in [SpeakQlParser.COLLATE]:
                localctx = SpeakQlParser.CollateColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1502
                self.match(SpeakQlParser.COLLATE)
                self.state = 1503
                self.collationName()
                pass
            elif token in [SpeakQlParser.AS, SpeakQlParser.GENERATED]:
                localctx = SpeakQlParser.GeneratedColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.GENERATED:
                    self.state = 1504
                    self.match(SpeakQlParser.GENERATED)
                    self.state = 1505
                    self.match(SpeakQlParser.ALWAYS)


                self.state = 1508
                self.match(SpeakQlParser.AS)
                self.state = 1509
                self.leftParen()
                self.state = 1510
                self.expression(0)
                self.state = 1511
                self.rightParen()
                self.state = 1513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.STORED or _la==SpeakQlParser.VIRTUAL:
                    self.state = 1512
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.STORED or _la==SpeakQlParser.VIRTUAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [SpeakQlParser.SERIAL]:
                localctx = SpeakQlParser.SerialDefaultColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1515
                self.match(SpeakQlParser.SERIAL)
                self.state = 1516
                self.match(SpeakQlParser.DEFAULT)
                self.state = 1517
                self.match(SpeakQlParser.VALUE)
                pass
            elif token in [SpeakQlParser.CHECK, SpeakQlParser.CONSTRAINT]:
                localctx = SpeakQlParser.CheckColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.CONSTRAINT:
                    self.state = 1518
                    self.match(SpeakQlParser.CONSTRAINT)
                    self.state = 1520
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                        self.state = 1519
                        localctx.name = self.uid()




                self.state = 1524
                self.match(SpeakQlParser.CHECK)
                self.state = 1525
                self.leftParen()
                self.state = 1526
                self.expression(0)
                self.state = 1527
                self.rightParen()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_tableConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UniqueKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexFormat = None # Token
            self.index = None # UidContext
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(SpeakQlParser.UNIQUE, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(SpeakQlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)

        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyTableConstraint" ):
                listener.enterUniqueKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyTableConstraint" ):
                listener.exitUniqueKeyTableConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUniqueKeyTableConstraint" ):
                return visitor.visitUniqueKeyTableConstraint(self)
            else:
                return visitor.visitChildren(self)


    class CheckTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(SpeakQlParser.CHECK, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def CONSTRAINT(self):
            return self.getToken(SpeakQlParser.CONSTRAINT, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckTableConstraint" ):
                listener.enterCheckTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckTableConstraint" ):
                listener.exitCheckTableConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheckTableConstraint" ):
                return visitor.visitCheckTableConstraint(self)
            else:
                return visitor.visitChildren(self)


    class PrimaryKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.index = None # UidContext
            self.copyFrom(ctx)

        def PRIMARY(self):
            return self.getToken(SpeakQlParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(SpeakQlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyTableConstraint" ):
                listener.enterPrimaryKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyTableConstraint" ):
                listener.exitPrimaryKeyTableConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryKeyTableConstraint" ):
                return visitor.visitPrimaryKeyTableConstraint(self)
            else:
                return visitor.visitChildren(self)


    class ForeignKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.index = None # UidContext
            self.copyFrom(ctx)

        def FOREIGN(self):
            return self.getToken(SpeakQlParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexColumnNamesContext,0)

        def referenceDefinition(self):
            return self.getTypedRuleContext(SpeakQlParser.ReferenceDefinitionContext,0)

        def CONSTRAINT(self):
            return self.getToken(SpeakQlParser.CONSTRAINT, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeignKeyTableConstraint" ):
                listener.enterForeignKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeignKeyTableConstraint" ):
                listener.exitForeignKeyTableConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeignKeyTableConstraint" ):
                return visitor.visitForeignKeyTableConstraint(self)
            else:
                return visitor.visitChildren(self)



    def tableConstraint(self):

        localctx = SpeakQlParser.TableConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_tableConstraint)
        self._la = 0 # Token type
        try:
            self.state = 1600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.PrimaryKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.CONSTRAINT:
                    self.state = 1531
                    self.match(SpeakQlParser.CONSTRAINT)
                    self.state = 1533
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                        self.state = 1532
                        localctx.name = self.uid()




                self.state = 1537
                self.match(SpeakQlParser.PRIMARY)
                self.state = 1538
                self.match(SpeakQlParser.KEY)
                self.state = 1540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                    self.state = 1539
                    localctx.index = self.uid()


                self.state = 1543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.USING:
                    self.state = 1542
                    self.indexType()


                self.state = 1545
                self.indexColumnNames()
                self.state = 1549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.USING or _la==SpeakQlParser.WITH or _la==SpeakQlParser.COMMENT or _la==SpeakQlParser.INVISIBLE or _la==SpeakQlParser.KEY_BLOCK_SIZE or _la==SpeakQlParser.VISIBLE:
                    self.state = 1546
                    self.indexOption()
                    self.state = 1551
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = SpeakQlParser.UniqueKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.CONSTRAINT:
                    self.state = 1552
                    self.match(SpeakQlParser.CONSTRAINT)
                    self.state = 1554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                        self.state = 1553
                        localctx.name = self.uid()




                self.state = 1558
                self.match(SpeakQlParser.UNIQUE)
                self.state = 1560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEY:
                    self.state = 1559
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                    self.state = 1562
                    localctx.index = self.uid()


                self.state = 1566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.USING:
                    self.state = 1565
                    self.indexType()


                self.state = 1568
                self.indexColumnNames()
                self.state = 1572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.USING or _la==SpeakQlParser.WITH or _la==SpeakQlParser.COMMENT or _la==SpeakQlParser.INVISIBLE or _la==SpeakQlParser.KEY_BLOCK_SIZE or _la==SpeakQlParser.VISIBLE:
                    self.state = 1569
                    self.indexOption()
                    self.state = 1574
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = SpeakQlParser.ForeignKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.CONSTRAINT:
                    self.state = 1575
                    self.match(SpeakQlParser.CONSTRAINT)
                    self.state = 1577
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                        self.state = 1576
                        localctx.name = self.uid()




                self.state = 1581
                self.match(SpeakQlParser.FOREIGN)
                self.state = 1582
                self.match(SpeakQlParser.KEY)
                self.state = 1584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                    self.state = 1583
                    localctx.index = self.uid()


                self.state = 1586
                self.indexColumnNames()
                self.state = 1587
                self.referenceDefinition()
                pass

            elif la_ == 4:
                localctx = SpeakQlParser.CheckTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.CONSTRAINT:
                    self.state = 1589
                    self.match(SpeakQlParser.CONSTRAINT)
                    self.state = 1591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                        self.state = 1590
                        localctx.name = self.uid()




                self.state = 1595
                self.match(SpeakQlParser.CHECK)
                self.state = 1596
                self.leftParen()
                self.state = 1597
                self.expression(0)
                self.state = 1598
                self.rightParen()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.matchType = None # Token

        def REFERENCES(self):
            return self.getToken(SpeakQlParser.REFERENCES, 0)

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexColumnNamesContext,0)


        def MATCH(self):
            return self.getToken(SpeakQlParser.MATCH, 0)

        def referenceAction(self):
            return self.getTypedRuleContext(SpeakQlParser.ReferenceActionContext,0)


        def FULL(self):
            return self.getToken(SpeakQlParser.FULL, 0)

        def PARTIAL(self):
            return self.getToken(SpeakQlParser.PARTIAL, 0)

        def SIMPLE(self):
            return self.getToken(SpeakQlParser.SIMPLE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_referenceDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceDefinition" ):
                listener.enterReferenceDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceDefinition" ):
                listener.exitReferenceDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceDefinition" ):
                return visitor.visitReferenceDefinition(self)
            else:
                return visitor.visitChildren(self)




    def referenceDefinition(self):

        localctx = SpeakQlParser.ReferenceDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_referenceDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1602
            self.match(SpeakQlParser.REFERENCES)
            self.state = 1603
            self.tableName()
            self.state = 1605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1604
                self.indexColumnNames()


            self.state = 1609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.MATCH:
                self.state = 1607
                self.match(SpeakQlParser.MATCH)
                self.state = 1608
                localctx.matchType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.FULL or _la==SpeakQlParser.PARTIAL or _la==SpeakQlParser.SIMPLE):
                    localctx.matchType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1611
                self.referenceAction()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.onDelete = None # ReferenceControlTypeContext
            self.onUpdate = None # ReferenceControlTypeContext

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.ON)
            else:
                return self.getToken(SpeakQlParser.ON, i)

        def DELETE(self):
            return self.getToken(SpeakQlParser.DELETE, 0)

        def referenceControlType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ReferenceControlTypeContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ReferenceControlTypeContext,i)


        def UPDATE(self):
            return self.getToken(SpeakQlParser.UPDATE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_referenceAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceAction" ):
                listener.enterReferenceAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceAction" ):
                listener.exitReferenceAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceAction" ):
                return visitor.visitReferenceAction(self)
            else:
                return visitor.visitChildren(self)




    def referenceAction(self):

        localctx = SpeakQlParser.ReferenceActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_referenceAction)
        try:
            self.state = 1630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1614
                self.match(SpeakQlParser.ON)
                self.state = 1615
                self.match(SpeakQlParser.DELETE)
                self.state = 1616
                localctx.onDelete = self.referenceControlType()
                self.state = 1620
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1617
                    self.match(SpeakQlParser.ON)
                    self.state = 1618
                    self.match(SpeakQlParser.UPDATE)
                    self.state = 1619
                    localctx.onUpdate = self.referenceControlType()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1622
                self.match(SpeakQlParser.ON)
                self.state = 1623
                self.match(SpeakQlParser.UPDATE)
                self.state = 1624
                localctx.onUpdate = self.referenceControlType()
                self.state = 1628
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                if la_ == 1:
                    self.state = 1625
                    self.match(SpeakQlParser.ON)
                    self.state = 1626
                    self.match(SpeakQlParser.DELETE)
                    self.state = 1627
                    localctx.onDelete = self.referenceControlType()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceControlTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTRICT(self):
            return self.getToken(SpeakQlParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(SpeakQlParser.CASCADE, 0)

        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)

        def NULL_LITERAL(self):
            return self.getToken(SpeakQlParser.NULL_LITERAL, 0)

        def NO(self):
            return self.getToken(SpeakQlParser.NO, 0)

        def ACTION(self):
            return self.getToken(SpeakQlParser.ACTION, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_referenceControlType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceControlType" ):
                listener.enterReferenceControlType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceControlType" ):
                listener.exitReferenceControlType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceControlType" ):
                return visitor.visitReferenceControlType(self)
            else:
                return visitor.visitChildren(self)




    def referenceControlType(self):

        localctx = SpeakQlParser.ReferenceControlTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_referenceControlType)
        try:
            self.state = 1638
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.RESTRICT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1632
                self.match(SpeakQlParser.RESTRICT)
                pass
            elif token in [SpeakQlParser.CASCADE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1633
                self.match(SpeakQlParser.CASCADE)
                pass
            elif token in [SpeakQlParser.SET]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1634
                self.match(SpeakQlParser.SET)
                self.state = 1635
                self.match(SpeakQlParser.NULL_LITERAL)
                pass
            elif token in [SpeakQlParser.NO]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1636
                self.match(SpeakQlParser.NO)
                self.state = 1637
                self.match(SpeakQlParser.ACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_indexColumnDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpecialIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.IndexColumnDefinitionContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def indexColumnNames(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexColumnNamesContext,0)

        def FULLTEXT(self):
            return self.getToken(SpeakQlParser.FULLTEXT, 0)
        def SPATIAL(self):
            return self.getToken(SpeakQlParser.SPATIAL, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.IndexOptionContext,i)

        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialIndexDeclaration" ):
                listener.enterSpecialIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialIndexDeclaration" ):
                listener.exitSpecialIndexDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialIndexDeclaration" ):
                return visitor.visitSpecialIndexDeclaration(self)
            else:
                return visitor.visitChildren(self)


    class SimpleIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.IndexColumnDefinitionContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def indexColumnNames(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexColumnNamesContext,0)

        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def indexType(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.IndexOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIndexDeclaration" ):
                listener.enterSimpleIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIndexDeclaration" ):
                listener.exitSimpleIndexDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleIndexDeclaration" ):
                return visitor.visitSimpleIndexDeclaration(self)
            else:
                return visitor.visitChildren(self)



    def indexColumnDefinition(self):

        localctx = SpeakQlParser.IndexColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_indexColumnDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1668
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.INDEX, SpeakQlParser.KEY]:
                localctx = SpeakQlParser.SimpleIndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1640
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                    self.state = 1641
                    self.uid()


                self.state = 1645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.USING:
                    self.state = 1644
                    self.indexType()


                self.state = 1647
                self.indexColumnNames()
                self.state = 1651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.USING or _la==SpeakQlParser.WITH or _la==SpeakQlParser.COMMENT or _la==SpeakQlParser.INVISIBLE or _la==SpeakQlParser.KEY_BLOCK_SIZE or _la==SpeakQlParser.VISIBLE:
                    self.state = 1648
                    self.indexOption()
                    self.state = 1653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SpeakQlParser.FULLTEXT, SpeakQlParser.SPATIAL]:
                localctx = SpeakQlParser.SpecialIndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1654
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.FULLTEXT or _la==SpeakQlParser.SPATIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEY:
                    self.state = 1655
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                    self.state = 1658
                    self.uid()


                self.state = 1661
                self.indexColumnNames()
                self.state = 1665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.USING or _la==SpeakQlParser.WITH or _la==SpeakQlParser.COMMENT or _la==SpeakQlParser.INVISIBLE or _la==SpeakQlParser.KEY_BLOCK_SIZE or _la==SpeakQlParser.VISIBLE:
                    self.state = 1662
                    self.indexOption()
                    self.state = 1667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_tableOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableOptionEngineContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENGINE(self):
            return self.getToken(SpeakQlParser.ENGINE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def engineName(self):
            return self.getTypedRuleContext(SpeakQlParser.EngineNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionEngine" ):
                listener.enterTableOptionEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionEngine" ):
                listener.exitTableOptionEngine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionEngine" ):
                return visitor.visitTableOptionEngine(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionMaxRowsContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MAX_ROWS(self):
            return self.getToken(SpeakQlParser.MAX_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionMaxRows" ):
                listener.enterTableOptionMaxRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionMaxRows" ):
                listener.exitTableOptionMaxRows(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionMaxRows" ):
                return visitor.visitTableOptionMaxRows(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionCollateContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLLATE(self):
            return self.getToken(SpeakQlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(SpeakQlParser.CollationNameContext,0)

        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionCollate" ):
                listener.enterTableOptionCollate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionCollate" ):
                listener.exitTableOptionCollate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionCollate" ):
                return visitor.visitTableOptionCollate(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionPersistentContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.extBoolValue = None # Token
            self.copyFrom(ctx)

        def STATS_PERSISTENT(self):
            return self.getToken(SpeakQlParser.STATS_PERSISTENT, 0)
        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(SpeakQlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(SpeakQlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPersistent" ):
                listener.enterTableOptionPersistent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPersistent" ):
                listener.exitTableOptionPersistent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionPersistent" ):
                return visitor.visitTableOptionPersistent(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionTablespaceContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLESPACE(self):
            return self.getToken(SpeakQlParser.TABLESPACE, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def tablespaceStorage(self):
            return self.getTypedRuleContext(SpeakQlParser.TablespaceStorageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionTablespace" ):
                listener.enterTableOptionTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionTablespace" ):
                listener.exitTableOptionTablespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionTablespace" ):
                return visitor.visitTableOptionTablespace(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionPackKeysContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.extBoolValue = None # Token
            self.copyFrom(ctx)

        def PACK_KEYS(self):
            return self.getToken(SpeakQlParser.PACK_KEYS, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(SpeakQlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(SpeakQlParser.ONE_DECIMAL, 0)
        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPackKeys" ):
                listener.enterTableOptionPackKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPackKeys" ):
                listener.exitTableOptionPackKeys(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionPackKeys" ):
                return visitor.visitTableOptionPackKeys(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionPasswordContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PASSWORD(self):
            return self.getToken(SpeakQlParser.PASSWORD, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPassword" ):
                listener.enterTableOptionPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPassword" ):
                listener.exitTableOptionPassword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionPassword" ):
                return visitor.visitTableOptionPassword(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionUnionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNION(self):
            return self.getToken(SpeakQlParser.UNION, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def tables(self):
            return self.getTypedRuleContext(SpeakQlParser.TablesContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionUnion" ):
                listener.enterTableOptionUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionUnion" ):
                listener.exitTableOptionUnion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionUnion" ):
                return visitor.visitTableOptionUnion(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionSamplePageContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STATS_SAMPLE_PAGES(self):
            return self.getToken(SpeakQlParser.STATS_SAMPLE_PAGES, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionSamplePage" ):
                listener.enterTableOptionSamplePage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionSamplePage" ):
                listener.exitTableOptionSamplePage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionSamplePage" ):
                return visitor.visitTableOptionSamplePage(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionCharsetContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHARACTER(self):
            return self.getToken(SpeakQlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)
        def CHARSET(self):
            return self.getToken(SpeakQlParser.CHARSET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(SpeakQlParser.CharsetNameContext,0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.DEFAULT)
            else:
                return self.getToken(SpeakQlParser.DEFAULT, i)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionCharset" ):
                listener.enterTableOptionCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionCharset" ):
                listener.exitTableOptionCharset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionCharset" ):
                return visitor.visitTableOptionCharset(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionIndexDirectoryContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)
        def DIRECTORY(self):
            return self.getToken(SpeakQlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionIndexDirectory" ):
                listener.enterTableOptionIndexDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionIndexDirectory" ):
                listener.exitTableOptionIndexDirectory(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionIndexDirectory" ):
                return visitor.visitTableOptionIndexDirectory(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionTableTypeContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE_TYPE(self):
            return self.getToken(SpeakQlParser.TABLE_TYPE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def tableType(self):
            return self.getTypedRuleContext(SpeakQlParser.TableTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionTableType" ):
                listener.enterTableOptionTableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionTableType" ):
                listener.exitTableOptionTableType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionTableType" ):
                return visitor.visitTableOptionTableType(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionKeyBlockSizeContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY_BLOCK_SIZE(self):
            return self.getToken(SpeakQlParser.KEY_BLOCK_SIZE, 0)
        def fileSizeLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.FileSizeLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionKeyBlockSize" ):
                listener.enterTableOptionKeyBlockSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionKeyBlockSize" ):
                listener.exitTableOptionKeyBlockSize(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionKeyBlockSize" ):
                return visitor.visitTableOptionKeyBlockSize(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionEncryptionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENCRYPTION(self):
            return self.getToken(SpeakQlParser.ENCRYPTION, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionEncryption" ):
                listener.enterTableOptionEncryption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionEncryption" ):
                listener.exitTableOptionEncryption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionEncryption" ):
                return visitor.visitTableOptionEncryption(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionDataDirectoryContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATA(self):
            return self.getToken(SpeakQlParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(SpeakQlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionDataDirectory" ):
                listener.enterTableOptionDataDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionDataDirectory" ):
                listener.exitTableOptionDataDirectory(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionDataDirectory" ):
                return visitor.visitTableOptionDataDirectory(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionRecalculationContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.extBoolValue = None # Token
            self.copyFrom(ctx)

        def STATS_AUTO_RECALC(self):
            return self.getToken(SpeakQlParser.STATS_AUTO_RECALC, 0)
        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(SpeakQlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(SpeakQlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionRecalculation" ):
                listener.enterTableOptionRecalculation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionRecalculation" ):
                listener.exitTableOptionRecalculation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionRecalculation" ):
                return visitor.visitTableOptionRecalculation(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionAutoIncrementContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AUTO_INCREMENT(self):
            return self.getToken(SpeakQlParser.AUTO_INCREMENT, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionAutoIncrement" ):
                listener.enterTableOptionAutoIncrement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionAutoIncrement" ):
                listener.exitTableOptionAutoIncrement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionAutoIncrement" ):
                return visitor.visitTableOptionAutoIncrement(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionChecksumContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.boolValue = None # Token
            self.copyFrom(ctx)

        def CHECKSUM(self):
            return self.getToken(SpeakQlParser.CHECKSUM, 0)
        def PAGE_CHECKSUM(self):
            return self.getToken(SpeakQlParser.PAGE_CHECKSUM, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(SpeakQlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(SpeakQlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionChecksum" ):
                listener.enterTableOptionChecksum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionChecksum" ):
                listener.exitTableOptionChecksum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionChecksum" ):
                return visitor.visitTableOptionChecksum(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionDelayContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.boolValue = None # Token
            self.copyFrom(ctx)

        def DELAY_KEY_WRITE(self):
            return self.getToken(SpeakQlParser.DELAY_KEY_WRITE, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(SpeakQlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(SpeakQlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionDelay" ):
                listener.enterTableOptionDelay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionDelay" ):
                listener.exitTableOptionDelay(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionDelay" ):
                return visitor.visitTableOptionDelay(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionConnectionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONNECTION(self):
            return self.getToken(SpeakQlParser.CONNECTION, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionConnection" ):
                listener.enterTableOptionConnection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionConnection" ):
                listener.exitTableOptionConnection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionConnection" ):
                return visitor.visitTableOptionConnection(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionCommentContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SpeakQlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionComment" ):
                listener.enterTableOptionComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionComment" ):
                listener.exitTableOptionComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionComment" ):
                return visitor.visitTableOptionComment(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionAverageContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AVG_ROW_LENGTH(self):
            return self.getToken(SpeakQlParser.AVG_ROW_LENGTH, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionAverage" ):
                listener.enterTableOptionAverage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionAverage" ):
                listener.exitTableOptionAverage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionAverage" ):
                return visitor.visitTableOptionAverage(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionRowFormatContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.rowFormat = None # Token
            self.copyFrom(ctx)

        def ROW_FORMAT(self):
            return self.getToken(SpeakQlParser.ROW_FORMAT, 0)
        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)
        def DYNAMIC(self):
            return self.getToken(SpeakQlParser.DYNAMIC, 0)
        def FIXED(self):
            return self.getToken(SpeakQlParser.FIXED, 0)
        def COMPRESSED(self):
            return self.getToken(SpeakQlParser.COMPRESSED, 0)
        def REDUNDANT(self):
            return self.getToken(SpeakQlParser.REDUNDANT, 0)
        def COMPACT(self):
            return self.getToken(SpeakQlParser.COMPACT, 0)
        def ID(self):
            return self.getToken(SpeakQlParser.ID, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionRowFormat" ):
                listener.enterTableOptionRowFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionRowFormat" ):
                listener.exitTableOptionRowFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionRowFormat" ):
                return visitor.visitTableOptionRowFormat(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionCompressionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMPRESSION(self):
            return self.getToken(SpeakQlParser.COMPRESSION, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)
        def ID(self):
            return self.getToken(SpeakQlParser.ID, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionCompression" ):
                listener.enterTableOptionCompression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionCompression" ):
                listener.exitTableOptionCompression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionCompression" ):
                return visitor.visitTableOptionCompression(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionInsertMethodContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.insertMethod = None # Token
            self.copyFrom(ctx)

        def INSERT_METHOD(self):
            return self.getToken(SpeakQlParser.INSERT_METHOD, 0)
        def NO(self):
            return self.getToken(SpeakQlParser.NO, 0)
        def FIRST(self):
            return self.getToken(SpeakQlParser.FIRST, 0)
        def LAST(self):
            return self.getToken(SpeakQlParser.LAST, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionInsertMethod" ):
                listener.enterTableOptionInsertMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionInsertMethod" ):
                listener.exitTableOptionInsertMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionInsertMethod" ):
                return visitor.visitTableOptionInsertMethod(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionMinRowsContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MIN_ROWS(self):
            return self.getToken(SpeakQlParser.MIN_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionMinRows" ):
                listener.enterTableOptionMinRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionMinRows" ):
                listener.exitTableOptionMinRows(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionMinRows" ):
                return visitor.visitTableOptionMinRows(self)
            else:
                return visitor.visitChildren(self)



    def tableOption(self):

        localctx = SpeakQlParser.TableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_tableOption)
        self._la = 0 # Token type
        try:
            self.state = 1819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.TableOptionEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1670
                self.match(SpeakQlParser.ENGINE)
                self.state = 1672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1671
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.CONNECT or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (SpeakQlParser.ARCHIVE - 756)) | (1 << (SpeakQlParser.BLACKHOLE - 756)) | (1 << (SpeakQlParser.CSV - 756)) | (1 << (SpeakQlParser.FEDERATED - 756)) | (1 << (SpeakQlParser.INNODB - 756)) | (1 << (SpeakQlParser.MEMORY - 756)) | (1 << (SpeakQlParser.MRG_MYISAM - 756)) | (1 << (SpeakQlParser.MYISAM - 756)) | (1 << (SpeakQlParser.NDB - 756)) | (1 << (SpeakQlParser.NDBCLUSTER - 756)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 756)) | (1 << (SpeakQlParser.TOKUDB - 756)))) != 0) or ((((_la - 1113)) & ~0x3f) == 0 and ((1 << (_la - 1113)) & ((1 << (SpeakQlParser.STRING_LITERAL - 1113)) | (1 << (SpeakQlParser.ID - 1113)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1113)))) != 0):
                    self.state = 1674
                    self.engineName()


                pass

            elif la_ == 2:
                localctx = SpeakQlParser.TableOptionAutoIncrementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1677
                self.match(SpeakQlParser.AUTO_INCREMENT)
                self.state = 1679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1678
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1681
                self.decimalLiteral()
                pass

            elif la_ == 3:
                localctx = SpeakQlParser.TableOptionAverageContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1682
                self.match(SpeakQlParser.AVG_ROW_LENGTH)
                self.state = 1684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1683
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1686
                self.decimalLiteral()
                pass

            elif la_ == 4:
                localctx = SpeakQlParser.TableOptionCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.DEFAULT:
                    self.state = 1687
                    self.match(SpeakQlParser.DEFAULT)


                self.state = 1693
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.CHARACTER]:
                    self.state = 1690
                    self.match(SpeakQlParser.CHARACTER)
                    self.state = 1691
                    self.match(SpeakQlParser.SET)
                    pass
                elif token in [SpeakQlParser.CHARSET]:
                    self.state = 1692
                    self.match(SpeakQlParser.CHARSET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1695
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1700
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.BINARY, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL]:
                    self.state = 1698
                    self.charsetName()
                    pass
                elif token in [SpeakQlParser.DEFAULT]:
                    self.state = 1699
                    self.match(SpeakQlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                localctx = SpeakQlParser.TableOptionChecksumContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1702
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.CHECKSUM or _la==SpeakQlParser.PAGE_CHECKSUM):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1703
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1706
                localctx.boolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.ZERO_DECIMAL or _la==SpeakQlParser.ONE_DECIMAL):
                    localctx.boolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 6:
                localctx = SpeakQlParser.TableOptionCollateContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.DEFAULT:
                    self.state = 1707
                    self.match(SpeakQlParser.DEFAULT)


                self.state = 1710
                self.match(SpeakQlParser.COLLATE)
                self.state = 1712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1711
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1714
                self.collationName()
                pass

            elif la_ == 7:
                localctx = SpeakQlParser.TableOptionCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1715
                self.match(SpeakQlParser.COMMENT)
                self.state = 1717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1716
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1719
                self.match(SpeakQlParser.STRING_LITERAL)
                pass

            elif la_ == 8:
                localctx = SpeakQlParser.TableOptionCompressionContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1720
                self.match(SpeakQlParser.COMPRESSION)
                self.state = 1722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1721
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1724
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.STRING_LITERAL or _la==SpeakQlParser.ID):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                localctx = SpeakQlParser.TableOptionConnectionContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1725
                self.match(SpeakQlParser.CONNECTION)
                self.state = 1727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1726
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1729
                self.match(SpeakQlParser.STRING_LITERAL)
                pass

            elif la_ == 10:
                localctx = SpeakQlParser.TableOptionDataDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1730
                self.match(SpeakQlParser.DATA)
                self.state = 1731
                self.match(SpeakQlParser.DIRECTORY)
                self.state = 1733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1732
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1735
                self.match(SpeakQlParser.STRING_LITERAL)
                pass

            elif la_ == 11:
                localctx = SpeakQlParser.TableOptionDelayContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1736
                self.match(SpeakQlParser.DELAY_KEY_WRITE)
                self.state = 1738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1737
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1740
                localctx.boolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.ZERO_DECIMAL or _la==SpeakQlParser.ONE_DECIMAL):
                    localctx.boolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 12:
                localctx = SpeakQlParser.TableOptionEncryptionContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1741
                self.match(SpeakQlParser.ENCRYPTION)
                self.state = 1743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1742
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1745
                self.match(SpeakQlParser.STRING_LITERAL)
                pass

            elif la_ == 13:
                localctx = SpeakQlParser.TableOptionIndexDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1746
                self.match(SpeakQlParser.INDEX)
                self.state = 1747
                self.match(SpeakQlParser.DIRECTORY)
                self.state = 1749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1748
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1751
                self.match(SpeakQlParser.STRING_LITERAL)
                pass

            elif la_ == 14:
                localctx = SpeakQlParser.TableOptionInsertMethodContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1752
                self.match(SpeakQlParser.INSERT_METHOD)
                self.state = 1754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1753
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1756
                localctx.insertMethod = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.FIRST or _la==SpeakQlParser.LAST or _la==SpeakQlParser.NO):
                    localctx.insertMethod = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                localctx = SpeakQlParser.TableOptionKeyBlockSizeContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1757
                self.match(SpeakQlParser.KEY_BLOCK_SIZE)
                self.state = 1759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1758
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1761
                self.fileSizeLiteral()
                pass

            elif la_ == 16:
                localctx = SpeakQlParser.TableOptionMaxRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1762
                self.match(SpeakQlParser.MAX_ROWS)
                self.state = 1764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1763
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1766
                self.decimalLiteral()
                pass

            elif la_ == 17:
                localctx = SpeakQlParser.TableOptionMinRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1767
                self.match(SpeakQlParser.MIN_ROWS)
                self.state = 1769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1768
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1771
                self.decimalLiteral()
                pass

            elif la_ == 18:
                localctx = SpeakQlParser.TableOptionPackKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1772
                self.match(SpeakQlParser.PACK_KEYS)
                self.state = 1774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1773
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1776
                localctx.extBoolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.ZERO_DECIMAL or _la==SpeakQlParser.ONE_DECIMAL):
                    localctx.extBoolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 19:
                localctx = SpeakQlParser.TableOptionPasswordContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 1777
                self.match(SpeakQlParser.PASSWORD)
                self.state = 1779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1778
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1781
                self.match(SpeakQlParser.STRING_LITERAL)
                pass

            elif la_ == 20:
                localctx = SpeakQlParser.TableOptionRowFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 1782
                self.match(SpeakQlParser.ROW_FORMAT)
                self.state = 1784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1783
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1786
                localctx.rowFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.DEFAULT or ((((_la - 369)) & ~0x3f) == 0 and ((1 << (_la - 369)) & ((1 << (SpeakQlParser.COMPACT - 369)) | (1 << (SpeakQlParser.COMPRESSED - 369)) | (1 << (SpeakQlParser.DYNAMIC - 369)) | (1 << (SpeakQlParser.FIXED - 369)))) != 0) or _la==SpeakQlParser.REDUNDANT or _la==SpeakQlParser.ID):
                    localctx.rowFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 21:
                localctx = SpeakQlParser.TableOptionRecalculationContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 1787
                self.match(SpeakQlParser.STATS_AUTO_RECALC)
                self.state = 1789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1788
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1791
                localctx.extBoolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.ZERO_DECIMAL or _la==SpeakQlParser.ONE_DECIMAL):
                    localctx.extBoolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 22:
                localctx = SpeakQlParser.TableOptionPersistentContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 1792
                self.match(SpeakQlParser.STATS_PERSISTENT)
                self.state = 1794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1793
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1796
                localctx.extBoolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.ZERO_DECIMAL or _la==SpeakQlParser.ONE_DECIMAL):
                    localctx.extBoolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 23:
                localctx = SpeakQlParser.TableOptionSamplePageContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 1797
                self.match(SpeakQlParser.STATS_SAMPLE_PAGES)
                self.state = 1799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1798
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1801
                self.decimalLiteral()
                pass

            elif la_ == 24:
                localctx = SpeakQlParser.TableOptionTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 1802
                self.match(SpeakQlParser.TABLESPACE)
                self.state = 1803
                self.uid()
                self.state = 1805
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1804
                    self.tablespaceStorage()


                pass

            elif la_ == 25:
                localctx = SpeakQlParser.TableOptionTableTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 1807
                self.match(SpeakQlParser.TABLE_TYPE)
                self.state = 1808
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 1809
                self.tableType()
                pass

            elif la_ == 26:
                localctx = SpeakQlParser.TableOptionTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 1810
                self.tablespaceStorage()
                pass

            elif la_ == 27:
                localctx = SpeakQlParser.TableOptionUnionContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 1811
                self.match(SpeakQlParser.UNION)
                self.state = 1813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 1812
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 1815
                self.leftParen()
                self.state = 1816
                self.tables()
                self.state = 1817
                self.rightParen()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MYSQL(self):
            return self.getToken(SpeakQlParser.MYSQL, 0)

        def ODBC(self):
            return self.getToken(SpeakQlParser.ODBC, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_tableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableType" ):
                listener.enterTableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableType" ):
                listener.exitTableType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableType" ):
                return visitor.visitTableType(self)
            else:
                return visitor.visitChildren(self)




    def tableType(self):

        localctx = SpeakQlParser.TableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_tableType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1821
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.MYSQL or _la==SpeakQlParser.ODBC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceStorageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(SpeakQlParser.STORAGE, 0)

        def DISK(self):
            return self.getToken(SpeakQlParser.DISK, 0)

        def MEMORY(self):
            return self.getToken(SpeakQlParser.MEMORY, 0)

        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_tablespaceStorage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespaceStorage" ):
                listener.enterTablespaceStorage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespaceStorage" ):
                listener.exitTablespaceStorage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablespaceStorage" ):
                return visitor.visitTablespaceStorage(self)
            else:
                return visitor.visitChildren(self)




    def tablespaceStorage(self):

        localctx = SpeakQlParser.TablespaceStorageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_tablespaceStorage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1823
            self.match(SpeakQlParser.STORAGE)
            self.state = 1824
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.DISK or _la==SpeakQlParser.MEMORY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # DecimalLiteralContext
            self.subCount = None # DecimalLiteralContext

        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.BY)
            else:
                return self.getToken(SpeakQlParser.BY, i)

        def partitionFunctionDefinition(self):
            return self.getTypedRuleContext(SpeakQlParser.PartitionFunctionDefinitionContext,0)


        def PARTITIONS(self):
            return self.getToken(SpeakQlParser.PARTITIONS, 0)

        def SUBPARTITION(self):
            return self.getToken(SpeakQlParser.SUBPARTITION, 0)

        def subpartitionFunctionDefinition(self):
            return self.getTypedRuleContext(SpeakQlParser.SubpartitionFunctionDefinitionContext,0)


        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PartitionDefinitionContext,i)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,i)


        def SUBPARTITIONS(self):
            return self.getToken(SpeakQlParser.SUBPARTITIONS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_partitionDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinitions" ):
                listener.enterPartitionDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinitions" ):
                listener.exitPartitionDefinitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionDefinitions" ):
                return visitor.visitPartitionDefinitions(self)
            else:
                return visitor.visitChildren(self)




    def partitionDefinitions(self):

        localctx = SpeakQlParser.PartitionDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_partitionDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1826
            self.match(SpeakQlParser.PARTITION)
            self.state = 1827
            self.match(SpeakQlParser.BY)
            self.state = 1828
            self.partitionFunctionDefinition()
            self.state = 1831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.PARTITIONS:
                self.state = 1829
                self.match(SpeakQlParser.PARTITIONS)
                self.state = 1830
                localctx.count = self.decimalLiteral()


            self.state = 1840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.SUBPARTITION:
                self.state = 1833
                self.match(SpeakQlParser.SUBPARTITION)
                self.state = 1834
                self.match(SpeakQlParser.BY)
                self.state = 1835
                self.subpartitionFunctionDefinition()
                self.state = 1838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.SUBPARTITIONS:
                    self.state = 1836
                    self.match(SpeakQlParser.SUBPARTITIONS)
                    self.state = 1837
                    localctx.subCount = self.decimalLiteral()




            self.state = 1853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 1842
                self.leftParen()
                self.state = 1843
                self.partitionDefinition()
                self.state = 1848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 1844
                    self.match(SpeakQlParser.COMMA)
                    self.state = 1845
                    self.partitionDefinition()
                    self.state = 1850
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1851
                self.rightParen()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_partitionFunctionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionFunctionKeyContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def LINEAR(self):
            return self.getToken(SpeakQlParser.LINEAR, 0)
        def ALGORITHM(self):
            return self.getToken(SpeakQlParser.ALGORITHM, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(SpeakQlParser.ONE_DECIMAL, 0)
        def TWO_DECIMAL(self):
            return self.getToken(SpeakQlParser.TWO_DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionKey" ):
                listener.enterPartitionFunctionKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionKey" ):
                listener.exitPartitionFunctionKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionFunctionKey" ):
                return visitor.visitPartitionFunctionKey(self)
            else:
                return visitor.visitChildren(self)


    class PartitionFunctionHashContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(SpeakQlParser.HASH, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def LINEAR(self):
            return self.getToken(SpeakQlParser.LINEAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionHash" ):
                listener.enterPartitionFunctionHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionHash" ):
                listener.exitPartitionFunctionHash(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionFunctionHash" ):
                return visitor.visitPartitionFunctionHash(self)
            else:
                return visitor.visitChildren(self)


    class PartitionFunctionListContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LIST(self):
            return self.getToken(SpeakQlParser.LIST, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def COLUMNS(self):
            return self.getToken(SpeakQlParser.COLUMNS, 0)
        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionList" ):
                listener.enterPartitionFunctionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionList" ):
                listener.exitPartitionFunctionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionFunctionList" ):
                return visitor.visitPartitionFunctionList(self)
            else:
                return visitor.visitChildren(self)


    class PartitionFunctionRangeContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RANGE(self):
            return self.getToken(SpeakQlParser.RANGE, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def COLUMNS(self):
            return self.getToken(SpeakQlParser.COLUMNS, 0)
        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionRange" ):
                listener.enterPartitionFunctionRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionRange" ):
                listener.exitPartitionFunctionRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionFunctionRange" ):
                return visitor.visitPartitionFunctionRange(self)
            else:
                return visitor.visitChildren(self)



    def partitionFunctionDefinition(self):

        localctx = SpeakQlParser.PartitionFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_partitionFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.PartitionFunctionHashContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LINEAR:
                    self.state = 1855
                    self.match(SpeakQlParser.LINEAR)


                self.state = 1858
                self.match(SpeakQlParser.HASH)
                self.state = 1859
                self.leftParen()
                self.state = 1860
                self.expression(0)
                self.state = 1861
                self.rightParen()
                pass

            elif la_ == 2:
                localctx = SpeakQlParser.PartitionFunctionKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LINEAR:
                    self.state = 1863
                    self.match(SpeakQlParser.LINEAR)


                self.state = 1866
                self.match(SpeakQlParser.KEY)
                self.state = 1870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.ALGORITHM:
                    self.state = 1867
                    self.match(SpeakQlParser.ALGORITHM)
                    self.state = 1868
                    self.match(SpeakQlParser.EQUAL_SYMBOL)
                    self.state = 1869
                    localctx.algType = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.ONE_DECIMAL or _la==SpeakQlParser.TWO_DECIMAL):
                        localctx.algType = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1872
                self.leftParen()
                self.state = 1873
                self.uidList()
                self.state = 1874
                self.rightParen()
                pass

            elif la_ == 3:
                localctx = SpeakQlParser.PartitionFunctionRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1876
                self.match(SpeakQlParser.RANGE)
                self.state = 1886
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.LR_BRACKET]:
                    self.state = 1877
                    self.leftParen()
                    self.state = 1878
                    self.expression(0)
                    self.state = 1879
                    self.rightParen()
                    pass
                elif token in [SpeakQlParser.COLUMNS]:
                    self.state = 1881
                    self.match(SpeakQlParser.COLUMNS)
                    self.state = 1882
                    self.leftParen()
                    self.state = 1883
                    self.uidList()
                    self.state = 1884
                    self.rightParen()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = SpeakQlParser.PartitionFunctionListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1888
                self.match(SpeakQlParser.LIST)
                self.state = 1898
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.LR_BRACKET]:
                    self.state = 1889
                    self.leftParen()
                    self.state = 1890
                    self.expression(0)
                    self.state = 1891
                    self.rightParen()
                    pass
                elif token in [SpeakQlParser.COLUMNS]:
                    self.state = 1893
                    self.match(SpeakQlParser.COLUMNS)
                    self.state = 1894
                    self.leftParen()
                    self.state = 1895
                    self.uidList()
                    self.state = 1896
                    self.rightParen()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubpartitionFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_subpartitionFunctionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SubpartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(SpeakQlParser.HASH, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def LINEAR(self):
            return self.getToken(SpeakQlParser.LINEAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubPartitionFunctionHash" ):
                listener.enterSubPartitionFunctionHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubPartitionFunctionHash" ):
                listener.exitSubPartitionFunctionHash(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubPartitionFunctionHash" ):
                return visitor.visitSubPartitionFunctionHash(self)
            else:
                return visitor.visitChildren(self)


    class SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SubpartitionFunctionDefinitionContext
            super().__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def LINEAR(self):
            return self.getToken(SpeakQlParser.LINEAR, 0)
        def ALGORITHM(self):
            return self.getToken(SpeakQlParser.ALGORITHM, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(SpeakQlParser.ONE_DECIMAL, 0)
        def TWO_DECIMAL(self):
            return self.getToken(SpeakQlParser.TWO_DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubPartitionFunctionKey" ):
                listener.enterSubPartitionFunctionKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubPartitionFunctionKey" ):
                listener.exitSubPartitionFunctionKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubPartitionFunctionKey" ):
                return visitor.visitSubPartitionFunctionKey(self)
            else:
                return visitor.visitChildren(self)



    def subpartitionFunctionDefinition(self):

        localctx = SpeakQlParser.SubpartitionFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_subpartitionFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.SubPartitionFunctionHashContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LINEAR:
                    self.state = 1902
                    self.match(SpeakQlParser.LINEAR)


                self.state = 1905
                self.match(SpeakQlParser.HASH)
                self.state = 1906
                self.leftParen()
                self.state = 1907
                self.expression(0)
                self.state = 1908
                self.rightParen()
                pass

            elif la_ == 2:
                localctx = SpeakQlParser.SubPartitionFunctionKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LINEAR:
                    self.state = 1910
                    self.match(SpeakQlParser.LINEAR)


                self.state = 1913
                self.match(SpeakQlParser.KEY)
                self.state = 1917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.ALGORITHM:
                    self.state = 1914
                    self.match(SpeakQlParser.ALGORITHM)
                    self.state = 1915
                    self.match(SpeakQlParser.EQUAL_SYMBOL)
                    self.state = 1916
                    localctx.algType = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.ONE_DECIMAL or _la==SpeakQlParser.TWO_DECIMAL):
                        localctx.algType = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1919
                self.leftParen()
                self.state = 1920
                self.uidList()
                self.state = 1921
                self.rightParen()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_partitionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionComparisonContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def VALUES(self):
            return self.getToken(SpeakQlParser.VALUES, 0)
        def LESS(self):
            return self.getToken(SpeakQlParser.LESS, 0)
        def THAN(self):
            return self.getToken(SpeakQlParser.THAN, 0)
        def leftParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.LeftParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,i)

        def partitionDefinerAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PartitionDefinerAtomContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PartitionDefinerAtomContext,i)

        def rightParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.RightParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.RightParenContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)
        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionComparison" ):
                listener.enterPartitionComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionComparison" ):
                listener.exitPartitionComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionComparison" ):
                return visitor.visitPartitionComparison(self)
            else:
                return visitor.visitChildren(self)


    class PartitionListAtomContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def VALUES(self):
            return self.getToken(SpeakQlParser.VALUES, 0)
        def IN(self):
            return self.getToken(SpeakQlParser.IN, 0)
        def leftParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.LeftParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,i)

        def partitionDefinerAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PartitionDefinerAtomContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PartitionDefinerAtomContext,i)

        def rightParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.RightParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.RightParenContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)
        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionListAtom" ):
                listener.enterPartitionListAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionListAtom" ):
                listener.exitPartitionListAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionListAtom" ):
                return visitor.visitPartitionListAtom(self)
            else:
                return visitor.visitChildren(self)


    class PartitionListVectorContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def VALUES(self):
            return self.getToken(SpeakQlParser.VALUES, 0)
        def IN(self):
            return self.getToken(SpeakQlParser.IN, 0)
        def leftParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.LeftParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,i)

        def partitionDefinerVector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PartitionDefinerVectorContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PartitionDefinerVectorContext,i)

        def rightParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.RightParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.RightParenContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)
        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionListVector" ):
                listener.enterPartitionListVector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionListVector" ):
                listener.exitPartitionListVector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionListVector" ):
                return visitor.visitPartitionListVector(self)
            else:
                return visitor.visitChildren(self)


    class PartitionSimpleContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PartitionOptionContext,i)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.SubpartitionDefinitionContext,i)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSimple" ):
                listener.enterPartitionSimple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSimple" ):
                listener.exitPartitionSimple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSimple" ):
                return visitor.visitPartitionSimple(self)
            else:
                return visitor.visitChildren(self)



    def partitionDefinition(self):

        localctx = SpeakQlParser.PartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_partitionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 2071
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.PartitionComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1925
                self.match(SpeakQlParser.PARTITION)
                self.state = 1926
                self.uid()
                self.state = 1927
                self.match(SpeakQlParser.VALUES)
                self.state = 1928
                self.match(SpeakQlParser.LESS)
                self.state = 1929
                self.match(SpeakQlParser.THAN)
                self.state = 1930
                self.leftParen()
                self.state = 1931
                self.partitionDefinerAtom()
                self.state = 1936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 1932
                    self.match(SpeakQlParser.COMMA)
                    self.state = 1933
                    self.partitionDefinerAtom()
                    self.state = 1938
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1939
                self.rightParen()
                self.state = 1943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.INDEX or ((((_la - 367)) & ~0x3f) == 0 and ((1 << (_la - 367)) & ((1 << (SpeakQlParser.COMMENT - 367)) | (1 << (SpeakQlParser.DATA - 367)) | (1 << (SpeakQlParser.ENGINE - 367)))) != 0) or ((((_la - 492)) & ~0x3f) == 0 and ((1 << (_la - 492)) & ((1 << (SpeakQlParser.MAX_ROWS - 492)) | (1 << (SpeakQlParser.MIN_ROWS - 492)) | (1 << (SpeakQlParser.NODEGROUP - 492)))) != 0) or _la==SpeakQlParser.STORAGE or _la==SpeakQlParser.TABLESPACE:
                    self.state = 1940
                    self.partitionOption()
                    self.state = 1945
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LR_BRACKET:
                    self.state = 1946
                    self.leftParen()
                    self.state = 1947
                    self.subpartitionDefinition()
                    self.state = 1952
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SpeakQlParser.COMMA:
                        self.state = 1948
                        self.match(SpeakQlParser.COMMA)
                        self.state = 1949
                        self.subpartitionDefinition()
                        self.state = 1954
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1955
                    self.rightParen()


                pass

            elif la_ == 2:
                localctx = SpeakQlParser.PartitionComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1959
                self.match(SpeakQlParser.PARTITION)
                self.state = 1960
                self.uid()
                self.state = 1961
                self.match(SpeakQlParser.VALUES)
                self.state = 1962
                self.match(SpeakQlParser.LESS)
                self.state = 1963
                self.match(SpeakQlParser.THAN)
                self.state = 1964
                self.partitionDefinerAtom()
                self.state = 1968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.INDEX or ((((_la - 367)) & ~0x3f) == 0 and ((1 << (_la - 367)) & ((1 << (SpeakQlParser.COMMENT - 367)) | (1 << (SpeakQlParser.DATA - 367)) | (1 << (SpeakQlParser.ENGINE - 367)))) != 0) or ((((_la - 492)) & ~0x3f) == 0 and ((1 << (_la - 492)) & ((1 << (SpeakQlParser.MAX_ROWS - 492)) | (1 << (SpeakQlParser.MIN_ROWS - 492)) | (1 << (SpeakQlParser.NODEGROUP - 492)))) != 0) or _la==SpeakQlParser.STORAGE or _la==SpeakQlParser.TABLESPACE:
                    self.state = 1965
                    self.partitionOption()
                    self.state = 1970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LR_BRACKET:
                    self.state = 1971
                    self.leftParen()
                    self.state = 1972
                    self.subpartitionDefinition()
                    self.state = 1977
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SpeakQlParser.COMMA:
                        self.state = 1973
                        self.match(SpeakQlParser.COMMA)
                        self.state = 1974
                        self.subpartitionDefinition()
                        self.state = 1979
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1980
                    self.rightParen()


                pass

            elif la_ == 3:
                localctx = SpeakQlParser.PartitionListAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1984
                self.match(SpeakQlParser.PARTITION)
                self.state = 1985
                self.uid()
                self.state = 1986
                self.match(SpeakQlParser.VALUES)
                self.state = 1987
                self.match(SpeakQlParser.IN)
                self.state = 1988
                self.leftParen()
                self.state = 1989
                self.partitionDefinerAtom()
                self.state = 1994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 1990
                    self.match(SpeakQlParser.COMMA)
                    self.state = 1991
                    self.partitionDefinerAtom()
                    self.state = 1996
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1997
                self.rightParen()
                self.state = 2001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.INDEX or ((((_la - 367)) & ~0x3f) == 0 and ((1 << (_la - 367)) & ((1 << (SpeakQlParser.COMMENT - 367)) | (1 << (SpeakQlParser.DATA - 367)) | (1 << (SpeakQlParser.ENGINE - 367)))) != 0) or ((((_la - 492)) & ~0x3f) == 0 and ((1 << (_la - 492)) & ((1 << (SpeakQlParser.MAX_ROWS - 492)) | (1 << (SpeakQlParser.MIN_ROWS - 492)) | (1 << (SpeakQlParser.NODEGROUP - 492)))) != 0) or _la==SpeakQlParser.STORAGE or _la==SpeakQlParser.TABLESPACE:
                    self.state = 1998
                    self.partitionOption()
                    self.state = 2003
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LR_BRACKET:
                    self.state = 2004
                    self.leftParen()
                    self.state = 2005
                    self.subpartitionDefinition()
                    self.state = 2010
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SpeakQlParser.COMMA:
                        self.state = 2006
                        self.match(SpeakQlParser.COMMA)
                        self.state = 2007
                        self.subpartitionDefinition()
                        self.state = 2012
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2013
                    self.rightParen()


                pass

            elif la_ == 4:
                localctx = SpeakQlParser.PartitionListVectorContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2017
                self.match(SpeakQlParser.PARTITION)
                self.state = 2018
                self.uid()
                self.state = 2019
                self.match(SpeakQlParser.VALUES)
                self.state = 2020
                self.match(SpeakQlParser.IN)
                self.state = 2021
                self.leftParen()
                self.state = 2022
                self.partitionDefinerVector()
                self.state = 2027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 2023
                    self.match(SpeakQlParser.COMMA)
                    self.state = 2024
                    self.partitionDefinerVector()
                    self.state = 2029
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2030
                self.rightParen()
                self.state = 2034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.INDEX or ((((_la - 367)) & ~0x3f) == 0 and ((1 << (_la - 367)) & ((1 << (SpeakQlParser.COMMENT - 367)) | (1 << (SpeakQlParser.DATA - 367)) | (1 << (SpeakQlParser.ENGINE - 367)))) != 0) or ((((_la - 492)) & ~0x3f) == 0 and ((1 << (_la - 492)) & ((1 << (SpeakQlParser.MAX_ROWS - 492)) | (1 << (SpeakQlParser.MIN_ROWS - 492)) | (1 << (SpeakQlParser.NODEGROUP - 492)))) != 0) or _la==SpeakQlParser.STORAGE or _la==SpeakQlParser.TABLESPACE:
                    self.state = 2031
                    self.partitionOption()
                    self.state = 2036
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LR_BRACKET:
                    self.state = 2037
                    self.leftParen()
                    self.state = 2038
                    self.subpartitionDefinition()
                    self.state = 2043
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SpeakQlParser.COMMA:
                        self.state = 2039
                        self.match(SpeakQlParser.COMMA)
                        self.state = 2040
                        self.subpartitionDefinition()
                        self.state = 2045
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2046
                    self.rightParen()


                pass

            elif la_ == 5:
                localctx = SpeakQlParser.PartitionSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2050
                self.match(SpeakQlParser.PARTITION)
                self.state = 2051
                self.uid()
                self.state = 2055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.INDEX or ((((_la - 367)) & ~0x3f) == 0 and ((1 << (_la - 367)) & ((1 << (SpeakQlParser.COMMENT - 367)) | (1 << (SpeakQlParser.DATA - 367)) | (1 << (SpeakQlParser.ENGINE - 367)))) != 0) or ((((_la - 492)) & ~0x3f) == 0 and ((1 << (_la - 492)) & ((1 << (SpeakQlParser.MAX_ROWS - 492)) | (1 << (SpeakQlParser.MIN_ROWS - 492)) | (1 << (SpeakQlParser.NODEGROUP - 492)))) != 0) or _la==SpeakQlParser.STORAGE or _la==SpeakQlParser.TABLESPACE:
                    self.state = 2052
                    self.partitionOption()
                    self.state = 2057
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LR_BRACKET:
                    self.state = 2058
                    self.leftParen()
                    self.state = 2059
                    self.subpartitionDefinition()
                    self.state = 2064
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SpeakQlParser.COMMA:
                        self.state = 2060
                        self.match(SpeakQlParser.COMMA)
                        self.state = 2061
                        self.subpartitionDefinition()
                        self.state = 2066
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2067
                    self.rightParen()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinerAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(SpeakQlParser.ConstantContext,0)


        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def MAXVALUE(self):
            return self.getToken(SpeakQlParser.MAXVALUE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_partitionDefinerAtom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinerAtom" ):
                listener.enterPartitionDefinerAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinerAtom" ):
                listener.exitPartitionDefinerAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionDefinerAtom" ):
                return visitor.visitPartitionDefinerAtom(self)
            else:
                return visitor.visitChildren(self)




    def partitionDefinerAtom(self):

        localctx = SpeakQlParser.PartitionDefinerAtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_partitionDefinerAtom)
        try:
            self.state = 2076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2073
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2074
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2075
                self.match(SpeakQlParser.MAXVALUE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinerVectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def partitionDefinerAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PartitionDefinerAtomContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PartitionDefinerAtomContext,i)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_partitionDefinerVector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinerVector" ):
                listener.enterPartitionDefinerVector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinerVector" ):
                listener.exitPartitionDefinerVector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionDefinerVector" ):
                return visitor.visitPartitionDefinerVector(self)
            else:
                return visitor.visitChildren(self)




    def partitionDefinerVector(self):

        localctx = SpeakQlParser.PartitionDefinerVectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_partitionDefinerVector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2078
            self.leftParen()
            self.state = 2079
            self.partitionDefinerAtom()
            self.state = 2082 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2080
                self.match(SpeakQlParser.COMMA)
                self.state = 2081
                self.partitionDefinerAtom()
                self.state = 2084 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SpeakQlParser.COMMA):
                    break

            self.state = 2086
            self.rightParen()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubpartitionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(SpeakQlParser.SUBPARTITION, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PartitionOptionContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_subpartitionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubpartitionDefinition" ):
                listener.enterSubpartitionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubpartitionDefinition" ):
                listener.exitSubpartitionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubpartitionDefinition" ):
                return visitor.visitSubpartitionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def subpartitionDefinition(self):

        localctx = SpeakQlParser.SubpartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_subpartitionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2088
            self.match(SpeakQlParser.SUBPARTITION)
            self.state = 2089
            self.uid()
            self.state = 2093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.INDEX or ((((_la - 367)) & ~0x3f) == 0 and ((1 << (_la - 367)) & ((1 << (SpeakQlParser.COMMENT - 367)) | (1 << (SpeakQlParser.DATA - 367)) | (1 << (SpeakQlParser.ENGINE - 367)))) != 0) or ((((_la - 492)) & ~0x3f) == 0 and ((1 << (_la - 492)) & ((1 << (SpeakQlParser.MAX_ROWS - 492)) | (1 << (SpeakQlParser.MIN_ROWS - 492)) | (1 << (SpeakQlParser.NODEGROUP - 492)))) != 0) or _la==SpeakQlParser.STORAGE or _la==SpeakQlParser.TABLESPACE:
                self.state = 2090
                self.partitionOption()
                self.state = 2095
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_partitionOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionOptionCommentContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PartitionOptionContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SpeakQlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionComment" ):
                listener.enterPartitionOptionComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionComment" ):
                listener.exitPartitionOptionComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOptionComment" ):
                return visitor.visitPartitionOptionComment(self)
            else:
                return visitor.visitChildren(self)


    class PartitionOptionNodeGroupContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PartitionOptionContext
            super().__init__(parser)
            self.nodegroup = None # UidContext
            self.copyFrom(ctx)

        def NODEGROUP(self):
            return self.getToken(SpeakQlParser.NODEGROUP, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionNodeGroup" ):
                listener.enterPartitionOptionNodeGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionNodeGroup" ):
                listener.exitPartitionOptionNodeGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOptionNodeGroup" ):
                return visitor.visitPartitionOptionNodeGroup(self)
            else:
                return visitor.visitChildren(self)


    class PartitionOptionIndexDirectoryContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PartitionOptionContext
            super().__init__(parser)
            self.indexDirectory = None # Token
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)
        def DIRECTORY(self):
            return self.getToken(SpeakQlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionIndexDirectory" ):
                listener.enterPartitionOptionIndexDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionIndexDirectory" ):
                listener.exitPartitionOptionIndexDirectory(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOptionIndexDirectory" ):
                return visitor.visitPartitionOptionIndexDirectory(self)
            else:
                return visitor.visitChildren(self)


    class PartitionOptionMaxRowsContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PartitionOptionContext
            super().__init__(parser)
            self.maxRows = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def MAX_ROWS(self):
            return self.getToken(SpeakQlParser.MAX_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionMaxRows" ):
                listener.enterPartitionOptionMaxRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionMaxRows" ):
                listener.exitPartitionOptionMaxRows(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOptionMaxRows" ):
                return visitor.visitPartitionOptionMaxRows(self)
            else:
                return visitor.visitChildren(self)


    class PartitionOptionTablespaceContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PartitionOptionContext
            super().__init__(parser)
            self.tablespace = None # UidContext
            self.copyFrom(ctx)

        def TABLESPACE(self):
            return self.getToken(SpeakQlParser.TABLESPACE, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionTablespace" ):
                listener.enterPartitionOptionTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionTablespace" ):
                listener.exitPartitionOptionTablespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOptionTablespace" ):
                return visitor.visitPartitionOptionTablespace(self)
            else:
                return visitor.visitChildren(self)


    class PartitionOptionEngineContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PartitionOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENGINE(self):
            return self.getToken(SpeakQlParser.ENGINE, 0)
        def engineName(self):
            return self.getTypedRuleContext(SpeakQlParser.EngineNameContext,0)

        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)
        def STORAGE(self):
            return self.getToken(SpeakQlParser.STORAGE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionEngine" ):
                listener.enterPartitionOptionEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionEngine" ):
                listener.exitPartitionOptionEngine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOptionEngine" ):
                return visitor.visitPartitionOptionEngine(self)
            else:
                return visitor.visitChildren(self)


    class PartitionOptionMinRowsContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PartitionOptionContext
            super().__init__(parser)
            self.minRows = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def MIN_ROWS(self):
            return self.getToken(SpeakQlParser.MIN_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionMinRows" ):
                listener.enterPartitionOptionMinRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionMinRows" ):
                listener.exitPartitionOptionMinRows(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOptionMinRows" ):
                return visitor.visitPartitionOptionMinRows(self)
            else:
                return visitor.visitChildren(self)


    class PartitionOptionDataDirectoryContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PartitionOptionContext
            super().__init__(parser)
            self.dataDirectory = None # Token
            self.copyFrom(ctx)

        def DATA(self):
            return self.getToken(SpeakQlParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(SpeakQlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionDataDirectory" ):
                listener.enterPartitionOptionDataDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionDataDirectory" ):
                listener.exitPartitionOptionDataDirectory(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOptionDataDirectory" ):
                return visitor.visitPartitionOptionDataDirectory(self)
            else:
                return visitor.visitChildren(self)



    def partitionOption(self):

        localctx = SpeakQlParser.PartitionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_partitionOption)
        self._la = 0 # Token type
        try:
            self.state = 2144
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.DEFAULT, SpeakQlParser.ENGINE, SpeakQlParser.STORAGE]:
                localctx = SpeakQlParser.PartitionOptionEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.DEFAULT:
                    self.state = 2096
                    self.match(SpeakQlParser.DEFAULT)


                self.state = 2100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.STORAGE:
                    self.state = 2099
                    self.match(SpeakQlParser.STORAGE)


                self.state = 2102
                self.match(SpeakQlParser.ENGINE)
                self.state = 2104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 2103
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 2106
                self.engineName()
                pass
            elif token in [SpeakQlParser.COMMENT]:
                localctx = SpeakQlParser.PartitionOptionCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2107
                self.match(SpeakQlParser.COMMENT)
                self.state = 2109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 2108
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 2111
                localctx.comment = self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.DATA]:
                localctx = SpeakQlParser.PartitionOptionDataDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2112
                self.match(SpeakQlParser.DATA)
                self.state = 2113
                self.match(SpeakQlParser.DIRECTORY)
                self.state = 2115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 2114
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 2117
                localctx.dataDirectory = self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.INDEX]:
                localctx = SpeakQlParser.PartitionOptionIndexDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2118
                self.match(SpeakQlParser.INDEX)
                self.state = 2119
                self.match(SpeakQlParser.DIRECTORY)
                self.state = 2121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 2120
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 2123
                localctx.indexDirectory = self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.MAX_ROWS]:
                localctx = SpeakQlParser.PartitionOptionMaxRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2124
                self.match(SpeakQlParser.MAX_ROWS)
                self.state = 2126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 2125
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 2128
                localctx.maxRows = self.decimalLiteral()
                pass
            elif token in [SpeakQlParser.MIN_ROWS]:
                localctx = SpeakQlParser.PartitionOptionMinRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2129
                self.match(SpeakQlParser.MIN_ROWS)
                self.state = 2131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 2130
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 2133
                localctx.minRows = self.decimalLiteral()
                pass
            elif token in [SpeakQlParser.TABLESPACE]:
                localctx = SpeakQlParser.PartitionOptionTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2134
                self.match(SpeakQlParser.TABLESPACE)
                self.state = 2136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 2135
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 2138
                localctx.tablespace = self.uid()
                pass
            elif token in [SpeakQlParser.NODEGROUP]:
                localctx = SpeakQlParser.PartitionOptionNodeGroupContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2139
                self.match(SpeakQlParser.NODEGROUP)
                self.state = 2141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 2140
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 2143
                localctx.nodegroup = self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_alterDatabase

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterUpgradeNameContext(AlterDatabaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterDatabaseContext
            super().__init__(parser)
            self.dbFormat = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SpeakQlParser.ALTER, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def UPGRADE(self):
            return self.getToken(SpeakQlParser.UPGRADE, 0)
        def DATA(self):
            return self.getToken(SpeakQlParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(SpeakQlParser.DIRECTORY, 0)
        def NAME(self):
            return self.getToken(SpeakQlParser.NAME, 0)
        def DATABASE(self):
            return self.getToken(SpeakQlParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(SpeakQlParser.SCHEMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUpgradeName" ):
                listener.enterAlterUpgradeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUpgradeName" ):
                listener.exitAlterUpgradeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterUpgradeName" ):
                return visitor.visitAlterUpgradeName(self)
            else:
                return visitor.visitChildren(self)


    class AlterSimpleDatabaseContext(AlterDatabaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterDatabaseContext
            super().__init__(parser)
            self.dbFormat = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SpeakQlParser.ALTER, 0)
        def DATABASE(self):
            return self.getToken(SpeakQlParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(SpeakQlParser.SCHEMA, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def createDatabaseOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.CreateDatabaseOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterSimpleDatabase" ):
                listener.enterAlterSimpleDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterSimpleDatabase" ):
                listener.exitAlterSimpleDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterSimpleDatabase" ):
                return visitor.visitAlterSimpleDatabase(self)
            else:
                return visitor.visitChildren(self)



    def alterDatabase(self):

        localctx = SpeakQlParser.AlterDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_alterDatabase)
        self._la = 0 # Token type
        try:
            self.state = 2164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.AlterSimpleDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2146
                self.match(SpeakQlParser.ALTER)
                self.state = 2147
                localctx.dbFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.DATABASE or _la==SpeakQlParser.SCHEMA):
                    localctx.dbFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2149
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                if la_ == 1:
                    self.state = 2148
                    self.uid()


                self.state = 2152 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2151
                    self.createDatabaseOption()
                    self.state = 2154 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SpeakQlParser.CHARACTER) | (1 << SpeakQlParser.COLLATE) | (1 << SpeakQlParser.DEFAULT))) != 0) or _la==SpeakQlParser.CHARSET):
                        break

                pass

            elif la_ == 2:
                localctx = SpeakQlParser.AlterUpgradeNameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2156
                self.match(SpeakQlParser.ALTER)
                self.state = 2157
                localctx.dbFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.DATABASE or _la==SpeakQlParser.SCHEMA):
                    localctx.dbFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2158
                self.uid()
                self.state = 2159
                self.match(SpeakQlParser.UPGRADE)
                self.state = 2160
                self.match(SpeakQlParser.DATA)
                self.state = 2161
                self.match(SpeakQlParser.DIRECTORY)
                self.state = 2162
                self.match(SpeakQlParser.NAME)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SpeakQlParser.ALTER, 0)

        def EVENT(self):
            return self.getToken(SpeakQlParser.EVENT, 0)

        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.FullIdContext,i)


        def ownerStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.OwnerStatementContext,0)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.ON)
            else:
                return self.getToken(SpeakQlParser.ON, i)

        def SCHEDULE(self):
            return self.getToken(SpeakQlParser.SCHEDULE, 0)

        def scheduleExpression(self):
            return self.getTypedRuleContext(SpeakQlParser.ScheduleExpressionContext,0)


        def COMPLETION(self):
            return self.getToken(SpeakQlParser.COMPLETION, 0)

        def PRESERVE(self):
            return self.getToken(SpeakQlParser.PRESERVE, 0)

        def RENAME(self):
            return self.getToken(SpeakQlParser.RENAME, 0)

        def TO(self):
            return self.getToken(SpeakQlParser.TO, 0)

        def enableType(self):
            return self.getTypedRuleContext(SpeakQlParser.EnableTypeContext,0)


        def COMMENT(self):
            return self.getToken(SpeakQlParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def DO(self):
            return self.getToken(SpeakQlParser.DO, 0)

        def routineBody(self):
            return self.getTypedRuleContext(SpeakQlParser.RoutineBodyContext,0)


        def NOT(self):
            return self.getToken(SpeakQlParser.NOT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_alterEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterEvent" ):
                listener.enterAlterEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterEvent" ):
                listener.exitAlterEvent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterEvent" ):
                return visitor.visitAlterEvent(self)
            else:
                return visitor.visitChildren(self)




    def alterEvent(self):

        localctx = SpeakQlParser.AlterEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_alterEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2166
            self.match(SpeakQlParser.ALTER)
            self.state = 2168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.DEFINER:
                self.state = 2167
                self.ownerStatement()


            self.state = 2170
            self.match(SpeakQlParser.EVENT)
            self.state = 2171
            self.fullId()
            self.state = 2175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.state = 2172
                self.match(SpeakQlParser.ON)
                self.state = 2173
                self.match(SpeakQlParser.SCHEDULE)
                self.state = 2174
                self.scheduleExpression()


            self.state = 2183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.ON:
                self.state = 2177
                self.match(SpeakQlParser.ON)
                self.state = 2178
                self.match(SpeakQlParser.COMPLETION)
                self.state = 2180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.NOT:
                    self.state = 2179
                    self.match(SpeakQlParser.NOT)


                self.state = 2182
                self.match(SpeakQlParser.PRESERVE)


            self.state = 2188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.state = 2185
                self.match(SpeakQlParser.RENAME)
                self.state = 2186
                self.match(SpeakQlParser.TO)
                self.state = 2187
                self.fullId()


            self.state = 2191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.DISABLE or _la==SpeakQlParser.ENABLE:
                self.state = 2190
                self.enableType()


            self.state = 2195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.COMMENT:
                self.state = 2193
                self.match(SpeakQlParser.COMMENT)
                self.state = 2194
                self.match(SpeakQlParser.STRING_LITERAL)


            self.state = 2199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.state = 2197
                self.match(SpeakQlParser.DO)
                self.state = 2198
                self.routineBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SpeakQlParser.ALTER, 0)

        def FUNCTION(self):
            return self.getToken(SpeakQlParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(SpeakQlParser.FullIdContext,0)


        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_alterFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterFunction" ):
                listener.enterAlterFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterFunction" ):
                listener.exitAlterFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterFunction" ):
                return visitor.visitAlterFunction(self)
            else:
                return visitor.visitChildren(self)




    def alterFunction(self):

        localctx = SpeakQlParser.AlterFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_alterFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2201
            self.match(SpeakQlParser.ALTER)
            self.state = 2202
            self.match(SpeakQlParser.FUNCTION)
            self.state = 2203
            self.fullId()
            self.state = 2207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.DETERMINISTIC or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & ((1 << (SpeakQlParser.MODIFIES - 119)) | (1 << (SpeakQlParser.NOT - 119)) | (1 << (SpeakQlParser.READS - 119)) | (1 << (SpeakQlParser.SQL - 119)))) != 0) or _la==SpeakQlParser.COMMENT or _la==SpeakQlParser.CONTAINS or _la==SpeakQlParser.LANGUAGE or _la==SpeakQlParser.NO:
                self.state = 2204
                self.routineOption()
                self.state = 2209
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterInstanceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SpeakQlParser.ALTER, 0)

        def INSTANCE(self):
            return self.getToken(SpeakQlParser.INSTANCE, 0)

        def ROTATE(self):
            return self.getToken(SpeakQlParser.ROTATE, 0)

        def INNODB(self):
            return self.getToken(SpeakQlParser.INNODB, 0)

        def MASTER(self):
            return self.getToken(SpeakQlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_alterInstance

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterInstance" ):
                listener.enterAlterInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterInstance" ):
                listener.exitAlterInstance(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterInstance" ):
                return visitor.visitAlterInstance(self)
            else:
                return visitor.visitChildren(self)




    def alterInstance(self):

        localctx = SpeakQlParser.AlterInstanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_alterInstance)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2210
            self.match(SpeakQlParser.ALTER)
            self.state = 2211
            self.match(SpeakQlParser.INSTANCE)
            self.state = 2212
            self.match(SpeakQlParser.ROTATE)
            self.state = 2213
            self.match(SpeakQlParser.INNODB)
            self.state = 2214
            self.match(SpeakQlParser.MASTER)
            self.state = 2215
            self.match(SpeakQlParser.KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLogfileGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SpeakQlParser.ALTER, 0)

        def LOGFILE(self):
            return self.getToken(SpeakQlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(SpeakQlParser.GROUP, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def ADD(self):
            return self.getToken(SpeakQlParser.ADD, 0)

        def UNDOFILE(self):
            return self.getToken(SpeakQlParser.UNDOFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def ENGINE(self):
            return self.getToken(SpeakQlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(SpeakQlParser.EngineNameContext,0)


        def INITIAL_SIZE(self):
            return self.getToken(SpeakQlParser.INITIAL_SIZE, 0)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.FileSizeLiteralContext,0)


        def WAIT(self):
            return self.getToken(SpeakQlParser.WAIT, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(SpeakQlParser.EQUAL_SYMBOL, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_alterLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLogfileGroup" ):
                listener.enterAlterLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLogfileGroup" ):
                listener.exitAlterLogfileGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterLogfileGroup" ):
                return visitor.visitAlterLogfileGroup(self)
            else:
                return visitor.visitChildren(self)




    def alterLogfileGroup(self):

        localctx = SpeakQlParser.AlterLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_alterLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2217
            self.match(SpeakQlParser.ALTER)
            self.state = 2218
            self.match(SpeakQlParser.LOGFILE)
            self.state = 2219
            self.match(SpeakQlParser.GROUP)
            self.state = 2220
            self.uid()
            self.state = 2221
            self.match(SpeakQlParser.ADD)
            self.state = 2222
            self.match(SpeakQlParser.UNDOFILE)
            self.state = 2223
            self.match(SpeakQlParser.STRING_LITERAL)
            self.state = 2229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.INITIAL_SIZE:
                self.state = 2224
                self.match(SpeakQlParser.INITIAL_SIZE)
                self.state = 2226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 2225
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 2228
                self.fileSizeLiteral()


            self.state = 2232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.WAIT:
                self.state = 2231
                self.match(SpeakQlParser.WAIT)


            self.state = 2234
            self.match(SpeakQlParser.ENGINE)
            self.state = 2236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.EQUAL_SYMBOL:
                self.state = 2235
                self.match(SpeakQlParser.EQUAL_SYMBOL)


            self.state = 2238
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SpeakQlParser.ALTER, 0)

        def PROCEDURE(self):
            return self.getToken(SpeakQlParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(SpeakQlParser.FullIdContext,0)


        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_alterProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterProcedure" ):
                listener.enterAlterProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterProcedure" ):
                listener.exitAlterProcedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterProcedure" ):
                return visitor.visitAlterProcedure(self)
            else:
                return visitor.visitChildren(self)




    def alterProcedure(self):

        localctx = SpeakQlParser.AlterProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_alterProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2240
            self.match(SpeakQlParser.ALTER)
            self.state = 2241
            self.match(SpeakQlParser.PROCEDURE)
            self.state = 2242
            self.fullId()
            self.state = 2246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.DETERMINISTIC or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & ((1 << (SpeakQlParser.MODIFIES - 119)) | (1 << (SpeakQlParser.NOT - 119)) | (1 << (SpeakQlParser.READS - 119)) | (1 << (SpeakQlParser.SQL - 119)))) != 0) or _la==SpeakQlParser.COMMENT or _la==SpeakQlParser.CONTAINS or _la==SpeakQlParser.LANGUAGE or _la==SpeakQlParser.NO:
                self.state = 2243
                self.routineOption()
                self.state = 2248
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SpeakQlParser.ALTER, 0)

        def SERVER(self):
            return self.getToken(SpeakQlParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def OPTIONS(self):
            return self.getToken(SpeakQlParser.OPTIONS, 0)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def serverOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ServerOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ServerOptionContext,i)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_alterServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterServer" ):
                listener.enterAlterServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterServer" ):
                listener.exitAlterServer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterServer" ):
                return visitor.visitAlterServer(self)
            else:
                return visitor.visitChildren(self)




    def alterServer(self):

        localctx = SpeakQlParser.AlterServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_alterServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2249
            self.match(SpeakQlParser.ALTER)
            self.state = 2250
            self.match(SpeakQlParser.SERVER)
            self.state = 2251
            self.uid()
            self.state = 2252
            self.match(SpeakQlParser.OPTIONS)
            self.state = 2253
            self.leftParen()
            self.state = 2254
            self.serverOption()
            self.state = 2259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 2255
                self.match(SpeakQlParser.COMMA)
                self.state = 2256
                self.serverOption()
                self.state = 2261
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2262
            self.rightParen()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.intimeAction = None # Token

        def ALTER(self):
            return self.getToken(SpeakQlParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def IGNORE(self):
            return self.getToken(SpeakQlParser.IGNORE, 0)

        def alterSpecification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.AlterSpecificationContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.AlterSpecificationContext,i)


        def partitionDefinitions(self):
            return self.getTypedRuleContext(SpeakQlParser.PartitionDefinitionsContext,0)


        def ONLINE(self):
            return self.getToken(SpeakQlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(SpeakQlParser.OFFLINE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_alterTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTable" ):
                listener.enterAlterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTable" ):
                listener.exitAlterTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTable" ):
                return visitor.visitAlterTable(self)
            else:
                return visitor.visitChildren(self)




    def alterTable(self):

        localctx = SpeakQlParser.AlterTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_alterTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2264
            self.match(SpeakQlParser.ALTER)
            self.state = 2266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.OFFLINE or _la==SpeakQlParser.ONLINE:
                self.state = 2265
                localctx.intimeAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.OFFLINE or _la==SpeakQlParser.ONLINE):
                    localctx.intimeAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IGNORE:
                self.state = 2268
                self.match(SpeakQlParser.IGNORE)


            self.state = 2271
            self.match(SpeakQlParser.TABLE)
            self.state = 2272
            self.tableName()
            self.state = 2281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.state = 2273
                self.alterSpecification()
                self.state = 2278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 2274
                    self.match(SpeakQlParser.COMMA)
                    self.state = 2275
                    self.alterSpecification()
                    self.state = 2280
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.PARTITION:
                self.state = 2283
                self.partitionDefinitions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.objectAction = None # Token

        def ALTER(self):
            return self.getToken(SpeakQlParser.ALTER, 0)

        def TABLESPACE(self):
            return self.getToken(SpeakQlParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def DATAFILE(self):
            return self.getToken(SpeakQlParser.DATAFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def ENGINE(self):
            return self.getToken(SpeakQlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(SpeakQlParser.EngineNameContext,0)


        def ADD(self):
            return self.getToken(SpeakQlParser.ADD, 0)

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)

        def INITIAL_SIZE(self):
            return self.getToken(SpeakQlParser.INITIAL_SIZE, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(SpeakQlParser.EQUAL_SYMBOL, i)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.FileSizeLiteralContext,0)


        def WAIT(self):
            return self.getToken(SpeakQlParser.WAIT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_alterTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTablespace" ):
                listener.enterAlterTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTablespace" ):
                listener.exitAlterTablespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTablespace" ):
                return visitor.visitAlterTablespace(self)
            else:
                return visitor.visitChildren(self)




    def alterTablespace(self):

        localctx = SpeakQlParser.AlterTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_alterTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2286
            self.match(SpeakQlParser.ALTER)
            self.state = 2287
            self.match(SpeakQlParser.TABLESPACE)
            self.state = 2288
            self.uid()
            self.state = 2289
            localctx.objectAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.ADD or _la==SpeakQlParser.DROP):
                localctx.objectAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2290
            self.match(SpeakQlParser.DATAFILE)
            self.state = 2291
            self.match(SpeakQlParser.STRING_LITERAL)
            self.state = 2295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.INITIAL_SIZE:
                self.state = 2292
                self.match(SpeakQlParser.INITIAL_SIZE)
                self.state = 2293
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 2294
                self.fileSizeLiteral()


            self.state = 2298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.WAIT:
                self.state = 2297
                self.match(SpeakQlParser.WAIT)


            self.state = 2300
            self.match(SpeakQlParser.ENGINE)
            self.state = 2302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.EQUAL_SYMBOL:
                self.state = 2301
                self.match(SpeakQlParser.EQUAL_SYMBOL)


            self.state = 2304
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algType = None # Token
            self.secContext = None # Token
            self.checkOpt = None # Token

        def ALTER(self):
            return self.getToken(SpeakQlParser.ALTER, 0)

        def VIEW(self):
            return self.getToken(SpeakQlParser.VIEW, 0)

        def fullId(self):
            return self.getTypedRuleContext(SpeakQlParser.FullIdContext,0)


        def AS(self):
            return self.getToken(SpeakQlParser.AS, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectStatementContext,0)


        def ALGORITHM(self):
            return self.getToken(SpeakQlParser.ALGORITHM, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.OwnerStatementContext,0)


        def SQL(self):
            return self.getToken(SpeakQlParser.SQL, 0)

        def SECURITY(self):
            return self.getToken(SpeakQlParser.SECURITY, 0)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def WITH(self):
            return self.getToken(SpeakQlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(SpeakQlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(SpeakQlParser.OPTION, 0)

        def UNDEFINED(self):
            return self.getToken(SpeakQlParser.UNDEFINED, 0)

        def MERGE(self):
            return self.getToken(SpeakQlParser.MERGE, 0)

        def TEMPTABLE(self):
            return self.getToken(SpeakQlParser.TEMPTABLE, 0)

        def DEFINER(self):
            return self.getToken(SpeakQlParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(SpeakQlParser.INVOKER, 0)

        def CASCADED(self):
            return self.getToken(SpeakQlParser.CASCADED, 0)

        def LOCAL(self):
            return self.getToken(SpeakQlParser.LOCAL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_alterView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterView" ):
                listener.enterAlterView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterView" ):
                listener.exitAlterView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterView" ):
                return visitor.visitAlterView(self)
            else:
                return visitor.visitChildren(self)




    def alterView(self):

        localctx = SpeakQlParser.AlterViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_alterView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2306
            self.match(SpeakQlParser.ALTER)
            self.state = 2310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.ALGORITHM:
                self.state = 2307
                self.match(SpeakQlParser.ALGORITHM)
                self.state = 2308
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 2309
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.MERGE or _la==SpeakQlParser.TEMPTABLE or _la==SpeakQlParser.UNDEFINED):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.DEFINER:
                self.state = 2312
                self.ownerStatement()


            self.state = 2318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.SQL:
                self.state = 2315
                self.match(SpeakQlParser.SQL)
                self.state = 2316
                self.match(SpeakQlParser.SECURITY)
                self.state = 2317
                localctx.secContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.DEFINER or _la==SpeakQlParser.INVOKER):
                    localctx.secContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2320
            self.match(SpeakQlParser.VIEW)
            self.state = 2321
            self.fullId()
            self.state = 2326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.LR_BRACKET:
                self.state = 2322
                self.leftParen()
                self.state = 2323
                self.uidList()
                self.state = 2324
                self.rightParen()


            self.state = 2328
            self.match(SpeakQlParser.AS)
            self.state = 2329
            self.selectStatement()
            self.state = 2336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.WITH:
                self.state = 2330
                self.match(SpeakQlParser.WITH)
                self.state = 2332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.CASCADED or _la==SpeakQlParser.LOCAL:
                    self.state = 2331
                    localctx.checkOpt = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.CASCADED or _la==SpeakQlParser.LOCAL):
                        localctx.checkOpt = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2334
                self.match(SpeakQlParser.CHECK)
                self.state = 2335
                self.match(SpeakQlParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_alterSpecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterByDisableKeysContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISABLE(self):
            return self.getToken(SpeakQlParser.DISABLE, 0)
        def KEYS(self):
            return self.getToken(SpeakQlParser.KEYS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDisableKeys" ):
                listener.enterAlterByDisableKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDisableKeys" ):
                listener.exitAlterByDisableKeys(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByDisableKeys" ):
                return visitor.visitAlterByDisableKeys(self)
            else:
                return visitor.visitChildren(self)


    class AlterByDefaultCharsetContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHARACTER(self):
            return self.getToken(SpeakQlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)
        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(SpeakQlParser.EQUAL_SYMBOL, i)
        def charsetName(self):
            return self.getTypedRuleContext(SpeakQlParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)
        def COLLATE(self):
            return self.getToken(SpeakQlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(SpeakQlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDefaultCharset" ):
                listener.enterAlterByDefaultCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDefaultCharset" ):
                listener.exitAlterByDefaultCharset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByDefaultCharset" ):
                return visitor.visitAlterByDefaultCharset(self)
            else:
                return visitor.visitChildren(self)


    class AlterByRenameColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.oldColumn = None # UidContext
            self.newColumn = None # UidContext
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(SpeakQlParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(SpeakQlParser.COLUMN, 0)
        def TO(self):
            return self.getToken(SpeakQlParser.TO, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRenameColumn" ):
                listener.enterAlterByRenameColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRenameColumn" ):
                listener.exitAlterByRenameColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByRenameColumn" ):
                return visitor.visitAlterByRenameColumn(self)
            else:
                return visitor.visitChildren(self)


    class AlterByConvertCharsetContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(SpeakQlParser.CONVERT, 0)
        def TO(self):
            return self.getToken(SpeakQlParser.TO, 0)
        def CHARACTER(self):
            return self.getToken(SpeakQlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(SpeakQlParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(SpeakQlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(SpeakQlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByConvertCharset" ):
                listener.enterAlterByConvertCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByConvertCharset" ):
                listener.exitAlterByConvertCharset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByConvertCharset" ):
                return visitor.visitAlterByConvertCharset(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAddPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(SpeakQlParser.ADD, 0)
        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PartitionDefinitionContext,i)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddPartition" ):
                listener.enterAlterByAddPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddPartition" ):
                listener.exitAlterByAddPartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAddPartition" ):
                return visitor.visitAlterByAddPartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAddForeignKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexName = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(SpeakQlParser.ADD, 0)
        def FOREIGN(self):
            return self.getToken(SpeakQlParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexColumnNamesContext,0)

        def referenceDefinition(self):
            return self.getTypedRuleContext(SpeakQlParser.ReferenceDefinitionContext,0)

        def CONSTRAINT(self):
            return self.getToken(SpeakQlParser.CONSTRAINT, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddForeignKey" ):
                listener.enterAlterByAddForeignKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddForeignKey" ):
                listener.exitAlterByAddForeignKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAddForeignKey" ):
                return visitor.visitAlterByAddForeignKey(self)
            else:
                return visitor.visitChildren(self)


    class AlterByRenameIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(SpeakQlParser.RENAME, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)

        def TO(self):
            return self.getToken(SpeakQlParser.TO, 0)
        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRenameIndex" ):
                listener.enterAlterByRenameIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRenameIndex" ):
                listener.exitAlterByRenameIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByRenameIndex" ):
                return visitor.visitAlterByRenameIndex(self)
            else:
                return visitor.visitChildren(self)


    class AlterByRemovePartitioningContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REMOVE(self):
            return self.getToken(SpeakQlParser.REMOVE, 0)
        def PARTITIONING(self):
            return self.getToken(SpeakQlParser.PARTITIONING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRemovePartitioning" ):
                listener.enterAlterByRemovePartitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRemovePartitioning" ):
                listener.exitAlterByRemovePartitioning(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByRemovePartitioning" ):
                return visitor.visitAlterByRemovePartitioning(self)
            else:
                return visitor.visitChildren(self)


    class AlterByRenameContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.renameFormat = None # Token
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(SpeakQlParser.RENAME, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def fullId(self):
            return self.getTypedRuleContext(SpeakQlParser.FullIdContext,0)

        def TO(self):
            return self.getToken(SpeakQlParser.TO, 0)
        def AS(self):
            return self.getToken(SpeakQlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRename" ):
                listener.enterAlterByRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRename" ):
                listener.exitAlterByRename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByRename" ):
                return visitor.visitAlterByRename(self)
            else:
                return visitor.visitChildren(self)


    class AlterByOptimizePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTIMIZE(self):
            return self.getToken(SpeakQlParser.OPTIMIZE, 0)
        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByOptimizePartition" ):
                listener.enterAlterByOptimizePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByOptimizePartition" ):
                listener.exitAlterByOptimizePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByOptimizePartition" ):
                return visitor.visitAlterByOptimizePartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByImportTablespaceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(SpeakQlParser.IMPORT, 0)
        def TABLESPACE(self):
            return self.getToken(SpeakQlParser.TABLESPACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByImportTablespace" ):
                listener.enterAlterByImportTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByImportTablespace" ):
                listener.exitAlterByImportTablespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByImportTablespace" ):
                return visitor.visitAlterByImportTablespace(self)
            else:
                return visitor.visitChildren(self)


    class AlterByCoalescePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COALESCE(self):
            return self.getToken(SpeakQlParser.COALESCE, 0)
        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByCoalescePartition" ):
                listener.enterAlterByCoalescePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByCoalescePartition" ):
                listener.exitAlterByCoalescePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByCoalescePartition" ):
                return visitor.visitAlterByCoalescePartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByDropConstraintCheckContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def CONSTRAINT(self):
            return self.getToken(SpeakQlParser.CONSTRAINT, 0)
        def CHECK(self):
            return self.getToken(SpeakQlParser.CHECK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropConstraintCheck" ):
                listener.enterAlterByDropConstraintCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropConstraintCheck" ):
                listener.exitAlterByDropConstraintCheck(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByDropConstraintCheck" ):
                return visitor.visitAlterByDropConstraintCheck(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAddColumnsContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(SpeakQlParser.ADD, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)

        def columnDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ColumnDefinitionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ColumnDefinitionContext,i)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def COLUMN(self):
            return self.getToken(SpeakQlParser.COLUMN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddColumns" ):
                listener.enterAlterByAddColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddColumns" ):
                listener.exitAlterByAddColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAddColumns" ):
                return visitor.visitAlterByAddColumns(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAlterIndexVisibilityContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SpeakQlParser.ALTER, 0)
        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def VISIBLE(self):
            return self.getToken(SpeakQlParser.VISIBLE, 0)
        def INVISIBLE(self):
            return self.getToken(SpeakQlParser.INVISIBLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAlterIndexVisibility" ):
                listener.enterAlterByAlterIndexVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAlterIndexVisibility" ):
                listener.exitAlterByAlterIndexVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAlterIndexVisibility" ):
                return visitor.visitAlterByAlterIndexVisibility(self)
            else:
                return visitor.visitChildren(self)


    class AlterByDropForeignKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)
        def FOREIGN(self):
            return self.getToken(SpeakQlParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropForeignKey" ):
                listener.enterAlterByDropForeignKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropForeignKey" ):
                listener.exitAlterByDropForeignKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByDropForeignKey" ):
                return visitor.visitAlterByDropForeignKey(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAddCheckTableConstraintContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(SpeakQlParser.ADD, 0)
        def CHECK(self):
            return self.getToken(SpeakQlParser.CHECK, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def CONSTRAINT(self):
            return self.getToken(SpeakQlParser.CONSTRAINT, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddCheckTableConstraint" ):
                listener.enterAlterByAddCheckTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddCheckTableConstraint" ):
                listener.exitAlterByAddCheckTableConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAddCheckTableConstraint" ):
                return visitor.visitAlterByAddCheckTableConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AlterByRebuildPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REBUILD(self):
            return self.getToken(SpeakQlParser.REBUILD, 0)
        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRebuildPartition" ):
                listener.enterAlterByRebuildPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRebuildPartition" ):
                listener.exitAlterByRebuildPartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByRebuildPartition" ):
                return visitor.visitAlterByRebuildPartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByUpgradePartitioningContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPGRADE(self):
            return self.getToken(SpeakQlParser.UPGRADE, 0)
        def PARTITIONING(self):
            return self.getToken(SpeakQlParser.PARTITIONING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByUpgradePartitioning" ):
                listener.enterAlterByUpgradePartitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByUpgradePartitioning" ):
                listener.exitAlterByUpgradePartitioning(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByUpgradePartitioning" ):
                return visitor.visitAlterByUpgradePartitioning(self)
            else:
                return visitor.visitChildren(self)


    class AlterByRepairPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPAIR(self):
            return self.getToken(SpeakQlParser.REPAIR, 0)
        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRepairPartition" ):
                listener.enterAlterByRepairPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRepairPartition" ):
                listener.exitAlterByRepairPartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByRepairPartition" ):
                return visitor.visitAlterByRepairPartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByExchangePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.validationFormat = None # Token
            self.copyFrom(ctx)

        def EXCHANGE(self):
            return self.getToken(SpeakQlParser.EXCHANGE, 0)
        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.WITH)
            else:
                return self.getToken(SpeakQlParser.WITH, i)
        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)

        def VALIDATION(self):
            return self.getToken(SpeakQlParser.VALIDATION, 0)
        def WITHOUT(self):
            return self.getToken(SpeakQlParser.WITHOUT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByExchangePartition" ):
                listener.enterAlterByExchangePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByExchangePartition" ):
                listener.exitAlterByExchangePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByExchangePartition" ):
                return visitor.visitAlterByExchangePartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAddIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(SpeakQlParser.ADD, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexColumnNamesContext,0)

        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def indexType(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.IndexOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddIndex" ):
                listener.enterAlterByAddIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddIndex" ):
                listener.exitAlterByAddIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAddIndex" ):
                return visitor.visitAlterByAddIndex(self)
            else:
                return visitor.visitChildren(self)


    class AlterByDropColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def COLUMN(self):
            return self.getToken(SpeakQlParser.COLUMN, 0)
        def RESTRICT(self):
            return self.getToken(SpeakQlParser.RESTRICT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropColumn" ):
                listener.enterAlterByDropColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropColumn" ):
                listener.exitAlterByDropColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByDropColumn" ):
                return visitor.visitAlterByDropColumn(self)
            else:
                return visitor.visitChildren(self)


    class AlterByImportPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(SpeakQlParser.IMPORT, 0)
        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)
        def TABLESPACE(self):
            return self.getToken(SpeakQlParser.TABLESPACE, 0)
        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByImportPartition" ):
                listener.enterAlterByImportPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByImportPartition" ):
                listener.exitAlterByImportPartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByImportPartition" ):
                return visitor.visitAlterByImportPartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByChangeDefaultContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SpeakQlParser.ALTER, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)
        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)
        def defaultValue(self):
            return self.getTypedRuleContext(SpeakQlParser.DefaultValueContext,0)

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(SpeakQlParser.COLUMN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByChangeDefault" ):
                listener.enterAlterByChangeDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByChangeDefault" ):
                listener.exitAlterByChangeDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByChangeDefault" ):
                return visitor.visitAlterByChangeDefault(self)
            else:
                return visitor.visitChildren(self)


    class AlterByForceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FORCE(self):
            return self.getToken(SpeakQlParser.FORCE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByForce" ):
                listener.enterAlterByForce(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByForce" ):
                listener.exitAlterByForce(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByForce" ):
                return visitor.visitAlterByForce(self)
            else:
                return visitor.visitChildren(self)


    class AlterByDropPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)
        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropPartition" ):
                listener.enterAlterByDropPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropPartition" ):
                listener.exitAlterByDropPartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByDropPartition" ):
                return visitor.visitAlterByDropPartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAddSpecialIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.keyType = None # Token
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(SpeakQlParser.ADD, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexColumnNamesContext,0)

        def FULLTEXT(self):
            return self.getToken(SpeakQlParser.FULLTEXT, 0)
        def SPATIAL(self):
            return self.getToken(SpeakQlParser.SPATIAL, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.IndexOptionContext,i)

        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddSpecialIndex" ):
                listener.enterAlterByAddSpecialIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddSpecialIndex" ):
                listener.exitAlterByAddSpecialIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAddSpecialIndex" ):
                return visitor.visitAlterByAddSpecialIndex(self)
            else:
                return visitor.visitChildren(self)


    class AlterByModifyColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(SpeakQlParser.MODIFY, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)

        def columnDefinition(self):
            return self.getTypedRuleContext(SpeakQlParser.ColumnDefinitionContext,0)

        def COLUMN(self):
            return self.getToken(SpeakQlParser.COLUMN, 0)
        def FIRST(self):
            return self.getToken(SpeakQlParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(SpeakQlParser.AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByModifyColumn" ):
                listener.enterAlterByModifyColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByModifyColumn" ):
                listener.exitAlterByModifyColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByModifyColumn" ):
                return visitor.visitAlterByModifyColumn(self)
            else:
                return visitor.visitChildren(self)


    class AlterByTableOptionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.TableOptionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByTableOption" ):
                listener.enterAlterByTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByTableOption" ):
                listener.exitAlterByTableOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByTableOption" ):
                return visitor.visitAlterByTableOption(self)
            else:
                return visitor.visitChildren(self)


    class AlterByDropPrimaryKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)
        def PRIMARY(self):
            return self.getToken(SpeakQlParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropPrimaryKey" ):
                listener.enterAlterByDropPrimaryKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropPrimaryKey" ):
                listener.exitAlterByDropPrimaryKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByDropPrimaryKey" ):
                return visitor.visitAlterByDropPrimaryKey(self)
            else:
                return visitor.visitChildren(self)


    class AlterByLockContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.lockType = None # Token
            self.copyFrom(ctx)

        def LOCK(self):
            return self.getToken(SpeakQlParser.LOCK, 0)
        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)
        def NONE(self):
            return self.getToken(SpeakQlParser.NONE, 0)
        def SHARED(self):
            return self.getToken(SpeakQlParser.SHARED, 0)
        def EXCLUSIVE(self):
            return self.getToken(SpeakQlParser.EXCLUSIVE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByLock" ):
                listener.enterAlterByLock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByLock" ):
                listener.exitAlterByLock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByLock" ):
                return visitor.visitAlterByLock(self)
            else:
                return visitor.visitChildren(self)


    class AlterByDiscardPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISCARD(self):
            return self.getToken(SpeakQlParser.DISCARD, 0)
        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)
        def TABLESPACE(self):
            return self.getToken(SpeakQlParser.TABLESPACE, 0)
        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDiscardPartition" ):
                listener.enterAlterByDiscardPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDiscardPartition" ):
                listener.exitAlterByDiscardPartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByDiscardPartition" ):
                return visitor.visitAlterByDiscardPartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByDiscardTablespaceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISCARD(self):
            return self.getToken(SpeakQlParser.DISCARD, 0)
        def TABLESPACE(self):
            return self.getToken(SpeakQlParser.TABLESPACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDiscardTablespace" ):
                listener.enterAlterByDiscardTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDiscardTablespace" ):
                listener.exitAlterByDiscardTablespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByDiscardTablespace" ):
                return visitor.visitAlterByDiscardTablespace(self)
            else:
                return visitor.visitChildren(self)


    class AlterByValidateContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.validationFormat = None # Token
            self.copyFrom(ctx)

        def VALIDATION(self):
            return self.getToken(SpeakQlParser.VALIDATION, 0)
        def WITHOUT(self):
            return self.getToken(SpeakQlParser.WITHOUT, 0)
        def WITH(self):
            return self.getToken(SpeakQlParser.WITH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByValidate" ):
                listener.enterAlterByValidate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByValidate" ):
                listener.exitAlterByValidate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByValidate" ):
                return visitor.visitAlterByValidate(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAddPrimaryKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.index = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(SpeakQlParser.ADD, 0)
        def PRIMARY(self):
            return self.getToken(SpeakQlParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(SpeakQlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddPrimaryKey" ):
                listener.enterAlterByAddPrimaryKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddPrimaryKey" ):
                listener.exitAlterByAddPrimaryKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAddPrimaryKey" ):
                return visitor.visitAlterByAddPrimaryKey(self)
            else:
                return visitor.visitChildren(self)


    class AlterByCheckPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(SpeakQlParser.CHECK, 0)
        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByCheckPartition" ):
                listener.enterAlterByCheckPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByCheckPartition" ):
                listener.exitAlterByCheckPartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByCheckPartition" ):
                return visitor.visitAlterByCheckPartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByEnableKeysContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENABLE(self):
            return self.getToken(SpeakQlParser.ENABLE, 0)
        def KEYS(self):
            return self.getToken(SpeakQlParser.KEYS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByEnableKeys" ):
                listener.enterAlterByEnableKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByEnableKeys" ):
                listener.exitAlterByEnableKeys(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByEnableKeys" ):
                return visitor.visitAlterByEnableKeys(self)
            else:
                return visitor.visitChildren(self)


    class AlterByReorganizePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REORGANIZE(self):
            return self.getToken(SpeakQlParser.REORGANIZE, 0)
        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)

        def INTO(self):
            return self.getToken(SpeakQlParser.INTO, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PartitionDefinitionContext,i)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByReorganizePartition" ):
                listener.enterAlterByReorganizePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByReorganizePartition" ):
                listener.exitAlterByReorganizePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByReorganizePartition" ):
                return visitor.visitAlterByReorganizePartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterBySetAlgorithmContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def ALGORITHM(self):
            return self.getToken(SpeakQlParser.ALGORITHM, 0)
        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)
        def INPLACE(self):
            return self.getToken(SpeakQlParser.INPLACE, 0)
        def COPY(self):
            return self.getToken(SpeakQlParser.COPY, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterBySetAlgorithm" ):
                listener.enterAlterBySetAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterBySetAlgorithm" ):
                listener.exitAlterBySetAlgorithm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterBySetAlgorithm" ):
                return visitor.visitAlterBySetAlgorithm(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAnalyzePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SpeakQlParser.ANALYZE, 0)
        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAnalyzePartition" ):
                listener.enterAlterByAnalyzePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAnalyzePartition" ):
                listener.exitAlterByAnalyzePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAnalyzePartition" ):
                return visitor.visitAlterByAnalyzePartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByChangeColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.oldColumn = None # UidContext
            self.newColumn = None # UidContext
            self.afterColumn = None # UidContext
            self.copyFrom(ctx)

        def CHANGE(self):
            return self.getToken(SpeakQlParser.CHANGE, 0)
        def columnDefinition(self):
            return self.getTypedRuleContext(SpeakQlParser.ColumnDefinitionContext,0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)

        def COLUMN(self):
            return self.getToken(SpeakQlParser.COLUMN, 0)
        def FIRST(self):
            return self.getToken(SpeakQlParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(SpeakQlParser.AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByChangeColumn" ):
                listener.enterAlterByChangeColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByChangeColumn" ):
                listener.exitAlterByChangeColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByChangeColumn" ):
                return visitor.visitAlterByChangeColumn(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAddUniqueKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexFormat = None # Token
            self.indexName = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(SpeakQlParser.ADD, 0)
        def UNIQUE(self):
            return self.getToken(SpeakQlParser.UNIQUE, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(SpeakQlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)

        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddUniqueKey" ):
                listener.enterAlterByAddUniqueKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddUniqueKey" ):
                listener.exitAlterByAddUniqueKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAddUniqueKey" ):
                return visitor.visitAlterByAddUniqueKey(self)
            else:
                return visitor.visitChildren(self)


    class AlterByTruncatePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(SpeakQlParser.TRUNCATE, 0)
        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByTruncatePartition" ):
                listener.enterAlterByTruncatePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByTruncatePartition" ):
                listener.exitAlterByTruncatePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByTruncatePartition" ):
                return visitor.visitAlterByTruncatePartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByDropIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropIndex" ):
                listener.enterAlterByDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropIndex" ):
                listener.exitAlterByDropIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByDropIndex" ):
                return visitor.visitAlterByDropIndex(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAddColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(SpeakQlParser.ADD, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)

        def columnDefinition(self):
            return self.getTypedRuleContext(SpeakQlParser.ColumnDefinitionContext,0)

        def COLUMN(self):
            return self.getToken(SpeakQlParser.COLUMN, 0)
        def FIRST(self):
            return self.getToken(SpeakQlParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(SpeakQlParser.AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddColumn" ):
                listener.enterAlterByAddColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddColumn" ):
                listener.exitAlterByAddColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAddColumn" ):
                return visitor.visitAlterByAddColumn(self)
            else:
                return visitor.visitChildren(self)


    class AlterByOrderContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ORDER(self):
            return self.getToken(SpeakQlParser.ORDER, 0)
        def BY(self):
            return self.getToken(SpeakQlParser.BY, 0)
        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByOrder" ):
                listener.enterAlterByOrder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByOrder" ):
                listener.exitAlterByOrder(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByOrder" ):
                return visitor.visitAlterByOrder(self)
            else:
                return visitor.visitChildren(self)



    def alterSpecification(self):

        localctx = SpeakQlParser.AlterSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_alterSpecification)
        self._la = 0 # Token type
        try:
            self.state = 2704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.AlterByTableOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2338
                self.tableOption()
                self.state = 2345
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,282,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2340
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SpeakQlParser.COMMA:
                            self.state = 2339
                            self.match(SpeakQlParser.COMMA)


                        self.state = 2342
                        self.tableOption() 
                    self.state = 2347
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,282,self._ctx)

                pass

            elif la_ == 2:
                localctx = SpeakQlParser.AlterByAddColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2348
                self.match(SpeakQlParser.ADD)
                self.state = 2350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.COLUMN:
                    self.state = 2349
                    self.match(SpeakQlParser.COLUMN)


                self.state = 2352
                self.uid()
                self.state = 2353
                self.columnDefinition()
                self.state = 2357
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.FIRST]:
                    self.state = 2354
                    self.match(SpeakQlParser.FIRST)
                    pass
                elif token in [SpeakQlParser.AFTER]:
                    self.state = 2355
                    self.match(SpeakQlParser.AFTER)
                    self.state = 2356
                    self.uid()
                    pass
                elif token in [SpeakQlParser.EOF, SpeakQlParser.RETRIEVE, SpeakQlParser.SHOW_ME, SpeakQlParser.DISPLAY, SpeakQlParser.PRESENT, SpeakQlParser.FIND, SpeakQlParser.IN_TABLE, SpeakQlParser.FROM_TABLE, SpeakQlParser.ALTER, SpeakQlParser.ANALYZE, SpeakQlParser.CALL, SpeakQlParser.CHANGE, SpeakQlParser.CHECK, SpeakQlParser.CREATE, SpeakQlParser.DELETE, SpeakQlParser.DESC, SpeakQlParser.DESCRIBE, SpeakQlParser.DROP, SpeakQlParser.EXPLAIN, SpeakQlParser.FROM, SpeakQlParser.GET, SpeakQlParser.GRANT, SpeakQlParser.GROUP, SpeakQlParser.HAVING, SpeakQlParser.INSERT, SpeakQlParser.INTO, SpeakQlParser.KILL, SpeakQlParser.LIMIT, SpeakQlParser.LOAD, SpeakQlParser.LOCK, SpeakQlParser.OPTIMIZE, SpeakQlParser.ORDER, SpeakQlParser.PARTITION, SpeakQlParser.PURGE, SpeakQlParser.RELEASE, SpeakQlParser.RENAME, SpeakQlParser.REPLACE, SpeakQlParser.RESIGNAL, SpeakQlParser.REVOKE, SpeakQlParser.SELECT, SpeakQlParser.SET, SpeakQlParser.SHOW, SpeakQlParser.SIGNAL, SpeakQlParser.UNLOCK, SpeakQlParser.UPDATE, SpeakQlParser.USE, SpeakQlParser.WHERE, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.CACHE, SpeakQlParser.CHECKSUM, SpeakQlParser.COMMIT, SpeakQlParser.DEALLOCATE, SpeakQlParser.DO, SpeakQlParser.FLUSH, SpeakQlParser.HANDLER, SpeakQlParser.HELP, SpeakQlParser.INSTALL, SpeakQlParser.PREPARE, SpeakQlParser.REPAIR, SpeakQlParser.RESET, SpeakQlParser.ROLLBACK, SpeakQlParser.SAVEPOINT, SpeakQlParser.START, SpeakQlParser.STOP, SpeakQlParser.TRUNCATE, SpeakQlParser.UNINSTALL, SpeakQlParser.WINDOW, SpeakQlParser.XA, SpeakQlParser.EXECUTE, SpeakQlParser.SHUTDOWN, SpeakQlParser.MINUS, SpeakQlParser.LR_BRACKET, SpeakQlParser.COMMA, SpeakQlParser.SEMI]:
                    pass
                else:
                    pass
                pass

            elif la_ == 3:
                localctx = SpeakQlParser.AlterByAddColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2359
                self.match(SpeakQlParser.ADD)
                self.state = 2361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.COLUMN:
                    self.state = 2360
                    self.match(SpeakQlParser.COLUMN)


                self.state = 2363
                self.leftParen()
                self.state = 2364
                self.uid()
                self.state = 2365
                self.columnDefinition()
                self.state = 2372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 2366
                    self.match(SpeakQlParser.COMMA)
                    self.state = 2367
                    self.uid()
                    self.state = 2368
                    self.columnDefinition()
                    self.state = 2374
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2375
                self.rightParen()
                pass

            elif la_ == 4:
                localctx = SpeakQlParser.AlterByAddIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2377
                self.match(SpeakQlParser.ADD)
                self.state = 2378
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                    self.state = 2379
                    self.uid()


                self.state = 2383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.USING:
                    self.state = 2382
                    self.indexType()


                self.state = 2385
                self.indexColumnNames()
                self.state = 2389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.USING or _la==SpeakQlParser.WITH or _la==SpeakQlParser.COMMENT or _la==SpeakQlParser.INVISIBLE or _la==SpeakQlParser.KEY_BLOCK_SIZE or _la==SpeakQlParser.VISIBLE:
                    self.state = 2386
                    self.indexOption()
                    self.state = 2391
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                localctx = SpeakQlParser.AlterByAddPrimaryKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2392
                self.match(SpeakQlParser.ADD)
                self.state = 2397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.CONSTRAINT:
                    self.state = 2393
                    self.match(SpeakQlParser.CONSTRAINT)
                    self.state = 2395
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                        self.state = 2394
                        localctx.name = self.uid()




                self.state = 2399
                self.match(SpeakQlParser.PRIMARY)
                self.state = 2400
                self.match(SpeakQlParser.KEY)
                self.state = 2402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                    self.state = 2401
                    localctx.index = self.uid()


                self.state = 2405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.USING:
                    self.state = 2404
                    self.indexType()


                self.state = 2407
                self.indexColumnNames()
                self.state = 2411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.USING or _la==SpeakQlParser.WITH or _la==SpeakQlParser.COMMENT or _la==SpeakQlParser.INVISIBLE or _la==SpeakQlParser.KEY_BLOCK_SIZE or _la==SpeakQlParser.VISIBLE:
                    self.state = 2408
                    self.indexOption()
                    self.state = 2413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                localctx = SpeakQlParser.AlterByAddUniqueKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2414
                self.match(SpeakQlParser.ADD)
                self.state = 2419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.CONSTRAINT:
                    self.state = 2415
                    self.match(SpeakQlParser.CONSTRAINT)
                    self.state = 2417
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                        self.state = 2416
                        localctx.name = self.uid()




                self.state = 2421
                self.match(SpeakQlParser.UNIQUE)
                self.state = 2423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEY:
                    self.state = 2422
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                    self.state = 2425
                    localctx.indexName = self.uid()


                self.state = 2429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.USING:
                    self.state = 2428
                    self.indexType()


                self.state = 2431
                self.indexColumnNames()
                self.state = 2435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.USING or _la==SpeakQlParser.WITH or _la==SpeakQlParser.COMMENT or _la==SpeakQlParser.INVISIBLE or _la==SpeakQlParser.KEY_BLOCK_SIZE or _la==SpeakQlParser.VISIBLE:
                    self.state = 2432
                    self.indexOption()
                    self.state = 2437
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                localctx = SpeakQlParser.AlterByAddSpecialIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2438
                self.match(SpeakQlParser.ADD)
                self.state = 2439
                localctx.keyType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.FULLTEXT or _la==SpeakQlParser.SPATIAL):
                    localctx.keyType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEY:
                    self.state = 2440
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                    self.state = 2443
                    self.uid()


                self.state = 2446
                self.indexColumnNames()
                self.state = 2450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.USING or _la==SpeakQlParser.WITH or _la==SpeakQlParser.COMMENT or _la==SpeakQlParser.INVISIBLE or _la==SpeakQlParser.KEY_BLOCK_SIZE or _la==SpeakQlParser.VISIBLE:
                    self.state = 2447
                    self.indexOption()
                    self.state = 2452
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                localctx = SpeakQlParser.AlterByAddForeignKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2453
                self.match(SpeakQlParser.ADD)
                self.state = 2458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.CONSTRAINT:
                    self.state = 2454
                    self.match(SpeakQlParser.CONSTRAINT)
                    self.state = 2456
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                        self.state = 2455
                        localctx.name = self.uid()




                self.state = 2460
                self.match(SpeakQlParser.FOREIGN)
                self.state = 2461
                self.match(SpeakQlParser.KEY)
                self.state = 2463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                    self.state = 2462
                    localctx.indexName = self.uid()


                self.state = 2465
                self.indexColumnNames()
                self.state = 2466
                self.referenceDefinition()
                pass

            elif la_ == 9:
                localctx = SpeakQlParser.AlterByAddCheckTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2468
                self.match(SpeakQlParser.ADD)
                self.state = 2473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.CONSTRAINT:
                    self.state = 2469
                    self.match(SpeakQlParser.CONSTRAINT)
                    self.state = 2471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                        self.state = 2470
                        localctx.name = self.uid()




                self.state = 2475
                self.match(SpeakQlParser.CHECK)
                self.state = 2476
                self.leftParen()
                self.state = 2477
                self.expression(0)
                self.state = 2478
                self.rightParen()
                pass

            elif la_ == 10:
                localctx = SpeakQlParser.AlterBySetAlgorithmContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2480
                self.match(SpeakQlParser.ALGORITHM)
                self.state = 2482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 2481
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 2484
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.COPY or _la==SpeakQlParser.INPLACE):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 11:
                localctx = SpeakQlParser.AlterByChangeDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2485
                self.match(SpeakQlParser.ALTER)
                self.state = 2487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.COLUMN:
                    self.state = 2486
                    self.match(SpeakQlParser.COLUMN)


                self.state = 2489
                self.uid()
                self.state = 2495
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.SET]:
                    self.state = 2490
                    self.match(SpeakQlParser.SET)
                    self.state = 2491
                    self.match(SpeakQlParser.DEFAULT)
                    self.state = 2492
                    self.defaultValue()
                    pass
                elif token in [SpeakQlParser.DROP]:
                    self.state = 2493
                    self.match(SpeakQlParser.DROP)
                    self.state = 2494
                    self.match(SpeakQlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 12:
                localctx = SpeakQlParser.AlterByChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 2497
                self.match(SpeakQlParser.CHANGE)
                self.state = 2499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.COLUMN:
                    self.state = 2498
                    self.match(SpeakQlParser.COLUMN)


                self.state = 2501
                localctx.oldColumn = self.uid()
                self.state = 2502
                localctx.newColumn = self.uid()
                self.state = 2503
                self.columnDefinition()
                self.state = 2507
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.FIRST]:
                    self.state = 2504
                    self.match(SpeakQlParser.FIRST)
                    pass
                elif token in [SpeakQlParser.AFTER]:
                    self.state = 2505
                    self.match(SpeakQlParser.AFTER)
                    self.state = 2506
                    localctx.afterColumn = self.uid()
                    pass
                elif token in [SpeakQlParser.EOF, SpeakQlParser.RETRIEVE, SpeakQlParser.SHOW_ME, SpeakQlParser.DISPLAY, SpeakQlParser.PRESENT, SpeakQlParser.FIND, SpeakQlParser.IN_TABLE, SpeakQlParser.FROM_TABLE, SpeakQlParser.ALTER, SpeakQlParser.ANALYZE, SpeakQlParser.CALL, SpeakQlParser.CHANGE, SpeakQlParser.CHECK, SpeakQlParser.CREATE, SpeakQlParser.DELETE, SpeakQlParser.DESC, SpeakQlParser.DESCRIBE, SpeakQlParser.DROP, SpeakQlParser.EXPLAIN, SpeakQlParser.FROM, SpeakQlParser.GET, SpeakQlParser.GRANT, SpeakQlParser.GROUP, SpeakQlParser.HAVING, SpeakQlParser.INSERT, SpeakQlParser.INTO, SpeakQlParser.KILL, SpeakQlParser.LIMIT, SpeakQlParser.LOAD, SpeakQlParser.LOCK, SpeakQlParser.OPTIMIZE, SpeakQlParser.ORDER, SpeakQlParser.PARTITION, SpeakQlParser.PURGE, SpeakQlParser.RELEASE, SpeakQlParser.RENAME, SpeakQlParser.REPLACE, SpeakQlParser.RESIGNAL, SpeakQlParser.REVOKE, SpeakQlParser.SELECT, SpeakQlParser.SET, SpeakQlParser.SHOW, SpeakQlParser.SIGNAL, SpeakQlParser.UNLOCK, SpeakQlParser.UPDATE, SpeakQlParser.USE, SpeakQlParser.WHERE, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.CACHE, SpeakQlParser.CHECKSUM, SpeakQlParser.COMMIT, SpeakQlParser.DEALLOCATE, SpeakQlParser.DO, SpeakQlParser.FLUSH, SpeakQlParser.HANDLER, SpeakQlParser.HELP, SpeakQlParser.INSTALL, SpeakQlParser.PREPARE, SpeakQlParser.REPAIR, SpeakQlParser.RESET, SpeakQlParser.ROLLBACK, SpeakQlParser.SAVEPOINT, SpeakQlParser.START, SpeakQlParser.STOP, SpeakQlParser.TRUNCATE, SpeakQlParser.UNINSTALL, SpeakQlParser.WINDOW, SpeakQlParser.XA, SpeakQlParser.EXECUTE, SpeakQlParser.SHUTDOWN, SpeakQlParser.MINUS, SpeakQlParser.LR_BRACKET, SpeakQlParser.COMMA, SpeakQlParser.SEMI]:
                    pass
                else:
                    pass
                pass

            elif la_ == 13:
                localctx = SpeakQlParser.AlterByRenameColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 2509
                self.match(SpeakQlParser.RENAME)
                self.state = 2510
                self.match(SpeakQlParser.COLUMN)
                self.state = 2511
                localctx.oldColumn = self.uid()
                self.state = 2512
                self.match(SpeakQlParser.TO)
                self.state = 2513
                localctx.newColumn = self.uid()
                pass

            elif la_ == 14:
                localctx = SpeakQlParser.AlterByLockContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 2515
                self.match(SpeakQlParser.LOCK)
                self.state = 2517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 2516
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 2519
                localctx.lockType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.EXCLUSIVE or _la==SpeakQlParser.NONE or _la==SpeakQlParser.SHARED):
                    localctx.lockType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                localctx = SpeakQlParser.AlterByModifyColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 2520
                self.match(SpeakQlParser.MODIFY)
                self.state = 2522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.COLUMN:
                    self.state = 2521
                    self.match(SpeakQlParser.COLUMN)


                self.state = 2524
                self.uid()
                self.state = 2525
                self.columnDefinition()
                self.state = 2529
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.FIRST]:
                    self.state = 2526
                    self.match(SpeakQlParser.FIRST)
                    pass
                elif token in [SpeakQlParser.AFTER]:
                    self.state = 2527
                    self.match(SpeakQlParser.AFTER)
                    self.state = 2528
                    self.uid()
                    pass
                elif token in [SpeakQlParser.EOF, SpeakQlParser.RETRIEVE, SpeakQlParser.SHOW_ME, SpeakQlParser.DISPLAY, SpeakQlParser.PRESENT, SpeakQlParser.FIND, SpeakQlParser.IN_TABLE, SpeakQlParser.FROM_TABLE, SpeakQlParser.ALTER, SpeakQlParser.ANALYZE, SpeakQlParser.CALL, SpeakQlParser.CHANGE, SpeakQlParser.CHECK, SpeakQlParser.CREATE, SpeakQlParser.DELETE, SpeakQlParser.DESC, SpeakQlParser.DESCRIBE, SpeakQlParser.DROP, SpeakQlParser.EXPLAIN, SpeakQlParser.FROM, SpeakQlParser.GET, SpeakQlParser.GRANT, SpeakQlParser.GROUP, SpeakQlParser.HAVING, SpeakQlParser.INSERT, SpeakQlParser.INTO, SpeakQlParser.KILL, SpeakQlParser.LIMIT, SpeakQlParser.LOAD, SpeakQlParser.LOCK, SpeakQlParser.OPTIMIZE, SpeakQlParser.ORDER, SpeakQlParser.PARTITION, SpeakQlParser.PURGE, SpeakQlParser.RELEASE, SpeakQlParser.RENAME, SpeakQlParser.REPLACE, SpeakQlParser.RESIGNAL, SpeakQlParser.REVOKE, SpeakQlParser.SELECT, SpeakQlParser.SET, SpeakQlParser.SHOW, SpeakQlParser.SIGNAL, SpeakQlParser.UNLOCK, SpeakQlParser.UPDATE, SpeakQlParser.USE, SpeakQlParser.WHERE, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.CACHE, SpeakQlParser.CHECKSUM, SpeakQlParser.COMMIT, SpeakQlParser.DEALLOCATE, SpeakQlParser.DO, SpeakQlParser.FLUSH, SpeakQlParser.HANDLER, SpeakQlParser.HELP, SpeakQlParser.INSTALL, SpeakQlParser.PREPARE, SpeakQlParser.REPAIR, SpeakQlParser.RESET, SpeakQlParser.ROLLBACK, SpeakQlParser.SAVEPOINT, SpeakQlParser.START, SpeakQlParser.STOP, SpeakQlParser.TRUNCATE, SpeakQlParser.UNINSTALL, SpeakQlParser.WINDOW, SpeakQlParser.XA, SpeakQlParser.EXECUTE, SpeakQlParser.SHUTDOWN, SpeakQlParser.MINUS, SpeakQlParser.LR_BRACKET, SpeakQlParser.COMMA, SpeakQlParser.SEMI]:
                    pass
                else:
                    pass
                pass

            elif la_ == 16:
                localctx = SpeakQlParser.AlterByDropColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 2531
                self.match(SpeakQlParser.DROP)
                self.state = 2533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.COLUMN:
                    self.state = 2532
                    self.match(SpeakQlParser.COLUMN)


                self.state = 2535
                self.uid()
                self.state = 2537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.RESTRICT:
                    self.state = 2536
                    self.match(SpeakQlParser.RESTRICT)


                pass

            elif la_ == 17:
                localctx = SpeakQlParser.AlterByDropConstraintCheckContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 2539
                self.match(SpeakQlParser.DROP)
                self.state = 2540
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.CHECK or _la==SpeakQlParser.CONSTRAINT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2541
                self.uid()
                pass

            elif la_ == 18:
                localctx = SpeakQlParser.AlterByDropPrimaryKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 2542
                self.match(SpeakQlParser.DROP)
                self.state = 2543
                self.match(SpeakQlParser.PRIMARY)
                self.state = 2544
                self.match(SpeakQlParser.KEY)
                pass

            elif la_ == 19:
                localctx = SpeakQlParser.AlterByRenameIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 2545
                self.match(SpeakQlParser.RENAME)
                self.state = 2546
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2547
                self.uid()
                self.state = 2548
                self.match(SpeakQlParser.TO)
                self.state = 2549
                self.uid()
                pass

            elif la_ == 20:
                localctx = SpeakQlParser.AlterByAlterIndexVisibilityContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 2551
                self.match(SpeakQlParser.ALTER)
                self.state = 2552
                self.match(SpeakQlParser.INDEX)
                self.state = 2553
                self.uid()
                self.state = 2554
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.INVISIBLE or _la==SpeakQlParser.VISIBLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 21:
                localctx = SpeakQlParser.AlterByDropIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 2556
                self.match(SpeakQlParser.DROP)
                self.state = 2557
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2558
                self.uid()
                pass

            elif la_ == 22:
                localctx = SpeakQlParser.AlterByDropForeignKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 2559
                self.match(SpeakQlParser.DROP)
                self.state = 2560
                self.match(SpeakQlParser.FOREIGN)
                self.state = 2561
                self.match(SpeakQlParser.KEY)
                self.state = 2562
                self.uid()
                pass

            elif la_ == 23:
                localctx = SpeakQlParser.AlterByDisableKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 2563
                self.match(SpeakQlParser.DISABLE)
                self.state = 2564
                self.match(SpeakQlParser.KEYS)
                pass

            elif la_ == 24:
                localctx = SpeakQlParser.AlterByEnableKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 2565
                self.match(SpeakQlParser.ENABLE)
                self.state = 2566
                self.match(SpeakQlParser.KEYS)
                pass

            elif la_ == 25:
                localctx = SpeakQlParser.AlterByRenameContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 2567
                self.match(SpeakQlParser.RENAME)
                self.state = 2569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.AS or _la==SpeakQlParser.TO:
                    self.state = 2568
                    localctx.renameFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.AS or _la==SpeakQlParser.TO):
                        localctx.renameFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2573
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
                if la_ == 1:
                    self.state = 2571
                    self.uid()
                    pass

                elif la_ == 2:
                    self.state = 2572
                    self.fullId()
                    pass


                pass

            elif la_ == 26:
                localctx = SpeakQlParser.AlterByOrderContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 2575
                self.match(SpeakQlParser.ORDER)
                self.state = 2576
                self.match(SpeakQlParser.BY)
                self.state = 2577
                self.uidList()
                pass

            elif la_ == 27:
                localctx = SpeakQlParser.AlterByConvertCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 2578
                self.match(SpeakQlParser.CONVERT)
                self.state = 2579
                self.match(SpeakQlParser.TO)
                self.state = 2580
                self.match(SpeakQlParser.CHARACTER)
                self.state = 2581
                self.match(SpeakQlParser.SET)
                self.state = 2582
                self.charsetName()
                self.state = 2585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.COLLATE:
                    self.state = 2583
                    self.match(SpeakQlParser.COLLATE)
                    self.state = 2584
                    self.collationName()


                pass

            elif la_ == 28:
                localctx = SpeakQlParser.AlterByDefaultCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 2588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.DEFAULT:
                    self.state = 2587
                    self.match(SpeakQlParser.DEFAULT)


                self.state = 2590
                self.match(SpeakQlParser.CHARACTER)
                self.state = 2591
                self.match(SpeakQlParser.SET)
                self.state = 2592
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 2593
                self.charsetName()
                self.state = 2597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.COLLATE:
                    self.state = 2594
                    self.match(SpeakQlParser.COLLATE)
                    self.state = 2595
                    self.match(SpeakQlParser.EQUAL_SYMBOL)
                    self.state = 2596
                    self.collationName()


                pass

            elif la_ == 29:
                localctx = SpeakQlParser.AlterByDiscardTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 2599
                self.match(SpeakQlParser.DISCARD)
                self.state = 2600
                self.match(SpeakQlParser.TABLESPACE)
                pass

            elif la_ == 30:
                localctx = SpeakQlParser.AlterByImportTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 2601
                self.match(SpeakQlParser.IMPORT)
                self.state = 2602
                self.match(SpeakQlParser.TABLESPACE)
                pass

            elif la_ == 31:
                localctx = SpeakQlParser.AlterByForceContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 2603
                self.match(SpeakQlParser.FORCE)
                pass

            elif la_ == 32:
                localctx = SpeakQlParser.AlterByValidateContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 2604
                localctx.validationFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.WITH or _la==SpeakQlParser.WITHOUT):
                    localctx.validationFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2605
                self.match(SpeakQlParser.VALIDATION)
                pass

            elif la_ == 33:
                localctx = SpeakQlParser.AlterByAddPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 2606
                self.match(SpeakQlParser.ADD)
                self.state = 2607
                self.match(SpeakQlParser.PARTITION)
                self.state = 2608
                self.leftParen()
                self.state = 2609
                self.partitionDefinition()
                self.state = 2614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 2610
                    self.match(SpeakQlParser.COMMA)
                    self.state = 2611
                    self.partitionDefinition()
                    self.state = 2616
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2617
                self.rightParen()
                pass

            elif la_ == 34:
                localctx = SpeakQlParser.AlterByDropPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 2619
                self.match(SpeakQlParser.DROP)
                self.state = 2620
                self.match(SpeakQlParser.PARTITION)
                self.state = 2621
                self.uidList()
                pass

            elif la_ == 35:
                localctx = SpeakQlParser.AlterByDiscardPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 2622
                self.match(SpeakQlParser.DISCARD)
                self.state = 2623
                self.match(SpeakQlParser.PARTITION)
                self.state = 2626
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.OPTIONAL]:
                    self.state = 2624
                    self.uidList()
                    pass
                elif token in [SpeakQlParser.ALL]:
                    self.state = 2625
                    self.match(SpeakQlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2628
                self.match(SpeakQlParser.TABLESPACE)
                pass

            elif la_ == 36:
                localctx = SpeakQlParser.AlterByImportPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 2629
                self.match(SpeakQlParser.IMPORT)
                self.state = 2630
                self.match(SpeakQlParser.PARTITION)
                self.state = 2633
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.OPTIONAL]:
                    self.state = 2631
                    self.uidList()
                    pass
                elif token in [SpeakQlParser.ALL]:
                    self.state = 2632
                    self.match(SpeakQlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2635
                self.match(SpeakQlParser.TABLESPACE)
                pass

            elif la_ == 37:
                localctx = SpeakQlParser.AlterByTruncatePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 2636
                self.match(SpeakQlParser.TRUNCATE)
                self.state = 2637
                self.match(SpeakQlParser.PARTITION)
                self.state = 2640
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.OPTIONAL]:
                    self.state = 2638
                    self.uidList()
                    pass
                elif token in [SpeakQlParser.ALL]:
                    self.state = 2639
                    self.match(SpeakQlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 38:
                localctx = SpeakQlParser.AlterByCoalescePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 2642
                self.match(SpeakQlParser.COALESCE)
                self.state = 2643
                self.match(SpeakQlParser.PARTITION)
                self.state = 2644
                self.decimalLiteral()
                pass

            elif la_ == 39:
                localctx = SpeakQlParser.AlterByReorganizePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 2645
                self.match(SpeakQlParser.REORGANIZE)
                self.state = 2646
                self.match(SpeakQlParser.PARTITION)
                self.state = 2647
                self.uidList()
                self.state = 2648
                self.match(SpeakQlParser.INTO)
                self.state = 2649
                self.leftParen()
                self.state = 2650
                self.partitionDefinition()
                self.state = 2655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 2651
                    self.match(SpeakQlParser.COMMA)
                    self.state = 2652
                    self.partitionDefinition()
                    self.state = 2657
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2658
                self.rightParen()
                pass

            elif la_ == 40:
                localctx = SpeakQlParser.AlterByExchangePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 2660
                self.match(SpeakQlParser.EXCHANGE)
                self.state = 2661
                self.match(SpeakQlParser.PARTITION)
                self.state = 2662
                self.uid()
                self.state = 2663
                self.match(SpeakQlParser.WITH)
                self.state = 2664
                self.match(SpeakQlParser.TABLE)
                self.state = 2665
                self.tableName()
                self.state = 2668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.WITH or _la==SpeakQlParser.WITHOUT:
                    self.state = 2666
                    localctx.validationFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.WITH or _la==SpeakQlParser.WITHOUT):
                        localctx.validationFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2667
                    self.match(SpeakQlParser.VALIDATION)


                pass

            elif la_ == 41:
                localctx = SpeakQlParser.AlterByAnalyzePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 2670
                self.match(SpeakQlParser.ANALYZE)
                self.state = 2671
                self.match(SpeakQlParser.PARTITION)
                self.state = 2674
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.OPTIONAL]:
                    self.state = 2672
                    self.uidList()
                    pass
                elif token in [SpeakQlParser.ALL]:
                    self.state = 2673
                    self.match(SpeakQlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 42:
                localctx = SpeakQlParser.AlterByCheckPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 2676
                self.match(SpeakQlParser.CHECK)
                self.state = 2677
                self.match(SpeakQlParser.PARTITION)
                self.state = 2680
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.OPTIONAL]:
                    self.state = 2678
                    self.uidList()
                    pass
                elif token in [SpeakQlParser.ALL]:
                    self.state = 2679
                    self.match(SpeakQlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 43:
                localctx = SpeakQlParser.AlterByOptimizePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 2682
                self.match(SpeakQlParser.OPTIMIZE)
                self.state = 2683
                self.match(SpeakQlParser.PARTITION)
                self.state = 2686
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.OPTIONAL]:
                    self.state = 2684
                    self.uidList()
                    pass
                elif token in [SpeakQlParser.ALL]:
                    self.state = 2685
                    self.match(SpeakQlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 44:
                localctx = SpeakQlParser.AlterByRebuildPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 2688
                self.match(SpeakQlParser.REBUILD)
                self.state = 2689
                self.match(SpeakQlParser.PARTITION)
                self.state = 2692
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.OPTIONAL]:
                    self.state = 2690
                    self.uidList()
                    pass
                elif token in [SpeakQlParser.ALL]:
                    self.state = 2691
                    self.match(SpeakQlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 45:
                localctx = SpeakQlParser.AlterByRepairPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 2694
                self.match(SpeakQlParser.REPAIR)
                self.state = 2695
                self.match(SpeakQlParser.PARTITION)
                self.state = 2698
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.OPTIONAL]:
                    self.state = 2696
                    self.uidList()
                    pass
                elif token in [SpeakQlParser.ALL]:
                    self.state = 2697
                    self.match(SpeakQlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 46:
                localctx = SpeakQlParser.AlterByRemovePartitioningContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 2700
                self.match(SpeakQlParser.REMOVE)
                self.state = 2701
                self.match(SpeakQlParser.PARTITIONING)
                pass

            elif la_ == 47:
                localctx = SpeakQlParser.AlterByUpgradePartitioningContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 2702
                self.match(SpeakQlParser.UPGRADE)
                self.state = 2703
                self.match(SpeakQlParser.PARTITIONING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbFormat = None # Token

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def DATABASE(self):
            return self.getToken(SpeakQlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(SpeakQlParser.SCHEMA, 0)

        def ifExists(self):
            return self.getTypedRuleContext(SpeakQlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_dropDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabase" ):
                listener.enterDropDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabase" ):
                listener.exitDropDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropDatabase" ):
                return visitor.visitDropDatabase(self)
            else:
                return visitor.visitChildren(self)




    def dropDatabase(self):

        localctx = SpeakQlParser.DropDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_dropDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2706
            self.match(SpeakQlParser.DROP)
            self.state = 2707
            localctx.dbFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.DATABASE or _la==SpeakQlParser.SCHEMA):
                localctx.dbFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IF:
                self.state = 2708
                self.ifExists()


            self.state = 2711
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)

        def EVENT(self):
            return self.getToken(SpeakQlParser.EVENT, 0)

        def fullId(self):
            return self.getTypedRuleContext(SpeakQlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SpeakQlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_dropEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropEvent" ):
                listener.enterDropEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropEvent" ):
                listener.exitDropEvent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropEvent" ):
                return visitor.visitDropEvent(self)
            else:
                return visitor.visitChildren(self)




    def dropEvent(self):

        localctx = SpeakQlParser.DropEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_dropEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2713
            self.match(SpeakQlParser.DROP)
            self.state = 2714
            self.match(SpeakQlParser.EVENT)
            self.state = 2716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IF:
                self.state = 2715
                self.ifExists()


            self.state = 2718
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.intimeAction = None # Token
            self.algType = None # Token
            self.lockType = None # Token

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)

        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def ON(self):
            return self.getToken(SpeakQlParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def ALGORITHM(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.ALGORITHM)
            else:
                return self.getToken(SpeakQlParser.ALGORITHM, i)

        def LOCK(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.LOCK)
            else:
                return self.getToken(SpeakQlParser.LOCK, i)

        def ONLINE(self):
            return self.getToken(SpeakQlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(SpeakQlParser.OFFLINE, 0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.DEFAULT)
            else:
                return self.getToken(SpeakQlParser.DEFAULT, i)

        def INPLACE(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.INPLACE)
            else:
                return self.getToken(SpeakQlParser.INPLACE, i)

        def COPY(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COPY)
            else:
                return self.getToken(SpeakQlParser.COPY, i)

        def NONE(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.NONE)
            else:
                return self.getToken(SpeakQlParser.NONE, i)

        def SHARED(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.SHARED)
            else:
                return self.getToken(SpeakQlParser.SHARED, i)

        def EXCLUSIVE(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.EXCLUSIVE)
            else:
                return self.getToken(SpeakQlParser.EXCLUSIVE, i)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(SpeakQlParser.EQUAL_SYMBOL, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_dropIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropIndex" ):
                return visitor.visitDropIndex(self)
            else:
                return visitor.visitChildren(self)




    def dropIndex(self):

        localctx = SpeakQlParser.DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_dropIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2720
            self.match(SpeakQlParser.DROP)
            self.state = 2721
            self.match(SpeakQlParser.INDEX)
            self.state = 2723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
            if la_ == 1:
                self.state = 2722
                localctx.intimeAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.OFFLINE or _la==SpeakQlParser.ONLINE):
                    localctx.intimeAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2725
            self.uid()
            self.state = 2726
            self.match(SpeakQlParser.ON)
            self.state = 2727
            self.tableName()
            self.state = 2740
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,342,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2738
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SpeakQlParser.ALGORITHM]:
                        self.state = 2728
                        self.match(SpeakQlParser.ALGORITHM)
                        self.state = 2730
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SpeakQlParser.EQUAL_SYMBOL:
                            self.state = 2729
                            self.match(SpeakQlParser.EQUAL_SYMBOL)


                        self.state = 2732
                        localctx.algType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.COPY or _la==SpeakQlParser.INPLACE):
                            localctx.algType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [SpeakQlParser.LOCK]:
                        self.state = 2733
                        self.match(SpeakQlParser.LOCK)
                        self.state = 2735
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SpeakQlParser.EQUAL_SYMBOL:
                            self.state = 2734
                            self.match(SpeakQlParser.EQUAL_SYMBOL)


                        self.state = 2737
                        localctx.lockType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.EXCLUSIVE or _la==SpeakQlParser.NONE or _la==SpeakQlParser.SHARED):
                            localctx.lockType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2742
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,342,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropLogfileGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)

        def LOGFILE(self):
            return self.getToken(SpeakQlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(SpeakQlParser.GROUP, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def ENGINE(self):
            return self.getToken(SpeakQlParser.ENGINE, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def engineName(self):
            return self.getTypedRuleContext(SpeakQlParser.EngineNameContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_dropLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropLogfileGroup" ):
                listener.enterDropLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropLogfileGroup" ):
                listener.exitDropLogfileGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropLogfileGroup" ):
                return visitor.visitDropLogfileGroup(self)
            else:
                return visitor.visitChildren(self)




    def dropLogfileGroup(self):

        localctx = SpeakQlParser.DropLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_dropLogfileGroup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2743
            self.match(SpeakQlParser.DROP)
            self.state = 2744
            self.match(SpeakQlParser.LOGFILE)
            self.state = 2745
            self.match(SpeakQlParser.GROUP)
            self.state = 2746
            self.uid()
            self.state = 2747
            self.match(SpeakQlParser.ENGINE)
            self.state = 2748
            self.match(SpeakQlParser.EQUAL_SYMBOL)
            self.state = 2749
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(SpeakQlParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(SpeakQlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SpeakQlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_dropProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropProcedure" ):
                listener.enterDropProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropProcedure" ):
                listener.exitDropProcedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropProcedure" ):
                return visitor.visitDropProcedure(self)
            else:
                return visitor.visitChildren(self)




    def dropProcedure(self):

        localctx = SpeakQlParser.DropProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_dropProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2751
            self.match(SpeakQlParser.DROP)
            self.state = 2752
            self.match(SpeakQlParser.PROCEDURE)
            self.state = 2754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IF:
                self.state = 2753
                self.ifExists()


            self.state = 2756
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(SpeakQlParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(SpeakQlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SpeakQlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_dropFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropFunction" ):
                return visitor.visitDropFunction(self)
            else:
                return visitor.visitChildren(self)




    def dropFunction(self):

        localctx = SpeakQlParser.DropFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_dropFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2758
            self.match(SpeakQlParser.DROP)
            self.state = 2759
            self.match(SpeakQlParser.FUNCTION)
            self.state = 2761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IF:
                self.state = 2760
                self.ifExists()


            self.state = 2763
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)

        def SERVER(self):
            return self.getToken(SpeakQlParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SpeakQlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_dropServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropServer" ):
                listener.enterDropServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropServer" ):
                listener.exitDropServer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropServer" ):
                return visitor.visitDropServer(self)
            else:
                return visitor.visitChildren(self)




    def dropServer(self):

        localctx = SpeakQlParser.DropServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_dropServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2765
            self.match(SpeakQlParser.DROP)
            self.state = 2766
            self.match(SpeakQlParser.SERVER)
            self.state = 2768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IF:
                self.state = 2767
                self.ifExists()


            self.state = 2770
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropType = None # Token

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)

        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(SpeakQlParser.TablesContext,0)


        def TEMPORARY(self):
            return self.getToken(SpeakQlParser.TEMPORARY, 0)

        def ifExists(self):
            return self.getTypedRuleContext(SpeakQlParser.IfExistsContext,0)


        def RESTRICT(self):
            return self.getToken(SpeakQlParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(SpeakQlParser.CASCADE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_dropTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)




    def dropTable(self):

        localctx = SpeakQlParser.DropTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_dropTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2772
            self.match(SpeakQlParser.DROP)
            self.state = 2774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.TEMPORARY:
                self.state = 2773
                self.match(SpeakQlParser.TEMPORARY)


            self.state = 2776
            self.match(SpeakQlParser.TABLE)
            self.state = 2778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IF:
                self.state = 2777
                self.ifExists()


            self.state = 2780
            self.tables()
            self.state = 2782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.CASCADE or _la==SpeakQlParser.RESTRICT:
                self.state = 2781
                localctx.dropType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.CASCADE or _la==SpeakQlParser.RESTRICT):
                    localctx.dropType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)

        def TABLESPACE(self):
            return self.getToken(SpeakQlParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def ENGINE(self):
            return self.getToken(SpeakQlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(SpeakQlParser.EngineNameContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_dropTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTablespace" ):
                listener.enterDropTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTablespace" ):
                listener.exitDropTablespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTablespace" ):
                return visitor.visitDropTablespace(self)
            else:
                return visitor.visitChildren(self)




    def dropTablespace(self):

        localctx = SpeakQlParser.DropTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_dropTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2784
            self.match(SpeakQlParser.DROP)
            self.state = 2785
            self.match(SpeakQlParser.TABLESPACE)
            self.state = 2786
            self.uid()
            self.state = 2792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.ENGINE:
                self.state = 2787
                self.match(SpeakQlParser.ENGINE)
                self.state = 2789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EQUAL_SYMBOL:
                    self.state = 2788
                    self.match(SpeakQlParser.EQUAL_SYMBOL)


                self.state = 2791
                self.engineName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTriggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(SpeakQlParser.TRIGGER, 0)

        def fullId(self):
            return self.getTypedRuleContext(SpeakQlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SpeakQlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_dropTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTrigger" ):
                listener.enterDropTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTrigger" ):
                listener.exitDropTrigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTrigger" ):
                return visitor.visitDropTrigger(self)
            else:
                return visitor.visitChildren(self)




    def dropTrigger(self):

        localctx = SpeakQlParser.DropTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_dropTrigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2794
            self.match(SpeakQlParser.DROP)
            self.state = 2795
            self.match(SpeakQlParser.TRIGGER)
            self.state = 2797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IF:
                self.state = 2796
                self.ifExists()


            self.state = 2799
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropType = None # Token

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)

        def VIEW(self):
            return self.getToken(SpeakQlParser.VIEW, 0)

        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.FullIdContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(SpeakQlParser.IfExistsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def RESTRICT(self):
            return self.getToken(SpeakQlParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(SpeakQlParser.CASCADE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_dropView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropView" ):
                return visitor.visitDropView(self)
            else:
                return visitor.visitChildren(self)




    def dropView(self):

        localctx = SpeakQlParser.DropViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_dropView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2801
            self.match(SpeakQlParser.DROP)
            self.state = 2802
            self.match(SpeakQlParser.VIEW)
            self.state = 2804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IF:
                self.state = 2803
                self.ifExists()


            self.state = 2806
            self.fullId()
            self.state = 2811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 2807
                self.match(SpeakQlParser.COMMA)
                self.state = 2808
                self.fullId()
                self.state = 2813
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.CASCADE or _la==SpeakQlParser.RESTRICT:
                self.state = 2814
                localctx.dropType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.CASCADE or _la==SpeakQlParser.RESTRICT):
                    localctx.dropType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(SpeakQlParser.RENAME, 0)

        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)

        def renameTableClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.RenameTableClauseContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.RenameTableClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_renameTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTable" ):
                return visitor.visitRenameTable(self)
            else:
                return visitor.visitChildren(self)




    def renameTable(self):

        localctx = SpeakQlParser.RenameTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_renameTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2817
            self.match(SpeakQlParser.RENAME)
            self.state = 2818
            self.match(SpeakQlParser.TABLE)
            self.state = 2819
            self.renameTableClause()
            self.state = 2824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 2820
                self.match(SpeakQlParser.COMMA)
                self.state = 2821
                self.renameTableClause()
                self.state = 2826
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameTableClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.TableNameContext,i)


        def TO(self):
            return self.getToken(SpeakQlParser.TO, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_renameTableClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTableClause" ):
                listener.enterRenameTableClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTableClause" ):
                listener.exitRenameTableClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTableClause" ):
                return visitor.visitRenameTableClause(self)
            else:
                return visitor.visitChildren(self)




    def renameTableClause(self):

        localctx = SpeakQlParser.RenameTableClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_renameTableClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2827
            self.tableName()
            self.state = 2828
            self.match(SpeakQlParser.TO)
            self.state = 2829
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncateTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(SpeakQlParser.TRUNCATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_truncateTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTruncateTable" ):
                return visitor.visitTruncateTable(self)
            else:
                return visitor.visitChildren(self)




    def truncateTable(self):

        localctx = SpeakQlParser.TruncateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_truncateTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2831
            self.match(SpeakQlParser.TRUNCATE)
            self.state = 2833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.TABLE:
                self.state = 2832
                self.match(SpeakQlParser.TABLE)


            self.state = 2835
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(SpeakQlParser.CALL, 0)

        def fullId(self):
            return self.getTypedRuleContext(SpeakQlParser.FullIdContext,0)


        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def constants(self):
            return self.getTypedRuleContext(SpeakQlParser.ConstantsContext,0)


        def expressions(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_callStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStatement" ):
                listener.enterCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStatement" ):
                listener.exitCallStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallStatement" ):
                return visitor.visitCallStatement(self)
            else:
                return visitor.visitChildren(self)




    def callStatement(self):

        localctx = SpeakQlParser.CallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_callStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2837
            self.match(SpeakQlParser.CALL)
            self.state = 2838
            self.fullId()
            self.state = 2846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
            if la_ == 1:
                self.state = 2839
                self.leftParen()
                self.state = 2842
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
                if la_ == 1:
                    self.state = 2840
                    self.constants()

                elif la_ == 2:
                    self.state = 2841
                    self.expressions()


                self.state = 2844
                self.rightParen()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDeleteStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SingleDeleteStatementContext,0)


        def multipleDeleteStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.MultipleDeleteStatementContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteStatement" ):
                return visitor.visitDeleteStatement(self)
            else:
                return visitor.visitChildren(self)




    def deleteStatement(self):

        localctx = SpeakQlParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_deleteStatement)
        try:
            self.state = 2850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2848
                self.singleDeleteStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2849
                self.multipleDeleteStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(SpeakQlParser.DO, 0)

        def expressions(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoStatement" ):
                return visitor.visitDoStatement(self)
            else:
                return visitor.visitChildren(self)




    def doStatement(self):

        localctx = SpeakQlParser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_doStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2852
            self.match(SpeakQlParser.DO)
            self.state = 2853
            self.expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def handlerOpenStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.HandlerOpenStatementContext,0)


        def handlerReadIndexStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.HandlerReadIndexStatementContext,0)


        def handlerReadStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.HandlerReadStatementContext,0)


        def handlerCloseStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.HandlerCloseStatementContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_handlerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerStatement" ):
                listener.enterHandlerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerStatement" ):
                listener.exitHandlerStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerStatement" ):
                return visitor.visitHandlerStatement(self)
            else:
                return visitor.visitChildren(self)




    def handlerStatement(self):

        localctx = SpeakQlParser.HandlerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_handlerStatement)
        try:
            self.state = 2859
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2855
                self.handlerOpenStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2856
                self.handlerReadIndexStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2857
                self.handlerReadStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2858
                self.handlerCloseStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.partitions = None # UidListContext
            self.columns = None # UidListContext
            self.setFirst = None # UpdatedElementContext
            self._updatedElement = None # UpdatedElementContext
            self.setElements = list() # of UpdatedElementContexts
            self.duplicatedFirst = None # UpdatedElementContext
            self.duplicatedElements = list() # of UpdatedElementContexts

        def INSERT(self):
            return self.getToken(SpeakQlParser.INSERT, 0)

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(SpeakQlParser.InsertStatementValueContext,0)


        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)

        def IGNORE(self):
            return self.getToken(SpeakQlParser.IGNORE, 0)

        def INTO(self):
            return self.getToken(SpeakQlParser.INTO, 0)

        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)

        def leftParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.LeftParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,i)


        def rightParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.RightParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.RightParenContext,i)


        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UpdatedElementContext,i)


        def ON(self):
            return self.getToken(SpeakQlParser.ON, 0)

        def DUPLICATE(self):
            return self.getToken(SpeakQlParser.DUPLICATE, 0)

        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)

        def UPDATE(self):
            return self.getToken(SpeakQlParser.UPDATE, 0)

        def LOW_PRIORITY(self):
            return self.getToken(SpeakQlParser.LOW_PRIORITY, 0)

        def DELAYED(self):
            return self.getToken(SpeakQlParser.DELAYED, 0)

        def HIGH_PRIORITY(self):
            return self.getToken(SpeakQlParser.HIGH_PRIORITY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def uidList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidListContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidListContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertStatement" ):
                return visitor.visitInsertStatement(self)
            else:
                return visitor.visitChildren(self)




    def insertStatement(self):

        localctx = SpeakQlParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_insertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2861
            self.match(SpeakQlParser.INSERT)
            self.state = 2863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (SpeakQlParser.DELAYED - 55)) | (1 << (SpeakQlParser.HIGH_PRIORITY - 55)) | (1 << (SpeakQlParser.LOW_PRIORITY - 55)))) != 0):
                self.state = 2862
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (SpeakQlParser.DELAYED - 55)) | (1 << (SpeakQlParser.HIGH_PRIORITY - 55)) | (1 << (SpeakQlParser.LOW_PRIORITY - 55)))) != 0)):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IGNORE:
                self.state = 2865
                self.match(SpeakQlParser.IGNORE)


            self.state = 2869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.INTO:
                self.state = 2868
                self.match(SpeakQlParser.INTO)


            self.state = 2871
            self.tableName()
            self.state = 2879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.PARTITION:
                self.state = 2872
                self.match(SpeakQlParser.PARTITION)
                self.state = 2873
                self.leftParen()
                self.state = 2875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                    self.state = 2874
                    localctx.partitions = self.uidList()


                self.state = 2877
                self.rightParen()


            self.state = 2897
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.RETRIEVE, SpeakQlParser.SHOW_ME, SpeakQlParser.DISPLAY, SpeakQlParser.PRESENT, SpeakQlParser.FIND, SpeakQlParser.IN_TABLE, SpeakQlParser.FROM_TABLE, SpeakQlParser.FROM, SpeakQlParser.GROUP, SpeakQlParser.HAVING, SpeakQlParser.INTO, SpeakQlParser.LIMIT, SpeakQlParser.ORDER, SpeakQlParser.SELECT, SpeakQlParser.VALUES, SpeakQlParser.WHERE, SpeakQlParser.VALUE, SpeakQlParser.WINDOW, SpeakQlParser.LR_BRACKET]:
                self.state = 2885
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
                if la_ == 1:
                    self.state = 2881
                    self.leftParen()
                    self.state = 2882
                    localctx.columns = self.uidList()
                    self.state = 2883
                    self.rightParen()


                self.state = 2887
                self.insertStatementValue()
                pass
            elif token in [SpeakQlParser.SET]:
                self.state = 2888
                self.match(SpeakQlParser.SET)
                self.state = 2889
                localctx.setFirst = self.updatedElement()
                self.state = 2894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 2890
                    self.match(SpeakQlParser.COMMA)
                    self.state = 2891
                    localctx._updatedElement = self.updatedElement()
                    localctx.setElements.append(localctx._updatedElement)
                    self.state = 2896
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.ON:
                self.state = 2899
                self.match(SpeakQlParser.ON)
                self.state = 2900
                self.match(SpeakQlParser.DUPLICATE)
                self.state = 2901
                self.match(SpeakQlParser.KEY)
                self.state = 2902
                self.match(SpeakQlParser.UPDATE)
                self.state = 2903
                localctx.duplicatedFirst = self.updatedElement()
                self.state = 2908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 2904
                    self.match(SpeakQlParser.COMMA)
                    self.state = 2905
                    localctx._updatedElement = self.updatedElement()
                    localctx.duplicatedElements.append(localctx._updatedElement)
                    self.state = 2910
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadDataStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.filename = None # Token
            self.violation = None # Token
            self.charset = None # CharsetNameContext
            self.fieldsFormat = None # Token
            self.linesFormat = None # Token

        def LOAD(self):
            return self.getToken(SpeakQlParser.LOAD, 0)

        def DATA(self):
            return self.getToken(SpeakQlParser.DATA, 0)

        def INFILE(self):
            return self.getToken(SpeakQlParser.INFILE, 0)

        def INTO(self):
            return self.getToken(SpeakQlParser.INTO, 0)

        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def LOCAL(self):
            return self.getToken(SpeakQlParser.LOCAL, 0)

        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)

        def leftParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.LeftParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,i)


        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)


        def rightParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.RightParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.RightParenContext,i)


        def CHARACTER(self):
            return self.getToken(SpeakQlParser.CHARACTER, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.SET)
            else:
                return self.getToken(SpeakQlParser.SET, i)

        def LINES(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.LINES)
            else:
                return self.getToken(SpeakQlParser.LINES, i)

        def IGNORE(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.IGNORE)
            else:
                return self.getToken(SpeakQlParser.IGNORE, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.AssignmentFieldContext,i)


        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UpdatedElementContext,i)


        def charsetName(self):
            return self.getTypedRuleContext(SpeakQlParser.CharsetNameContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(SpeakQlParser.LOW_PRIORITY, 0)

        def CONCURRENT(self):
            return self.getToken(SpeakQlParser.CONCURRENT, 0)

        def REPLACE(self):
            return self.getToken(SpeakQlParser.REPLACE, 0)

        def FIELDS(self):
            return self.getToken(SpeakQlParser.FIELDS, 0)

        def COLUMNS(self):
            return self.getToken(SpeakQlParser.COLUMNS, 0)

        def ROWS(self):
            return self.getToken(SpeakQlParser.ROWS, 0)

        def selectFieldsInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.SelectFieldsIntoContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.SelectFieldsIntoContext,i)


        def selectLinesInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.SelectLinesIntoContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.SelectLinesIntoContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_loadDataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadDataStatement" ):
                listener.enterLoadDataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadDataStatement" ):
                listener.exitLoadDataStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadDataStatement" ):
                return visitor.visitLoadDataStatement(self)
            else:
                return visitor.visitChildren(self)




    def loadDataStatement(self):

        localctx = SpeakQlParser.LoadDataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_loadDataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2913
            self.match(SpeakQlParser.LOAD)
            self.state = 2914
            self.match(SpeakQlParser.DATA)
            self.state = 2916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.LOW_PRIORITY or _la==SpeakQlParser.CONCURRENT:
                self.state = 2915
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.LOW_PRIORITY or _la==SpeakQlParser.CONCURRENT):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.LOCAL:
                self.state = 2918
                self.match(SpeakQlParser.LOCAL)


            self.state = 2921
            self.match(SpeakQlParser.INFILE)
            self.state = 2922
            localctx.filename = self.match(SpeakQlParser.STRING_LITERAL)
            self.state = 2924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IGNORE or _la==SpeakQlParser.REPLACE:
                self.state = 2923
                localctx.violation = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.IGNORE or _la==SpeakQlParser.REPLACE):
                    localctx.violation = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2926
            self.match(SpeakQlParser.INTO)
            self.state = 2927
            self.match(SpeakQlParser.TABLE)
            self.state = 2928
            self.tableName()
            self.state = 2934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.PARTITION:
                self.state = 2929
                self.match(SpeakQlParser.PARTITION)
                self.state = 2930
                self.leftParen()
                self.state = 2931
                self.uidList()
                self.state = 2932
                self.rightParen()


            self.state = 2939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.CHARACTER:
                self.state = 2936
                self.match(SpeakQlParser.CHARACTER)
                self.state = 2937
                self.match(SpeakQlParser.SET)
                self.state = 2938
                localctx.charset = self.charsetName()


            self.state = 2947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.COLUMNS or _la==SpeakQlParser.FIELDS:
                self.state = 2941
                localctx.fieldsFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.COLUMNS or _la==SpeakQlParser.FIELDS):
                    localctx.fieldsFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2943 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2942
                    self.selectFieldsInto()
                    self.state = 2945 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (SpeakQlParser.ENCLOSED - 68)) | (1 << (SpeakQlParser.ESCAPED - 68)) | (1 << (SpeakQlParser.OPTIONALLY - 68)))) != 0) or _la==SpeakQlParser.TERMINATED):
                        break



            self.state = 2955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.LINES:
                self.state = 2949
                self.match(SpeakQlParser.LINES)
                self.state = 2951 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2950
                    self.selectLinesInto()
                    self.state = 2953 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SpeakQlParser.STARTING or _la==SpeakQlParser.TERMINATED):
                        break



            self.state = 2961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IGNORE:
                self.state = 2957
                self.match(SpeakQlParser.IGNORE)
                self.state = 2958
                self.decimalLiteral()
                self.state = 2959
                localctx.linesFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.LINES or _la==SpeakQlParser.ROWS):
                    localctx.linesFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.state = 2963
                self.leftParen()
                self.state = 2964
                self.assignmentField()
                self.state = 2969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 2965
                    self.match(SpeakQlParser.COMMA)
                    self.state = 2966
                    self.assignmentField()
                    self.state = 2971
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2972
                self.rightParen()


            self.state = 2985
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
            if la_ == 1:
                self.state = 2976
                self.match(SpeakQlParser.SET)
                self.state = 2977
                self.updatedElement()
                self.state = 2982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 2978
                    self.match(SpeakQlParser.COMMA)
                    self.state = 2979
                    self.updatedElement()
                    self.state = 2984
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadXmlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.filename = None # Token
            self.violation = None # Token
            self.charset = None # CharsetNameContext
            self.tag = None # Token
            self.linesFormat = None # Token

        def LOAD(self):
            return self.getToken(SpeakQlParser.LOAD, 0)

        def XML(self):
            return self.getToken(SpeakQlParser.XML, 0)

        def INFILE(self):
            return self.getToken(SpeakQlParser.INFILE, 0)

        def INTO(self):
            return self.getToken(SpeakQlParser.INTO, 0)

        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.STRING_LITERAL)
            else:
                return self.getToken(SpeakQlParser.STRING_LITERAL, i)

        def LOCAL(self):
            return self.getToken(SpeakQlParser.LOCAL, 0)

        def CHARACTER(self):
            return self.getToken(SpeakQlParser.CHARACTER, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.SET)
            else:
                return self.getToken(SpeakQlParser.SET, i)

        def ROWS(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.ROWS)
            else:
                return self.getToken(SpeakQlParser.ROWS, i)

        def IDENTIFIED(self):
            return self.getToken(SpeakQlParser.IDENTIFIED, 0)

        def BY(self):
            return self.getToken(SpeakQlParser.BY, 0)

        def LESS_SYMBOL(self):
            return self.getToken(SpeakQlParser.LESS_SYMBOL, 0)

        def GREATER_SYMBOL(self):
            return self.getToken(SpeakQlParser.GREATER_SYMBOL, 0)

        def IGNORE(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.IGNORE)
            else:
                return self.getToken(SpeakQlParser.IGNORE, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.AssignmentFieldContext,i)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UpdatedElementContext,i)


        def charsetName(self):
            return self.getTypedRuleContext(SpeakQlParser.CharsetNameContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(SpeakQlParser.LOW_PRIORITY, 0)

        def CONCURRENT(self):
            return self.getToken(SpeakQlParser.CONCURRENT, 0)

        def REPLACE(self):
            return self.getToken(SpeakQlParser.REPLACE, 0)

        def LINES(self):
            return self.getToken(SpeakQlParser.LINES, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_loadXmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadXmlStatement" ):
                listener.enterLoadXmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadXmlStatement" ):
                listener.exitLoadXmlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadXmlStatement" ):
                return visitor.visitLoadXmlStatement(self)
            else:
                return visitor.visitChildren(self)




    def loadXmlStatement(self):

        localctx = SpeakQlParser.LoadXmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_loadXmlStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2987
            self.match(SpeakQlParser.LOAD)
            self.state = 2988
            self.match(SpeakQlParser.XML)
            self.state = 2990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.LOW_PRIORITY or _la==SpeakQlParser.CONCURRENT:
                self.state = 2989
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.LOW_PRIORITY or _la==SpeakQlParser.CONCURRENT):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.LOCAL:
                self.state = 2992
                self.match(SpeakQlParser.LOCAL)


            self.state = 2995
            self.match(SpeakQlParser.INFILE)
            self.state = 2996
            localctx.filename = self.match(SpeakQlParser.STRING_LITERAL)
            self.state = 2998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IGNORE or _la==SpeakQlParser.REPLACE:
                self.state = 2997
                localctx.violation = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.IGNORE or _la==SpeakQlParser.REPLACE):
                    localctx.violation = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3000
            self.match(SpeakQlParser.INTO)
            self.state = 3001
            self.match(SpeakQlParser.TABLE)
            self.state = 3002
            self.tableName()
            self.state = 3006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.CHARACTER:
                self.state = 3003
                self.match(SpeakQlParser.CHARACTER)
                self.state = 3004
                self.match(SpeakQlParser.SET)
                self.state = 3005
                localctx.charset = self.charsetName()


            self.state = 3014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.ROWS:
                self.state = 3008
                self.match(SpeakQlParser.ROWS)
                self.state = 3009
                self.match(SpeakQlParser.IDENTIFIED)
                self.state = 3010
                self.match(SpeakQlParser.BY)
                self.state = 3011
                self.match(SpeakQlParser.LESS_SYMBOL)
                self.state = 3012
                localctx.tag = self.match(SpeakQlParser.STRING_LITERAL)
                self.state = 3013
                self.match(SpeakQlParser.GREATER_SYMBOL)


            self.state = 3020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IGNORE:
                self.state = 3016
                self.match(SpeakQlParser.IGNORE)
                self.state = 3017
                self.decimalLiteral()
                self.state = 3018
                localctx.linesFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.LINES or _la==SpeakQlParser.ROWS):
                    localctx.linesFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
            if la_ == 1:
                self.state = 3022
                self.leftParen()
                self.state = 3023
                self.assignmentField()
                self.state = 3028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 3024
                    self.match(SpeakQlParser.COMMA)
                    self.state = 3025
                    self.assignmentField()
                    self.state = 3030
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3031
                self.rightParen()


            self.state = 3044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
            if la_ == 1:
                self.state = 3035
                self.match(SpeakQlParser.SET)
                self.state = 3036
                self.updatedElement()
                self.state = 3041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 3037
                    self.match(SpeakQlParser.COMMA)
                    self.state = 3038
                    self.updatedElement()
                    self.state = 3043
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.partitions = None # UidListContext
            self.columns = None # UidListContext
            self.setFirst = None # UpdatedElementContext
            self._updatedElement = None # UpdatedElementContext
            self.setElements = list() # of UpdatedElementContexts

        def REPLACE(self):
            return self.getToken(SpeakQlParser.REPLACE, 0)

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(SpeakQlParser.InsertStatementValueContext,0)


        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)

        def INTO(self):
            return self.getToken(SpeakQlParser.INTO, 0)

        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)

        def leftParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.LeftParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,i)


        def rightParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.RightParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.RightParenContext,i)


        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UpdatedElementContext,i)


        def uidList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidListContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidListContext,i)


        def LOW_PRIORITY(self):
            return self.getToken(SpeakQlParser.LOW_PRIORITY, 0)

        def DELAYED(self):
            return self.getToken(SpeakQlParser.DELAYED, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_replaceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceStatement" ):
                listener.enterReplaceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceStatement" ):
                listener.exitReplaceStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceStatement" ):
                return visitor.visitReplaceStatement(self)
            else:
                return visitor.visitChildren(self)




    def replaceStatement(self):

        localctx = SpeakQlParser.ReplaceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_replaceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3046
            self.match(SpeakQlParser.REPLACE)
            self.state = 3048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.DELAYED or _la==SpeakQlParser.LOW_PRIORITY:
                self.state = 3047
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.DELAYED or _la==SpeakQlParser.LOW_PRIORITY):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.INTO:
                self.state = 3050
                self.match(SpeakQlParser.INTO)


            self.state = 3053
            self.tableName()
            self.state = 3059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.PARTITION:
                self.state = 3054
                self.match(SpeakQlParser.PARTITION)
                self.state = 3055
                self.leftParen()
                self.state = 3056
                localctx.partitions = self.uidList()
                self.state = 3057
                self.rightParen()


            self.state = 3077
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.RETRIEVE, SpeakQlParser.SHOW_ME, SpeakQlParser.DISPLAY, SpeakQlParser.PRESENT, SpeakQlParser.FIND, SpeakQlParser.IN_TABLE, SpeakQlParser.FROM_TABLE, SpeakQlParser.FROM, SpeakQlParser.GROUP, SpeakQlParser.HAVING, SpeakQlParser.INTO, SpeakQlParser.LIMIT, SpeakQlParser.ORDER, SpeakQlParser.SELECT, SpeakQlParser.VALUES, SpeakQlParser.WHERE, SpeakQlParser.VALUE, SpeakQlParser.WINDOW, SpeakQlParser.LR_BRACKET]:
                self.state = 3065
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
                if la_ == 1:
                    self.state = 3061
                    self.leftParen()
                    self.state = 3062
                    localctx.columns = self.uidList()
                    self.state = 3063
                    self.rightParen()


                self.state = 3067
                self.insertStatementValue()
                pass
            elif token in [SpeakQlParser.SET]:
                self.state = 3068
                self.match(SpeakQlParser.SET)
                self.state = 3069
                localctx.setFirst = self.updatedElement()
                self.state = 3074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 3070
                    self.match(SpeakQlParser.COMMA)
                    self.state = 3071
                    localctx._updatedElement = self.updatedElement()
                    localctx.setElements.append(localctx._updatedElement)
                    self.state = 3076
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_selectStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnionSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SelectStatementContext
            super().__init__(parser)
            self.unionType = None # Token
            self.copyFrom(ctx)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(SpeakQlParser.QuerySpecificationNointoContext,0)

        def unionStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UnionStatementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UnionStatementContext,i)

        def UNION(self):
            return self.getToken(SpeakQlParser.UNION, 0)
        def orderByClause(self):
            return self.getTypedRuleContext(SpeakQlParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(SpeakQlParser.LimitClauseContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(SpeakQlParser.LockClauseContext,0)

        def querySpecification(self):
            return self.getTypedRuleContext(SpeakQlParser.QuerySpecificationContext,0)

        def queryExpression(self):
            return self.getTypedRuleContext(SpeakQlParser.QueryExpressionContext,0)

        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(SpeakQlParser.DISTINCT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionSelect" ):
                listener.enterUnionSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionSelect" ):
                listener.exitUnionSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionSelect" ):
                return visitor.visitUnionSelect(self)
            else:
                return visitor.visitChildren(self)


    class UnionParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SelectStatementContext
            super().__init__(parser)
            self.unionType = None # Token
            self.copyFrom(ctx)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(SpeakQlParser.QueryExpressionNointoContext,0)

        def unionParenthesis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UnionParenthesisContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UnionParenthesisContext,i)

        def UNION(self):
            return self.getToken(SpeakQlParser.UNION, 0)
        def queryExpression(self):
            return self.getTypedRuleContext(SpeakQlParser.QueryExpressionContext,0)

        def orderByClause(self):
            return self.getTypedRuleContext(SpeakQlParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(SpeakQlParser.LimitClauseContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(SpeakQlParser.LockClauseContext,0)

        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(SpeakQlParser.DISTINCT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionParenthesisSelect" ):
                listener.enterUnionParenthesisSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionParenthesisSelect" ):
                listener.exitUnionParenthesisSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionParenthesisSelect" ):
                return visitor.visitUnionParenthesisSelect(self)
            else:
                return visitor.visitChildren(self)


    class SimpleSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(SpeakQlParser.QuerySpecificationContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(SpeakQlParser.LockClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleSelect" ):
                listener.enterSimpleSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleSelect" ):
                listener.exitSimpleSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleSelect" ):
                return visitor.visitSimpleSelect(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryExpression(self):
            return self.getTypedRuleContext(SpeakQlParser.QueryExpressionContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(SpeakQlParser.LockClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisSelect" ):
                listener.enterParenthesisSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisSelect" ):
                listener.exitParenthesisSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesisSelect" ):
                return visitor.visitParenthesisSelect(self)
            else:
                return visitor.visitChildren(self)



    def selectStatement(self):

        localctx = SpeakQlParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.state = 3134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.SimpleSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3079
                self.querySpecification()
                self.state = 3081
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
                if la_ == 1:
                    self.state = 3080
                    self.lockClause()


                pass

            elif la_ == 2:
                localctx = SpeakQlParser.ParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3083
                self.queryExpression()
                self.state = 3085
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
                if la_ == 1:
                    self.state = 3084
                    self.lockClause()


                pass

            elif la_ == 3:
                localctx = SpeakQlParser.UnionSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3087
                self.querySpecificationNointo()
                self.state = 3089 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3088
                        self.unionStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3091 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,403,self._ctx)

                self.state = 3101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.UNION:
                    self.state = 3093
                    self.match(SpeakQlParser.UNION)
                    self.state = 3095
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SpeakQlParser.ALL or _la==SpeakQlParser.DISTINCT:
                        self.state = 3094
                        localctx.unionType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SpeakQlParser.ALL or _la==SpeakQlParser.DISTINCT):
                            localctx.unionType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 3099
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SpeakQlParser.RETRIEVE, SpeakQlParser.SHOW_ME, SpeakQlParser.DISPLAY, SpeakQlParser.PRESENT, SpeakQlParser.FIND, SpeakQlParser.IN_TABLE, SpeakQlParser.FROM_TABLE, SpeakQlParser.FROM, SpeakQlParser.GROUP, SpeakQlParser.HAVING, SpeakQlParser.INTO, SpeakQlParser.LIMIT, SpeakQlParser.ORDER, SpeakQlParser.SELECT, SpeakQlParser.WHERE, SpeakQlParser.WINDOW]:
                        self.state = 3097
                        self.querySpecification()
                        pass
                    elif token in [SpeakQlParser.LR_BRACKET]:
                        self.state = 3098
                        self.queryExpression()
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 3104
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
                if la_ == 1:
                    self.state = 3103
                    self.orderByClause()


                self.state = 3107
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
                if la_ == 1:
                    self.state = 3106
                    self.limitClause()


                self.state = 3110
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,409,self._ctx)
                if la_ == 1:
                    self.state = 3109
                    self.lockClause()


                pass

            elif la_ == 4:
                localctx = SpeakQlParser.UnionParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3112
                self.queryExpressionNointo()
                self.state = 3114 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3113
                        self.unionParenthesis()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3116 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,410,self._ctx)

                self.state = 3123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.UNION:
                    self.state = 3118
                    self.match(SpeakQlParser.UNION)
                    self.state = 3120
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SpeakQlParser.ALL or _la==SpeakQlParser.DISTINCT:
                        self.state = 3119
                        localctx.unionType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SpeakQlParser.ALL or _la==SpeakQlParser.DISTINCT):
                            localctx.unionType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 3122
                    self.queryExpression()


                self.state = 3126
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
                if la_ == 1:
                    self.state = 3125
                    self.orderByClause()


                self.state = 3129
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,414,self._ctx)
                if la_ == 1:
                    self.state = 3128
                    self.limitClause()


                self.state = 3132
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
                if la_ == 1:
                    self.state = 3131
                    self.lockClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleUpdateStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SingleUpdateStatementContext,0)


        def multipleUpdateStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.MultipleUpdateStatementContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_updateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateStatement" ):
                listener.enterUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateStatement" ):
                listener.exitUpdateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateStatement" ):
                return visitor.visitUpdateStatement(self)
            else:
                return visitor.visitChildren(self)




    def updateStatement(self):

        localctx = SpeakQlParser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_updateStatement)
        try:
            self.state = 3138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3136
                self.singleUpdateStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3137
                self.multipleUpdateStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.insertFormat = None # Token

        def selectStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectStatementContext,0)


        def leftParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.LeftParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,i)


        def rightParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.RightParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.RightParenContext,i)


        def VALUES(self):
            return self.getToken(SpeakQlParser.VALUES, 0)

        def VALUE(self):
            return self.getToken(SpeakQlParser.VALUE, 0)

        def expressionsWithDefaults(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ExpressionsWithDefaultsContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ExpressionsWithDefaultsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_insertStatementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatementValue" ):
                listener.enterInsertStatementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatementValue" ):
                listener.exitInsertStatementValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertStatementValue" ):
                return visitor.visitInsertStatementValue(self)
            else:
                return visitor.visitChildren(self)




    def insertStatementValue(self):

        localctx = SpeakQlParser.InsertStatementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_insertStatementValue)
        self._la = 0 # Token type
        try:
            self.state = 3159
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.RETRIEVE, SpeakQlParser.SHOW_ME, SpeakQlParser.DISPLAY, SpeakQlParser.PRESENT, SpeakQlParser.FIND, SpeakQlParser.IN_TABLE, SpeakQlParser.FROM_TABLE, SpeakQlParser.FROM, SpeakQlParser.GROUP, SpeakQlParser.HAVING, SpeakQlParser.INTO, SpeakQlParser.LIMIT, SpeakQlParser.ORDER, SpeakQlParser.SELECT, SpeakQlParser.WHERE, SpeakQlParser.WINDOW, SpeakQlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3140
                self.selectStatement()
                pass
            elif token in [SpeakQlParser.VALUES, SpeakQlParser.VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3141
                localctx.insertFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.VALUES or _la==SpeakQlParser.VALUE):
                    localctx.insertFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3142
                self.leftParen()
                self.state = 3144
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
                if la_ == 1:
                    self.state = 3143
                    self.expressionsWithDefaults()


                self.state = 3146
                self.rightParen()
                self.state = 3156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 3147
                    self.match(SpeakQlParser.COMMA)
                    self.state = 3148
                    self.leftParen()
                    self.state = 3150
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
                    if la_ == 1:
                        self.state = 3149
                        self.expressionsWithDefaults()


                    self.state = 3152
                    self.rightParen()
                    self.state = 3158
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdatedElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullColumnName(self):
            return self.getTypedRuleContext(SpeakQlParser.FullColumnNameContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_updatedElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdatedElement" ):
                listener.enterUpdatedElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdatedElement" ):
                listener.exitUpdatedElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdatedElement" ):
                return visitor.visitUpdatedElement(self)
            else:
                return visitor.visitChildren(self)




    def updatedElement(self):

        localctx = SpeakQlParser.UpdatedElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_updatedElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3161
            self.fullColumnName()
            self.state = 3162
            self.match(SpeakQlParser.EQUAL_SYMBOL)
            self.state = 3165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                self.state = 3163
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 3164
                self.match(SpeakQlParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def LOCAL_ID(self):
            return self.getToken(SpeakQlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_assignmentField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentField" ):
                listener.enterAssignmentField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentField" ):
                listener.exitAssignmentField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentField" ):
                return visitor.visitAssignmentField(self)
            else:
                return visitor.visitChildren(self)




    def assignmentField(self):

        localctx = SpeakQlParser.AssignmentFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_assignmentField)
        try:
            self.state = 3169
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.OPTIONAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3167
                self.uid()
                pass
            elif token in [SpeakQlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3168
                self.match(SpeakQlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(SpeakQlParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(SpeakQlParser.UPDATE, 0)

        def LOCK(self):
            return self.getToken(SpeakQlParser.LOCK, 0)

        def IN(self):
            return self.getToken(SpeakQlParser.IN, 0)

        def SHARE(self):
            return self.getToken(SpeakQlParser.SHARE, 0)

        def MODE(self):
            return self.getToken(SpeakQlParser.MODE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_lockClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockClause" ):
                listener.enterLockClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockClause" ):
                listener.exitLockClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockClause" ):
                return visitor.visitLockClause(self)
            else:
                return visitor.visitChildren(self)




    def lockClause(self):

        localctx = SpeakQlParser.LockClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_lockClause)
        try:
            self.state = 3177
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3171
                self.match(SpeakQlParser.FOR)
                self.state = 3172
                self.match(SpeakQlParser.UPDATE)
                pass
            elif token in [SpeakQlParser.LOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3173
                self.match(SpeakQlParser.LOCK)
                self.state = 3174
                self.match(SpeakQlParser.IN)
                self.state = 3175
                self.match(SpeakQlParser.SHARE)
                self.state = 3176
                self.match(SpeakQlParser.MODE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def DELETE(self):
            return self.getToken(SpeakQlParser.DELETE, 0)

        def FROM(self):
            return self.getToken(SpeakQlParser.FROM, 0)

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def QUICK(self):
            return self.getToken(SpeakQlParser.QUICK, 0)

        def IGNORE(self):
            return self.getToken(SpeakQlParser.IGNORE, 0)

        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def WHERE(self):
            return self.getToken(SpeakQlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(SpeakQlParser.OrderByClauseContext,0)


        def LIMIT(self):
            return self.getToken(SpeakQlParser.LIMIT, 0)

        def limitClauseAtom(self):
            return self.getTypedRuleContext(SpeakQlParser.LimitClauseAtomContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(SpeakQlParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_singleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDeleteStatement" ):
                listener.enterSingleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDeleteStatement" ):
                listener.exitSingleDeleteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDeleteStatement" ):
                return visitor.visitSingleDeleteStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleDeleteStatement(self):

        localctx = SpeakQlParser.SingleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_singleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3179
            self.match(SpeakQlParser.DELETE)
            self.state = 3181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.LOW_PRIORITY:
                self.state = 3180
                localctx.priority = self.match(SpeakQlParser.LOW_PRIORITY)


            self.state = 3184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.QUICK:
                self.state = 3183
                self.match(SpeakQlParser.QUICK)


            self.state = 3187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IGNORE:
                self.state = 3186
                self.match(SpeakQlParser.IGNORE)


            self.state = 3189
            self.match(SpeakQlParser.FROM)
            self.state = 3190
            self.tableName()
            self.state = 3196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.PARTITION:
                self.state = 3191
                self.match(SpeakQlParser.PARTITION)
                self.state = 3192
                self.leftParen()
                self.state = 3193
                self.uidList()
                self.state = 3194
                self.rightParen()


            self.state = 3200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
            if la_ == 1:
                self.state = 3198
                self.match(SpeakQlParser.WHERE)
                self.state = 3199
                self.expression(0)


            self.state = 3203
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
            if la_ == 1:
                self.state = 3202
                self.orderByClause()


            self.state = 3207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,431,self._ctx)
            if la_ == 1:
                self.state = 3205
                self.match(SpeakQlParser.LIMIT)
                self.state = 3206
                self.limitClauseAtom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleDeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def DELETE(self):
            return self.getToken(SpeakQlParser.DELETE, 0)

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.TableNameContext,i)


        def FROM(self):
            return self.getToken(SpeakQlParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(SpeakQlParser.TableSourcesContext,0)


        def USING(self):
            return self.getToken(SpeakQlParser.USING, 0)

        def QUICK(self):
            return self.getToken(SpeakQlParser.QUICK, 0)

        def IGNORE(self):
            return self.getToken(SpeakQlParser.IGNORE, 0)

        def WHERE(self):
            return self.getToken(SpeakQlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(SpeakQlParser.LOW_PRIORITY, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.DOT)
            else:
                return self.getToken(SpeakQlParser.DOT, i)

        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.STAR)
            else:
                return self.getToken(SpeakQlParser.STAR, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_multipleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleDeleteStatement" ):
                listener.enterMultipleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleDeleteStatement" ):
                listener.exitMultipleDeleteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipleDeleteStatement" ):
                return visitor.visitMultipleDeleteStatement(self)
            else:
                return visitor.visitChildren(self)




    def multipleDeleteStatement(self):

        localctx = SpeakQlParser.MultipleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_multipleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3209
            self.match(SpeakQlParser.DELETE)
            self.state = 3211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.LOW_PRIORITY:
                self.state = 3210
                localctx.priority = self.match(SpeakQlParser.LOW_PRIORITY)


            self.state = 3214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
            if la_ == 1:
                self.state = 3213
                self.match(SpeakQlParser.QUICK)


            self.state = 3217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IGNORE:
                self.state = 3216
                self.match(SpeakQlParser.IGNORE)


            self.state = 3258
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.OPTIONAL]:
                self.state = 3219
                self.tableName()
                self.state = 3222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.DOT:
                    self.state = 3220
                    self.match(SpeakQlParser.DOT)
                    self.state = 3221
                    self.match(SpeakQlParser.STAR)


                self.state = 3232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 3224
                    self.match(SpeakQlParser.COMMA)
                    self.state = 3225
                    self.tableName()
                    self.state = 3228
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SpeakQlParser.DOT:
                        self.state = 3226
                        self.match(SpeakQlParser.DOT)
                        self.state = 3227
                        self.match(SpeakQlParser.STAR)


                    self.state = 3234
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3235
                self.match(SpeakQlParser.FROM)
                self.state = 3236
                self.tableSources()
                pass
            elif token in [SpeakQlParser.FROM]:
                self.state = 3238
                self.match(SpeakQlParser.FROM)
                self.state = 3239
                self.tableName()
                self.state = 3242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.DOT:
                    self.state = 3240
                    self.match(SpeakQlParser.DOT)
                    self.state = 3241
                    self.match(SpeakQlParser.STAR)


                self.state = 3252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 3244
                    self.match(SpeakQlParser.COMMA)
                    self.state = 3245
                    self.tableName()
                    self.state = 3248
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SpeakQlParser.DOT:
                        self.state = 3246
                        self.match(SpeakQlParser.DOT)
                        self.state = 3247
                        self.match(SpeakQlParser.STAR)


                    self.state = 3254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3255
                self.match(SpeakQlParser.USING)
                self.state = 3256
                self.tableSources()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,442,self._ctx)
            if la_ == 1:
                self.state = 3260
                self.match(SpeakQlParser.WHERE)
                self.state = 3261
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerOpenStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER(self):
            return self.getToken(SpeakQlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def OPEN(self):
            return self.getToken(SpeakQlParser.OPEN, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def AS(self):
            return self.getToken(SpeakQlParser.AS, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_handlerOpenStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerOpenStatement" ):
                listener.enterHandlerOpenStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerOpenStatement" ):
                listener.exitHandlerOpenStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerOpenStatement" ):
                return visitor.visitHandlerOpenStatement(self)
            else:
                return visitor.visitChildren(self)




    def handlerOpenStatement(self):

        localctx = SpeakQlParser.HandlerOpenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_handlerOpenStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3264
            self.match(SpeakQlParser.HANDLER)
            self.state = 3265
            self.tableName()
            self.state = 3266
            self.match(SpeakQlParser.OPEN)
            self.state = 3271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,444,self._ctx)
            if la_ == 1:
                self.state = 3268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.AS:
                    self.state = 3267
                    self.match(SpeakQlParser.AS)


                self.state = 3270
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerReadIndexStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index = None # UidContext
            self.moveOrder = None # Token

        def HANDLER(self):
            return self.getToken(SpeakQlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def READ(self):
            return self.getToken(SpeakQlParser.READ, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def comparisonOperator(self):
            return self.getTypedRuleContext(SpeakQlParser.ComparisonOperatorContext,0)


        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def constants(self):
            return self.getTypedRuleContext(SpeakQlParser.ConstantsContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def WHERE(self):
            return self.getToken(SpeakQlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def LIMIT(self):
            return self.getToken(SpeakQlParser.LIMIT, 0)

        def limitClauseAtom(self):
            return self.getTypedRuleContext(SpeakQlParser.LimitClauseAtomContext,0)


        def FIRST(self):
            return self.getToken(SpeakQlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(SpeakQlParser.NEXT, 0)

        def PREV(self):
            return self.getToken(SpeakQlParser.PREV, 0)

        def LAST(self):
            return self.getToken(SpeakQlParser.LAST, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_handlerReadIndexStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerReadIndexStatement" ):
                listener.enterHandlerReadIndexStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerReadIndexStatement" ):
                listener.exitHandlerReadIndexStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerReadIndexStatement" ):
                return visitor.visitHandlerReadIndexStatement(self)
            else:
                return visitor.visitChildren(self)




    def handlerReadIndexStatement(self):

        localctx = SpeakQlParser.HandlerReadIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_handlerReadIndexStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3273
            self.match(SpeakQlParser.HANDLER)
            self.state = 3274
            self.tableName()
            self.state = 3275
            self.match(SpeakQlParser.READ)
            self.state = 3276
            localctx.index = self.uid()
            self.state = 3283
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.EQUAL_SYMBOL, SpeakQlParser.GREATER_SYMBOL, SpeakQlParser.LESS_SYMBOL, SpeakQlParser.EXCLAMATION_SYMBOL]:
                self.state = 3277
                self.comparisonOperator()
                self.state = 3278
                self.leftParen()
                self.state = 3279
                self.constants()
                self.state = 3280
                self.rightParen()
                pass
            elif token in [SpeakQlParser.FIRST, SpeakQlParser.LAST, SpeakQlParser.NEXT, SpeakQlParser.PREV]:
                self.state = 3282
                localctx.moveOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.FIRST or _la==SpeakQlParser.LAST or _la==SpeakQlParser.NEXT or _la==SpeakQlParser.PREV):
                    localctx.moveOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                self.state = 3285
                self.match(SpeakQlParser.WHERE)
                self.state = 3286
                self.expression(0)


            self.state = 3291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
            if la_ == 1:
                self.state = 3289
                self.match(SpeakQlParser.LIMIT)
                self.state = 3290
                self.limitClauseAtom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerReadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.moveOrder = None # Token

        def HANDLER(self):
            return self.getToken(SpeakQlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def READ(self):
            return self.getToken(SpeakQlParser.READ, 0)

        def FIRST(self):
            return self.getToken(SpeakQlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(SpeakQlParser.NEXT, 0)

        def WHERE(self):
            return self.getToken(SpeakQlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def LIMIT(self):
            return self.getToken(SpeakQlParser.LIMIT, 0)

        def limitClauseAtom(self):
            return self.getTypedRuleContext(SpeakQlParser.LimitClauseAtomContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_handlerReadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerReadStatement" ):
                listener.enterHandlerReadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerReadStatement" ):
                listener.exitHandlerReadStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerReadStatement" ):
                return visitor.visitHandlerReadStatement(self)
            else:
                return visitor.visitChildren(self)




    def handlerReadStatement(self):

        localctx = SpeakQlParser.HandlerReadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_handlerReadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3293
            self.match(SpeakQlParser.HANDLER)
            self.state = 3294
            self.tableName()
            self.state = 3295
            self.match(SpeakQlParser.READ)
            self.state = 3296
            localctx.moveOrder = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.FIRST or _la==SpeakQlParser.NEXT):
                localctx.moveOrder = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
            if la_ == 1:
                self.state = 3297
                self.match(SpeakQlParser.WHERE)
                self.state = 3298
                self.expression(0)


            self.state = 3303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
            if la_ == 1:
                self.state = 3301
                self.match(SpeakQlParser.LIMIT)
                self.state = 3302
                self.limitClauseAtom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerCloseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER(self):
            return self.getToken(SpeakQlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def CLOSE(self):
            return self.getToken(SpeakQlParser.CLOSE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_handlerCloseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerCloseStatement" ):
                listener.enterHandlerCloseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerCloseStatement" ):
                listener.exitHandlerCloseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerCloseStatement" ):
                return visitor.visitHandlerCloseStatement(self)
            else:
                return visitor.visitChildren(self)




    def handlerCloseStatement(self):

        localctx = SpeakQlParser.HandlerCloseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_handlerCloseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3305
            self.match(SpeakQlParser.HANDLER)
            self.state = 3306
            self.tableName()
            self.state = 3307
            self.match(SpeakQlParser.CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleUpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def UPDATE(self):
            return self.getToken(SpeakQlParser.UPDATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UpdatedElementContext,i)


        def IGNORE(self):
            return self.getToken(SpeakQlParser.IGNORE, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def WHERE(self):
            return self.getToken(SpeakQlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(SpeakQlParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(SpeakQlParser.LimitClauseContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(SpeakQlParser.LOW_PRIORITY, 0)

        def AS(self):
            return self.getToken(SpeakQlParser.AS, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_singleUpdateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleUpdateStatement" ):
                listener.enterSingleUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleUpdateStatement" ):
                listener.exitSingleUpdateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleUpdateStatement" ):
                return visitor.visitSingleUpdateStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleUpdateStatement(self):

        localctx = SpeakQlParser.SingleUpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_singleUpdateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3309
            self.match(SpeakQlParser.UPDATE)
            self.state = 3311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.LOW_PRIORITY:
                self.state = 3310
                localctx.priority = self.match(SpeakQlParser.LOW_PRIORITY)


            self.state = 3314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IGNORE:
                self.state = 3313
                self.match(SpeakQlParser.IGNORE)


            self.state = 3316
            self.tableName()
            self.state = 3321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & ((1 << (SpeakQlParser.AS - 26)) | (1 << (SpeakQlParser.CURRENT - 26)) | (1 << (SpeakQlParser.DATABASE - 26)) | (1 << (SpeakQlParser.DIAGNOSTICS - 26)) | (1 << (SpeakQlParser.EXCEPT - 26)) | (1 << (SpeakQlParser.GROUP - 26)))) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (SpeakQlParser.LEFT - 106)) | (1 << (SpeakQlParser.NUMBER - 106)) | (1 << (SpeakQlParser.ORDER - 106)) | (1 << (SpeakQlParser.RIGHT - 106)) | (1 << (SpeakQlParser.SCHEMA - 106)))) != 0) or ((((_la - 172)) & ~0x3f) == 0 and ((1 << (_la - 172)) & ((1 << (SpeakQlParser.STACKED - 172)) | (1 << (SpeakQlParser.DATE - 172)) | (1 << (SpeakQlParser.TIME - 172)) | (1 << (SpeakQlParser.TIMESTAMP - 172)) | (1 << (SpeakQlParser.DATETIME - 172)) | (1 << (SpeakQlParser.YEAR - 172)) | (1 << (SpeakQlParser.BINARY - 172)))) != 0) or ((((_la - 237)) & ~0x3f) == 0 and ((1 << (_la - 237)) & ((1 << (SpeakQlParser.TEXT - 237)) | (1 << (SpeakQlParser.ENUM - 237)) | (1 << (SpeakQlParser.SERIAL - 237)) | (1 << (SpeakQlParser.JSON_ARRAY - 237)) | (1 << (SpeakQlParser.JSON_OBJECT - 237)) | (1 << (SpeakQlParser.JSON_QUOTE - 237)) | (1 << (SpeakQlParser.JSON_CONTAINS - 237)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 237)) | (1 << (SpeakQlParser.JSON_EXTRACT - 237)) | (1 << (SpeakQlParser.JSON_KEYS - 237)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 237)) | (1 << (SpeakQlParser.JSON_SEARCH - 237)) | (1 << (SpeakQlParser.JSON_VALUE - 237)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 237)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 237)) | (1 << (SpeakQlParser.JSON_INSERT - 237)) | (1 << (SpeakQlParser.JSON_MERGE - 237)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 237)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 237)) | (1 << (SpeakQlParser.JSON_REMOVE - 237)) | (1 << (SpeakQlParser.JSON_REPLACE - 237)) | (1 << (SpeakQlParser.JSON_SET - 237)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 237)) | (1 << (SpeakQlParser.JSON_DEPTH - 237)) | (1 << (SpeakQlParser.JSON_LENGTH - 237)) | (1 << (SpeakQlParser.JSON_TYPE - 237)) | (1 << (SpeakQlParser.JSON_VALID - 237)) | (1 << (SpeakQlParser.JSON_TABLE - 237)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 237)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 237)) | (1 << (SpeakQlParser.JSON_PRETTY - 237)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 237)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 237)) | (1 << (SpeakQlParser.JSON_ARRAYAGG - 237)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 237)) | (1 << (SpeakQlParser.AVG - 237)) | (1 << (SpeakQlParser.BIT_AND - 237)) | (1 << (SpeakQlParser.BIT_OR - 237)) | (1 << (SpeakQlParser.BIT_XOR - 237)) | (1 << (SpeakQlParser.COUNT - 237)) | (1 << (SpeakQlParser.GROUP_CONCAT - 237)) | (1 << (SpeakQlParser.MAX - 237)) | (1 << (SpeakQlParser.MIN - 237)))) != 0) or ((((_la - 305)) & ~0x3f) == 0 and ((1 << (_la - 305)) & ((1 << (SpeakQlParser.STD - 305)) | (1 << (SpeakQlParser.STDDEV - 305)) | (1 << (SpeakQlParser.STDDEV_POP - 305)) | (1 << (SpeakQlParser.STDDEV_SAMP - 305)) | (1 << (SpeakQlParser.SUM - 305)) | (1 << (SpeakQlParser.VAR_POP - 305)) | (1 << (SpeakQlParser.VAR_SAMP - 305)) | (1 << (SpeakQlParser.VARIANCE - 305)) | (1 << (SpeakQlParser.POSITION - 305)) | (1 << (SpeakQlParser.ACCOUNT - 305)) | (1 << (SpeakQlParser.ACTION - 305)) | (1 << (SpeakQlParser.AFTER - 305)) | (1 << (SpeakQlParser.AGGREGATE - 305)) | (1 << (SpeakQlParser.ALGORITHM - 305)) | (1 << (SpeakQlParser.ANY - 305)) | (1 << (SpeakQlParser.AT - 305)) | (1 << (SpeakQlParser.AUTHORS - 305)) | (1 << (SpeakQlParser.AUTOCOMMIT - 305)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 305)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 305)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 305)) | (1 << (SpeakQlParser.BEGIN - 305)) | (1 << (SpeakQlParser.BINLOG - 305)) | (1 << (SpeakQlParser.BIT - 305)) | (1 << (SpeakQlParser.BLOCK - 305)) | (1 << (SpeakQlParser.BOOL - 305)) | (1 << (SpeakQlParser.BOOLEAN - 305)) | (1 << (SpeakQlParser.BTREE - 305)) | (1 << (SpeakQlParser.CACHE - 305)) | (1 << (SpeakQlParser.CASCADED - 305)) | (1 << (SpeakQlParser.CHAIN - 305)) | (1 << (SpeakQlParser.CHANGED - 305)) | (1 << (SpeakQlParser.CHANNEL - 305)) | (1 << (SpeakQlParser.CHECKSUM - 305)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 305)) | (1 << (SpeakQlParser.CIPHER - 305)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 305)) | (1 << (SpeakQlParser.CLIENT - 305)) | (1 << (SpeakQlParser.CLOSE - 305)) | (1 << (SpeakQlParser.COALESCE - 305)) | (1 << (SpeakQlParser.CODE - 305)) | (1 << (SpeakQlParser.COLUMNS - 305)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 305)) | (1 << (SpeakQlParser.COLUMN_NAME - 305)) | (1 << (SpeakQlParser.COMMENT - 305)) | (1 << (SpeakQlParser.COMMIT - 305)))) != 0) or ((((_la - 369)) & ~0x3f) == 0 and ((1 << (_la - 369)) & ((1 << (SpeakQlParser.COMPACT - 369)) | (1 << (SpeakQlParser.COMPLETION - 369)) | (1 << (SpeakQlParser.COMPRESSED - 369)) | (1 << (SpeakQlParser.COMPRESSION - 369)) | (1 << (SpeakQlParser.CONCURRENT - 369)) | (1 << (SpeakQlParser.CONNECT - 369)) | (1 << (SpeakQlParser.CONNECTION - 369)) | (1 << (SpeakQlParser.CONSISTENT - 369)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 369)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 369)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 369)) | (1 << (SpeakQlParser.CONTAINS - 369)) | (1 << (SpeakQlParser.CONTEXT - 369)) | (1 << (SpeakQlParser.CONTRIBUTORS - 369)) | (1 << (SpeakQlParser.COPY - 369)) | (1 << (SpeakQlParser.CPU - 369)) | (1 << (SpeakQlParser.CURSOR_NAME - 369)) | (1 << (SpeakQlParser.DATA - 369)) | (1 << (SpeakQlParser.DATAFILE - 369)) | (1 << (SpeakQlParser.DEALLOCATE - 369)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 369)) | (1 << (SpeakQlParser.DEFINER - 369)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 369)) | (1 << (SpeakQlParser.DES_KEY_FILE - 369)) | (1 << (SpeakQlParser.DIRECTORY - 369)) | (1 << (SpeakQlParser.DISABLE - 369)) | (1 << (SpeakQlParser.DISCARD - 369)) | (1 << (SpeakQlParser.DISK - 369)) | (1 << (SpeakQlParser.DO - 369)) | (1 << (SpeakQlParser.DUMPFILE - 369)) | (1 << (SpeakQlParser.DUPLICATE - 369)) | (1 << (SpeakQlParser.DYNAMIC - 369)) | (1 << (SpeakQlParser.ENABLE - 369)) | (1 << (SpeakQlParser.ENCRYPTION - 369)) | (1 << (SpeakQlParser.END - 369)) | (1 << (SpeakQlParser.ENDS - 369)) | (1 << (SpeakQlParser.ENGINE - 369)) | (1 << (SpeakQlParser.ENGINES - 369)) | (1 << (SpeakQlParser.ERROR - 369)) | (1 << (SpeakQlParser.ERRORS - 369)) | (1 << (SpeakQlParser.ESCAPE - 369)) | (1 << (SpeakQlParser.EVEN - 369)) | (1 << (SpeakQlParser.EVENT - 369)) | (1 << (SpeakQlParser.EVENTS - 369)) | (1 << (SpeakQlParser.EVERY - 369)) | (1 << (SpeakQlParser.EXCHANGE - 369)) | (1 << (SpeakQlParser.EXCLUSIVE - 369)) | (1 << (SpeakQlParser.EXPIRE - 369)) | (1 << (SpeakQlParser.EXPORT - 369)) | (1 << (SpeakQlParser.EXTENDED - 369)) | (1 << (SpeakQlParser.EXTENT_SIZE - 369)) | (1 << (SpeakQlParser.FAST - 369)) | (1 << (SpeakQlParser.FAULTS - 369)) | (1 << (SpeakQlParser.FIELDS - 369)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 369)) | (1 << (SpeakQlParser.FILTER - 369)) | (1 << (SpeakQlParser.FIRST - 369)) | (1 << (SpeakQlParser.FIXED - 369)) | (1 << (SpeakQlParser.FLUSH - 369)) | (1 << (SpeakQlParser.FOLLOWS - 369)) | (1 << (SpeakQlParser.FOUND - 369)) | (1 << (SpeakQlParser.FULL - 369)) | (1 << (SpeakQlParser.FUNCTION - 369)))) != 0) or ((((_la - 433)) & ~0x3f) == 0 and ((1 << (_la - 433)) & ((1 << (SpeakQlParser.GENERAL - 433)) | (1 << (SpeakQlParser.GLOBAL - 433)) | (1 << (SpeakQlParser.GRANTS - 433)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 433)) | (1 << (SpeakQlParser.HANDLER - 433)) | (1 << (SpeakQlParser.HASH - 433)) | (1 << (SpeakQlParser.HELP - 433)) | (1 << (SpeakQlParser.HOST - 433)) | (1 << (SpeakQlParser.HOSTS - 433)) | (1 << (SpeakQlParser.IDENTIFIED - 433)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 433)) | (1 << (SpeakQlParser.IMPORT - 433)) | (1 << (SpeakQlParser.INDEXES - 433)) | (1 << (SpeakQlParser.INITIAL_SIZE - 433)) | (1 << (SpeakQlParser.INPLACE - 433)) | (1 << (SpeakQlParser.INSERT_METHOD - 433)) | (1 << (SpeakQlParser.INSTALL - 433)) | (1 << (SpeakQlParser.INSTANCE - 433)) | (1 << (SpeakQlParser.INVISIBLE - 433)) | (1 << (SpeakQlParser.INVOKER - 433)) | (1 << (SpeakQlParser.IO - 433)) | (1 << (SpeakQlParser.IO_THREAD - 433)) | (1 << (SpeakQlParser.IPC - 433)) | (1 << (SpeakQlParser.ISOLATION - 433)) | (1 << (SpeakQlParser.ISSUER - 433)) | (1 << (SpeakQlParser.JSON - 433)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 433)) | (1 << (SpeakQlParser.LANGUAGE - 433)) | (1 << (SpeakQlParser.LAST - 433)) | (1 << (SpeakQlParser.LEAVES - 433)) | (1 << (SpeakQlParser.LESS - 433)) | (1 << (SpeakQlParser.LEVEL - 433)) | (1 << (SpeakQlParser.LIST - 433)) | (1 << (SpeakQlParser.LOCAL - 433)) | (1 << (SpeakQlParser.LOGFILE - 433)) | (1 << (SpeakQlParser.LOGS - 433)) | (1 << (SpeakQlParser.MASTER - 433)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 433)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 433)) | (1 << (SpeakQlParser.MASTER_DELAY - 433)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 433)) | (1 << (SpeakQlParser.MASTER_HOST - 433)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 433)) | (1 << (SpeakQlParser.MASTER_LOG_POS - 433)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 433)) | (1 << (SpeakQlParser.MASTER_PORT - 433)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 433)) | (1 << (SpeakQlParser.MASTER_SSL - 433)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 433)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 433)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 433)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 433)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 433)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 433)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 433)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 433)) | (1 << (SpeakQlParser.MASTER_USER - 433)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 433)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 433)) | (1 << (SpeakQlParser.MAX_ROWS - 433)) | (1 << (SpeakQlParser.MAX_SIZE - 433)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 433)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 433)) | (1 << (SpeakQlParser.MEDIUM - 433)))) != 0) or ((((_la - 497)) & ~0x3f) == 0 and ((1 << (_la - 497)) & ((1 << (SpeakQlParser.MEMBER - 497)) | (1 << (SpeakQlParser.MERGE - 497)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 497)) | (1 << (SpeakQlParser.MID - 497)) | (1 << (SpeakQlParser.MIGRATE - 497)) | (1 << (SpeakQlParser.MIN_ROWS - 497)) | (1 << (SpeakQlParser.MODE - 497)) | (1 << (SpeakQlParser.MODIFY - 497)) | (1 << (SpeakQlParser.MUTEX - 497)) | (1 << (SpeakQlParser.MYSQL - 497)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 497)) | (1 << (SpeakQlParser.NAME - 497)) | (1 << (SpeakQlParser.NAMES - 497)) | (1 << (SpeakQlParser.NCHAR - 497)) | (1 << (SpeakQlParser.NEVER - 497)) | (1 << (SpeakQlParser.NEXT - 497)) | (1 << (SpeakQlParser.NO - 497)) | (1 << (SpeakQlParser.NODEGROUP - 497)) | (1 << (SpeakQlParser.NONE - 497)) | (1 << (SpeakQlParser.ODBC - 497)) | (1 << (SpeakQlParser.OFFLINE - 497)) | (1 << (SpeakQlParser.OFFSET - 497)) | (1 << (SpeakQlParser.OF - 497)) | (1 << (SpeakQlParser.OJ - 497)) | (1 << (SpeakQlParser.OLD_PASSWORD - 497)) | (1 << (SpeakQlParser.ONE - 497)) | (1 << (SpeakQlParser.ONLINE - 497)) | (1 << (SpeakQlParser.ONLY - 497)) | (1 << (SpeakQlParser.OPEN - 497)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 497)) | (1 << (SpeakQlParser.OPTIONS - 497)) | (1 << (SpeakQlParser.OWNER - 497)) | (1 << (SpeakQlParser.PACK_KEYS - 497)) | (1 << (SpeakQlParser.PAGE - 497)) | (1 << (SpeakQlParser.PARSER - 497)) | (1 << (SpeakQlParser.PARTIAL - 497)) | (1 << (SpeakQlParser.PARTITIONING - 497)) | (1 << (SpeakQlParser.PARTITIONS - 497)) | (1 << (SpeakQlParser.PASSWORD - 497)) | (1 << (SpeakQlParser.PHASE - 497)) | (1 << (SpeakQlParser.PLUGIN - 497)) | (1 << (SpeakQlParser.PLUGIN_DIR - 497)) | (1 << (SpeakQlParser.PLUGINS - 497)) | (1 << (SpeakQlParser.PORT - 497)) | (1 << (SpeakQlParser.PRECEDES - 497)) | (1 << (SpeakQlParser.PREPARE - 497)) | (1 << (SpeakQlParser.PRESERVE - 497)) | (1 << (SpeakQlParser.PREV - 497)) | (1 << (SpeakQlParser.PROCESSLIST - 497)) | (1 << (SpeakQlParser.PROFILE - 497)) | (1 << (SpeakQlParser.PROFILES - 497)) | (1 << (SpeakQlParser.PROXY - 497)) | (1 << (SpeakQlParser.QUERY - 497)) | (1 << (SpeakQlParser.QUICK - 497)) | (1 << (SpeakQlParser.REBUILD - 497)) | (1 << (SpeakQlParser.RECOVER - 497)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 497)) | (1 << (SpeakQlParser.REDUNDANT - 497)) | (1 << (SpeakQlParser.RELAY - 497)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 497)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 497)) | (1 << (SpeakQlParser.RELAYLOG - 497)) | (1 << (SpeakQlParser.REMOVE - 497)))) != 0) or ((((_la - 561)) & ~0x3f) == 0 and ((1 << (_la - 561)) & ((1 << (SpeakQlParser.REORGANIZE - 561)) | (1 << (SpeakQlParser.REPAIR - 561)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 561)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 561)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 561)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 561)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 561)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 561)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 561)) | (1 << (SpeakQlParser.REPLICATION - 561)) | (1 << (SpeakQlParser.RESET - 561)) | (1 << (SpeakQlParser.RESUME - 561)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 561)) | (1 << (SpeakQlParser.RETURNS - 561)) | (1 << (SpeakQlParser.ROLE - 561)) | (1 << (SpeakQlParser.ROLLBACK - 561)) | (1 << (SpeakQlParser.ROLLUP - 561)) | (1 << (SpeakQlParser.ROTATE - 561)) | (1 << (SpeakQlParser.ROW - 561)) | (1 << (SpeakQlParser.ROWS - 561)) | (1 << (SpeakQlParser.ROW_FORMAT - 561)) | (1 << (SpeakQlParser.SAVEPOINT - 561)) | (1 << (SpeakQlParser.SCHEDULE - 561)) | (1 << (SpeakQlParser.SECURITY - 561)) | (1 << (SpeakQlParser.SERVER - 561)) | (1 << (SpeakQlParser.SESSION - 561)) | (1 << (SpeakQlParser.SHARE - 561)) | (1 << (SpeakQlParser.SHARED - 561)) | (1 << (SpeakQlParser.SIGNED - 561)) | (1 << (SpeakQlParser.SIMPLE - 561)) | (1 << (SpeakQlParser.SLAVE - 561)) | (1 << (SpeakQlParser.SLOW - 561)) | (1 << (SpeakQlParser.SNAPSHOT - 561)) | (1 << (SpeakQlParser.SOCKET - 561)) | (1 << (SpeakQlParser.SOME - 561)) | (1 << (SpeakQlParser.SONAME - 561)) | (1 << (SpeakQlParser.SOUNDS - 561)) | (1 << (SpeakQlParser.SOURCE - 561)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 561)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 561)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 561)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 561)) | (1 << (SpeakQlParser.SQL_CACHE - 561)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 561)) | (1 << (SpeakQlParser.SQL_THREAD - 561)) | (1 << (SpeakQlParser.START - 561)) | (1 << (SpeakQlParser.STARTS - 561)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 561)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 561)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 561)) | (1 << (SpeakQlParser.STATUS - 561)) | (1 << (SpeakQlParser.STOP - 561)) | (1 << (SpeakQlParser.STORAGE - 561)) | (1 << (SpeakQlParser.STRING - 561)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 561)) | (1 << (SpeakQlParser.SUBJECT - 561)) | (1 << (SpeakQlParser.SUBPARTITION - 561)) | (1 << (SpeakQlParser.SUBPARTITIONS - 561)) | (1 << (SpeakQlParser.SUSPEND - 561)) | (1 << (SpeakQlParser.SWAPS - 561)) | (1 << (SpeakQlParser.SWITCHES - 561)) | (1 << (SpeakQlParser.TABLE_NAME - 561)))) != 0) or ((((_la - 625)) & ~0x3f) == 0 and ((1 << (_la - 625)) & ((1 << (SpeakQlParser.TABLESPACE - 625)) | (1 << (SpeakQlParser.TEMPORARY - 625)) | (1 << (SpeakQlParser.TEMPTABLE - 625)) | (1 << (SpeakQlParser.THAN - 625)) | (1 << (SpeakQlParser.TRADITIONAL - 625)) | (1 << (SpeakQlParser.TRANSACTION - 625)) | (1 << (SpeakQlParser.TRANSACTIONAL - 625)) | (1 << (SpeakQlParser.TRIGGERS - 625)) | (1 << (SpeakQlParser.TRUNCATE - 625)) | (1 << (SpeakQlParser.UNDEFINED - 625)) | (1 << (SpeakQlParser.UNDOFILE - 625)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 625)) | (1 << (SpeakQlParser.UNINSTALL - 625)) | (1 << (SpeakQlParser.UNKNOWN - 625)) | (1 << (SpeakQlParser.UNTIL - 625)) | (1 << (SpeakQlParser.UPGRADE - 625)) | (1 << (SpeakQlParser.USER - 625)) | (1 << (SpeakQlParser.USE_FRM - 625)) | (1 << (SpeakQlParser.USER_RESOURCES - 625)) | (1 << (SpeakQlParser.VALIDATION - 625)) | (1 << (SpeakQlParser.VALUE - 625)) | (1 << (SpeakQlParser.VARIABLES - 625)) | (1 << (SpeakQlParser.VIEW - 625)) | (1 << (SpeakQlParser.VISIBLE - 625)) | (1 << (SpeakQlParser.WAIT - 625)) | (1 << (SpeakQlParser.WARNINGS - 625)) | (1 << (SpeakQlParser.WITHOUT - 625)) | (1 << (SpeakQlParser.WORK - 625)) | (1 << (SpeakQlParser.WRAPPER - 625)) | (1 << (SpeakQlParser.X509 - 625)) | (1 << (SpeakQlParser.XA - 625)) | (1 << (SpeakQlParser.XML - 625)) | (1 << (SpeakQlParser.EUR - 625)) | (1 << (SpeakQlParser.USA - 625)) | (1 << (SpeakQlParser.JIS - 625)) | (1 << (SpeakQlParser.ISO - 625)) | (1 << (SpeakQlParser.INTERNAL - 625)) | (1 << (SpeakQlParser.QUARTER - 625)) | (1 << (SpeakQlParser.MONTH - 625)) | (1 << (SpeakQlParser.DAY - 625)) | (1 << (SpeakQlParser.HOUR - 625)) | (1 << (SpeakQlParser.MINUTE - 625)) | (1 << (SpeakQlParser.WEEK - 625)) | (1 << (SpeakQlParser.SECOND - 625)) | (1 << (SpeakQlParser.MICROSECOND - 625)) | (1 << (SpeakQlParser.TABLES - 625)) | (1 << (SpeakQlParser.ROUTINE - 625)) | (1 << (SpeakQlParser.EXECUTE - 625)) | (1 << (SpeakQlParser.FILE - 625)) | (1 << (SpeakQlParser.PROCESS - 625)) | (1 << (SpeakQlParser.RELOAD - 625)) | (1 << (SpeakQlParser.SHUTDOWN - 625)) | (1 << (SpeakQlParser.SUPER - 625)) | (1 << (SpeakQlParser.PRIVILEGES - 625)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 625)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 625)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 625)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 625)) | (1 << (SpeakQlParser.CLONE_ADMIN - 625)))) != 0) or ((((_la - 689)) & ~0x3f) == 0 and ((1 << (_la - 689)) & ((1 << (SpeakQlParser.CONNECTION_ADMIN - 689)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 689)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 689)) | (1 << (SpeakQlParser.FIREWALL_USER - 689)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 689)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 689)) | (1 << (SpeakQlParser.NDB_STORED_USER - 689)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 689)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 689)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 689)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 689)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 689)) | (1 << (SpeakQlParser.ROLE_ADMIN - 689)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 689)) | (1 << (SpeakQlParser.SET_USER_ID - 689)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 689)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 689)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 689)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 689)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 689)) | (1 << (SpeakQlParser.ARMSCII8 - 689)) | (1 << (SpeakQlParser.ASCII - 689)) | (1 << (SpeakQlParser.BIG5 - 689)) | (1 << (SpeakQlParser.CP1250 - 689)) | (1 << (SpeakQlParser.CP1251 - 689)) | (1 << (SpeakQlParser.CP1256 - 689)) | (1 << (SpeakQlParser.CP1257 - 689)) | (1 << (SpeakQlParser.CP850 - 689)) | (1 << (SpeakQlParser.CP852 - 689)) | (1 << (SpeakQlParser.CP866 - 689)) | (1 << (SpeakQlParser.CP932 - 689)) | (1 << (SpeakQlParser.DEC8 - 689)) | (1 << (SpeakQlParser.EUCJPMS - 689)) | (1 << (SpeakQlParser.EUCKR - 689)) | (1 << (SpeakQlParser.GB18030 - 689)) | (1 << (SpeakQlParser.GB2312 - 689)) | (1 << (SpeakQlParser.GBK - 689)) | (1 << (SpeakQlParser.GEOSTD8 - 689)) | (1 << (SpeakQlParser.GREEK - 689)) | (1 << (SpeakQlParser.HEBREW - 689)) | (1 << (SpeakQlParser.HP8 - 689)) | (1 << (SpeakQlParser.KEYBCS2 - 689)) | (1 << (SpeakQlParser.KOI8R - 689)) | (1 << (SpeakQlParser.KOI8U - 689)) | (1 << (SpeakQlParser.LATIN1 - 689)) | (1 << (SpeakQlParser.LATIN2 - 689)) | (1 << (SpeakQlParser.LATIN5 - 689)) | (1 << (SpeakQlParser.LATIN7 - 689)) | (1 << (SpeakQlParser.MACCE - 689)) | (1 << (SpeakQlParser.MACROMAN - 689)) | (1 << (SpeakQlParser.SJIS - 689)) | (1 << (SpeakQlParser.SWE7 - 689)) | (1 << (SpeakQlParser.TIS620 - 689)) | (1 << (SpeakQlParser.UCS2 - 689)) | (1 << (SpeakQlParser.UJIS - 689)) | (1 << (SpeakQlParser.UTF16 - 689)) | (1 << (SpeakQlParser.UTF16LE - 689)) | (1 << (SpeakQlParser.UTF32 - 689)))) != 0) or ((((_la - 753)) & ~0x3f) == 0 and ((1 << (_la - 753)) & ((1 << (SpeakQlParser.UTF8 - 753)) | (1 << (SpeakQlParser.UTF8MB3 - 753)) | (1 << (SpeakQlParser.UTF8MB4 - 753)) | (1 << (SpeakQlParser.ARCHIVE - 753)) | (1 << (SpeakQlParser.BLACKHOLE - 753)) | (1 << (SpeakQlParser.CSV - 753)) | (1 << (SpeakQlParser.FEDERATED - 753)) | (1 << (SpeakQlParser.INNODB - 753)) | (1 << (SpeakQlParser.MEMORY - 753)) | (1 << (SpeakQlParser.MRG_MYISAM - 753)) | (1 << (SpeakQlParser.MYISAM - 753)) | (1 << (SpeakQlParser.NDB - 753)) | (1 << (SpeakQlParser.NDBCLUSTER - 753)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 753)) | (1 << (SpeakQlParser.TOKUDB - 753)) | (1 << (SpeakQlParser.REPEATABLE - 753)) | (1 << (SpeakQlParser.COMMITTED - 753)) | (1 << (SpeakQlParser.UNCOMMITTED - 753)) | (1 << (SpeakQlParser.SERIALIZABLE - 753)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 753)) | (1 << (SpeakQlParser.LINESTRING - 753)) | (1 << (SpeakQlParser.MULTILINESTRING - 753)) | (1 << (SpeakQlParser.MULTIPOINT - 753)) | (1 << (SpeakQlParser.MULTIPOLYGON - 753)) | (1 << (SpeakQlParser.POINT - 753)) | (1 << (SpeakQlParser.POLYGON - 753)) | (1 << (SpeakQlParser.ABS - 753)) | (1 << (SpeakQlParser.ACOS - 753)) | (1 << (SpeakQlParser.ADDDATE - 753)) | (1 << (SpeakQlParser.ADDTIME - 753)) | (1 << (SpeakQlParser.AES_DECRYPT - 753)) | (1 << (SpeakQlParser.AES_ENCRYPT - 753)) | (1 << (SpeakQlParser.AREA - 753)) | (1 << (SpeakQlParser.ASBINARY - 753)) | (1 << (SpeakQlParser.ASIN - 753)) | (1 << (SpeakQlParser.ASTEXT - 753)) | (1 << (SpeakQlParser.ASWKB - 753)) | (1 << (SpeakQlParser.ASWKT - 753)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 753)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 753)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 753)) | (1 << (SpeakQlParser.ASYMMETRIC_SIGN - 753)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 753)) | (1 << (SpeakQlParser.ATAN - 753)) | (1 << (SpeakQlParser.ATAN2 - 753)) | (1 << (SpeakQlParser.BENCHMARK - 753)) | (1 << (SpeakQlParser.BIN - 753)) | (1 << (SpeakQlParser.BIT_COUNT - 753)) | (1 << (SpeakQlParser.BIT_LENGTH - 753)) | (1 << (SpeakQlParser.BUFFER - 753)) | (1 << (SpeakQlParser.CATALOG_NAME - 753)) | (1 << (SpeakQlParser.CEIL - 753)) | (1 << (SpeakQlParser.CEILING - 753)) | (1 << (SpeakQlParser.CENTROID - 753)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 753)) | (1 << (SpeakQlParser.CHARSET - 753)) | (1 << (SpeakQlParser.CHAR_LENGTH - 753)) | (1 << (SpeakQlParser.COERCIBILITY - 753)) | (1 << (SpeakQlParser.COLLATION - 753)) | (1 << (SpeakQlParser.COMPRESS - 753)) | (1 << (SpeakQlParser.CONCAT - 753)) | (1 << (SpeakQlParser.CONCAT_WS - 753)))) != 0) or ((((_la - 817)) & ~0x3f) == 0 and ((1 << (_la - 817)) & ((1 << (SpeakQlParser.CONNECTION_ID - 817)) | (1 << (SpeakQlParser.CONV - 817)) | (1 << (SpeakQlParser.CONVERT_TZ - 817)) | (1 << (SpeakQlParser.COS - 817)) | (1 << (SpeakQlParser.COT - 817)) | (1 << (SpeakQlParser.CRC32 - 817)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 817)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 817)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 817)) | (1 << (SpeakQlParser.CREATE_DIGEST - 817)) | (1 << (SpeakQlParser.CROSSES - 817)) | (1 << (SpeakQlParser.DATEDIFF - 817)) | (1 << (SpeakQlParser.DATE_FORMAT - 817)) | (1 << (SpeakQlParser.DAYNAME - 817)) | (1 << (SpeakQlParser.DAYOFMONTH - 817)) | (1 << (SpeakQlParser.DAYOFWEEK - 817)) | (1 << (SpeakQlParser.DAYOFYEAR - 817)) | (1 << (SpeakQlParser.DECODE - 817)) | (1 << (SpeakQlParser.DEGREES - 817)) | (1 << (SpeakQlParser.DES_DECRYPT - 817)) | (1 << (SpeakQlParser.DES_ENCRYPT - 817)) | (1 << (SpeakQlParser.DIMENSION - 817)) | (1 << (SpeakQlParser.DISJOINT - 817)) | (1 << (SpeakQlParser.ELT - 817)) | (1 << (SpeakQlParser.ENCODE - 817)) | (1 << (SpeakQlParser.ENCRYPT - 817)) | (1 << (SpeakQlParser.ENDPOINT - 817)) | (1 << (SpeakQlParser.ENVELOPE - 817)) | (1 << (SpeakQlParser.EQUALS - 817)) | (1 << (SpeakQlParser.EXP - 817)) | (1 << (SpeakQlParser.EXPORT_SET - 817)) | (1 << (SpeakQlParser.EXTERIORRING - 817)) | (1 << (SpeakQlParser.EXTRACTVALUE - 817)) | (1 << (SpeakQlParser.FIELD - 817)) | (1 << (SpeakQlParser.FIND_IN_SET - 817)) | (1 << (SpeakQlParser.FLOOR - 817)) | (1 << (SpeakQlParser.FORMAT - 817)) | (1 << (SpeakQlParser.FOUND_ROWS - 817)) | (1 << (SpeakQlParser.FROM_BASE64 - 817)) | (1 << (SpeakQlParser.FROM_DAYS - 817)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 817)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 817)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 817)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 817)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 817)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 817)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 817)) | (1 << (SpeakQlParser.GEOMETRYN - 817)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 817)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 817)) | (1 << (SpeakQlParser.GEOMFROMWKB - 817)) | (1 << (SpeakQlParser.GET_FORMAT - 817)) | (1 << (SpeakQlParser.GET_LOCK - 817)) | (1 << (SpeakQlParser.GLENGTH - 817)) | (1 << (SpeakQlParser.GREATEST - 817)) | (1 << (SpeakQlParser.GTID_SUBSET - 817)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 817)) | (1 << (SpeakQlParser.HEX - 817)) | (1 << (SpeakQlParser.IFNULL - 817)) | (1 << (SpeakQlParser.INET6_ATON - 817)) | (1 << (SpeakQlParser.INET6_NTOA - 817)) | (1 << (SpeakQlParser.INET_ATON - 817)) | (1 << (SpeakQlParser.INET_NTOA - 817)) | (1 << (SpeakQlParser.INSTR - 817)))) != 0) or ((((_la - 881)) & ~0x3f) == 0 and ((1 << (_la - 881)) & ((1 << (SpeakQlParser.INTERIORRINGN - 881)) | (1 << (SpeakQlParser.INTERSECTS - 881)) | (1 << (SpeakQlParser.ISCLOSED - 881)) | (1 << (SpeakQlParser.ISEMPTY - 881)) | (1 << (SpeakQlParser.ISNULL - 881)) | (1 << (SpeakQlParser.ISSIMPLE - 881)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 881)) | (1 << (SpeakQlParser.IS_IPV4 - 881)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 881)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 881)) | (1 << (SpeakQlParser.IS_IPV6 - 881)) | (1 << (SpeakQlParser.IS_USED_LOCK - 881)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 881)) | (1 << (SpeakQlParser.LCASE - 881)) | (1 << (SpeakQlParser.LEAST - 881)) | (1 << (SpeakQlParser.LENGTH - 881)) | (1 << (SpeakQlParser.LINEFROMTEXT - 881)) | (1 << (SpeakQlParser.LINEFROMWKB - 881)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 881)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 881)) | (1 << (SpeakQlParser.LN - 881)) | (1 << (SpeakQlParser.LOAD_FILE - 881)) | (1 << (SpeakQlParser.LOCATE - 881)) | (1 << (SpeakQlParser.LOG - 881)) | (1 << (SpeakQlParser.LOG10 - 881)) | (1 << (SpeakQlParser.LOG2 - 881)) | (1 << (SpeakQlParser.LOWER - 881)) | (1 << (SpeakQlParser.LPAD - 881)) | (1 << (SpeakQlParser.LTRIM - 881)) | (1 << (SpeakQlParser.MAKEDATE - 881)) | (1 << (SpeakQlParser.MAKETIME - 881)) | (1 << (SpeakQlParser.MAKE_SET - 881)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 881)) | (1 << (SpeakQlParser.MBRCONTAINS - 881)) | (1 << (SpeakQlParser.MBRDISJOINT - 881)) | (1 << (SpeakQlParser.MBREQUAL - 881)) | (1 << (SpeakQlParser.MBRINTERSECTS - 881)) | (1 << (SpeakQlParser.MBROVERLAPS - 881)) | (1 << (SpeakQlParser.MBRTOUCHES - 881)) | (1 << (SpeakQlParser.MBRWITHIN - 881)) | (1 << (SpeakQlParser.MD5 - 881)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 881)) | (1 << (SpeakQlParser.MLINEFROMWKB - 881)) | (1 << (SpeakQlParser.MONTHNAME - 881)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 881)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 881)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 881)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 881)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 881)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 881)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 881)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 881)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 881)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 881)) | (1 << (SpeakQlParser.NAME_CONST - 881)) | (1 << (SpeakQlParser.NULLIF - 881)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 881)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 881)) | (1 << (SpeakQlParser.NUMPOINTS - 881)) | (1 << (SpeakQlParser.OCT - 881)) | (1 << (SpeakQlParser.OCTET_LENGTH - 881)) | (1 << (SpeakQlParser.ORD - 881)) | (1 << (SpeakQlParser.OVERLAPS - 881)) | (1 << (SpeakQlParser.PERIOD_ADD - 881)))) != 0) or ((((_la - 945)) & ~0x3f) == 0 and ((1 << (_la - 945)) & ((1 << (SpeakQlParser.PERIOD_DIFF - 945)) | (1 << (SpeakQlParser.PI - 945)) | (1 << (SpeakQlParser.POINTFROMTEXT - 945)) | (1 << (SpeakQlParser.POINTFROMWKB - 945)) | (1 << (SpeakQlParser.POINTN - 945)) | (1 << (SpeakQlParser.POLYFROMTEXT - 945)) | (1 << (SpeakQlParser.POLYFROMWKB - 945)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 945)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 945)) | (1 << (SpeakQlParser.POW - 945)) | (1 << (SpeakQlParser.POWER - 945)) | (1 << (SpeakQlParser.QUOTE - 945)) | (1 << (SpeakQlParser.RADIANS - 945)) | (1 << (SpeakQlParser.RAND - 945)) | (1 << (SpeakQlParser.RANDOM_BYTES - 945)) | (1 << (SpeakQlParser.RELEASE_LOCK - 945)) | (1 << (SpeakQlParser.REVERSE - 945)) | (1 << (SpeakQlParser.ROUND - 945)) | (1 << (SpeakQlParser.ROW_COUNT - 945)) | (1 << (SpeakQlParser.RPAD - 945)) | (1 << (SpeakQlParser.RTRIM - 945)) | (1 << (SpeakQlParser.SEC_TO_TIME - 945)) | (1 << (SpeakQlParser.SESSION_USER - 945)) | (1 << (SpeakQlParser.SHA - 945)) | (1 << (SpeakQlParser.SHA1 - 945)) | (1 << (SpeakQlParser.SHA2 - 945)) | (1 << (SpeakQlParser.SCHEMA_NAME - 945)) | (1 << (SpeakQlParser.SIGN - 945)) | (1 << (SpeakQlParser.SIN - 945)) | (1 << (SpeakQlParser.SLEEP - 945)) | (1 << (SpeakQlParser.SOUNDEX - 945)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 945)) | (1 << (SpeakQlParser.SQRT - 945)) | (1 << (SpeakQlParser.SRID - 945)) | (1 << (SpeakQlParser.STARTPOINT - 945)) | (1 << (SpeakQlParser.STRCMP - 945)) | (1 << (SpeakQlParser.STR_TO_DATE - 945)) | (1 << (SpeakQlParser.ST_AREA - 945)) | (1 << (SpeakQlParser.ST_ASBINARY - 945)) | (1 << (SpeakQlParser.ST_ASTEXT - 945)) | (1 << (SpeakQlParser.ST_ASWKB - 945)) | (1 << (SpeakQlParser.ST_ASWKT - 945)) | (1 << (SpeakQlParser.ST_BUFFER - 945)) | (1 << (SpeakQlParser.ST_CENTROID - 945)) | (1 << (SpeakQlParser.ST_CONTAINS - 945)) | (1 << (SpeakQlParser.ST_CROSSES - 945)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 945)) | (1 << (SpeakQlParser.ST_DIMENSION - 945)) | (1 << (SpeakQlParser.ST_DISJOINT - 945)) | (1 << (SpeakQlParser.ST_DISTANCE - 945)) | (1 << (SpeakQlParser.ST_ENDPOINT - 945)) | (1 << (SpeakQlParser.ST_ENVELOPE - 945)) | (1 << (SpeakQlParser.ST_EQUALS - 945)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 945)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 945)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 945)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 945)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 945)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 945)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 945)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 945)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 945)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 945)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 945)))) != 0) or ((((_la - 1009)) & ~0x3f) == 0 and ((1 << (_la - 1009)) & ((1 << (SpeakQlParser.ST_GEOMFROMWKB - 1009)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 1009)) | (1 << (SpeakQlParser.ST_INTERSECTION - 1009)) | (1 << (SpeakQlParser.ST_INTERSECTS - 1009)) | (1 << (SpeakQlParser.ST_ISCLOSED - 1009)) | (1 << (SpeakQlParser.ST_ISEMPTY - 1009)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 1009)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 1009)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 1009)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 1009)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 1009)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 1009)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 1009)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 1009)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 1009)) | (1 << (SpeakQlParser.ST_OVERLAPS - 1009)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 1009)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 1009)) | (1 << (SpeakQlParser.ST_POINTN - 1009)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 1009)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 1009)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 1009)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 1009)) | (1 << (SpeakQlParser.ST_SRID - 1009)) | (1 << (SpeakQlParser.ST_STARTPOINT - 1009)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 1009)) | (1 << (SpeakQlParser.ST_TOUCHES - 1009)) | (1 << (SpeakQlParser.ST_UNION - 1009)) | (1 << (SpeakQlParser.ST_WITHIN - 1009)) | (1 << (SpeakQlParser.ST_X - 1009)) | (1 << (SpeakQlParser.ST_Y - 1009)) | (1 << (SpeakQlParser.SUBDATE - 1009)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 1009)) | (1 << (SpeakQlParser.SUBTIME - 1009)) | (1 << (SpeakQlParser.SYSTEM_USER - 1009)) | (1 << (SpeakQlParser.TAN - 1009)) | (1 << (SpeakQlParser.TIMEDIFF - 1009)) | (1 << (SpeakQlParser.TIMESTAMPADD - 1009)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 1009)) | (1 << (SpeakQlParser.TIME_FORMAT - 1009)) | (1 << (SpeakQlParser.TIME_TO_SEC - 1009)) | (1 << (SpeakQlParser.TOUCHES - 1009)) | (1 << (SpeakQlParser.TO_BASE64 - 1009)) | (1 << (SpeakQlParser.TO_DAYS - 1009)) | (1 << (SpeakQlParser.TO_SECONDS - 1009)) | (1 << (SpeakQlParser.UCASE - 1009)) | (1 << (SpeakQlParser.UNCOMPRESS - 1009)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1009)) | (1 << (SpeakQlParser.UNHEX - 1009)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1009)) | (1 << (SpeakQlParser.UPDATEXML - 1009)) | (1 << (SpeakQlParser.UPPER - 1009)) | (1 << (SpeakQlParser.UUID - 1009)) | (1 << (SpeakQlParser.UUID_SHORT - 1009)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1009)) | (1 << (SpeakQlParser.VERSION - 1009)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1009)) | (1 << (SpeakQlParser.WEEKDAY - 1009)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1009)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1009)) | (1 << (SpeakQlParser.WITHIN - 1009)) | (1 << (SpeakQlParser.YEARWEEK - 1009)) | (1 << (SpeakQlParser.Y_FUNCTION - 1009)) | (1 << (SpeakQlParser.X_FUNCTION - 1009)))) != 0) or ((((_la - 1088)) & ~0x3f) == 0 and ((1 << (_la - 1088)) & ((1 << (SpeakQlParser.MOD - 1088)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1088)) | (1 << (SpeakQlParser.STRING_LITERAL - 1088)) | (1 << (SpeakQlParser.ID - 1088)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1088)) | (1 << (SpeakQlParser.OPTIONAL - 1088)))) != 0):
                self.state = 3318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.AS:
                    self.state = 3317
                    self.match(SpeakQlParser.AS)


                self.state = 3320
                self.uid()


            self.state = 3323
            self.match(SpeakQlParser.SET)
            self.state = 3324
            self.updatedElement()
            self.state = 3329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 3325
                self.match(SpeakQlParser.COMMA)
                self.state = 3326
                self.updatedElement()
                self.state = 3331
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,455,self._ctx)
            if la_ == 1:
                self.state = 3332
                self.match(SpeakQlParser.WHERE)
                self.state = 3333
                self.expression(0)


            self.state = 3337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,456,self._ctx)
            if la_ == 1:
                self.state = 3336
                self.orderByClause()


            self.state = 3340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
            if la_ == 1:
                self.state = 3339
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleUpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def UPDATE(self):
            return self.getToken(SpeakQlParser.UPDATE, 0)

        def tableSources(self):
            return self.getTypedRuleContext(SpeakQlParser.TableSourcesContext,0)


        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UpdatedElementContext,i)


        def IGNORE(self):
            return self.getToken(SpeakQlParser.IGNORE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def WHERE(self):
            return self.getToken(SpeakQlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(SpeakQlParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_multipleUpdateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleUpdateStatement" ):
                listener.enterMultipleUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleUpdateStatement" ):
                listener.exitMultipleUpdateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipleUpdateStatement" ):
                return visitor.visitMultipleUpdateStatement(self)
            else:
                return visitor.visitChildren(self)




    def multipleUpdateStatement(self):

        localctx = SpeakQlParser.MultipleUpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_multipleUpdateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3342
            self.match(SpeakQlParser.UPDATE)
            self.state = 3344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.LOW_PRIORITY:
                self.state = 3343
                localctx.priority = self.match(SpeakQlParser.LOW_PRIORITY)


            self.state = 3347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IGNORE:
                self.state = 3346
                self.match(SpeakQlParser.IGNORE)


            self.state = 3349
            self.tableSources()
            self.state = 3350
            self.match(SpeakQlParser.SET)
            self.state = 3351
            self.updatedElement()
            self.state = 3356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 3352
                self.match(SpeakQlParser.COMMA)
                self.state = 3353
                self.updatedElement()
                self.state = 3358
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,461,self._ctx)
            if la_ == 1:
                self.state = 3359
                self.match(SpeakQlParser.WHERE)
                self.state = 3360
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(SpeakQlParser.ORDER, 0)

        def BY(self):
            return self.getToken(SpeakQlParser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.OrderByExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = SpeakQlParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_orderByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3363
            self.match(SpeakQlParser.ORDER)
            self.state = 3364
            self.match(SpeakQlParser.BY)
            self.state = 3365
            self.orderByExpression()
            self.state = 3370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 3366
                self.match(SpeakQlParser.COMMA)
                self.state = 3367
                self.orderByExpression()
                self.state = 3372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(SpeakQlParser.ASC, 0)

        def DESC(self):
            return self.getToken(SpeakQlParser.DESC, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_orderByExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByExpression" ):
                listener.enterOrderByExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByExpression" ):
                listener.exitOrderByExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByExpression" ):
                return visitor.visitOrderByExpression(self)
            else:
                return visitor.visitChildren(self)




    def orderByExpression(self):

        localctx = SpeakQlParser.OrderByExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_orderByExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3373
            self.expression(0)
            self.state = 3375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,463,self._ctx)
            if la_ == 1:
                self.state = 3374
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.ASC or _la==SpeakQlParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.TableSourceContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.TableSourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_tableSources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSources" ):
                listener.enterTableSources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSources" ):
                listener.exitTableSources(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSources" ):
                return visitor.visitTableSources(self)
            else:
                return visitor.visitChildren(self)




    def tableSources(self):

        localctx = SpeakQlParser.TableSourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_tableSources)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3377
            self.tableSource()
            self.state = 3382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 3378
                self.match(SpeakQlParser.COMMA)
                self.state = 3379
                self.tableSource()
                self.state = 3384
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_tableSource

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableSourceNestedContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def tableSourceItem(self):
            return self.getTypedRuleContext(SpeakQlParser.TableSourceItemContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceNested" ):
                listener.enterTableSourceNested(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceNested" ):
                listener.exitTableSourceNested(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSourceNested" ):
                return visitor.visitTableSourceNested(self)
            else:
                return visitor.visitChildren(self)


    class TableSourceBaseContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableSourceItem(self):
            return self.getTypedRuleContext(SpeakQlParser.TableSourceItemContext,0)

        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceBase" ):
                listener.enterTableSourceBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceBase" ):
                listener.exitTableSourceBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSourceBase" ):
                return visitor.visitTableSourceBase(self)
            else:
                return visitor.visitChildren(self)



    def tableSource(self):

        localctx = SpeakQlParser.TableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_tableSource)
        self._la = 0 # Token type
        try:
            self.state = 3402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.TableSourceBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3385
                self.tableSourceItem()
                self.state = 3389
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,465,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3386
                        self.joinPart() 
                    self.state = 3391
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,465,self._ctx)

                pass

            elif la_ == 2:
                localctx = SpeakQlParser.TableSourceNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3392
                self.leftParen()
                self.state = 3393
                self.tableSourceItem()
                self.state = 3397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SpeakQlParser.JOIN_TABLE) | (1 << SpeakQlParser.BY_JOINING) | (1 << SpeakQlParser.BY_JOINING_TABLE) | (1 << SpeakQlParser.JOIN_WITH) | (1 << SpeakQlParser.JOIN_WITH_TABLE) | (1 << SpeakQlParser.JOINED_WITH) | (1 << SpeakQlParser.JOINED_WITH_TABLE) | (1 << SpeakQlParser.CROSS))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (SpeakQlParser.INNER - 93)) | (1 << (SpeakQlParser.JOIN - 93)) | (1 << (SpeakQlParser.LEFT - 93)) | (1 << (SpeakQlParser.NATURAL - 93)) | (1 << (SpeakQlParser.RIGHT - 93)))) != 0) or _la==SpeakQlParser.STRAIGHT_JOIN:
                    self.state = 3394
                    self.joinPart()
                    self.state = 3399
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3400
                self.rightParen()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_tableSourceItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableSourceItemContext
            super().__init__(parser)
            self.parenthesisSubquery = None # SelectStatementContext
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectStatementContext,0)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def AS(self):
            return self.getToken(SpeakQlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryTableItem" ):
                listener.enterSubqueryTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryTableItem" ):
                listener.exitSubqueryTableItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryTableItem" ):
                return visitor.visitSubqueryTableItem(self)
            else:
                return visitor.visitChildren(self)


    class AtomTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableSourceItemContext
            super().__init__(parser)
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)

        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def indexHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.IndexHintContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.IndexHintContext,i)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def AS(self):
            return self.getToken(SpeakQlParser.AS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomTableItem" ):
                listener.enterAtomTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomTableItem" ):
                listener.exitAtomTableItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomTableItem" ):
                return visitor.visitAtomTableItem(self)
            else:
                return visitor.visitChildren(self)


    class TableSourcesItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.TableSourceItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def tableSources(self):
            return self.getTypedRuleContext(SpeakQlParser.TableSourcesContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourcesItem" ):
                listener.enterTableSourcesItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourcesItem" ):
                listener.exitTableSourcesItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSourcesItem" ):
                return visitor.visitTableSourcesItem(self)
            else:
                return visitor.visitChildren(self)



    def tableSourceItem(self):

        localctx = SpeakQlParser.TableSourceItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_tableSourceItem)
        self._la = 0 # Token type
        try:
            self.state = 3444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.AtomTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3404
                self.tableName()
                self.state = 3410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.PARTITION:
                    self.state = 3405
                    self.match(SpeakQlParser.PARTITION)
                    self.state = 3406
                    self.leftParen()
                    self.state = 3407
                    self.uidList()
                    self.state = 3408
                    self.rightParen()


                self.state = 3416
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
                if la_ == 1:
                    self.state = 3413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SpeakQlParser.AS:
                        self.state = 3412
                        self.match(SpeakQlParser.AS)


                    self.state = 3415
                    localctx.alias = self.uid()


                self.state = 3426
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,472,self._ctx)
                if la_ == 1:
                    self.state = 3418
                    self.indexHint()
                    self.state = 3423
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,471,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3419
                            self.match(SpeakQlParser.COMMA)
                            self.state = 3420
                            self.indexHint() 
                        self.state = 3425
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,471,self._ctx)



                pass

            elif la_ == 2:
                localctx = SpeakQlParser.SubqueryTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3433
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
                if la_ == 1:
                    self.state = 3428
                    self.selectStatement()
                    pass

                elif la_ == 2:
                    self.state = 3429
                    self.leftParen()
                    self.state = 3430
                    localctx.parenthesisSubquery = self.selectStatement()
                    self.state = 3431
                    self.rightParen()
                    pass


                self.state = 3436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.AS:
                    self.state = 3435
                    self.match(SpeakQlParser.AS)


                self.state = 3438
                localctx.alias = self.uid()
                pass

            elif la_ == 3:
                localctx = SpeakQlParser.TableSourcesItemContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3440
                self.leftParen()
                self.state = 3441
                self.tableSources()
                self.state = 3442
                self.rightParen()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexHintAction = None # Token
            self.keyFormat = None # Token

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def USE(self):
            return self.getToken(SpeakQlParser.USE, 0)

        def IGNORE(self):
            return self.getToken(SpeakQlParser.IGNORE, 0)

        def FORCE(self):
            return self.getToken(SpeakQlParser.FORCE, 0)

        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)

        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)

        def FOR(self):
            return self.getToken(SpeakQlParser.FOR, 0)

        def indexHintType(self):
            return self.getTypedRuleContext(SpeakQlParser.IndexHintTypeContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_indexHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHint" ):
                listener.enterIndexHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHint" ):
                listener.exitIndexHint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexHint" ):
                return visitor.visitIndexHint(self)
            else:
                return visitor.visitChildren(self)




    def indexHint(self):

        localctx = SpeakQlParser.IndexHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_indexHint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3446
            localctx.indexHintAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.FORCE or _la==SpeakQlParser.IGNORE or _la==SpeakQlParser.USE):
                localctx.indexHintAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3447
            localctx.keyFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEY):
                localctx.keyFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.FOR:
                self.state = 3448
                self.match(SpeakQlParser.FOR)
                self.state = 3449
                self.indexHintType()


            self.state = 3452
            self.leftParen()
            self.state = 3453
            self.uidList()
            self.state = 3454
            self.rightParen()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(SpeakQlParser.JOIN, 0)

        def ORDER(self):
            return self.getToken(SpeakQlParser.ORDER, 0)

        def BY(self):
            return self.getToken(SpeakQlParser.BY, 0)

        def GROUP(self):
            return self.getToken(SpeakQlParser.GROUP, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_indexHintType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHintType" ):
                listener.enterIndexHintType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHintType" ):
                listener.exitIndexHintType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexHintType" ):
                return visitor.visitIndexHintType(self)
            else:
                return visitor.visitChildren(self)




    def indexHintType(self):

        localctx = SpeakQlParser.IndexHintTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_indexHintType)
        try:
            self.state = 3461
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.JOIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3456
                self.match(SpeakQlParser.JOIN)
                pass
            elif token in [SpeakQlParser.ORDER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3457
                self.match(SpeakQlParser.ORDER)
                self.state = 3458
                self.match(SpeakQlParser.BY)
                pass
            elif token in [SpeakQlParser.GROUP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3459
                self.match(SpeakQlParser.GROUP)
                self.state = 3460
                self.match(SpeakQlParser.BY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_joinPart

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InnerJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinKeyword(self):
            return self.getTypedRuleContext(SpeakQlParser.JoinKeywordContext,0)

        def tableSourceItem(self):
            return self.getTypedRuleContext(SpeakQlParser.TableSourceItemContext,0)

        def ON(self):
            return self.getToken(SpeakQlParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(SpeakQlParser.USING, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def INNER(self):
            return self.getToken(SpeakQlParser.INNER, 0)
        def CROSS(self):
            return self.getToken(SpeakQlParser.CROSS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerJoin" ):
                listener.enterInnerJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerJoin" ):
                listener.exitInnerJoin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerJoin" ):
                return visitor.visitInnerJoin(self)
            else:
                return visitor.visitChildren(self)


    class NaturalJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NATURAL(self):
            return self.getToken(SpeakQlParser.NATURAL, 0)
        def joinKeyword(self):
            return self.getTypedRuleContext(SpeakQlParser.JoinKeywordContext,0)

        def tableSourceItem(self):
            return self.getTypedRuleContext(SpeakQlParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(SpeakQlParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(SpeakQlParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(SpeakQlParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNaturalJoin" ):
                listener.enterNaturalJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNaturalJoin" ):
                listener.exitNaturalJoin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNaturalJoin" ):
                return visitor.visitNaturalJoin(self)
            else:
                return visitor.visitChildren(self)


    class OuterJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinKeyword(self):
            return self.getTypedRuleContext(SpeakQlParser.JoinKeywordContext,0)

        def tableSourceItem(self):
            return self.getTypedRuleContext(SpeakQlParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(SpeakQlParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(SpeakQlParser.RIGHT, 0)
        def ON(self):
            return self.getToken(SpeakQlParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(SpeakQlParser.USING, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def OUTER(self):
            return self.getToken(SpeakQlParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuterJoin" ):
                listener.enterOuterJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuterJoin" ):
                listener.exitOuterJoin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOuterJoin" ):
                return visitor.visitOuterJoin(self)
            else:
                return visitor.visitChildren(self)


    class StraightJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRAIGHT_JOIN(self):
            return self.getToken(SpeakQlParser.STRAIGHT_JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(SpeakQlParser.TableSourceItemContext,0)

        def ON(self):
            return self.getToken(SpeakQlParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStraightJoin" ):
                listener.enterStraightJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStraightJoin" ):
                listener.exitStraightJoin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStraightJoin" ):
                return visitor.visitStraightJoin(self)
            else:
                return visitor.visitChildren(self)



    def joinPart(self):

        localctx = SpeakQlParser.JoinPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_joinPart)
        self._la = 0 # Token type
        try:
            self.state = 3508
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.JOIN_TABLE, SpeakQlParser.BY_JOINING, SpeakQlParser.BY_JOINING_TABLE, SpeakQlParser.JOIN_WITH, SpeakQlParser.JOIN_WITH_TABLE, SpeakQlParser.JOINED_WITH, SpeakQlParser.JOINED_WITH_TABLE, SpeakQlParser.CROSS, SpeakQlParser.INNER, SpeakQlParser.JOIN]:
                localctx = SpeakQlParser.InnerJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.CROSS or _la==SpeakQlParser.INNER:
                    self.state = 3463
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.CROSS or _la==SpeakQlParser.INNER):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3466
                self.joinKeyword()
                self.state = 3467
                self.tableSourceItem()
                self.state = 3475
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
                if la_ == 1:
                    self.state = 3468
                    self.match(SpeakQlParser.ON)
                    self.state = 3469
                    self.expression(0)

                elif la_ == 2:
                    self.state = 3470
                    self.match(SpeakQlParser.USING)
                    self.state = 3471
                    self.leftParen()
                    self.state = 3472
                    self.uidList()
                    self.state = 3473
                    self.rightParen()


                pass
            elif token in [SpeakQlParser.STRAIGHT_JOIN]:
                localctx = SpeakQlParser.StraightJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3477
                self.match(SpeakQlParser.STRAIGHT_JOIN)
                self.state = 3478
                self.tableSourceItem()
                self.state = 3481
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,480,self._ctx)
                if la_ == 1:
                    self.state = 3479
                    self.match(SpeakQlParser.ON)
                    self.state = 3480
                    self.expression(0)


                pass
            elif token in [SpeakQlParser.LEFT, SpeakQlParser.RIGHT]:
                localctx = SpeakQlParser.OuterJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3483
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.LEFT or _la==SpeakQlParser.RIGHT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.OUTER:
                    self.state = 3484
                    self.match(SpeakQlParser.OUTER)


                self.state = 3487
                self.joinKeyword()
                self.state = 3488
                self.tableSourceItem()
                self.state = 3496
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.ON]:
                    self.state = 3489
                    self.match(SpeakQlParser.ON)
                    self.state = 3490
                    self.expression(0)
                    pass
                elif token in [SpeakQlParser.USING]:
                    self.state = 3491
                    self.match(SpeakQlParser.USING)
                    self.state = 3492
                    self.leftParen()
                    self.state = 3493
                    self.uidList()
                    self.state = 3494
                    self.rightParen()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [SpeakQlParser.NATURAL]:
                localctx = SpeakQlParser.NaturalJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3498
                self.match(SpeakQlParser.NATURAL)
                self.state = 3503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LEFT or _la==SpeakQlParser.RIGHT:
                    self.state = 3499
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.LEFT or _la==SpeakQlParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3501
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SpeakQlParser.OUTER:
                        self.state = 3500
                        self.match(SpeakQlParser.OUTER)




                self.state = 3505
                self.joinKeyword()
                self.state = 3506
                self.tableSourceItem()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(SpeakQlParser.JOIN, 0)

        def JOIN_TABLE(self):
            return self.getToken(SpeakQlParser.JOIN_TABLE, 0)

        def BY_JOINING(self):
            return self.getToken(SpeakQlParser.BY_JOINING, 0)

        def BY_JOINING_TABLE(self):
            return self.getToken(SpeakQlParser.BY_JOINING_TABLE, 0)

        def JOINED_WITH(self):
            return self.getToken(SpeakQlParser.JOINED_WITH, 0)

        def JOIN_WITH(self):
            return self.getToken(SpeakQlParser.JOIN_WITH, 0)

        def JOINED_WITH_TABLE(self):
            return self.getToken(SpeakQlParser.JOINED_WITH_TABLE, 0)

        def JOIN_WITH_TABLE(self):
            return self.getToken(SpeakQlParser.JOIN_WITH_TABLE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_joinKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinKeyword" ):
                listener.enterJoinKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinKeyword" ):
                listener.exitJoinKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinKeyword" ):
                return visitor.visitJoinKeyword(self)
            else:
                return visitor.visitChildren(self)




    def joinKeyword(self):

        localctx = SpeakQlParser.JoinKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_joinKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3510
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SpeakQlParser.JOIN_TABLE) | (1 << SpeakQlParser.BY_JOINING) | (1 << SpeakQlParser.BY_JOINING_TABLE) | (1 << SpeakQlParser.JOIN_WITH) | (1 << SpeakQlParser.JOIN_WITH_TABLE) | (1 << SpeakQlParser.JOINED_WITH) | (1 << SpeakQlParser.JOINED_WITH_TABLE))) != 0) or _la==SpeakQlParser.JOIN):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def querySpecification(self):
            return self.getTypedRuleContext(SpeakQlParser.QuerySpecificationContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def queryExpression(self):
            return self.getTypedRuleContext(SpeakQlParser.QueryExpressionContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_queryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpression" ):
                listener.enterQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpression" ):
                listener.exitQueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryExpression" ):
                return visitor.visitQueryExpression(self)
            else:
                return visitor.visitChildren(self)




    def queryExpression(self):

        localctx = SpeakQlParser.QueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_queryExpression)
        try:
            self.state = 3520
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3512
                self.leftParen()
                self.state = 3513
                self.querySpecification()
                self.state = 3514
                self.rightParen()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3516
                self.leftParen()
                self.state = 3517
                self.queryExpression()
                self.state = 3518
                self.rightParen()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionNointoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def querySpecificationNointo(self):
            return self.getTypedRuleContext(SpeakQlParser.QuerySpecificationNointoContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def queryExpressionNointo(self):
            return self.getTypedRuleContext(SpeakQlParser.QueryExpressionNointoContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_queryExpressionNointo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpressionNointo" ):
                listener.enterQueryExpressionNointo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpressionNointo" ):
                listener.exitQueryExpressionNointo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryExpressionNointo" ):
                return visitor.visitQueryExpressionNointo(self)
            else:
                return visitor.visitChildren(self)




    def queryExpressionNointo(self):

        localctx = SpeakQlParser.QueryExpressionNointoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_queryExpressionNointo)
        try:
            self.state = 3530
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3522
                self.leftParen()
                self.state = 3523
                self.querySpecificationNointo()
                self.state = 3524
                self.rightParen()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3526
                self.leftParen()
                self.state = 3527
                self.queryExpressionNointo()
                self.state = 3528
                self.rightParen()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectExpression(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectExpressionContext,0)


        def tableExpression(self):
            return self.getTypedRuleContext(SpeakQlParser.TableExpressionContext,0)


        def selectModifierExpression(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectModifierExpressionContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuerySpecification" ):
                return visitor.visitQuerySpecification(self)
            else:
                return visitor.visitChildren(self)




    def querySpecification(self):

        localctx = SpeakQlParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_querySpecification)
        try:
            self.state = 3556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,488,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3532
                self.selectExpression()
                self.state = 3533
                self.tableExpression()
                self.state = 3534
                self.selectModifierExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3536
                self.selectExpression()
                self.state = 3537
                self.selectModifierExpression()
                self.state = 3538
                self.tableExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3540
                self.tableExpression()
                self.state = 3541
                self.selectExpression()
                self.state = 3542
                self.selectModifierExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3544
                self.tableExpression()
                self.state = 3545
                self.selectModifierExpression()
                self.state = 3546
                self.selectExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3548
                self.selectModifierExpression()
                self.state = 3549
                self.tableExpression()
                self.state = 3550
                self.selectExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3552
                self.selectModifierExpression()
                self.state = 3553
                self.selectExpression()
                self.state = 3554
                self.tableExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectModifierExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupByClause(self):
            return self.getTypedRuleContext(SpeakQlParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(SpeakQlParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(SpeakQlParser.WindowClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(SpeakQlParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(SpeakQlParser.LimitClauseContext,0)


        def selectIntoExpression(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectIntoExpressionContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_selectModifierExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectModifierExpression" ):
                listener.enterSelectModifierExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectModifierExpression" ):
                listener.exitSelectModifierExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectModifierExpression" ):
                return visitor.visitSelectModifierExpression(self)
            else:
                return visitor.visitChildren(self)




    def selectModifierExpression(self):

        localctx = SpeakQlParser.SelectModifierExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_selectModifierExpression)
        try:
            self.state = 3591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,500,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3559
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,489,self._ctx)
                if la_ == 1:
                    self.state = 3558
                    self.groupByClause()


                self.state = 3562
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,490,self._ctx)
                if la_ == 1:
                    self.state = 3561
                    self.havingClause()


                self.state = 3565
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,491,self._ctx)
                if la_ == 1:
                    self.state = 3564
                    self.windowClause()


                self.state = 3568
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,492,self._ctx)
                if la_ == 1:
                    self.state = 3567
                    self.orderByClause()


                self.state = 3571
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,493,self._ctx)
                if la_ == 1:
                    self.state = 3570
                    self.limitClause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3574
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
                if la_ == 1:
                    self.state = 3573
                    self.groupByClause()


                self.state = 3577
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
                if la_ == 1:
                    self.state = 3576
                    self.havingClause()


                self.state = 3580
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,496,self._ctx)
                if la_ == 1:
                    self.state = 3579
                    self.windowClause()


                self.state = 3583
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,497,self._ctx)
                if la_ == 1:
                    self.state = 3582
                    self.orderByClause()


                self.state = 3586
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,498,self._ctx)
                if la_ == 1:
                    self.state = 3585
                    self.limitClause()


                self.state = 3589
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,499,self._ctx)
                if la_ == 1:
                    self.state = 3588
                    self.selectIntoExpression()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectClause(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectClauseContext,0)


        def selectElements(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectElementsContext,0)


        def selectSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.SelectSpecContext,i)


        def selectIntoExpression(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectIntoExpressionContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_selectExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpression" ):
                listener.enterSelectExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpression" ):
                listener.exitSelectExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectExpression" ):
                return visitor.visitSelectExpression(self)
            else:
                return visitor.visitChildren(self)




    def selectExpression(self):

        localctx = SpeakQlParser.SelectExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_selectExpression)
        try:
            self.state = 3613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,504,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3593
                self.selectClause()
                self.state = 3597
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,501,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3594
                        self.selectSpec() 
                    self.state = 3599
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,501,self._ctx)

                self.state = 3600
                self.selectElements()
                self.state = 3602
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,502,self._ctx)
                if la_ == 1:
                    self.state = 3601
                    self.selectIntoExpression()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3604
                self.selectClause()
                self.state = 3608
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,503,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3605
                        self.selectSpec() 
                    self.state = 3610
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,503,self._ctx)

                self.state = 3611
                self.selectElements()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromClause(self):
            return self.getTypedRuleContext(SpeakQlParser.FromClauseContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_tableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableExpression" ):
                listener.enterTableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableExpression" ):
                listener.exitTableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExpression" ):
                return visitor.visitTableExpression(self)
            else:
                return visitor.visitChildren(self)




    def tableExpression(self):

        localctx = SpeakQlParser.TableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_tableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
            if la_ == 1:
                self.state = 3615
                self.fromClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectKeyword(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectKeywordContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_selectClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectClause" ):
                listener.enterSelectClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectClause" ):
                listener.exitSelectClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectClause" ):
                return visitor.visitSelectClause(self)
            else:
                return visitor.visitChildren(self)




    def selectClause(self):

        localctx = SpeakQlParser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_selectClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3618
            self.selectKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(SpeakQlParser.SELECT, 0)

        def RETRIEVE(self):
            return self.getToken(SpeakQlParser.RETRIEVE, 0)

        def SHOW_ME(self):
            return self.getToken(SpeakQlParser.SHOW_ME, 0)

        def DISPLAY(self):
            return self.getToken(SpeakQlParser.DISPLAY, 0)

        def PRESENT(self):
            return self.getToken(SpeakQlParser.PRESENT, 0)

        def FIND(self):
            return self.getToken(SpeakQlParser.FIND, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_selectKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectKeyword" ):
                listener.enterSelectKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectKeyword" ):
                listener.exitSelectKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectKeyword" ):
                return visitor.visitSelectKeyword(self)
            else:
                return visitor.visitChildren(self)




    def selectKeyword(self):

        localctx = SpeakQlParser.SelectKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_selectKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3620
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SpeakQlParser.RETRIEVE) | (1 << SpeakQlParser.SHOW_ME) | (1 << SpeakQlParser.DISPLAY) | (1 << SpeakQlParser.PRESENT) | (1 << SpeakQlParser.FIND))) != 0) or _la==SpeakQlParser.SELECT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationNointoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(SpeakQlParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectElementsContext,0)


        def selectSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.SelectSpecContext,i)


        def fromClause(self):
            return self.getTypedRuleContext(SpeakQlParser.FromClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(SpeakQlParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(SpeakQlParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(SpeakQlParser.WindowClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(SpeakQlParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(SpeakQlParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_querySpecificationNointo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecificationNointo" ):
                listener.enterQuerySpecificationNointo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecificationNointo" ):
                listener.exitQuerySpecificationNointo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuerySpecificationNointo" ):
                return visitor.visitQuerySpecificationNointo(self)
            else:
                return visitor.visitChildren(self)




    def querySpecificationNointo(self):

        localctx = SpeakQlParser.QuerySpecificationNointoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_querySpecificationNointo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3622
            self.match(SpeakQlParser.SELECT)
            self.state = 3626
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,506,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3623
                    self.selectSpec() 
                self.state = 3628
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,506,self._ctx)

            self.state = 3629
            self.selectElements()
            self.state = 3631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,507,self._ctx)
            if la_ == 1:
                self.state = 3630
                self.fromClause()


            self.state = 3634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,508,self._ctx)
            if la_ == 1:
                self.state = 3633
                self.groupByClause()


            self.state = 3637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,509,self._ctx)
            if la_ == 1:
                self.state = 3636
                self.havingClause()


            self.state = 3640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,510,self._ctx)
            if la_ == 1:
                self.state = 3639
                self.windowClause()


            self.state = 3643
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,511,self._ctx)
            if la_ == 1:
                self.state = 3642
                self.orderByClause()


            self.state = 3646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,512,self._ctx)
            if la_ == 1:
                self.state = 3645
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionParenthesisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(SpeakQlParser.UNION, 0)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(SpeakQlParser.QueryExpressionNointoContext,0)


        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(SpeakQlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_unionParenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionParenthesis" ):
                listener.enterUnionParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionParenthesis" ):
                listener.exitUnionParenthesis(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionParenthesis" ):
                return visitor.visitUnionParenthesis(self)
            else:
                return visitor.visitChildren(self)




    def unionParenthesis(self):

        localctx = SpeakQlParser.UnionParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_unionParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3648
            self.match(SpeakQlParser.UNION)
            self.state = 3650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.ALL or _la==SpeakQlParser.DISTINCT:
                self.state = 3649
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.ALL or _la==SpeakQlParser.DISTINCT):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3652
            self.queryExpressionNointo()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(SpeakQlParser.UNION, 0)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(SpeakQlParser.QuerySpecificationNointoContext,0)


        def queryExpressionNointo(self):
            return self.getTypedRuleContext(SpeakQlParser.QueryExpressionNointoContext,0)


        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(SpeakQlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_unionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionStatement" ):
                listener.enterUnionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionStatement" ):
                listener.exitUnionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionStatement" ):
                return visitor.visitUnionStatement(self)
            else:
                return visitor.visitChildren(self)




    def unionStatement(self):

        localctx = SpeakQlParser.UnionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_unionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3654
            self.match(SpeakQlParser.UNION)
            self.state = 3656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.ALL or _la==SpeakQlParser.DISTINCT:
                self.state = 3655
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.ALL or _la==SpeakQlParser.DISTINCT):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.SELECT]:
                self.state = 3658
                self.querySpecificationNointo()
                pass
            elif token in [SpeakQlParser.LR_BRACKET]:
                self.state = 3659
                self.queryExpressionNointo()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(SpeakQlParser.DISTINCT, 0)

        def DISTINCTROW(self):
            return self.getToken(SpeakQlParser.DISTINCTROW, 0)

        def HIGH_PRIORITY(self):
            return self.getToken(SpeakQlParser.HIGH_PRIORITY, 0)

        def STRAIGHT_JOIN(self):
            return self.getToken(SpeakQlParser.STRAIGHT_JOIN, 0)

        def SQL_SMALL_RESULT(self):
            return self.getToken(SpeakQlParser.SQL_SMALL_RESULT, 0)

        def SQL_BIG_RESULT(self):
            return self.getToken(SpeakQlParser.SQL_BIG_RESULT, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(SpeakQlParser.SQL_BUFFER_RESULT, 0)

        def SQL_CACHE(self):
            return self.getToken(SpeakQlParser.SQL_CACHE, 0)

        def SQL_NO_CACHE(self):
            return self.getToken(SpeakQlParser.SQL_NO_CACHE, 0)

        def SQL_CALC_FOUND_ROWS(self):
            return self.getToken(SpeakQlParser.SQL_CALC_FOUND_ROWS, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_selectSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSpec" ):
                listener.enterSelectSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSpec" ):
                listener.exitSelectSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectSpec" ):
                return visitor.visitSelectSpec(self)
            else:
                return visitor.visitChildren(self)




    def selectSpec(self):

        localctx = SpeakQlParser.SelectSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_selectSpec)
        self._la = 0 # Token type
        try:
            self.state = 3670
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.ALL, SpeakQlParser.DISTINCT, SpeakQlParser.DISTINCTROW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3662
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SpeakQlParser.ALL) | (1 << SpeakQlParser.DISTINCT) | (1 << SpeakQlParser.DISTINCTROW))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SpeakQlParser.HIGH_PRIORITY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3663
                self.match(SpeakQlParser.HIGH_PRIORITY)
                pass
            elif token in [SpeakQlParser.STRAIGHT_JOIN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3664
                self.match(SpeakQlParser.STRAIGHT_JOIN)
                pass
            elif token in [SpeakQlParser.SQL_SMALL_RESULT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3665
                self.match(SpeakQlParser.SQL_SMALL_RESULT)
                pass
            elif token in [SpeakQlParser.SQL_BIG_RESULT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3666
                self.match(SpeakQlParser.SQL_BIG_RESULT)
                pass
            elif token in [SpeakQlParser.SQL_BUFFER_RESULT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3667
                self.match(SpeakQlParser.SQL_BUFFER_RESULT)
                pass
            elif token in [SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3668
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.SQL_CACHE or _la==SpeakQlParser.SQL_NO_CACHE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SpeakQlParser.SQL_CALC_FOUND_ROWS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3669
                self.match(SpeakQlParser.SQL_CALC_FOUND_ROWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.star = None # Token

        def selectElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.SelectElementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.SelectElementContext,i)


        def STAR(self):
            return self.getToken(SpeakQlParser.STAR, 0)

        def selectElementDelimiter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.SelectElementDelimiterContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.SelectElementDelimiterContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_selectElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectElements" ):
                listener.enterSelectElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectElements" ):
                listener.exitSelectElements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectElements" ):
                return visitor.visitSelectElements(self)
            else:
                return visitor.visitChildren(self)




    def selectElements(self):

        localctx = SpeakQlParser.SelectElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_selectElements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3674
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,517,self._ctx)
            if la_ == 1:
                self.state = 3672
                localctx.star = self.match(SpeakQlParser.STAR)
                pass

            elif la_ == 2:
                self.state = 3673
                self.selectElement()
                pass


            self.state = 3681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.AND or _la==SpeakQlParser.COMMA:
                self.state = 3676
                self.selectElementDelimiter()
                self.state = 3677
                self.selectElement()
                self.state = 3683
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementDelimiterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SpeakQlParser.COMMA, 0)

        def AND(self):
            return self.getToken(SpeakQlParser.AND, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_selectElementDelimiter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectElementDelimiter" ):
                listener.enterSelectElementDelimiter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectElementDelimiter" ):
                listener.exitSelectElementDelimiter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectElementDelimiter" ):
                return visitor.visitSelectElementDelimiter(self)
            else:
                return visitor.visitChildren(self)




    def selectElementDelimiter(self):

        localctx = SpeakQlParser.SelectElementDelimiterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_selectElementDelimiter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3684
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.AND or _la==SpeakQlParser.COMMA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_selectElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectExpressionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)

        def LOCAL_ID(self):
            return self.getToken(SpeakQlParser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(SpeakQlParser.VAR_ASSIGN, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def AS(self):
            return self.getToken(SpeakQlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpressionElement" ):
                listener.enterSelectExpressionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpressionElement" ):
                listener.exitSelectExpressionElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectExpressionElement" ):
                return visitor.visitSelectExpressionElement(self)
            else:
                return visitor.visitChildren(self)


    class SelectFunctionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(SpeakQlParser.FunctionCallContext,0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def AS(self):
            return self.getToken(SpeakQlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFunctionElement" ):
                listener.enterSelectFunctionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFunctionElement" ):
                listener.exitSelectFunctionElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectFunctionElement" ):
                return visitor.visitSelectFunctionElement(self)
            else:
                return visitor.visitChildren(self)


    class SelectStarElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(SpeakQlParser.FullIdContext,0)

        def DOT(self):
            return self.getToken(SpeakQlParser.DOT, 0)
        def STAR(self):
            return self.getToken(SpeakQlParser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStarElement" ):
                listener.enterSelectStarElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStarElement" ):
                listener.exitSelectStarElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStarElement" ):
                return visitor.visitSelectStarElement(self)
            else:
                return visitor.visitChildren(self)


    class SelectColumnElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(SpeakQlParser.FullColumnNameContext,0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def AS(self):
            return self.getToken(SpeakQlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectColumnElement" ):
                listener.enterSelectColumnElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectColumnElement" ):
                listener.exitSelectColumnElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectColumnElement" ):
                return visitor.visitSelectColumnElement(self)
            else:
                return visitor.visitChildren(self)



    def selectElement(self):

        localctx = SpeakQlParser.SelectElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_selectElement)
        self._la = 0 # Token type
        try:
            self.state = 3715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,526,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.SelectStarElementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3686
                self.fullId()
                self.state = 3687
                self.match(SpeakQlParser.DOT)
                self.state = 3688
                self.match(SpeakQlParser.STAR)
                pass

            elif la_ == 2:
                localctx = SpeakQlParser.SelectColumnElementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3690
                self.fullColumnName()
                self.state = 3695
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,520,self._ctx)
                if la_ == 1:
                    self.state = 3692
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SpeakQlParser.AS:
                        self.state = 3691
                        self.match(SpeakQlParser.AS)


                    self.state = 3694
                    self.uid()


                pass

            elif la_ == 3:
                localctx = SpeakQlParser.SelectFunctionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3697
                self.functionCall()
                self.state = 3702
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,522,self._ctx)
                if la_ == 1:
                    self.state = 3699
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SpeakQlParser.AS:
                        self.state = 3698
                        self.match(SpeakQlParser.AS)


                    self.state = 3701
                    self.uid()


                pass

            elif la_ == 4:
                localctx = SpeakQlParser.SelectExpressionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,523,self._ctx)
                if la_ == 1:
                    self.state = 3704
                    self.match(SpeakQlParser.LOCAL_ID)
                    self.state = 3705
                    self.match(SpeakQlParser.VAR_ASSIGN)


                self.state = 3708
                self.expression(0)
                self.state = 3713
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,525,self._ctx)
                if la_ == 1:
                    self.state = 3710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SpeakQlParser.AS:
                        self.state = 3709
                        self.match(SpeakQlParser.AS)


                    self.state = 3712
                    self.uid()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectIntoExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_selectIntoExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectIntoVariablesContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SelectIntoExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(SpeakQlParser.INTO, 0)
        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.AssignmentFieldContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectIntoVariables" ):
                listener.enterSelectIntoVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectIntoVariables" ):
                listener.exitSelectIntoVariables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectIntoVariables" ):
                return visitor.visitSelectIntoVariables(self)
            else:
                return visitor.visitChildren(self)


    class SelectIntoTextFileContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SelectIntoExpressionContext
            super().__init__(parser)
            self.filename = None # Token
            self.charset = None # CharsetNameContext
            self.fieldsFormat = None # Token
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(SpeakQlParser.INTO, 0)
        def OUTFILE(self):
            return self.getToken(SpeakQlParser.OUTFILE, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)
        def CHARACTER(self):
            return self.getToken(SpeakQlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)
        def LINES(self):
            return self.getToken(SpeakQlParser.LINES, 0)
        def charsetName(self):
            return self.getTypedRuleContext(SpeakQlParser.CharsetNameContext,0)

        def FIELDS(self):
            return self.getToken(SpeakQlParser.FIELDS, 0)
        def COLUMNS(self):
            return self.getToken(SpeakQlParser.COLUMNS, 0)
        def selectFieldsInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.SelectFieldsIntoContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.SelectFieldsIntoContext,i)

        def selectLinesInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.SelectLinesIntoContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.SelectLinesIntoContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectIntoTextFile" ):
                listener.enterSelectIntoTextFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectIntoTextFile" ):
                listener.exitSelectIntoTextFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectIntoTextFile" ):
                return visitor.visitSelectIntoTextFile(self)
            else:
                return visitor.visitChildren(self)


    class SelectIntoDumpFileContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SelectIntoExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(SpeakQlParser.INTO, 0)
        def DUMPFILE(self):
            return self.getToken(SpeakQlParser.DUMPFILE, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectIntoDumpFile" ):
                listener.enterSelectIntoDumpFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectIntoDumpFile" ):
                listener.exitSelectIntoDumpFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectIntoDumpFile" ):
                return visitor.visitSelectIntoDumpFile(self)
            else:
                return visitor.visitChildren(self)



    def selectIntoExpression(self):

        localctx = SpeakQlParser.SelectIntoExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_selectIntoExpression)
        self._la = 0 # Token type
        try:
            self.state = 3753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,533,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.SelectIntoVariablesContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3717
                self.match(SpeakQlParser.INTO)
                self.state = 3718
                self.assignmentField()
                self.state = 3723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 3719
                    self.match(SpeakQlParser.COMMA)
                    self.state = 3720
                    self.assignmentField()
                    self.state = 3725
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = SpeakQlParser.SelectIntoDumpFileContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3726
                self.match(SpeakQlParser.INTO)
                self.state = 3727
                self.match(SpeakQlParser.DUMPFILE)
                self.state = 3728
                self.match(SpeakQlParser.STRING_LITERAL)
                pass

            elif la_ == 3:
                localctx = SpeakQlParser.SelectIntoTextFileContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3729
                self.match(SpeakQlParser.INTO)
                self.state = 3730
                self.match(SpeakQlParser.OUTFILE)
                self.state = 3731
                localctx.filename = self.match(SpeakQlParser.STRING_LITERAL)
                self.state = 3735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.CHARACTER:
                    self.state = 3732
                    self.match(SpeakQlParser.CHARACTER)
                    self.state = 3733
                    self.match(SpeakQlParser.SET)
                    self.state = 3734
                    localctx.charset = self.charsetName()


                self.state = 3743
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,530,self._ctx)
                if la_ == 1:
                    self.state = 3737
                    localctx.fieldsFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.COLUMNS or _la==SpeakQlParser.FIELDS):
                        localctx.fieldsFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3739 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3738
                        self.selectFieldsInto()
                        self.state = 3741 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (SpeakQlParser.ENCLOSED - 68)) | (1 << (SpeakQlParser.ESCAPED - 68)) | (1 << (SpeakQlParser.OPTIONALLY - 68)))) != 0) or _la==SpeakQlParser.TERMINATED):
                            break



                self.state = 3751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LINES:
                    self.state = 3745
                    self.match(SpeakQlParser.LINES)
                    self.state = 3747 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3746
                        self.selectLinesInto()
                        self.state = 3749 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==SpeakQlParser.STARTING or _la==SpeakQlParser.TERMINATED):
                            break



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectFieldsIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.terminationField = None # Token
            self.enclosion = None # Token
            self.escaping = None # Token

        def TERMINATED(self):
            return self.getToken(SpeakQlParser.TERMINATED, 0)

        def BY(self):
            return self.getToken(SpeakQlParser.BY, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def ENCLOSED(self):
            return self.getToken(SpeakQlParser.ENCLOSED, 0)

        def OPTIONALLY(self):
            return self.getToken(SpeakQlParser.OPTIONALLY, 0)

        def ESCAPED(self):
            return self.getToken(SpeakQlParser.ESCAPED, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_selectFieldsInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFieldsInto" ):
                listener.enterSelectFieldsInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFieldsInto" ):
                listener.exitSelectFieldsInto(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectFieldsInto" ):
                return visitor.visitSelectFieldsInto(self)
            else:
                return visitor.visitChildren(self)




    def selectFieldsInto(self):

        localctx = SpeakQlParser.SelectFieldsIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_selectFieldsInto)
        self._la = 0 # Token type
        try:
            self.state = 3767
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.TERMINATED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3755
                self.match(SpeakQlParser.TERMINATED)
                self.state = 3756
                self.match(SpeakQlParser.BY)
                self.state = 3757
                localctx.terminationField = self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.ENCLOSED, SpeakQlParser.OPTIONALLY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.OPTIONALLY:
                    self.state = 3758
                    self.match(SpeakQlParser.OPTIONALLY)


                self.state = 3761
                self.match(SpeakQlParser.ENCLOSED)
                self.state = 3762
                self.match(SpeakQlParser.BY)
                self.state = 3763
                localctx.enclosion = self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.ESCAPED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3764
                self.match(SpeakQlParser.ESCAPED)
                self.state = 3765
                self.match(SpeakQlParser.BY)
                self.state = 3766
                localctx.escaping = self.match(SpeakQlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectLinesIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.starting = None # Token
            self.terminationLine = None # Token

        def STARTING(self):
            return self.getToken(SpeakQlParser.STARTING, 0)

        def BY(self):
            return self.getToken(SpeakQlParser.BY, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def TERMINATED(self):
            return self.getToken(SpeakQlParser.TERMINATED, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_selectLinesInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectLinesInto" ):
                listener.enterSelectLinesInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectLinesInto" ):
                listener.exitSelectLinesInto(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectLinesInto" ):
                return visitor.visitSelectLinesInto(self)
            else:
                return visitor.visitChildren(self)




    def selectLinesInto(self):

        localctx = SpeakQlParser.SelectLinesIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_selectLinesInto)
        try:
            self.state = 3775
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.STARTING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3769
                self.match(SpeakQlParser.STARTING)
                self.state = 3770
                self.match(SpeakQlParser.BY)
                self.state = 3771
                localctx.starting = self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.TERMINATED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3772
                self.match(SpeakQlParser.TERMINATED)
                self.state = 3773
                self.match(SpeakQlParser.BY)
                self.state = 3774
                localctx.terminationLine = self.match(SpeakQlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whereExpr = None # ExpressionContext

        def fromKeyword(self):
            return self.getTypedRuleContext(SpeakQlParser.FromKeywordContext,0)


        def tableSources(self):
            return self.getTypedRuleContext(SpeakQlParser.TableSourcesContext,0)


        def WHERE(self):
            return self.getToken(SpeakQlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = SpeakQlParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,537,self._ctx)
            if la_ == 1:
                self.state = 3777
                self.fromKeyword()
                self.state = 3778
                self.tableSources()


            self.state = 3784
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,538,self._ctx)
            if la_ == 1:
                self.state = 3782
                self.match(SpeakQlParser.WHERE)
                self.state = 3783
                localctx.whereExpr = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(SpeakQlParser.FROM, 0)

        def IN_TABLE(self):
            return self.getToken(SpeakQlParser.IN_TABLE, 0)

        def FROM_TABLE(self):
            return self.getToken(SpeakQlParser.FROM_TABLE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_fromKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromKeyword" ):
                listener.enterFromKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromKeyword" ):
                listener.exitFromKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromKeyword" ):
                return visitor.visitFromKeyword(self)
            else:
                return visitor.visitChildren(self)




    def fromKeyword(self):

        localctx = SpeakQlParser.FromKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_fromKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3786
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.IN_TABLE or _la==SpeakQlParser.FROM_TABLE or _la==SpeakQlParser.FROM):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(SpeakQlParser.GROUP, 0)

        def BY(self):
            return self.getToken(SpeakQlParser.BY, 0)

        def groupByItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.GroupByItemContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.GroupByItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def WITH(self):
            return self.getToken(SpeakQlParser.WITH, 0)

        def ROLLUP(self):
            return self.getToken(SpeakQlParser.ROLLUP, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_groupByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByClause" ):
                listener.enterGroupByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByClause" ):
                listener.exitGroupByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByClause" ):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByClause(self):

        localctx = SpeakQlParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_groupByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3788
            self.match(SpeakQlParser.GROUP)
            self.state = 3789
            self.match(SpeakQlParser.BY)
            self.state = 3790
            self.groupByItem()
            self.state = 3795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 3791
                self.match(SpeakQlParser.COMMA)
                self.state = 3792
                self.groupByItem()
                self.state = 3797
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,540,self._ctx)
            if la_ == 1:
                self.state = 3798
                self.match(SpeakQlParser.WITH)
                self.state = 3799
                self.match(SpeakQlParser.ROLLUP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.havingExpr = None # ExpressionContext

        def HAVING(self):
            return self.getToken(SpeakQlParser.HAVING, 0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = SpeakQlParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3802
            self.match(SpeakQlParser.HAVING)
            self.state = 3803
            localctx.havingExpr = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(SpeakQlParser.WINDOW, 0)

        def windowName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.WindowNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.WindowNameContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.AS)
            else:
                return self.getToken(SpeakQlParser.AS, i)

        def leftParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.LeftParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,i)


        def windowSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.WindowSpecContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.WindowSpecContext,i)


        def rightParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.RightParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.RightParenContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_windowClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowClause" ):
                listener.enterWindowClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowClause" ):
                listener.exitWindowClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = SpeakQlParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_windowClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3805
            self.match(SpeakQlParser.WINDOW)
            self.state = 3806
            self.windowName()
            self.state = 3807
            self.match(SpeakQlParser.AS)
            self.state = 3808
            self.leftParen()
            self.state = 3809
            self.windowSpec()
            self.state = 3810
            self.rightParen()
            self.state = 3820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 3811
                self.match(SpeakQlParser.COMMA)
                self.state = 3812
                self.windowName()
                self.state = 3813
                self.match(SpeakQlParser.AS)
                self.state = 3814
                self.leftParen()
                self.state = 3815
                self.windowSpec()
                self.state = 3816
                self.rightParen()
                self.state = 3822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(SpeakQlParser.ASC, 0)

        def DESC(self):
            return self.getToken(SpeakQlParser.DESC, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_groupByItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByItem" ):
                listener.enterGroupByItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByItem" ):
                listener.exitGroupByItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByItem" ):
                return visitor.visitGroupByItem(self)
            else:
                return visitor.visitChildren(self)




    def groupByItem(self):

        localctx = SpeakQlParser.GroupByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_groupByItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3823
            self.expression(0)
            self.state = 3825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,542,self._ctx)
            if la_ == 1:
                self.state = 3824
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.ASC or _la==SpeakQlParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # LimitClauseAtomContext
            self.limit = None # LimitClauseAtomContext

        def LIMIT(self):
            return self.getToken(SpeakQlParser.LIMIT, 0)

        def OFFSET(self):
            return self.getToken(SpeakQlParser.OFFSET, 0)

        def limitClauseAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.LimitClauseAtomContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.LimitClauseAtomContext,i)


        def COMMA(self):
            return self.getToken(SpeakQlParser.COMMA, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitClause" ):
                return visitor.visitLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def limitClause(self):

        localctx = SpeakQlParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3827
            self.match(SpeakQlParser.LIMIT)
            self.state = 3838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,544,self._ctx)
            if la_ == 1:
                self.state = 3831
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,543,self._ctx)
                if la_ == 1:
                    self.state = 3828
                    localctx.offset = self.limitClauseAtom()
                    self.state = 3829
                    self.match(SpeakQlParser.COMMA)


                self.state = 3833
                localctx.limit = self.limitClauseAtom()
                pass

            elif la_ == 2:
                self.state = 3834
                localctx.limit = self.limitClauseAtom()
                self.state = 3835
                self.match(SpeakQlParser.OFFSET)
                self.state = 3836
                localctx.offset = self.limitClauseAtom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def mysqlVariable(self):
            return self.getTypedRuleContext(SpeakQlParser.MysqlVariableContext,0)


        def simpleId(self):
            return self.getTypedRuleContext(SpeakQlParser.SimpleIdContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_limitClauseAtom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClauseAtom" ):
                listener.enterLimitClauseAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClauseAtom" ):
                listener.exitLimitClauseAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitClauseAtom" ):
                return visitor.visitLimitClauseAtom(self)
            else:
                return visitor.visitChildren(self)




    def limitClauseAtom(self):

        localctx = SpeakQlParser.LimitClauseAtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_limitClauseAtom)
        try:
            self.state = 3843
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.ZERO_DECIMAL, SpeakQlParser.ONE_DECIMAL, SpeakQlParser.TWO_DECIMAL, SpeakQlParser.DECIMAL_LITERAL, SpeakQlParser.REAL_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3840
                self.decimalLiteral()
                pass
            elif token in [SpeakQlParser.LOCAL_ID, SpeakQlParser.GLOBAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3841
                self.mysqlVariable()
                pass
            elif token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.OPTIONAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3842
                self.simpleId()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartTransactionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(SpeakQlParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(SpeakQlParser.TRANSACTION, 0)

        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.TransactionModeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_startTransaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartTransaction" ):
                listener.enterStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartTransaction" ):
                listener.exitStartTransaction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartTransaction" ):
                return visitor.visitStartTransaction(self)
            else:
                return visitor.visitChildren(self)




    def startTransaction(self):

        localctx = SpeakQlParser.StartTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_startTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3845
            self.match(SpeakQlParser.START)
            self.state = 3846
            self.match(SpeakQlParser.TRANSACTION)
            self.state = 3855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.READ or _la==SpeakQlParser.WITH:
                self.state = 3847
                self.transactionMode()
                self.state = 3852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 3848
                    self.match(SpeakQlParser.COMMA)
                    self.state = 3849
                    self.transactionMode()
                    self.state = 3854
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeginWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(SpeakQlParser.BEGIN, 0)

        def WORK(self):
            return self.getToken(SpeakQlParser.WORK, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_beginWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeginWork" ):
                listener.enterBeginWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeginWork" ):
                listener.exitBeginWork(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeginWork" ):
                return visitor.visitBeginWork(self)
            else:
                return visitor.visitChildren(self)




    def beginWork(self):

        localctx = SpeakQlParser.BeginWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_beginWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3857
            self.match(SpeakQlParser.BEGIN)
            self.state = 3859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.WORK:
                self.state = 3858
                self.match(SpeakQlParser.WORK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nochain = None # Token
            self.norelease = None # Token

        def COMMIT(self):
            return self.getToken(SpeakQlParser.COMMIT, 0)

        def WORK(self):
            return self.getToken(SpeakQlParser.WORK, 0)

        def AND(self):
            return self.getToken(SpeakQlParser.AND, 0)

        def CHAIN(self):
            return self.getToken(SpeakQlParser.CHAIN, 0)

        def RELEASE(self):
            return self.getToken(SpeakQlParser.RELEASE, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.NO)
            else:
                return self.getToken(SpeakQlParser.NO, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_commitWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommitWork" ):
                listener.enterCommitWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommitWork" ):
                listener.exitCommitWork(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommitWork" ):
                return visitor.visitCommitWork(self)
            else:
                return visitor.visitChildren(self)




    def commitWork(self):

        localctx = SpeakQlParser.CommitWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_commitWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3861
            self.match(SpeakQlParser.COMMIT)
            self.state = 3863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.WORK:
                self.state = 3862
                self.match(SpeakQlParser.WORK)


            self.state = 3870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.AND:
                self.state = 3865
                self.match(SpeakQlParser.AND)
                self.state = 3867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.NO:
                    self.state = 3866
                    localctx.nochain = self.match(SpeakQlParser.NO)


                self.state = 3869
                self.match(SpeakQlParser.CHAIN)


            self.state = 3876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,553,self._ctx)
            if la_ == 1:
                self.state = 3873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.NO:
                    self.state = 3872
                    localctx.norelease = self.match(SpeakQlParser.NO)


                self.state = 3875
                self.match(SpeakQlParser.RELEASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollbackWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nochain = None # Token
            self.norelease = None # Token

        def ROLLBACK(self):
            return self.getToken(SpeakQlParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(SpeakQlParser.WORK, 0)

        def AND(self):
            return self.getToken(SpeakQlParser.AND, 0)

        def CHAIN(self):
            return self.getToken(SpeakQlParser.CHAIN, 0)

        def RELEASE(self):
            return self.getToken(SpeakQlParser.RELEASE, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.NO)
            else:
                return self.getToken(SpeakQlParser.NO, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_rollbackWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollbackWork" ):
                listener.enterRollbackWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollbackWork" ):
                listener.exitRollbackWork(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollbackWork" ):
                return visitor.visitRollbackWork(self)
            else:
                return visitor.visitChildren(self)




    def rollbackWork(self):

        localctx = SpeakQlParser.RollbackWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_rollbackWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3878
            self.match(SpeakQlParser.ROLLBACK)
            self.state = 3880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.WORK:
                self.state = 3879
                self.match(SpeakQlParser.WORK)


            self.state = 3887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.AND:
                self.state = 3882
                self.match(SpeakQlParser.AND)
                self.state = 3884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.NO:
                    self.state = 3883
                    localctx.nochain = self.match(SpeakQlParser.NO)


                self.state = 3886
                self.match(SpeakQlParser.CHAIN)


            self.state = 3893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,558,self._ctx)
            if la_ == 1:
                self.state = 3890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.NO:
                    self.state = 3889
                    localctx.norelease = self.match(SpeakQlParser.NO)


                self.state = 3892
                self.match(SpeakQlParser.RELEASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SavepointStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT(self):
            return self.getToken(SpeakQlParser.SAVEPOINT, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_savepointStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepointStatement" ):
                listener.enterSavepointStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepointStatement" ):
                listener.exitSavepointStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSavepointStatement" ):
                return visitor.visitSavepointStatement(self)
            else:
                return visitor.visitChildren(self)




    def savepointStatement(self):

        localctx = SpeakQlParser.SavepointStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_savepointStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3895
            self.match(SpeakQlParser.SAVEPOINT)
            self.state = 3896
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollbackStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(SpeakQlParser.ROLLBACK, 0)

        def TO(self):
            return self.getToken(SpeakQlParser.TO, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def WORK(self):
            return self.getToken(SpeakQlParser.WORK, 0)

        def SAVEPOINT(self):
            return self.getToken(SpeakQlParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_rollbackStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollbackStatement" ):
                listener.enterRollbackStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollbackStatement" ):
                listener.exitRollbackStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollbackStatement" ):
                return visitor.visitRollbackStatement(self)
            else:
                return visitor.visitChildren(self)




    def rollbackStatement(self):

        localctx = SpeakQlParser.RollbackStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_rollbackStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3898
            self.match(SpeakQlParser.ROLLBACK)
            self.state = 3900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.WORK:
                self.state = 3899
                self.match(SpeakQlParser.WORK)


            self.state = 3902
            self.match(SpeakQlParser.TO)
            self.state = 3904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,560,self._ctx)
            if la_ == 1:
                self.state = 3903
                self.match(SpeakQlParser.SAVEPOINT)


            self.state = 3906
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReleaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELEASE(self):
            return self.getToken(SpeakQlParser.RELEASE, 0)

        def SAVEPOINT(self):
            return self.getToken(SpeakQlParser.SAVEPOINT, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_releaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReleaseStatement" ):
                listener.enterReleaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReleaseStatement" ):
                listener.exitReleaseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReleaseStatement" ):
                return visitor.visitReleaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def releaseStatement(self):

        localctx = SpeakQlParser.ReleaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_releaseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3908
            self.match(SpeakQlParser.RELEASE)
            self.state = 3909
            self.match(SpeakQlParser.SAVEPOINT)
            self.state = 3910
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockTablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(SpeakQlParser.LOCK, 0)

        def TABLES(self):
            return self.getToken(SpeakQlParser.TABLES, 0)

        def lockTableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.LockTableElementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.LockTableElementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_lockTables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockTables" ):
                listener.enterLockTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockTables" ):
                listener.exitLockTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockTables" ):
                return visitor.visitLockTables(self)
            else:
                return visitor.visitChildren(self)




    def lockTables(self):

        localctx = SpeakQlParser.LockTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_lockTables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3912
            self.match(SpeakQlParser.LOCK)
            self.state = 3913
            self.match(SpeakQlParser.TABLES)
            self.state = 3914
            self.lockTableElement()
            self.state = 3919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 3915
                self.match(SpeakQlParser.COMMA)
                self.state = 3916
                self.lockTableElement()
                self.state = 3921
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlockTablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOCK(self):
            return self.getToken(SpeakQlParser.UNLOCK, 0)

        def TABLES(self):
            return self.getToken(SpeakQlParser.TABLES, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_unlockTables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlockTables" ):
                listener.enterUnlockTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlockTables" ):
                listener.exitUnlockTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnlockTables" ):
                return visitor.visitUnlockTables(self)
            else:
                return visitor.visitChildren(self)




    def unlockTables(self):

        localctx = SpeakQlParser.UnlockTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_unlockTables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3922
            self.match(SpeakQlParser.UNLOCK)
            self.state = 3923
            self.match(SpeakQlParser.TABLES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetAutocommitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.autocommitValue = None # Token

        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)

        def AUTOCOMMIT(self):
            return self.getToken(SpeakQlParser.AUTOCOMMIT, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def ZERO_DECIMAL(self):
            return self.getToken(SpeakQlParser.ZERO_DECIMAL, 0)

        def ONE_DECIMAL(self):
            return self.getToken(SpeakQlParser.ONE_DECIMAL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_setAutocommitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAutocommitStatement" ):
                listener.enterSetAutocommitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAutocommitStatement" ):
                listener.exitSetAutocommitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetAutocommitStatement" ):
                return visitor.visitSetAutocommitStatement(self)
            else:
                return visitor.visitChildren(self)




    def setAutocommitStatement(self):

        localctx = SpeakQlParser.SetAutocommitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_setAutocommitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3925
            self.match(SpeakQlParser.SET)
            self.state = 3926
            self.match(SpeakQlParser.AUTOCOMMIT)
            self.state = 3927
            self.match(SpeakQlParser.EQUAL_SYMBOL)
            self.state = 3928
            localctx.autocommitValue = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.ZERO_DECIMAL or _la==SpeakQlParser.ONE_DECIMAL):
                localctx.autocommitValue = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetTransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.transactionContext = None # Token

        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)

        def TRANSACTION(self):
            return self.getToken(SpeakQlParser.TRANSACTION, 0)

        def transactionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.TransactionOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.TransactionOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def GLOBAL(self):
            return self.getToken(SpeakQlParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(SpeakQlParser.SESSION, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_setTransactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTransactionStatement" ):
                listener.enterSetTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTransactionStatement" ):
                listener.exitSetTransactionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTransactionStatement" ):
                return visitor.visitSetTransactionStatement(self)
            else:
                return visitor.visitChildren(self)




    def setTransactionStatement(self):

        localctx = SpeakQlParser.SetTransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_setTransactionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3930
            self.match(SpeakQlParser.SET)
            self.state = 3932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.GLOBAL or _la==SpeakQlParser.SESSION:
                self.state = 3931
                localctx.transactionContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.GLOBAL or _la==SpeakQlParser.SESSION):
                    localctx.transactionContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3934
            self.match(SpeakQlParser.TRANSACTION)
            self.state = 3935
            self.transactionOption()
            self.state = 3940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 3936
                self.match(SpeakQlParser.COMMA)
                self.state = 3937
                self.transactionOption()
                self.state = 3942
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SpeakQlParser.WITH, 0)

        def CONSISTENT(self):
            return self.getToken(SpeakQlParser.CONSISTENT, 0)

        def SNAPSHOT(self):
            return self.getToken(SpeakQlParser.SNAPSHOT, 0)

        def READ(self):
            return self.getToken(SpeakQlParser.READ, 0)

        def WRITE(self):
            return self.getToken(SpeakQlParser.WRITE, 0)

        def ONLY(self):
            return self.getToken(SpeakQlParser.ONLY, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_transactionMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionMode" ):
                listener.enterTransactionMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionMode" ):
                listener.exitTransactionMode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionMode" ):
                return visitor.visitTransactionMode(self)
            else:
                return visitor.visitChildren(self)




    def transactionMode(self):

        localctx = SpeakQlParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_transactionMode)
        try:
            self.state = 3950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,564,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3943
                self.match(SpeakQlParser.WITH)
                self.state = 3944
                self.match(SpeakQlParser.CONSISTENT)
                self.state = 3945
                self.match(SpeakQlParser.SNAPSHOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3946
                self.match(SpeakQlParser.READ)
                self.state = 3947
                self.match(SpeakQlParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3948
                self.match(SpeakQlParser.READ)
                self.state = 3949
                self.match(SpeakQlParser.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockTableElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def lockAction(self):
            return self.getTypedRuleContext(SpeakQlParser.LockActionContext,0)


        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def AS(self):
            return self.getToken(SpeakQlParser.AS, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_lockTableElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockTableElement" ):
                listener.enterLockTableElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockTableElement" ):
                listener.exitLockTableElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockTableElement" ):
                return visitor.visitLockTableElement(self)
            else:
                return visitor.visitChildren(self)




    def lockTableElement(self):

        localctx = SpeakQlParser.LockTableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_lockTableElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3952
            self.tableName()
            self.state = 3957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & ((1 << (SpeakQlParser.AS - 26)) | (1 << (SpeakQlParser.CURRENT - 26)) | (1 << (SpeakQlParser.DATABASE - 26)) | (1 << (SpeakQlParser.DIAGNOSTICS - 26)) | (1 << (SpeakQlParser.EXCEPT - 26)) | (1 << (SpeakQlParser.GROUP - 26)))) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (SpeakQlParser.LEFT - 106)) | (1 << (SpeakQlParser.NUMBER - 106)) | (1 << (SpeakQlParser.ORDER - 106)) | (1 << (SpeakQlParser.RIGHT - 106)) | (1 << (SpeakQlParser.SCHEMA - 106)))) != 0) or ((((_la - 172)) & ~0x3f) == 0 and ((1 << (_la - 172)) & ((1 << (SpeakQlParser.STACKED - 172)) | (1 << (SpeakQlParser.DATE - 172)) | (1 << (SpeakQlParser.TIME - 172)) | (1 << (SpeakQlParser.TIMESTAMP - 172)) | (1 << (SpeakQlParser.DATETIME - 172)) | (1 << (SpeakQlParser.YEAR - 172)) | (1 << (SpeakQlParser.BINARY - 172)))) != 0) or ((((_la - 237)) & ~0x3f) == 0 and ((1 << (_la - 237)) & ((1 << (SpeakQlParser.TEXT - 237)) | (1 << (SpeakQlParser.ENUM - 237)) | (1 << (SpeakQlParser.SERIAL - 237)) | (1 << (SpeakQlParser.JSON_ARRAY - 237)) | (1 << (SpeakQlParser.JSON_OBJECT - 237)) | (1 << (SpeakQlParser.JSON_QUOTE - 237)) | (1 << (SpeakQlParser.JSON_CONTAINS - 237)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 237)) | (1 << (SpeakQlParser.JSON_EXTRACT - 237)) | (1 << (SpeakQlParser.JSON_KEYS - 237)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 237)) | (1 << (SpeakQlParser.JSON_SEARCH - 237)) | (1 << (SpeakQlParser.JSON_VALUE - 237)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 237)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 237)) | (1 << (SpeakQlParser.JSON_INSERT - 237)) | (1 << (SpeakQlParser.JSON_MERGE - 237)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 237)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 237)) | (1 << (SpeakQlParser.JSON_REMOVE - 237)) | (1 << (SpeakQlParser.JSON_REPLACE - 237)) | (1 << (SpeakQlParser.JSON_SET - 237)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 237)) | (1 << (SpeakQlParser.JSON_DEPTH - 237)) | (1 << (SpeakQlParser.JSON_LENGTH - 237)) | (1 << (SpeakQlParser.JSON_TYPE - 237)) | (1 << (SpeakQlParser.JSON_VALID - 237)) | (1 << (SpeakQlParser.JSON_TABLE - 237)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 237)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 237)) | (1 << (SpeakQlParser.JSON_PRETTY - 237)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 237)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 237)) | (1 << (SpeakQlParser.JSON_ARRAYAGG - 237)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 237)) | (1 << (SpeakQlParser.AVG - 237)) | (1 << (SpeakQlParser.BIT_AND - 237)) | (1 << (SpeakQlParser.BIT_OR - 237)) | (1 << (SpeakQlParser.BIT_XOR - 237)) | (1 << (SpeakQlParser.COUNT - 237)) | (1 << (SpeakQlParser.GROUP_CONCAT - 237)) | (1 << (SpeakQlParser.MAX - 237)) | (1 << (SpeakQlParser.MIN - 237)))) != 0) or ((((_la - 305)) & ~0x3f) == 0 and ((1 << (_la - 305)) & ((1 << (SpeakQlParser.STD - 305)) | (1 << (SpeakQlParser.STDDEV - 305)) | (1 << (SpeakQlParser.STDDEV_POP - 305)) | (1 << (SpeakQlParser.STDDEV_SAMP - 305)) | (1 << (SpeakQlParser.SUM - 305)) | (1 << (SpeakQlParser.VAR_POP - 305)) | (1 << (SpeakQlParser.VAR_SAMP - 305)) | (1 << (SpeakQlParser.VARIANCE - 305)) | (1 << (SpeakQlParser.POSITION - 305)) | (1 << (SpeakQlParser.ACCOUNT - 305)) | (1 << (SpeakQlParser.ACTION - 305)) | (1 << (SpeakQlParser.AFTER - 305)) | (1 << (SpeakQlParser.AGGREGATE - 305)) | (1 << (SpeakQlParser.ALGORITHM - 305)) | (1 << (SpeakQlParser.ANY - 305)) | (1 << (SpeakQlParser.AT - 305)) | (1 << (SpeakQlParser.AUTHORS - 305)) | (1 << (SpeakQlParser.AUTOCOMMIT - 305)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 305)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 305)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 305)) | (1 << (SpeakQlParser.BEGIN - 305)) | (1 << (SpeakQlParser.BINLOG - 305)) | (1 << (SpeakQlParser.BIT - 305)) | (1 << (SpeakQlParser.BLOCK - 305)) | (1 << (SpeakQlParser.BOOL - 305)) | (1 << (SpeakQlParser.BOOLEAN - 305)) | (1 << (SpeakQlParser.BTREE - 305)) | (1 << (SpeakQlParser.CACHE - 305)) | (1 << (SpeakQlParser.CASCADED - 305)) | (1 << (SpeakQlParser.CHAIN - 305)) | (1 << (SpeakQlParser.CHANGED - 305)) | (1 << (SpeakQlParser.CHANNEL - 305)) | (1 << (SpeakQlParser.CHECKSUM - 305)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 305)) | (1 << (SpeakQlParser.CIPHER - 305)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 305)) | (1 << (SpeakQlParser.CLIENT - 305)) | (1 << (SpeakQlParser.CLOSE - 305)) | (1 << (SpeakQlParser.COALESCE - 305)) | (1 << (SpeakQlParser.CODE - 305)) | (1 << (SpeakQlParser.COLUMNS - 305)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 305)) | (1 << (SpeakQlParser.COLUMN_NAME - 305)) | (1 << (SpeakQlParser.COMMENT - 305)) | (1 << (SpeakQlParser.COMMIT - 305)))) != 0) or ((((_la - 369)) & ~0x3f) == 0 and ((1 << (_la - 369)) & ((1 << (SpeakQlParser.COMPACT - 369)) | (1 << (SpeakQlParser.COMPLETION - 369)) | (1 << (SpeakQlParser.COMPRESSED - 369)) | (1 << (SpeakQlParser.COMPRESSION - 369)) | (1 << (SpeakQlParser.CONCURRENT - 369)) | (1 << (SpeakQlParser.CONNECT - 369)) | (1 << (SpeakQlParser.CONNECTION - 369)) | (1 << (SpeakQlParser.CONSISTENT - 369)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 369)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 369)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 369)) | (1 << (SpeakQlParser.CONTAINS - 369)) | (1 << (SpeakQlParser.CONTEXT - 369)) | (1 << (SpeakQlParser.CONTRIBUTORS - 369)) | (1 << (SpeakQlParser.COPY - 369)) | (1 << (SpeakQlParser.CPU - 369)) | (1 << (SpeakQlParser.CURSOR_NAME - 369)) | (1 << (SpeakQlParser.DATA - 369)) | (1 << (SpeakQlParser.DATAFILE - 369)) | (1 << (SpeakQlParser.DEALLOCATE - 369)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 369)) | (1 << (SpeakQlParser.DEFINER - 369)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 369)) | (1 << (SpeakQlParser.DES_KEY_FILE - 369)) | (1 << (SpeakQlParser.DIRECTORY - 369)) | (1 << (SpeakQlParser.DISABLE - 369)) | (1 << (SpeakQlParser.DISCARD - 369)) | (1 << (SpeakQlParser.DISK - 369)) | (1 << (SpeakQlParser.DO - 369)) | (1 << (SpeakQlParser.DUMPFILE - 369)) | (1 << (SpeakQlParser.DUPLICATE - 369)) | (1 << (SpeakQlParser.DYNAMIC - 369)) | (1 << (SpeakQlParser.ENABLE - 369)) | (1 << (SpeakQlParser.ENCRYPTION - 369)) | (1 << (SpeakQlParser.END - 369)) | (1 << (SpeakQlParser.ENDS - 369)) | (1 << (SpeakQlParser.ENGINE - 369)) | (1 << (SpeakQlParser.ENGINES - 369)) | (1 << (SpeakQlParser.ERROR - 369)) | (1 << (SpeakQlParser.ERRORS - 369)) | (1 << (SpeakQlParser.ESCAPE - 369)) | (1 << (SpeakQlParser.EVEN - 369)) | (1 << (SpeakQlParser.EVENT - 369)) | (1 << (SpeakQlParser.EVENTS - 369)) | (1 << (SpeakQlParser.EVERY - 369)) | (1 << (SpeakQlParser.EXCHANGE - 369)) | (1 << (SpeakQlParser.EXCLUSIVE - 369)) | (1 << (SpeakQlParser.EXPIRE - 369)) | (1 << (SpeakQlParser.EXPORT - 369)) | (1 << (SpeakQlParser.EXTENDED - 369)) | (1 << (SpeakQlParser.EXTENT_SIZE - 369)) | (1 << (SpeakQlParser.FAST - 369)) | (1 << (SpeakQlParser.FAULTS - 369)) | (1 << (SpeakQlParser.FIELDS - 369)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 369)) | (1 << (SpeakQlParser.FILTER - 369)) | (1 << (SpeakQlParser.FIRST - 369)) | (1 << (SpeakQlParser.FIXED - 369)) | (1 << (SpeakQlParser.FLUSH - 369)) | (1 << (SpeakQlParser.FOLLOWS - 369)) | (1 << (SpeakQlParser.FOUND - 369)) | (1 << (SpeakQlParser.FULL - 369)) | (1 << (SpeakQlParser.FUNCTION - 369)))) != 0) or ((((_la - 433)) & ~0x3f) == 0 and ((1 << (_la - 433)) & ((1 << (SpeakQlParser.GENERAL - 433)) | (1 << (SpeakQlParser.GLOBAL - 433)) | (1 << (SpeakQlParser.GRANTS - 433)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 433)) | (1 << (SpeakQlParser.HANDLER - 433)) | (1 << (SpeakQlParser.HASH - 433)) | (1 << (SpeakQlParser.HELP - 433)) | (1 << (SpeakQlParser.HOST - 433)) | (1 << (SpeakQlParser.HOSTS - 433)) | (1 << (SpeakQlParser.IDENTIFIED - 433)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 433)) | (1 << (SpeakQlParser.IMPORT - 433)) | (1 << (SpeakQlParser.INDEXES - 433)) | (1 << (SpeakQlParser.INITIAL_SIZE - 433)) | (1 << (SpeakQlParser.INPLACE - 433)) | (1 << (SpeakQlParser.INSERT_METHOD - 433)) | (1 << (SpeakQlParser.INSTALL - 433)) | (1 << (SpeakQlParser.INSTANCE - 433)) | (1 << (SpeakQlParser.INVISIBLE - 433)) | (1 << (SpeakQlParser.INVOKER - 433)) | (1 << (SpeakQlParser.IO - 433)) | (1 << (SpeakQlParser.IO_THREAD - 433)) | (1 << (SpeakQlParser.IPC - 433)) | (1 << (SpeakQlParser.ISOLATION - 433)) | (1 << (SpeakQlParser.ISSUER - 433)) | (1 << (SpeakQlParser.JSON - 433)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 433)) | (1 << (SpeakQlParser.LANGUAGE - 433)) | (1 << (SpeakQlParser.LAST - 433)) | (1 << (SpeakQlParser.LEAVES - 433)) | (1 << (SpeakQlParser.LESS - 433)) | (1 << (SpeakQlParser.LEVEL - 433)) | (1 << (SpeakQlParser.LIST - 433)) | (1 << (SpeakQlParser.LOCAL - 433)) | (1 << (SpeakQlParser.LOGFILE - 433)) | (1 << (SpeakQlParser.LOGS - 433)) | (1 << (SpeakQlParser.MASTER - 433)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 433)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 433)) | (1 << (SpeakQlParser.MASTER_DELAY - 433)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 433)) | (1 << (SpeakQlParser.MASTER_HOST - 433)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 433)) | (1 << (SpeakQlParser.MASTER_LOG_POS - 433)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 433)) | (1 << (SpeakQlParser.MASTER_PORT - 433)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 433)) | (1 << (SpeakQlParser.MASTER_SSL - 433)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 433)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 433)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 433)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 433)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 433)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 433)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 433)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 433)) | (1 << (SpeakQlParser.MASTER_USER - 433)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 433)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 433)) | (1 << (SpeakQlParser.MAX_ROWS - 433)) | (1 << (SpeakQlParser.MAX_SIZE - 433)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 433)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 433)) | (1 << (SpeakQlParser.MEDIUM - 433)))) != 0) or ((((_la - 497)) & ~0x3f) == 0 and ((1 << (_la - 497)) & ((1 << (SpeakQlParser.MEMBER - 497)) | (1 << (SpeakQlParser.MERGE - 497)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 497)) | (1 << (SpeakQlParser.MID - 497)) | (1 << (SpeakQlParser.MIGRATE - 497)) | (1 << (SpeakQlParser.MIN_ROWS - 497)) | (1 << (SpeakQlParser.MODE - 497)) | (1 << (SpeakQlParser.MODIFY - 497)) | (1 << (SpeakQlParser.MUTEX - 497)) | (1 << (SpeakQlParser.MYSQL - 497)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 497)) | (1 << (SpeakQlParser.NAME - 497)) | (1 << (SpeakQlParser.NAMES - 497)) | (1 << (SpeakQlParser.NCHAR - 497)) | (1 << (SpeakQlParser.NEVER - 497)) | (1 << (SpeakQlParser.NEXT - 497)) | (1 << (SpeakQlParser.NO - 497)) | (1 << (SpeakQlParser.NODEGROUP - 497)) | (1 << (SpeakQlParser.NONE - 497)) | (1 << (SpeakQlParser.ODBC - 497)) | (1 << (SpeakQlParser.OFFLINE - 497)) | (1 << (SpeakQlParser.OFFSET - 497)) | (1 << (SpeakQlParser.OF - 497)) | (1 << (SpeakQlParser.OJ - 497)) | (1 << (SpeakQlParser.OLD_PASSWORD - 497)) | (1 << (SpeakQlParser.ONE - 497)) | (1 << (SpeakQlParser.ONLINE - 497)) | (1 << (SpeakQlParser.ONLY - 497)) | (1 << (SpeakQlParser.OPEN - 497)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 497)) | (1 << (SpeakQlParser.OPTIONS - 497)) | (1 << (SpeakQlParser.OWNER - 497)) | (1 << (SpeakQlParser.PACK_KEYS - 497)) | (1 << (SpeakQlParser.PAGE - 497)) | (1 << (SpeakQlParser.PARSER - 497)) | (1 << (SpeakQlParser.PARTIAL - 497)) | (1 << (SpeakQlParser.PARTITIONING - 497)) | (1 << (SpeakQlParser.PARTITIONS - 497)) | (1 << (SpeakQlParser.PASSWORD - 497)) | (1 << (SpeakQlParser.PHASE - 497)) | (1 << (SpeakQlParser.PLUGIN - 497)) | (1 << (SpeakQlParser.PLUGIN_DIR - 497)) | (1 << (SpeakQlParser.PLUGINS - 497)) | (1 << (SpeakQlParser.PORT - 497)) | (1 << (SpeakQlParser.PRECEDES - 497)) | (1 << (SpeakQlParser.PREPARE - 497)) | (1 << (SpeakQlParser.PRESERVE - 497)) | (1 << (SpeakQlParser.PREV - 497)) | (1 << (SpeakQlParser.PROCESSLIST - 497)) | (1 << (SpeakQlParser.PROFILE - 497)) | (1 << (SpeakQlParser.PROFILES - 497)) | (1 << (SpeakQlParser.PROXY - 497)) | (1 << (SpeakQlParser.QUERY - 497)) | (1 << (SpeakQlParser.QUICK - 497)) | (1 << (SpeakQlParser.REBUILD - 497)) | (1 << (SpeakQlParser.RECOVER - 497)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 497)) | (1 << (SpeakQlParser.REDUNDANT - 497)) | (1 << (SpeakQlParser.RELAY - 497)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 497)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 497)) | (1 << (SpeakQlParser.RELAYLOG - 497)) | (1 << (SpeakQlParser.REMOVE - 497)))) != 0) or ((((_la - 561)) & ~0x3f) == 0 and ((1 << (_la - 561)) & ((1 << (SpeakQlParser.REORGANIZE - 561)) | (1 << (SpeakQlParser.REPAIR - 561)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 561)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 561)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 561)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 561)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 561)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 561)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 561)) | (1 << (SpeakQlParser.REPLICATION - 561)) | (1 << (SpeakQlParser.RESET - 561)) | (1 << (SpeakQlParser.RESUME - 561)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 561)) | (1 << (SpeakQlParser.RETURNS - 561)) | (1 << (SpeakQlParser.ROLE - 561)) | (1 << (SpeakQlParser.ROLLBACK - 561)) | (1 << (SpeakQlParser.ROLLUP - 561)) | (1 << (SpeakQlParser.ROTATE - 561)) | (1 << (SpeakQlParser.ROW - 561)) | (1 << (SpeakQlParser.ROWS - 561)) | (1 << (SpeakQlParser.ROW_FORMAT - 561)) | (1 << (SpeakQlParser.SAVEPOINT - 561)) | (1 << (SpeakQlParser.SCHEDULE - 561)) | (1 << (SpeakQlParser.SECURITY - 561)) | (1 << (SpeakQlParser.SERVER - 561)) | (1 << (SpeakQlParser.SESSION - 561)) | (1 << (SpeakQlParser.SHARE - 561)) | (1 << (SpeakQlParser.SHARED - 561)) | (1 << (SpeakQlParser.SIGNED - 561)) | (1 << (SpeakQlParser.SIMPLE - 561)) | (1 << (SpeakQlParser.SLAVE - 561)) | (1 << (SpeakQlParser.SLOW - 561)) | (1 << (SpeakQlParser.SNAPSHOT - 561)) | (1 << (SpeakQlParser.SOCKET - 561)) | (1 << (SpeakQlParser.SOME - 561)) | (1 << (SpeakQlParser.SONAME - 561)) | (1 << (SpeakQlParser.SOUNDS - 561)) | (1 << (SpeakQlParser.SOURCE - 561)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 561)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 561)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 561)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 561)) | (1 << (SpeakQlParser.SQL_CACHE - 561)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 561)) | (1 << (SpeakQlParser.SQL_THREAD - 561)) | (1 << (SpeakQlParser.START - 561)) | (1 << (SpeakQlParser.STARTS - 561)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 561)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 561)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 561)) | (1 << (SpeakQlParser.STATUS - 561)) | (1 << (SpeakQlParser.STOP - 561)) | (1 << (SpeakQlParser.STORAGE - 561)) | (1 << (SpeakQlParser.STRING - 561)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 561)) | (1 << (SpeakQlParser.SUBJECT - 561)) | (1 << (SpeakQlParser.SUBPARTITION - 561)) | (1 << (SpeakQlParser.SUBPARTITIONS - 561)) | (1 << (SpeakQlParser.SUSPEND - 561)) | (1 << (SpeakQlParser.SWAPS - 561)) | (1 << (SpeakQlParser.SWITCHES - 561)) | (1 << (SpeakQlParser.TABLE_NAME - 561)))) != 0) or ((((_la - 625)) & ~0x3f) == 0 and ((1 << (_la - 625)) & ((1 << (SpeakQlParser.TABLESPACE - 625)) | (1 << (SpeakQlParser.TEMPORARY - 625)) | (1 << (SpeakQlParser.TEMPTABLE - 625)) | (1 << (SpeakQlParser.THAN - 625)) | (1 << (SpeakQlParser.TRADITIONAL - 625)) | (1 << (SpeakQlParser.TRANSACTION - 625)) | (1 << (SpeakQlParser.TRANSACTIONAL - 625)) | (1 << (SpeakQlParser.TRIGGERS - 625)) | (1 << (SpeakQlParser.TRUNCATE - 625)) | (1 << (SpeakQlParser.UNDEFINED - 625)) | (1 << (SpeakQlParser.UNDOFILE - 625)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 625)) | (1 << (SpeakQlParser.UNINSTALL - 625)) | (1 << (SpeakQlParser.UNKNOWN - 625)) | (1 << (SpeakQlParser.UNTIL - 625)) | (1 << (SpeakQlParser.UPGRADE - 625)) | (1 << (SpeakQlParser.USER - 625)) | (1 << (SpeakQlParser.USE_FRM - 625)) | (1 << (SpeakQlParser.USER_RESOURCES - 625)) | (1 << (SpeakQlParser.VALIDATION - 625)) | (1 << (SpeakQlParser.VALUE - 625)) | (1 << (SpeakQlParser.VARIABLES - 625)) | (1 << (SpeakQlParser.VIEW - 625)) | (1 << (SpeakQlParser.VISIBLE - 625)) | (1 << (SpeakQlParser.WAIT - 625)) | (1 << (SpeakQlParser.WARNINGS - 625)) | (1 << (SpeakQlParser.WITHOUT - 625)) | (1 << (SpeakQlParser.WORK - 625)) | (1 << (SpeakQlParser.WRAPPER - 625)) | (1 << (SpeakQlParser.X509 - 625)) | (1 << (SpeakQlParser.XA - 625)) | (1 << (SpeakQlParser.XML - 625)) | (1 << (SpeakQlParser.EUR - 625)) | (1 << (SpeakQlParser.USA - 625)) | (1 << (SpeakQlParser.JIS - 625)) | (1 << (SpeakQlParser.ISO - 625)) | (1 << (SpeakQlParser.INTERNAL - 625)) | (1 << (SpeakQlParser.QUARTER - 625)) | (1 << (SpeakQlParser.MONTH - 625)) | (1 << (SpeakQlParser.DAY - 625)) | (1 << (SpeakQlParser.HOUR - 625)) | (1 << (SpeakQlParser.MINUTE - 625)) | (1 << (SpeakQlParser.WEEK - 625)) | (1 << (SpeakQlParser.SECOND - 625)) | (1 << (SpeakQlParser.MICROSECOND - 625)) | (1 << (SpeakQlParser.TABLES - 625)) | (1 << (SpeakQlParser.ROUTINE - 625)) | (1 << (SpeakQlParser.EXECUTE - 625)) | (1 << (SpeakQlParser.FILE - 625)) | (1 << (SpeakQlParser.PROCESS - 625)) | (1 << (SpeakQlParser.RELOAD - 625)) | (1 << (SpeakQlParser.SHUTDOWN - 625)) | (1 << (SpeakQlParser.SUPER - 625)) | (1 << (SpeakQlParser.PRIVILEGES - 625)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 625)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 625)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 625)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 625)) | (1 << (SpeakQlParser.CLONE_ADMIN - 625)))) != 0) or ((((_la - 689)) & ~0x3f) == 0 and ((1 << (_la - 689)) & ((1 << (SpeakQlParser.CONNECTION_ADMIN - 689)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 689)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 689)) | (1 << (SpeakQlParser.FIREWALL_USER - 689)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 689)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 689)) | (1 << (SpeakQlParser.NDB_STORED_USER - 689)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 689)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 689)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 689)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 689)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 689)) | (1 << (SpeakQlParser.ROLE_ADMIN - 689)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 689)) | (1 << (SpeakQlParser.SET_USER_ID - 689)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 689)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 689)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 689)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 689)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 689)) | (1 << (SpeakQlParser.ARMSCII8 - 689)) | (1 << (SpeakQlParser.ASCII - 689)) | (1 << (SpeakQlParser.BIG5 - 689)) | (1 << (SpeakQlParser.CP1250 - 689)) | (1 << (SpeakQlParser.CP1251 - 689)) | (1 << (SpeakQlParser.CP1256 - 689)) | (1 << (SpeakQlParser.CP1257 - 689)) | (1 << (SpeakQlParser.CP850 - 689)) | (1 << (SpeakQlParser.CP852 - 689)) | (1 << (SpeakQlParser.CP866 - 689)) | (1 << (SpeakQlParser.CP932 - 689)) | (1 << (SpeakQlParser.DEC8 - 689)) | (1 << (SpeakQlParser.EUCJPMS - 689)) | (1 << (SpeakQlParser.EUCKR - 689)) | (1 << (SpeakQlParser.GB18030 - 689)) | (1 << (SpeakQlParser.GB2312 - 689)) | (1 << (SpeakQlParser.GBK - 689)) | (1 << (SpeakQlParser.GEOSTD8 - 689)) | (1 << (SpeakQlParser.GREEK - 689)) | (1 << (SpeakQlParser.HEBREW - 689)) | (1 << (SpeakQlParser.HP8 - 689)) | (1 << (SpeakQlParser.KEYBCS2 - 689)) | (1 << (SpeakQlParser.KOI8R - 689)) | (1 << (SpeakQlParser.KOI8U - 689)) | (1 << (SpeakQlParser.LATIN1 - 689)) | (1 << (SpeakQlParser.LATIN2 - 689)) | (1 << (SpeakQlParser.LATIN5 - 689)) | (1 << (SpeakQlParser.LATIN7 - 689)) | (1 << (SpeakQlParser.MACCE - 689)) | (1 << (SpeakQlParser.MACROMAN - 689)) | (1 << (SpeakQlParser.SJIS - 689)) | (1 << (SpeakQlParser.SWE7 - 689)) | (1 << (SpeakQlParser.TIS620 - 689)) | (1 << (SpeakQlParser.UCS2 - 689)) | (1 << (SpeakQlParser.UJIS - 689)) | (1 << (SpeakQlParser.UTF16 - 689)) | (1 << (SpeakQlParser.UTF16LE - 689)) | (1 << (SpeakQlParser.UTF32 - 689)))) != 0) or ((((_la - 753)) & ~0x3f) == 0 and ((1 << (_la - 753)) & ((1 << (SpeakQlParser.UTF8 - 753)) | (1 << (SpeakQlParser.UTF8MB3 - 753)) | (1 << (SpeakQlParser.UTF8MB4 - 753)) | (1 << (SpeakQlParser.ARCHIVE - 753)) | (1 << (SpeakQlParser.BLACKHOLE - 753)) | (1 << (SpeakQlParser.CSV - 753)) | (1 << (SpeakQlParser.FEDERATED - 753)) | (1 << (SpeakQlParser.INNODB - 753)) | (1 << (SpeakQlParser.MEMORY - 753)) | (1 << (SpeakQlParser.MRG_MYISAM - 753)) | (1 << (SpeakQlParser.MYISAM - 753)) | (1 << (SpeakQlParser.NDB - 753)) | (1 << (SpeakQlParser.NDBCLUSTER - 753)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 753)) | (1 << (SpeakQlParser.TOKUDB - 753)) | (1 << (SpeakQlParser.REPEATABLE - 753)) | (1 << (SpeakQlParser.COMMITTED - 753)) | (1 << (SpeakQlParser.UNCOMMITTED - 753)) | (1 << (SpeakQlParser.SERIALIZABLE - 753)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 753)) | (1 << (SpeakQlParser.LINESTRING - 753)) | (1 << (SpeakQlParser.MULTILINESTRING - 753)) | (1 << (SpeakQlParser.MULTIPOINT - 753)) | (1 << (SpeakQlParser.MULTIPOLYGON - 753)) | (1 << (SpeakQlParser.POINT - 753)) | (1 << (SpeakQlParser.POLYGON - 753)) | (1 << (SpeakQlParser.ABS - 753)) | (1 << (SpeakQlParser.ACOS - 753)) | (1 << (SpeakQlParser.ADDDATE - 753)) | (1 << (SpeakQlParser.ADDTIME - 753)) | (1 << (SpeakQlParser.AES_DECRYPT - 753)) | (1 << (SpeakQlParser.AES_ENCRYPT - 753)) | (1 << (SpeakQlParser.AREA - 753)) | (1 << (SpeakQlParser.ASBINARY - 753)) | (1 << (SpeakQlParser.ASIN - 753)) | (1 << (SpeakQlParser.ASTEXT - 753)) | (1 << (SpeakQlParser.ASWKB - 753)) | (1 << (SpeakQlParser.ASWKT - 753)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 753)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 753)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 753)) | (1 << (SpeakQlParser.ASYMMETRIC_SIGN - 753)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 753)) | (1 << (SpeakQlParser.ATAN - 753)) | (1 << (SpeakQlParser.ATAN2 - 753)) | (1 << (SpeakQlParser.BENCHMARK - 753)) | (1 << (SpeakQlParser.BIN - 753)) | (1 << (SpeakQlParser.BIT_COUNT - 753)) | (1 << (SpeakQlParser.BIT_LENGTH - 753)) | (1 << (SpeakQlParser.BUFFER - 753)) | (1 << (SpeakQlParser.CATALOG_NAME - 753)) | (1 << (SpeakQlParser.CEIL - 753)) | (1 << (SpeakQlParser.CEILING - 753)) | (1 << (SpeakQlParser.CENTROID - 753)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 753)) | (1 << (SpeakQlParser.CHARSET - 753)) | (1 << (SpeakQlParser.CHAR_LENGTH - 753)) | (1 << (SpeakQlParser.COERCIBILITY - 753)) | (1 << (SpeakQlParser.COLLATION - 753)) | (1 << (SpeakQlParser.COMPRESS - 753)) | (1 << (SpeakQlParser.CONCAT - 753)) | (1 << (SpeakQlParser.CONCAT_WS - 753)))) != 0) or ((((_la - 817)) & ~0x3f) == 0 and ((1 << (_la - 817)) & ((1 << (SpeakQlParser.CONNECTION_ID - 817)) | (1 << (SpeakQlParser.CONV - 817)) | (1 << (SpeakQlParser.CONVERT_TZ - 817)) | (1 << (SpeakQlParser.COS - 817)) | (1 << (SpeakQlParser.COT - 817)) | (1 << (SpeakQlParser.CRC32 - 817)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 817)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 817)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 817)) | (1 << (SpeakQlParser.CREATE_DIGEST - 817)) | (1 << (SpeakQlParser.CROSSES - 817)) | (1 << (SpeakQlParser.DATEDIFF - 817)) | (1 << (SpeakQlParser.DATE_FORMAT - 817)) | (1 << (SpeakQlParser.DAYNAME - 817)) | (1 << (SpeakQlParser.DAYOFMONTH - 817)) | (1 << (SpeakQlParser.DAYOFWEEK - 817)) | (1 << (SpeakQlParser.DAYOFYEAR - 817)) | (1 << (SpeakQlParser.DECODE - 817)) | (1 << (SpeakQlParser.DEGREES - 817)) | (1 << (SpeakQlParser.DES_DECRYPT - 817)) | (1 << (SpeakQlParser.DES_ENCRYPT - 817)) | (1 << (SpeakQlParser.DIMENSION - 817)) | (1 << (SpeakQlParser.DISJOINT - 817)) | (1 << (SpeakQlParser.ELT - 817)) | (1 << (SpeakQlParser.ENCODE - 817)) | (1 << (SpeakQlParser.ENCRYPT - 817)) | (1 << (SpeakQlParser.ENDPOINT - 817)) | (1 << (SpeakQlParser.ENVELOPE - 817)) | (1 << (SpeakQlParser.EQUALS - 817)) | (1 << (SpeakQlParser.EXP - 817)) | (1 << (SpeakQlParser.EXPORT_SET - 817)) | (1 << (SpeakQlParser.EXTERIORRING - 817)) | (1 << (SpeakQlParser.EXTRACTVALUE - 817)) | (1 << (SpeakQlParser.FIELD - 817)) | (1 << (SpeakQlParser.FIND_IN_SET - 817)) | (1 << (SpeakQlParser.FLOOR - 817)) | (1 << (SpeakQlParser.FORMAT - 817)) | (1 << (SpeakQlParser.FOUND_ROWS - 817)) | (1 << (SpeakQlParser.FROM_BASE64 - 817)) | (1 << (SpeakQlParser.FROM_DAYS - 817)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 817)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 817)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 817)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 817)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 817)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 817)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 817)) | (1 << (SpeakQlParser.GEOMETRYN - 817)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 817)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 817)) | (1 << (SpeakQlParser.GEOMFROMWKB - 817)) | (1 << (SpeakQlParser.GET_FORMAT - 817)) | (1 << (SpeakQlParser.GET_LOCK - 817)) | (1 << (SpeakQlParser.GLENGTH - 817)) | (1 << (SpeakQlParser.GREATEST - 817)) | (1 << (SpeakQlParser.GTID_SUBSET - 817)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 817)) | (1 << (SpeakQlParser.HEX - 817)) | (1 << (SpeakQlParser.IFNULL - 817)) | (1 << (SpeakQlParser.INET6_ATON - 817)) | (1 << (SpeakQlParser.INET6_NTOA - 817)) | (1 << (SpeakQlParser.INET_ATON - 817)) | (1 << (SpeakQlParser.INET_NTOA - 817)) | (1 << (SpeakQlParser.INSTR - 817)))) != 0) or ((((_la - 881)) & ~0x3f) == 0 and ((1 << (_la - 881)) & ((1 << (SpeakQlParser.INTERIORRINGN - 881)) | (1 << (SpeakQlParser.INTERSECTS - 881)) | (1 << (SpeakQlParser.ISCLOSED - 881)) | (1 << (SpeakQlParser.ISEMPTY - 881)) | (1 << (SpeakQlParser.ISNULL - 881)) | (1 << (SpeakQlParser.ISSIMPLE - 881)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 881)) | (1 << (SpeakQlParser.IS_IPV4 - 881)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 881)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 881)) | (1 << (SpeakQlParser.IS_IPV6 - 881)) | (1 << (SpeakQlParser.IS_USED_LOCK - 881)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 881)) | (1 << (SpeakQlParser.LCASE - 881)) | (1 << (SpeakQlParser.LEAST - 881)) | (1 << (SpeakQlParser.LENGTH - 881)) | (1 << (SpeakQlParser.LINEFROMTEXT - 881)) | (1 << (SpeakQlParser.LINEFROMWKB - 881)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 881)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 881)) | (1 << (SpeakQlParser.LN - 881)) | (1 << (SpeakQlParser.LOAD_FILE - 881)) | (1 << (SpeakQlParser.LOCATE - 881)) | (1 << (SpeakQlParser.LOG - 881)) | (1 << (SpeakQlParser.LOG10 - 881)) | (1 << (SpeakQlParser.LOG2 - 881)) | (1 << (SpeakQlParser.LOWER - 881)) | (1 << (SpeakQlParser.LPAD - 881)) | (1 << (SpeakQlParser.LTRIM - 881)) | (1 << (SpeakQlParser.MAKEDATE - 881)) | (1 << (SpeakQlParser.MAKETIME - 881)) | (1 << (SpeakQlParser.MAKE_SET - 881)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 881)) | (1 << (SpeakQlParser.MBRCONTAINS - 881)) | (1 << (SpeakQlParser.MBRDISJOINT - 881)) | (1 << (SpeakQlParser.MBREQUAL - 881)) | (1 << (SpeakQlParser.MBRINTERSECTS - 881)) | (1 << (SpeakQlParser.MBROVERLAPS - 881)) | (1 << (SpeakQlParser.MBRTOUCHES - 881)) | (1 << (SpeakQlParser.MBRWITHIN - 881)) | (1 << (SpeakQlParser.MD5 - 881)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 881)) | (1 << (SpeakQlParser.MLINEFROMWKB - 881)) | (1 << (SpeakQlParser.MONTHNAME - 881)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 881)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 881)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 881)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 881)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 881)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 881)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 881)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 881)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 881)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 881)) | (1 << (SpeakQlParser.NAME_CONST - 881)) | (1 << (SpeakQlParser.NULLIF - 881)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 881)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 881)) | (1 << (SpeakQlParser.NUMPOINTS - 881)) | (1 << (SpeakQlParser.OCT - 881)) | (1 << (SpeakQlParser.OCTET_LENGTH - 881)) | (1 << (SpeakQlParser.ORD - 881)) | (1 << (SpeakQlParser.OVERLAPS - 881)) | (1 << (SpeakQlParser.PERIOD_ADD - 881)))) != 0) or ((((_la - 945)) & ~0x3f) == 0 and ((1 << (_la - 945)) & ((1 << (SpeakQlParser.PERIOD_DIFF - 945)) | (1 << (SpeakQlParser.PI - 945)) | (1 << (SpeakQlParser.POINTFROMTEXT - 945)) | (1 << (SpeakQlParser.POINTFROMWKB - 945)) | (1 << (SpeakQlParser.POINTN - 945)) | (1 << (SpeakQlParser.POLYFROMTEXT - 945)) | (1 << (SpeakQlParser.POLYFROMWKB - 945)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 945)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 945)) | (1 << (SpeakQlParser.POW - 945)) | (1 << (SpeakQlParser.POWER - 945)) | (1 << (SpeakQlParser.QUOTE - 945)) | (1 << (SpeakQlParser.RADIANS - 945)) | (1 << (SpeakQlParser.RAND - 945)) | (1 << (SpeakQlParser.RANDOM_BYTES - 945)) | (1 << (SpeakQlParser.RELEASE_LOCK - 945)) | (1 << (SpeakQlParser.REVERSE - 945)) | (1 << (SpeakQlParser.ROUND - 945)) | (1 << (SpeakQlParser.ROW_COUNT - 945)) | (1 << (SpeakQlParser.RPAD - 945)) | (1 << (SpeakQlParser.RTRIM - 945)) | (1 << (SpeakQlParser.SEC_TO_TIME - 945)) | (1 << (SpeakQlParser.SESSION_USER - 945)) | (1 << (SpeakQlParser.SHA - 945)) | (1 << (SpeakQlParser.SHA1 - 945)) | (1 << (SpeakQlParser.SHA2 - 945)) | (1 << (SpeakQlParser.SCHEMA_NAME - 945)) | (1 << (SpeakQlParser.SIGN - 945)) | (1 << (SpeakQlParser.SIN - 945)) | (1 << (SpeakQlParser.SLEEP - 945)) | (1 << (SpeakQlParser.SOUNDEX - 945)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 945)) | (1 << (SpeakQlParser.SQRT - 945)) | (1 << (SpeakQlParser.SRID - 945)) | (1 << (SpeakQlParser.STARTPOINT - 945)) | (1 << (SpeakQlParser.STRCMP - 945)) | (1 << (SpeakQlParser.STR_TO_DATE - 945)) | (1 << (SpeakQlParser.ST_AREA - 945)) | (1 << (SpeakQlParser.ST_ASBINARY - 945)) | (1 << (SpeakQlParser.ST_ASTEXT - 945)) | (1 << (SpeakQlParser.ST_ASWKB - 945)) | (1 << (SpeakQlParser.ST_ASWKT - 945)) | (1 << (SpeakQlParser.ST_BUFFER - 945)) | (1 << (SpeakQlParser.ST_CENTROID - 945)) | (1 << (SpeakQlParser.ST_CONTAINS - 945)) | (1 << (SpeakQlParser.ST_CROSSES - 945)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 945)) | (1 << (SpeakQlParser.ST_DIMENSION - 945)) | (1 << (SpeakQlParser.ST_DISJOINT - 945)) | (1 << (SpeakQlParser.ST_DISTANCE - 945)) | (1 << (SpeakQlParser.ST_ENDPOINT - 945)) | (1 << (SpeakQlParser.ST_ENVELOPE - 945)) | (1 << (SpeakQlParser.ST_EQUALS - 945)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 945)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 945)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 945)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 945)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 945)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 945)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 945)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 945)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 945)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 945)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 945)))) != 0) or ((((_la - 1009)) & ~0x3f) == 0 and ((1 << (_la - 1009)) & ((1 << (SpeakQlParser.ST_GEOMFROMWKB - 1009)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 1009)) | (1 << (SpeakQlParser.ST_INTERSECTION - 1009)) | (1 << (SpeakQlParser.ST_INTERSECTS - 1009)) | (1 << (SpeakQlParser.ST_ISCLOSED - 1009)) | (1 << (SpeakQlParser.ST_ISEMPTY - 1009)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 1009)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 1009)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 1009)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 1009)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 1009)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 1009)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 1009)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 1009)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 1009)) | (1 << (SpeakQlParser.ST_OVERLAPS - 1009)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 1009)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 1009)) | (1 << (SpeakQlParser.ST_POINTN - 1009)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 1009)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 1009)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 1009)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 1009)) | (1 << (SpeakQlParser.ST_SRID - 1009)) | (1 << (SpeakQlParser.ST_STARTPOINT - 1009)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 1009)) | (1 << (SpeakQlParser.ST_TOUCHES - 1009)) | (1 << (SpeakQlParser.ST_UNION - 1009)) | (1 << (SpeakQlParser.ST_WITHIN - 1009)) | (1 << (SpeakQlParser.ST_X - 1009)) | (1 << (SpeakQlParser.ST_Y - 1009)) | (1 << (SpeakQlParser.SUBDATE - 1009)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 1009)) | (1 << (SpeakQlParser.SUBTIME - 1009)) | (1 << (SpeakQlParser.SYSTEM_USER - 1009)) | (1 << (SpeakQlParser.TAN - 1009)) | (1 << (SpeakQlParser.TIMEDIFF - 1009)) | (1 << (SpeakQlParser.TIMESTAMPADD - 1009)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 1009)) | (1 << (SpeakQlParser.TIME_FORMAT - 1009)) | (1 << (SpeakQlParser.TIME_TO_SEC - 1009)) | (1 << (SpeakQlParser.TOUCHES - 1009)) | (1 << (SpeakQlParser.TO_BASE64 - 1009)) | (1 << (SpeakQlParser.TO_DAYS - 1009)) | (1 << (SpeakQlParser.TO_SECONDS - 1009)) | (1 << (SpeakQlParser.UCASE - 1009)) | (1 << (SpeakQlParser.UNCOMPRESS - 1009)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1009)) | (1 << (SpeakQlParser.UNHEX - 1009)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1009)) | (1 << (SpeakQlParser.UPDATEXML - 1009)) | (1 << (SpeakQlParser.UPPER - 1009)) | (1 << (SpeakQlParser.UUID - 1009)) | (1 << (SpeakQlParser.UUID_SHORT - 1009)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1009)) | (1 << (SpeakQlParser.VERSION - 1009)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1009)) | (1 << (SpeakQlParser.WEEKDAY - 1009)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1009)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1009)) | (1 << (SpeakQlParser.WITHIN - 1009)) | (1 << (SpeakQlParser.YEARWEEK - 1009)) | (1 << (SpeakQlParser.Y_FUNCTION - 1009)) | (1 << (SpeakQlParser.X_FUNCTION - 1009)))) != 0) or ((((_la - 1088)) & ~0x3f) == 0 and ((1 << (_la - 1088)) & ((1 << (SpeakQlParser.MOD - 1088)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1088)) | (1 << (SpeakQlParser.STRING_LITERAL - 1088)) | (1 << (SpeakQlParser.ID - 1088)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1088)) | (1 << (SpeakQlParser.OPTIONAL - 1088)))) != 0):
                self.state = 3954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.AS:
                    self.state = 3953
                    self.match(SpeakQlParser.AS)


                self.state = 3956
                self.uid()


            self.state = 3959
            self.lockAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(SpeakQlParser.READ, 0)

        def LOCAL(self):
            return self.getToken(SpeakQlParser.LOCAL, 0)

        def WRITE(self):
            return self.getToken(SpeakQlParser.WRITE, 0)

        def LOW_PRIORITY(self):
            return self.getToken(SpeakQlParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_lockAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockAction" ):
                listener.enterLockAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockAction" ):
                listener.exitLockAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockAction" ):
                return visitor.visitLockAction(self)
            else:
                return visitor.visitChildren(self)




    def lockAction(self):

        localctx = SpeakQlParser.LockActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_lockAction)
        self._la = 0 # Token type
        try:
            self.state = 3969
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.READ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3961
                self.match(SpeakQlParser.READ)
                self.state = 3963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LOCAL:
                    self.state = 3962
                    self.match(SpeakQlParser.LOCAL)


                pass
            elif token in [SpeakQlParser.LOW_PRIORITY, SpeakQlParser.WRITE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LOW_PRIORITY:
                    self.state = 3965
                    self.match(SpeakQlParser.LOW_PRIORITY)


                self.state = 3968
                self.match(SpeakQlParser.WRITE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISOLATION(self):
            return self.getToken(SpeakQlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(SpeakQlParser.LEVEL, 0)

        def transactionLevel(self):
            return self.getTypedRuleContext(SpeakQlParser.TransactionLevelContext,0)


        def READ(self):
            return self.getToken(SpeakQlParser.READ, 0)

        def WRITE(self):
            return self.getToken(SpeakQlParser.WRITE, 0)

        def ONLY(self):
            return self.getToken(SpeakQlParser.ONLY, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_transactionOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionOption" ):
                listener.enterTransactionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionOption" ):
                listener.exitTransactionOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionOption" ):
                return visitor.visitTransactionOption(self)
            else:
                return visitor.visitChildren(self)




    def transactionOption(self):

        localctx = SpeakQlParser.TransactionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_transactionOption)
        try:
            self.state = 3978
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,570,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3971
                self.match(SpeakQlParser.ISOLATION)
                self.state = 3972
                self.match(SpeakQlParser.LEVEL)
                self.state = 3973
                self.transactionLevel()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3974
                self.match(SpeakQlParser.READ)
                self.state = 3975
                self.match(SpeakQlParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3976
                self.match(SpeakQlParser.READ)
                self.state = 3977
                self.match(SpeakQlParser.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(SpeakQlParser.REPEATABLE, 0)

        def READ(self):
            return self.getToken(SpeakQlParser.READ, 0)

        def COMMITTED(self):
            return self.getToken(SpeakQlParser.COMMITTED, 0)

        def UNCOMMITTED(self):
            return self.getToken(SpeakQlParser.UNCOMMITTED, 0)

        def SERIALIZABLE(self):
            return self.getToken(SpeakQlParser.SERIALIZABLE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_transactionLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionLevel" ):
                listener.enterTransactionLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionLevel" ):
                listener.exitTransactionLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionLevel" ):
                return visitor.visitTransactionLevel(self)
            else:
                return visitor.visitChildren(self)




    def transactionLevel(self):

        localctx = SpeakQlParser.TransactionLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_transactionLevel)
        try:
            self.state = 3987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,571,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3980
                self.match(SpeakQlParser.REPEATABLE)
                self.state = 3981
                self.match(SpeakQlParser.READ)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3982
                self.match(SpeakQlParser.READ)
                self.state = 3983
                self.match(SpeakQlParser.COMMITTED)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3984
                self.match(SpeakQlParser.READ)
                self.state = 3985
                self.match(SpeakQlParser.UNCOMMITTED)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3986
                self.match(SpeakQlParser.SERIALIZABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeMasterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(SpeakQlParser.CHANGE, 0)

        def MASTER(self):
            return self.getToken(SpeakQlParser.MASTER, 0)

        def TO(self):
            return self.getToken(SpeakQlParser.TO, 0)

        def masterOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.MasterOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.MasterOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def channelOption(self):
            return self.getTypedRuleContext(SpeakQlParser.ChannelOptionContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_changeMaster

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeMaster" ):
                listener.enterChangeMaster(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeMaster" ):
                listener.exitChangeMaster(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChangeMaster" ):
                return visitor.visitChangeMaster(self)
            else:
                return visitor.visitChildren(self)




    def changeMaster(self):

        localctx = SpeakQlParser.ChangeMasterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_changeMaster)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3989
            self.match(SpeakQlParser.CHANGE)
            self.state = 3990
            self.match(SpeakQlParser.MASTER)
            self.state = 3991
            self.match(SpeakQlParser.TO)
            self.state = 3992
            self.masterOption()
            self.state = 3997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 3993
                self.match(SpeakQlParser.COMMA)
                self.state = 3994
                self.masterOption()
                self.state = 3999
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.FOR:
                self.state = 4000
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeReplicationFilterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(SpeakQlParser.CHANGE, 0)

        def REPLICATION(self):
            return self.getToken(SpeakQlParser.REPLICATION, 0)

        def FILTER(self):
            return self.getToken(SpeakQlParser.FILTER, 0)

        def replicationFilter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ReplicationFilterContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ReplicationFilterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_changeReplicationFilter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeReplicationFilter" ):
                listener.enterChangeReplicationFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeReplicationFilter" ):
                listener.exitChangeReplicationFilter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChangeReplicationFilter" ):
                return visitor.visitChangeReplicationFilter(self)
            else:
                return visitor.visitChildren(self)




    def changeReplicationFilter(self):

        localctx = SpeakQlParser.ChangeReplicationFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_changeReplicationFilter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4003
            self.match(SpeakQlParser.CHANGE)
            self.state = 4004
            self.match(SpeakQlParser.REPLICATION)
            self.state = 4005
            self.match(SpeakQlParser.FILTER)
            self.state = 4006
            self.replicationFilter()
            self.state = 4011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 4007
                self.match(SpeakQlParser.COMMA)
                self.state = 4008
                self.replicationFilter()
                self.state = 4013
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PurgeBinaryLogsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.purgeFormat = None # Token
            self.fileName = None # Token
            self.timeValue = None # Token

        def PURGE(self):
            return self.getToken(SpeakQlParser.PURGE, 0)

        def LOGS(self):
            return self.getToken(SpeakQlParser.LOGS, 0)

        def BINARY(self):
            return self.getToken(SpeakQlParser.BINARY, 0)

        def MASTER(self):
            return self.getToken(SpeakQlParser.MASTER, 0)

        def TO(self):
            return self.getToken(SpeakQlParser.TO, 0)

        def BEFORE(self):
            return self.getToken(SpeakQlParser.BEFORE, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_purgeBinaryLogs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPurgeBinaryLogs" ):
                listener.enterPurgeBinaryLogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPurgeBinaryLogs" ):
                listener.exitPurgeBinaryLogs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPurgeBinaryLogs" ):
                return visitor.visitPurgeBinaryLogs(self)
            else:
                return visitor.visitChildren(self)




    def purgeBinaryLogs(self):

        localctx = SpeakQlParser.PurgeBinaryLogsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_purgeBinaryLogs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4014
            self.match(SpeakQlParser.PURGE)
            self.state = 4015
            localctx.purgeFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.BINARY or _la==SpeakQlParser.MASTER):
                localctx.purgeFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4016
            self.match(SpeakQlParser.LOGS)
            self.state = 4021
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.TO]:
                self.state = 4017
                self.match(SpeakQlParser.TO)
                self.state = 4018
                localctx.fileName = self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.BEFORE]:
                self.state = 4019
                self.match(SpeakQlParser.BEFORE)
                self.state = 4020
                localctx.timeValue = self.match(SpeakQlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetMasterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(SpeakQlParser.RESET, 0)

        def MASTER(self):
            return self.getToken(SpeakQlParser.MASTER, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_resetMaster

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetMaster" ):
                listener.enterResetMaster(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetMaster" ):
                listener.exitResetMaster(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetMaster" ):
                return visitor.visitResetMaster(self)
            else:
                return visitor.visitChildren(self)




    def resetMaster(self):

        localctx = SpeakQlParser.ResetMasterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_resetMaster)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4023
            self.match(SpeakQlParser.RESET)
            self.state = 4024
            self.match(SpeakQlParser.MASTER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetSlaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(SpeakQlParser.RESET, 0)

        def SLAVE(self):
            return self.getToken(SpeakQlParser.SLAVE, 0)

        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)

        def channelOption(self):
            return self.getTypedRuleContext(SpeakQlParser.ChannelOptionContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_resetSlave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetSlave" ):
                listener.enterResetSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetSlave" ):
                listener.exitResetSlave(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetSlave" ):
                return visitor.visitResetSlave(self)
            else:
                return visitor.visitChildren(self)




    def resetSlave(self):

        localctx = SpeakQlParser.ResetSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_resetSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4026
            self.match(SpeakQlParser.RESET)
            self.state = 4027
            self.match(SpeakQlParser.SLAVE)
            self.state = 4029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.ALL:
                self.state = 4028
                self.match(SpeakQlParser.ALL)


            self.state = 4032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.FOR:
                self.state = 4031
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartSlaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(SpeakQlParser.START, 0)

        def SLAVE(self):
            return self.getToken(SpeakQlParser.SLAVE, 0)

        def threadType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ThreadTypeContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ThreadTypeContext,i)


        def UNTIL(self):
            return self.getToken(SpeakQlParser.UNTIL, 0)

        def untilOption(self):
            return self.getTypedRuleContext(SpeakQlParser.UntilOptionContext,0)


        def connectionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ConnectionOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ConnectionOptionContext,i)


        def channelOption(self):
            return self.getTypedRuleContext(SpeakQlParser.ChannelOptionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_startSlave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartSlave" ):
                listener.enterStartSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartSlave" ):
                listener.exitStartSlave(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartSlave" ):
                return visitor.visitStartSlave(self)
            else:
                return visitor.visitChildren(self)




    def startSlave(self):

        localctx = SpeakQlParser.StartSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_startSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4034
            self.match(SpeakQlParser.START)
            self.state = 4035
            self.match(SpeakQlParser.SLAVE)
            self.state = 4044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IO_THREAD or _la==SpeakQlParser.SQL_THREAD:
                self.state = 4036
                self.threadType()
                self.state = 4041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 4037
                    self.match(SpeakQlParser.COMMA)
                    self.state = 4038
                    self.threadType()
                    self.state = 4043
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 4048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.UNTIL:
                self.state = 4046
                self.match(SpeakQlParser.UNTIL)
                self.state = 4047
                self.untilOption()


            self.state = 4053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.DEFAULT_AUTH or _la==SpeakQlParser.PASSWORD or _la==SpeakQlParser.PLUGIN_DIR or _la==SpeakQlParser.USER:
                self.state = 4050
                self.connectionOption()
                self.state = 4055
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.FOR:
                self.state = 4056
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopSlaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(SpeakQlParser.STOP, 0)

        def SLAVE(self):
            return self.getToken(SpeakQlParser.SLAVE, 0)

        def threadType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ThreadTypeContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ThreadTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_stopSlave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopSlave" ):
                listener.enterStopSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopSlave" ):
                listener.exitStopSlave(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStopSlave" ):
                return visitor.visitStopSlave(self)
            else:
                return visitor.visitChildren(self)




    def stopSlave(self):

        localctx = SpeakQlParser.StopSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_stopSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4059
            self.match(SpeakQlParser.STOP)
            self.state = 4060
            self.match(SpeakQlParser.SLAVE)
            self.state = 4069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IO_THREAD or _la==SpeakQlParser.SQL_THREAD:
                self.state = 4061
                self.threadType()
                self.state = 4066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 4062
                    self.match(SpeakQlParser.COMMA)
                    self.state = 4063
                    self.threadType()
                    self.state = 4068
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartGroupReplicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(SpeakQlParser.START, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(SpeakQlParser.GROUP_REPLICATION, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_startGroupReplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartGroupReplication" ):
                listener.enterStartGroupReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartGroupReplication" ):
                listener.exitStartGroupReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartGroupReplication" ):
                return visitor.visitStartGroupReplication(self)
            else:
                return visitor.visitChildren(self)




    def startGroupReplication(self):

        localctx = SpeakQlParser.StartGroupReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_startGroupReplication)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4071
            self.match(SpeakQlParser.START)
            self.state = 4072
            self.match(SpeakQlParser.GROUP_REPLICATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopGroupReplicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(SpeakQlParser.STOP, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(SpeakQlParser.GROUP_REPLICATION, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_stopGroupReplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopGroupReplication" ):
                listener.enterStopGroupReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopGroupReplication" ):
                listener.exitStopGroupReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStopGroupReplication" ):
                return visitor.visitStopGroupReplication(self)
            else:
                return visitor.visitChildren(self)




    def stopGroupReplication(self):

        localctx = SpeakQlParser.StopGroupReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_stopGroupReplication)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4074
            self.match(SpeakQlParser.STOP)
            self.state = 4075
            self.match(SpeakQlParser.GROUP_REPLICATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MasterOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_masterOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MasterStringOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringMasterOption(self):
            return self.getTypedRuleContext(SpeakQlParser.StringMasterOptionContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterStringOption" ):
                listener.enterMasterStringOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterStringOption" ):
                listener.exitMasterStringOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMasterStringOption" ):
                return visitor.visitMasterStringOption(self)
            else:
                return visitor.visitChildren(self)


    class MasterRealOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MASTER_HEARTBEAT_PERIOD(self):
            return self.getToken(SpeakQlParser.MASTER_HEARTBEAT_PERIOD, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def REAL_LITERAL(self):
            return self.getToken(SpeakQlParser.REAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterRealOption" ):
                listener.enterMasterRealOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterRealOption" ):
                listener.exitMasterRealOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMasterRealOption" ):
                return visitor.visitMasterRealOption(self)
            else:
                return visitor.visitChildren(self)


    class MasterBoolOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.MasterOptionContext
            super().__init__(parser)
            self.boolVal = None # Token
            self.copyFrom(ctx)

        def boolMasterOption(self):
            return self.getTypedRuleContext(SpeakQlParser.BoolMasterOptionContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(SpeakQlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(SpeakQlParser.ONE_DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterBoolOption" ):
                listener.enterMasterBoolOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterBoolOption" ):
                listener.exitMasterBoolOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMasterBoolOption" ):
                return visitor.visitMasterBoolOption(self)
            else:
                return visitor.visitChildren(self)


    class MasterUidListOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IGNORE_SERVER_IDS(self):
            return self.getToken(SpeakQlParser.IGNORE_SERVER_IDS, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterUidListOption" ):
                listener.enterMasterUidListOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterUidListOption" ):
                listener.exitMasterUidListOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMasterUidListOption" ):
                return visitor.visitMasterUidListOption(self)
            else:
                return visitor.visitChildren(self)


    class MasterDecimalOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decimalMasterOption(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalMasterOptionContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterDecimalOption" ):
                listener.enterMasterDecimalOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterDecimalOption" ):
                listener.exitMasterDecimalOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMasterDecimalOption" ):
                return visitor.visitMasterDecimalOption(self)
            else:
                return visitor.visitChildren(self)



    def masterOption(self):

        localctx = SpeakQlParser.MasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_masterOption)
        self._la = 0 # Token type
        try:
            self.state = 4107
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.MASTER_BIND, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.RELAY_LOG_FILE]:
                localctx = SpeakQlParser.MasterStringOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4077
                self.stringMasterOption()
                self.state = 4078
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4079
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.RELAY_LOG_POS]:
                localctx = SpeakQlParser.MasterDecimalOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4081
                self.decimalMasterOption()
                self.state = 4082
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4083
                self.decimalLiteral()
                pass
            elif token in [SpeakQlParser.MASTER_SSL_VERIFY_SERVER_CERT, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_SSL]:
                localctx = SpeakQlParser.MasterBoolOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4085
                self.boolMasterOption()
                self.state = 4086
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4087
                localctx.boolVal = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.ZERO_DECIMAL or _la==SpeakQlParser.ONE_DECIMAL):
                    localctx.boolVal = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SpeakQlParser.MASTER_HEARTBEAT_PERIOD]:
                localctx = SpeakQlParser.MasterRealOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4089
                self.match(SpeakQlParser.MASTER_HEARTBEAT_PERIOD)
                self.state = 4090
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4091
                self.match(SpeakQlParser.REAL_LITERAL)
                pass
            elif token in [SpeakQlParser.IGNORE_SERVER_IDS]:
                localctx = SpeakQlParser.MasterUidListOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4092
                self.match(SpeakQlParser.IGNORE_SERVER_IDS)
                self.state = 4093
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4094
                self.leftParen()
                self.state = 4103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                    self.state = 4095
                    self.uid()
                    self.state = 4100
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SpeakQlParser.COMMA:
                        self.state = 4096
                        self.match(SpeakQlParser.COMMA)
                        self.state = 4097
                        self.uid()
                        self.state = 4102
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 4105
                self.rightParen()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringMasterOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_BIND(self):
            return self.getToken(SpeakQlParser.MASTER_BIND, 0)

        def MASTER_HOST(self):
            return self.getToken(SpeakQlParser.MASTER_HOST, 0)

        def MASTER_USER(self):
            return self.getToken(SpeakQlParser.MASTER_USER, 0)

        def MASTER_PASSWORD(self):
            return self.getToken(SpeakQlParser.MASTER_PASSWORD, 0)

        def MASTER_LOG_FILE(self):
            return self.getToken(SpeakQlParser.MASTER_LOG_FILE, 0)

        def RELAY_LOG_FILE(self):
            return self.getToken(SpeakQlParser.RELAY_LOG_FILE, 0)

        def MASTER_SSL_CA(self):
            return self.getToken(SpeakQlParser.MASTER_SSL_CA, 0)

        def MASTER_SSL_CAPATH(self):
            return self.getToken(SpeakQlParser.MASTER_SSL_CAPATH, 0)

        def MASTER_SSL_CERT(self):
            return self.getToken(SpeakQlParser.MASTER_SSL_CERT, 0)

        def MASTER_SSL_CRL(self):
            return self.getToken(SpeakQlParser.MASTER_SSL_CRL, 0)

        def MASTER_SSL_CRLPATH(self):
            return self.getToken(SpeakQlParser.MASTER_SSL_CRLPATH, 0)

        def MASTER_SSL_KEY(self):
            return self.getToken(SpeakQlParser.MASTER_SSL_KEY, 0)

        def MASTER_SSL_CIPHER(self):
            return self.getToken(SpeakQlParser.MASTER_SSL_CIPHER, 0)

        def MASTER_TLS_VERSION(self):
            return self.getToken(SpeakQlParser.MASTER_TLS_VERSION, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_stringMasterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringMasterOption" ):
                listener.enterStringMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringMasterOption" ):
                listener.exitStringMasterOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringMasterOption" ):
                return visitor.visitStringMasterOption(self)
            else:
                return visitor.visitChildren(self)




    def stringMasterOption(self):

        localctx = SpeakQlParser.StringMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_stringMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4109
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.MASTER_BIND or ((((_la - 474)) & ~0x3f) == 0 and ((1 << (_la - 474)) & ((1 << (SpeakQlParser.MASTER_HOST - 474)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 474)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 474)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 474)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 474)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 474)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 474)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 474)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 474)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 474)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 474)) | (1 << (SpeakQlParser.MASTER_USER - 474)))) != 0) or _la==SpeakQlParser.RELAY_LOG_FILE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalMasterOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_PORT(self):
            return self.getToken(SpeakQlParser.MASTER_PORT, 0)

        def MASTER_CONNECT_RETRY(self):
            return self.getToken(SpeakQlParser.MASTER_CONNECT_RETRY, 0)

        def MASTER_RETRY_COUNT(self):
            return self.getToken(SpeakQlParser.MASTER_RETRY_COUNT, 0)

        def MASTER_DELAY(self):
            return self.getToken(SpeakQlParser.MASTER_DELAY, 0)

        def MASTER_LOG_POS(self):
            return self.getToken(SpeakQlParser.MASTER_LOG_POS, 0)

        def RELAY_LOG_POS(self):
            return self.getToken(SpeakQlParser.RELAY_LOG_POS, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_decimalMasterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalMasterOption" ):
                listener.enterDecimalMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalMasterOption" ):
                listener.exitDecimalMasterOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalMasterOption" ):
                return visitor.visitDecimalMasterOption(self)
            else:
                return visitor.visitChildren(self)




    def decimalMasterOption(self):

        localctx = SpeakQlParser.DecimalMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_decimalMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4111
            _la = self._input.LA(1)
            if not(((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 471)) | (1 << (SpeakQlParser.MASTER_DELAY - 471)) | (1 << (SpeakQlParser.MASTER_LOG_POS - 471)) | (1 << (SpeakQlParser.MASTER_PORT - 471)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 471)))) != 0) or _la==SpeakQlParser.RELAY_LOG_POS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolMasterOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_AUTO_POSITION(self):
            return self.getToken(SpeakQlParser.MASTER_AUTO_POSITION, 0)

        def MASTER_SSL(self):
            return self.getToken(SpeakQlParser.MASTER_SSL, 0)

        def MASTER_SSL_VERIFY_SERVER_CERT(self):
            return self.getToken(SpeakQlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_boolMasterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolMasterOption" ):
                listener.enterBoolMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolMasterOption" ):
                listener.exitBoolMasterOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolMasterOption" ):
                return visitor.visitBoolMasterOption(self)
            else:
                return visitor.visitChildren(self)




    def boolMasterOption(self):

        localctx = SpeakQlParser.BoolMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_boolMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4113
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.MASTER_SSL_VERIFY_SERVER_CERT or _la==SpeakQlParser.MASTER_AUTO_POSITION or _la==SpeakQlParser.MASTER_SSL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChannelOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(SpeakQlParser.FOR, 0)

        def CHANNEL(self):
            return self.getToken(SpeakQlParser.CHANNEL, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_channelOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannelOption" ):
                listener.enterChannelOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannelOption" ):
                listener.exitChannelOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChannelOption" ):
                return visitor.visitChannelOption(self)
            else:
                return visitor.visitChildren(self)




    def channelOption(self):

        localctx = SpeakQlParser.ChannelOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_channelOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4115
            self.match(SpeakQlParser.FOR)
            self.state = 4116
            self.match(SpeakQlParser.CHANNEL)
            self.state = 4117
            self.match(SpeakQlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationFilterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_replicationFilter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WildIgnoreTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_WILD_IGNORE_TABLE(self):
            return self.getToken(SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def simpleStrings(self):
            return self.getTypedRuleContext(SpeakQlParser.SimpleStringsContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildIgnoreTableReplication" ):
                listener.enterWildIgnoreTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildIgnoreTableReplication" ):
                listener.exitWildIgnoreTableReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildIgnoreTableReplication" ):
                return visitor.visitWildIgnoreTableReplication(self)
            else:
                return visitor.visitChildren(self)


    class DoTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_DO_TABLE(self):
            return self.getToken(SpeakQlParser.REPLICATE_DO_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def tables(self):
            return self.getTypedRuleContext(SpeakQlParser.TablesContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoTableReplication" ):
                listener.enterDoTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoTableReplication" ):
                listener.exitDoTableReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoTableReplication" ):
                return visitor.visitDoTableReplication(self)
            else:
                return visitor.visitChildren(self)


    class IgnoreTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_IGNORE_TABLE(self):
            return self.getToken(SpeakQlParser.REPLICATE_IGNORE_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def tables(self):
            return self.getTypedRuleContext(SpeakQlParser.TablesContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreTableReplication" ):
                listener.enterIgnoreTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreTableReplication" ):
                listener.exitIgnoreTableReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreTableReplication" ):
                return visitor.visitIgnoreTableReplication(self)
            else:
                return visitor.visitChildren(self)


    class RewriteDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_REWRITE_DB(self):
            return self.getToken(SpeakQlParser.REPLICATE_REWRITE_DB, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def tablePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.TablePairContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.TablePairContext,i)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRewriteDbReplication" ):
                listener.enterRewriteDbReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRewriteDbReplication" ):
                listener.exitRewriteDbReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRewriteDbReplication" ):
                return visitor.visitRewriteDbReplication(self)
            else:
                return visitor.visitChildren(self)


    class DoDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_DO_DB(self):
            return self.getToken(SpeakQlParser.REPLICATE_DO_DB, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoDbReplication" ):
                listener.enterDoDbReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoDbReplication" ):
                listener.exitDoDbReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoDbReplication" ):
                return visitor.visitDoDbReplication(self)
            else:
                return visitor.visitChildren(self)


    class IgnoreDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_IGNORE_DB(self):
            return self.getToken(SpeakQlParser.REPLICATE_IGNORE_DB, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreDbReplication" ):
                listener.enterIgnoreDbReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreDbReplication" ):
                listener.exitIgnoreDbReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreDbReplication" ):
                return visitor.visitIgnoreDbReplication(self)
            else:
                return visitor.visitChildren(self)


    class WildDoTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_WILD_DO_TABLE(self):
            return self.getToken(SpeakQlParser.REPLICATE_WILD_DO_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def simpleStrings(self):
            return self.getTypedRuleContext(SpeakQlParser.SimpleStringsContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildDoTableReplication" ):
                listener.enterWildDoTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildDoTableReplication" ):
                listener.exitWildDoTableReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildDoTableReplication" ):
                return visitor.visitWildDoTableReplication(self)
            else:
                return visitor.visitChildren(self)



    def replicationFilter(self):

        localctx = SpeakQlParser.ReplicationFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_replicationFilter)
        self._la = 0 # Token type
        try:
            self.state = 4168
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.REPLICATE_DO_DB]:
                localctx = SpeakQlParser.DoDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4119
                self.match(SpeakQlParser.REPLICATE_DO_DB)
                self.state = 4120
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4121
                self.leftParen()
                self.state = 4122
                self.uidList()
                self.state = 4123
                self.rightParen()
                pass
            elif token in [SpeakQlParser.REPLICATE_IGNORE_DB]:
                localctx = SpeakQlParser.IgnoreDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4125
                self.match(SpeakQlParser.REPLICATE_IGNORE_DB)
                self.state = 4126
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4127
                self.leftParen()
                self.state = 4128
                self.uidList()
                self.state = 4129
                self.rightParen()
                pass
            elif token in [SpeakQlParser.REPLICATE_DO_TABLE]:
                localctx = SpeakQlParser.DoTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4131
                self.match(SpeakQlParser.REPLICATE_DO_TABLE)
                self.state = 4132
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4133
                self.leftParen()
                self.state = 4134
                self.tables()
                self.state = 4135
                self.rightParen()
                pass
            elif token in [SpeakQlParser.REPLICATE_IGNORE_TABLE]:
                localctx = SpeakQlParser.IgnoreTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4137
                self.match(SpeakQlParser.REPLICATE_IGNORE_TABLE)
                self.state = 4138
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4139
                self.leftParen()
                self.state = 4140
                self.tables()
                self.state = 4141
                self.rightParen()
                pass
            elif token in [SpeakQlParser.REPLICATE_WILD_DO_TABLE]:
                localctx = SpeakQlParser.WildDoTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4143
                self.match(SpeakQlParser.REPLICATE_WILD_DO_TABLE)
                self.state = 4144
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4145
                self.leftParen()
                self.state = 4146
                self.simpleStrings()
                self.state = 4147
                self.rightParen()
                pass
            elif token in [SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE]:
                localctx = SpeakQlParser.WildIgnoreTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4149
                self.match(SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE)
                self.state = 4150
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4151
                self.leftParen()
                self.state = 4152
                self.simpleStrings()
                self.state = 4153
                self.rightParen()
                pass
            elif token in [SpeakQlParser.REPLICATE_REWRITE_DB]:
                localctx = SpeakQlParser.RewriteDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 4155
                self.match(SpeakQlParser.REPLICATE_REWRITE_DB)
                self.state = 4156
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4157
                self.leftParen()
                self.state = 4158
                self.tablePair()
                self.state = 4163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 4159
                    self.match(SpeakQlParser.COMMA)
                    self.state = 4160
                    self.tablePair()
                    self.state = 4165
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4166
                self.rightParen()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.firstTable = None # TableNameContext
            self.secondTable = None # TableNameContext

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def COMMA(self):
            return self.getToken(SpeakQlParser.COMMA, 0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.TableNameContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_tablePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePair" ):
                listener.enterTablePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePair" ):
                listener.exitTablePair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePair" ):
                return visitor.visitTablePair(self)
            else:
                return visitor.visitChildren(self)




    def tablePair(self):

        localctx = SpeakQlParser.TablePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_tablePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4170
            self.leftParen()
            self.state = 4171
            localctx.firstTable = self.tableName()
            self.state = 4172
            self.match(SpeakQlParser.COMMA)
            self.state = 4173
            localctx.secondTable = self.tableName()
            self.state = 4174
            self.rightParen()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThreadTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IO_THREAD(self):
            return self.getToken(SpeakQlParser.IO_THREAD, 0)

        def SQL_THREAD(self):
            return self.getToken(SpeakQlParser.SQL_THREAD, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_threadType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThreadType" ):
                listener.enterThreadType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThreadType" ):
                listener.exitThreadType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThreadType" ):
                return visitor.visitThreadType(self)
            else:
                return visitor.visitChildren(self)




    def threadType(self):

        localctx = SpeakQlParser.ThreadTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_threadType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4176
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.IO_THREAD or _la==SpeakQlParser.SQL_THREAD):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntilOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_untilOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GtidsUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.UntilOptionContext
            super().__init__(parser)
            self.gtids = None # Token
            self.copyFrom(ctx)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def gtuidSet(self):
            return self.getTypedRuleContext(SpeakQlParser.GtuidSetContext,0)

        def SQL_BEFORE_GTIDS(self):
            return self.getToken(SpeakQlParser.SQL_BEFORE_GTIDS, 0)
        def SQL_AFTER_GTIDS(self):
            return self.getToken(SpeakQlParser.SQL_AFTER_GTIDS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGtidsUntilOption" ):
                listener.enterGtidsUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGtidsUntilOption" ):
                listener.exitGtidsUntilOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGtidsUntilOption" ):
                return visitor.visitGtidsUntilOption(self)
            else:
                return visitor.visitChildren(self)


    class SqlGapsUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.UntilOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQL_AFTER_MTS_GAPS(self):
            return self.getToken(SpeakQlParser.SQL_AFTER_MTS_GAPS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlGapsUntilOption" ):
                listener.enterSqlGapsUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlGapsUntilOption" ):
                listener.exitSqlGapsUntilOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlGapsUntilOption" ):
                return visitor.visitSqlGapsUntilOption(self)
            else:
                return visitor.visitChildren(self)


    class MasterLogUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.UntilOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MASTER_LOG_FILE(self):
            return self.getToken(SpeakQlParser.MASTER_LOG_FILE, 0)
        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(SpeakQlParser.EQUAL_SYMBOL, i)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)
        def COMMA(self):
            return self.getToken(SpeakQlParser.COMMA, 0)
        def MASTER_LOG_POS(self):
            return self.getToken(SpeakQlParser.MASTER_LOG_POS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterLogUntilOption" ):
                listener.enterMasterLogUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterLogUntilOption" ):
                listener.exitMasterLogUntilOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMasterLogUntilOption" ):
                return visitor.visitMasterLogUntilOption(self)
            else:
                return visitor.visitChildren(self)


    class RelayLogUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.UntilOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RELAY_LOG_FILE(self):
            return self.getToken(SpeakQlParser.RELAY_LOG_FILE, 0)
        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(SpeakQlParser.EQUAL_SYMBOL, i)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)
        def COMMA(self):
            return self.getToken(SpeakQlParser.COMMA, 0)
        def RELAY_LOG_POS(self):
            return self.getToken(SpeakQlParser.RELAY_LOG_POS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelayLogUntilOption" ):
                listener.enterRelayLogUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelayLogUntilOption" ):
                listener.exitRelayLogUntilOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelayLogUntilOption" ):
                return visitor.visitRelayLogUntilOption(self)
            else:
                return visitor.visitChildren(self)



    def untilOption(self):

        localctx = SpeakQlParser.UntilOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_untilOption)
        self._la = 0 # Token type
        try:
            self.state = 4196
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_BEFORE_GTIDS]:
                localctx = SpeakQlParser.GtidsUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4178
                localctx.gtids = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.SQL_AFTER_GTIDS or _la==SpeakQlParser.SQL_BEFORE_GTIDS):
                    localctx.gtids = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4179
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4180
                self.gtuidSet()
                pass
            elif token in [SpeakQlParser.MASTER_LOG_FILE]:
                localctx = SpeakQlParser.MasterLogUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4181
                self.match(SpeakQlParser.MASTER_LOG_FILE)
                self.state = 4182
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4183
                self.match(SpeakQlParser.STRING_LITERAL)
                self.state = 4184
                self.match(SpeakQlParser.COMMA)
                self.state = 4185
                self.match(SpeakQlParser.MASTER_LOG_POS)
                self.state = 4186
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4187
                self.decimalLiteral()
                pass
            elif token in [SpeakQlParser.RELAY_LOG_FILE]:
                localctx = SpeakQlParser.RelayLogUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4188
                self.match(SpeakQlParser.RELAY_LOG_FILE)
                self.state = 4189
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4190
                self.match(SpeakQlParser.STRING_LITERAL)
                self.state = 4191
                self.match(SpeakQlParser.COMMA)
                self.state = 4192
                self.match(SpeakQlParser.RELAY_LOG_POS)
                self.state = 4193
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4194
                self.decimalLiteral()
                pass
            elif token in [SpeakQlParser.SQL_AFTER_MTS_GAPS]:
                localctx = SpeakQlParser.SqlGapsUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4195
                self.match(SpeakQlParser.SQL_AFTER_MTS_GAPS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_connectionOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PluginDirConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptPluginDir = None # Token
            self.copyFrom(ctx)

        def PLUGIN_DIR(self):
            return self.getToken(SpeakQlParser.PLUGIN_DIR, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPluginDirConnectionOption" ):
                listener.enterPluginDirConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPluginDirConnectionOption" ):
                listener.exitPluginDirConnectionOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPluginDirConnectionOption" ):
                return visitor.visitPluginDirConnectionOption(self)
            else:
                return visitor.visitChildren(self)


    class UserConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptUser = None # Token
            self.copyFrom(ctx)

        def USER(self):
            return self.getToken(SpeakQlParser.USER, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserConnectionOption" ):
                listener.enterUserConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserConnectionOption" ):
                listener.exitUserConnectionOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserConnectionOption" ):
                return visitor.visitUserConnectionOption(self)
            else:
                return visitor.visitChildren(self)


    class DefaultAuthConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptDefAuth = None # Token
            self.copyFrom(ctx)

        def DEFAULT_AUTH(self):
            return self.getToken(SpeakQlParser.DEFAULT_AUTH, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultAuthConnectionOption" ):
                listener.enterDefaultAuthConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultAuthConnectionOption" ):
                listener.exitDefaultAuthConnectionOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultAuthConnectionOption" ):
                return visitor.visitDefaultAuthConnectionOption(self)
            else:
                return visitor.visitChildren(self)


    class PasswordConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptPassword = None # Token
            self.copyFrom(ctx)

        def PASSWORD(self):
            return self.getToken(SpeakQlParser.PASSWORD, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordConnectionOption" ):
                listener.enterPasswordConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordConnectionOption" ):
                listener.exitPasswordConnectionOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPasswordConnectionOption" ):
                return visitor.visitPasswordConnectionOption(self)
            else:
                return visitor.visitChildren(self)



    def connectionOption(self):

        localctx = SpeakQlParser.ConnectionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_connectionOption)
        try:
            self.state = 4210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.USER]:
                localctx = SpeakQlParser.UserConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4198
                self.match(SpeakQlParser.USER)
                self.state = 4199
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4200
                localctx.conOptUser = self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.PASSWORD]:
                localctx = SpeakQlParser.PasswordConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4201
                self.match(SpeakQlParser.PASSWORD)
                self.state = 4202
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4203
                localctx.conOptPassword = self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.DEFAULT_AUTH]:
                localctx = SpeakQlParser.DefaultAuthConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4204
                self.match(SpeakQlParser.DEFAULT_AUTH)
                self.state = 4205
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4206
                localctx.conOptDefAuth = self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.PLUGIN_DIR]:
                localctx = SpeakQlParser.PluginDirConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4207
                self.match(SpeakQlParser.PLUGIN_DIR)
                self.state = 4208
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 4209
                localctx.conOptPluginDir = self.match(SpeakQlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GtuidSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uuidSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UuidSetContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UuidSetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_gtuidSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGtuidSet" ):
                listener.enterGtuidSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGtuidSet" ):
                listener.exitGtuidSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGtuidSet" ):
                return visitor.visitGtuidSet(self)
            else:
                return visitor.visitChildren(self)




    def gtuidSet(self):

        localctx = SpeakQlParser.GtuidSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_gtuidSet)
        self._la = 0 # Token type
        try:
            self.state = 4221
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.ZERO_DECIMAL, SpeakQlParser.ONE_DECIMAL, SpeakQlParser.TWO_DECIMAL, SpeakQlParser.DECIMAL_LITERAL, SpeakQlParser.REAL_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4212
                self.uuidSet()
                self.state = 4217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 4213
                    self.match(SpeakQlParser.COMMA)
                    self.state = 4214
                    self.uuidSet()
                    self.state = 4219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SpeakQlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4220
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaStartTransactionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xaStart = None # Token
            self.xaAction = None # Token

        def XA(self):
            return self.getToken(SpeakQlParser.XA, 0)

        def xid(self):
            return self.getTypedRuleContext(SpeakQlParser.XidContext,0)


        def START(self):
            return self.getToken(SpeakQlParser.START, 0)

        def BEGIN(self):
            return self.getToken(SpeakQlParser.BEGIN, 0)

        def JOIN(self):
            return self.getToken(SpeakQlParser.JOIN, 0)

        def RESUME(self):
            return self.getToken(SpeakQlParser.RESUME, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_xaStartTransaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaStartTransaction" ):
                listener.enterXaStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaStartTransaction" ):
                listener.exitXaStartTransaction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXaStartTransaction" ):
                return visitor.visitXaStartTransaction(self)
            else:
                return visitor.visitChildren(self)




    def xaStartTransaction(self):

        localctx = SpeakQlParser.XaStartTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_xaStartTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4223
            self.match(SpeakQlParser.XA)
            self.state = 4224
            localctx.xaStart = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.BEGIN or _la==SpeakQlParser.START):
                localctx.xaStart = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4225
            self.xid()
            self.state = 4227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.JOIN or _la==SpeakQlParser.RESUME:
                self.state = 4226
                localctx.xaAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.JOIN or _la==SpeakQlParser.RESUME):
                    localctx.xaAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaEndTransactionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(SpeakQlParser.XA, 0)

        def END(self):
            return self.getToken(SpeakQlParser.END, 0)

        def xid(self):
            return self.getTypedRuleContext(SpeakQlParser.XidContext,0)


        def SUSPEND(self):
            return self.getToken(SpeakQlParser.SUSPEND, 0)

        def FOR(self):
            return self.getToken(SpeakQlParser.FOR, 0)

        def MIGRATE(self):
            return self.getToken(SpeakQlParser.MIGRATE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_xaEndTransaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaEndTransaction" ):
                listener.enterXaEndTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaEndTransaction" ):
                listener.exitXaEndTransaction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXaEndTransaction" ):
                return visitor.visitXaEndTransaction(self)
            else:
                return visitor.visitChildren(self)




    def xaEndTransaction(self):

        localctx = SpeakQlParser.XaEndTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_xaEndTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4229
            self.match(SpeakQlParser.XA)
            self.state = 4230
            self.match(SpeakQlParser.END)
            self.state = 4231
            self.xid()
            self.state = 4237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.SUSPEND:
                self.state = 4232
                self.match(SpeakQlParser.SUSPEND)
                self.state = 4235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.FOR:
                    self.state = 4233
                    self.match(SpeakQlParser.FOR)
                    self.state = 4234
                    self.match(SpeakQlParser.MIGRATE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaPrepareStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(SpeakQlParser.XA, 0)

        def PREPARE(self):
            return self.getToken(SpeakQlParser.PREPARE, 0)

        def xid(self):
            return self.getTypedRuleContext(SpeakQlParser.XidContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_xaPrepareStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaPrepareStatement" ):
                listener.enterXaPrepareStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaPrepareStatement" ):
                listener.exitXaPrepareStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXaPrepareStatement" ):
                return visitor.visitXaPrepareStatement(self)
            else:
                return visitor.visitChildren(self)




    def xaPrepareStatement(self):

        localctx = SpeakQlParser.XaPrepareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_xaPrepareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4239
            self.match(SpeakQlParser.XA)
            self.state = 4240
            self.match(SpeakQlParser.PREPARE)
            self.state = 4241
            self.xid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaCommitWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(SpeakQlParser.XA, 0)

        def COMMIT(self):
            return self.getToken(SpeakQlParser.COMMIT, 0)

        def xid(self):
            return self.getTypedRuleContext(SpeakQlParser.XidContext,0)


        def ONE(self):
            return self.getToken(SpeakQlParser.ONE, 0)

        def PHASE(self):
            return self.getToken(SpeakQlParser.PHASE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_xaCommitWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaCommitWork" ):
                listener.enterXaCommitWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaCommitWork" ):
                listener.exitXaCommitWork(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXaCommitWork" ):
                return visitor.visitXaCommitWork(self)
            else:
                return visitor.visitChildren(self)




    def xaCommitWork(self):

        localctx = SpeakQlParser.XaCommitWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_xaCommitWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4243
            self.match(SpeakQlParser.XA)
            self.state = 4244
            self.match(SpeakQlParser.COMMIT)
            self.state = 4245
            self.xid()
            self.state = 4248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.ONE:
                self.state = 4246
                self.match(SpeakQlParser.ONE)
                self.state = 4247
                self.match(SpeakQlParser.PHASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaRollbackWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(SpeakQlParser.XA, 0)

        def ROLLBACK(self):
            return self.getToken(SpeakQlParser.ROLLBACK, 0)

        def xid(self):
            return self.getTypedRuleContext(SpeakQlParser.XidContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_xaRollbackWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaRollbackWork" ):
                listener.enterXaRollbackWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaRollbackWork" ):
                listener.exitXaRollbackWork(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXaRollbackWork" ):
                return visitor.visitXaRollbackWork(self)
            else:
                return visitor.visitChildren(self)




    def xaRollbackWork(self):

        localctx = SpeakQlParser.XaRollbackWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_xaRollbackWork)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4250
            self.match(SpeakQlParser.XA)
            self.state = 4251
            self.match(SpeakQlParser.ROLLBACK)
            self.state = 4252
            self.xid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaRecoverWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(SpeakQlParser.XA, 0)

        def RECOVER(self):
            return self.getToken(SpeakQlParser.RECOVER, 0)

        def CONVERT(self):
            return self.getToken(SpeakQlParser.CONVERT, 0)

        def xid(self):
            return self.getTypedRuleContext(SpeakQlParser.XidContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_xaRecoverWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaRecoverWork" ):
                listener.enterXaRecoverWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaRecoverWork" ):
                listener.exitXaRecoverWork(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXaRecoverWork" ):
                return visitor.visitXaRecoverWork(self)
            else:
                return visitor.visitChildren(self)




    def xaRecoverWork(self):

        localctx = SpeakQlParser.XaRecoverWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_xaRecoverWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4254
            self.match(SpeakQlParser.XA)
            self.state = 4255
            self.match(SpeakQlParser.RECOVER)
            self.state = 4258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.CONVERT:
                self.state = 4256
                self.match(SpeakQlParser.CONVERT)
                self.state = 4257
                self.xid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrepareStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query = None # Token
            self.variable = None # Token

        def PREPARE(self):
            return self.getToken(SpeakQlParser.PREPARE, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def FROM(self):
            return self.getToken(SpeakQlParser.FROM, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def LOCAL_ID(self):
            return self.getToken(SpeakQlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_prepareStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepareStatement" ):
                listener.enterPrepareStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepareStatement" ):
                listener.exitPrepareStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrepareStatement" ):
                return visitor.visitPrepareStatement(self)
            else:
                return visitor.visitChildren(self)




    def prepareStatement(self):

        localctx = SpeakQlParser.PrepareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_prepareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4260
            self.match(SpeakQlParser.PREPARE)
            self.state = 4261
            self.uid()
            self.state = 4262
            self.match(SpeakQlParser.FROM)
            self.state = 4265
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.STRING_LITERAL]:
                self.state = 4263
                localctx.query = self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.LOCAL_ID]:
                self.state = 4264
                localctx.variable = self.match(SpeakQlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(SpeakQlParser.EXECUTE, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def USING(self):
            return self.getToken(SpeakQlParser.USING, 0)

        def userVariables(self):
            return self.getTypedRuleContext(SpeakQlParser.UserVariablesContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_executeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteStatement" ):
                listener.enterExecuteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteStatement" ):
                listener.exitExecuteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecuteStatement" ):
                return visitor.visitExecuteStatement(self)
            else:
                return visitor.visitChildren(self)




    def executeStatement(self):

        localctx = SpeakQlParser.ExecuteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_executeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4267
            self.match(SpeakQlParser.EXECUTE)
            self.state = 4268
            self.uid()
            self.state = 4271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.USING:
                self.state = 4269
                self.match(SpeakQlParser.USING)
                self.state = 4270
                self.userVariables()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeallocatePrepareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropFormat = None # Token

        def PREPARE(self):
            return self.getToken(SpeakQlParser.PREPARE, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def DEALLOCATE(self):
            return self.getToken(SpeakQlParser.DEALLOCATE, 0)

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_deallocatePrepare

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocatePrepare" ):
                listener.enterDeallocatePrepare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocatePrepare" ):
                listener.exitDeallocatePrepare(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeallocatePrepare" ):
                return visitor.visitDeallocatePrepare(self)
            else:
                return visitor.visitChildren(self)




    def deallocatePrepare(self):

        localctx = SpeakQlParser.DeallocatePrepareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_deallocatePrepare)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4273
            localctx.dropFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.DROP or _la==SpeakQlParser.DEALLOCATE):
                localctx.dropFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4274
            self.match(SpeakQlParser.PREPARE)
            self.state = 4275
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.BlockStatementContext,0)


        def sqlStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SqlStatementContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_routineBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineBody" ):
                listener.enterRoutineBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineBody" ):
                listener.exitRoutineBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineBody" ):
                return visitor.visitRoutineBody(self)
            else:
                return visitor.visitChildren(self)




    def routineBody(self):

        localctx = SpeakQlParser.RoutineBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_routineBody)
        try:
            self.state = 4279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,601,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4277
                self.blockStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4278
                self.sqlStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(SpeakQlParser.BEGIN, 0)

        def END(self):
            return self.getToken(SpeakQlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(SpeakQlParser.COLON_SYMB, 0)

        def declareVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.DeclareVariableContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.DeclareVariableContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.SEMI)
            else:
                return self.getToken(SpeakQlParser.SEMI, i)

        def declareCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.DeclareConditionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.DeclareConditionContext,i)


        def declareCursor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.DeclareCursorContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.DeclareCursorContext,i)


        def declareHandler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.DeclareHandlerContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.DeclareHandlerContext,i)


        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = SpeakQlParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_blockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,602,self._ctx)
            if la_ == 1:
                self.state = 4281
                self.uid()
                self.state = 4282
                self.match(SpeakQlParser.COLON_SYMB)


            self.state = 4286
            self.match(SpeakQlParser.BEGIN)
            self.state = 4325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,608,self._ctx)
            if la_ == 1:
                self.state = 4292
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,603,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4287
                        self.declareVariable()
                        self.state = 4288
                        self.match(SpeakQlParser.SEMI) 
                    self.state = 4294
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,603,self._ctx)

                self.state = 4300
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,604,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4295
                        self.declareCondition()
                        self.state = 4296
                        self.match(SpeakQlParser.SEMI) 
                    self.state = 4302
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,604,self._ctx)

                self.state = 4308
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,605,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4303
                        self.declareCursor()
                        self.state = 4304
                        self.match(SpeakQlParser.SEMI) 
                    self.state = 4310
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,605,self._ctx)

                self.state = 4316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.DECLARE:
                    self.state = 4311
                    self.declareHandler()
                    self.state = 4312
                    self.match(SpeakQlParser.SEMI)
                    self.state = 4318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4322
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,607,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4319
                        self.procedureSqlStatement() 
                    self.state = 4324
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,607,self._ctx)



            self.state = 4327
            self.match(SpeakQlParser.END)
            self.state = 4329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,609,self._ctx)
            if la_ == 1:
                self.state = 4328
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.CASE)
            else:
                return self.getToken(SpeakQlParser.CASE, i)

        def END(self):
            return self.getToken(SpeakQlParser.END, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def caseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.CaseAlternativeContext,i)


        def ELSE(self):
            return self.getToken(SpeakQlParser.ELSE, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_caseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStatement" ):
                listener.enterCaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStatement" ):
                listener.exitCaseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseStatement" ):
                return visitor.visitCaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def caseStatement(self):

        localctx = SpeakQlParser.CaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_caseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4331
            self.match(SpeakQlParser.CASE)
            self.state = 4334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,610,self._ctx)
            if la_ == 1:
                self.state = 4332
                self.uid()

            elif la_ == 2:
                self.state = 4333
                self.expression(0)


            self.state = 4337 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4336
                self.caseAlternative()
                self.state = 4339 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SpeakQlParser.WHEN):
                    break

            self.state = 4347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.ELSE:
                self.state = 4341
                self.match(SpeakQlParser.ELSE)
                self.state = 4343 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4342
                        self.procedureSqlStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 4345 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,612,self._ctx)



            self.state = 4349
            self.match(SpeakQlParser.END)
            self.state = 4350
            self.match(SpeakQlParser.CASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._procedureSqlStatement = None # ProcedureSqlStatementContext
            self.thenStatements = list() # of ProcedureSqlStatementContexts
            self.elseStatements = list() # of ProcedureSqlStatementContexts

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.IF)
            else:
                return self.getToken(SpeakQlParser.IF, i)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(SpeakQlParser.THEN, 0)

        def END(self):
            return self.getToken(SpeakQlParser.END, 0)

        def elifAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ElifAlternativeContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ElifAlternativeContext,i)


        def ELSE(self):
            return self.getToken(SpeakQlParser.ELSE, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = SpeakQlParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4352
            self.match(SpeakQlParser.IF)
            self.state = 4353
            self.expression(0)
            self.state = 4354
            self.match(SpeakQlParser.THEN)
            self.state = 4356 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4355
                    localctx._procedureSqlStatement = self.procedureSqlStatement()
                    localctx.thenStatements.append(localctx._procedureSqlStatement)

                else:
                    raise NoViableAltException(self)
                self.state = 4358 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,614,self._ctx)

            self.state = 4363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.ELSEIF:
                self.state = 4360
                self.elifAlternative()
                self.state = 4365
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.ELSE:
                self.state = 4366
                self.match(SpeakQlParser.ELSE)
                self.state = 4368 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4367
                        localctx._procedureSqlStatement = self.procedureSqlStatement()
                        localctx.elseStatements.append(localctx._procedureSqlStatement)

                    else:
                        raise NoViableAltException(self)
                    self.state = 4370 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,616,self._ctx)



            self.state = 4374
            self.match(SpeakQlParser.END)
            self.state = 4375
            self.match(SpeakQlParser.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITERATE(self):
            return self.getToken(SpeakQlParser.ITERATE, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_iterateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterateStatement" ):
                listener.enterIterateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterateStatement" ):
                listener.exitIterateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterateStatement" ):
                return visitor.visitIterateStatement(self)
            else:
                return visitor.visitChildren(self)




    def iterateStatement(self):

        localctx = SpeakQlParser.IterateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_iterateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4377
            self.match(SpeakQlParser.ITERATE)
            self.state = 4378
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeaveStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEAVE(self):
            return self.getToken(SpeakQlParser.LEAVE, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_leaveStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeaveStatement" ):
                listener.enterLeaveStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeaveStatement" ):
                listener.exitLeaveStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLeaveStatement" ):
                return visitor.visitLeaveStatement(self)
            else:
                return visitor.visitChildren(self)




    def leaveStatement(self):

        localctx = SpeakQlParser.LeaveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_leaveStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4380
            self.match(SpeakQlParser.LEAVE)
            self.state = 4381
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.LOOP)
            else:
                return self.getToken(SpeakQlParser.LOOP, i)

        def END(self):
            return self.getToken(SpeakQlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(SpeakQlParser.COLON_SYMB, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_loopStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStatement" ):
                listener.enterLoopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStatement" ):
                listener.exitLoopStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStatement" ):
                return visitor.visitLoopStatement(self)
            else:
                return visitor.visitChildren(self)




    def loopStatement(self):

        localctx = SpeakQlParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_loopStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                self.state = 4383
                self.uid()
                self.state = 4384
                self.match(SpeakQlParser.COLON_SYMB)


            self.state = 4388
            self.match(SpeakQlParser.LOOP)
            self.state = 4390 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4389
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4392 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,619,self._ctx)

            self.state = 4394
            self.match(SpeakQlParser.END)
            self.state = 4395
            self.match(SpeakQlParser.LOOP)
            self.state = 4397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                self.state = 4396
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepeatStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEAT(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.REPEAT)
            else:
                return self.getToken(SpeakQlParser.REPEAT, i)

        def UNTIL(self):
            return self.getToken(SpeakQlParser.UNTIL, 0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def END(self):
            return self.getToken(SpeakQlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(SpeakQlParser.COLON_SYMB, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_repeatStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatStatement" ):
                listener.enterRepeatStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatStatement" ):
                listener.exitRepeatStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepeatStatement" ):
                return visitor.visitRepeatStatement(self)
            else:
                return visitor.visitChildren(self)




    def repeatStatement(self):

        localctx = SpeakQlParser.RepeatStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_repeatStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                self.state = 4399
                self.uid()
                self.state = 4400
                self.match(SpeakQlParser.COLON_SYMB)


            self.state = 4404
            self.match(SpeakQlParser.REPEAT)
            self.state = 4406 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4405
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4408 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,622,self._ctx)

            self.state = 4410
            self.match(SpeakQlParser.UNTIL)
            self.state = 4411
            self.expression(0)
            self.state = 4412
            self.match(SpeakQlParser.END)
            self.state = 4413
            self.match(SpeakQlParser.REPEAT)
            self.state = 4415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                self.state = 4414
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(SpeakQlParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = SpeakQlParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4417
            self.match(SpeakQlParser.RETURN)
            self.state = 4418
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.WHILE)
            else:
                return self.getToken(SpeakQlParser.WHILE, i)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def DO(self):
            return self.getToken(SpeakQlParser.DO, 0)

        def END(self):
            return self.getToken(SpeakQlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(SpeakQlParser.COLON_SYMB, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = SpeakQlParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_whileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                self.state = 4420
                self.uid()
                self.state = 4421
                self.match(SpeakQlParser.COLON_SYMB)


            self.state = 4425
            self.match(SpeakQlParser.WHILE)
            self.state = 4426
            self.expression(0)
            self.state = 4427
            self.match(SpeakQlParser.DO)
            self.state = 4429 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4428
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4431 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,625,self._ctx)

            self.state = 4433
            self.match(SpeakQlParser.END)
            self.state = 4434
            self.match(SpeakQlParser.WHILE)
            self.state = 4436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DATABASE - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)) | (1 << (SpeakQlParser.LEFT - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.RIGHT - 124)) | (1 << (SpeakQlParser.SCHEMA - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.BINARY - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)) | (1 << (SpeakQlParser.SERIAL - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.AVG - 284)) | (1 << (SpeakQlParser.BIT_AND - 284)) | (1 << (SpeakQlParser.BIT_OR - 284)) | (1 << (SpeakQlParser.BIT_XOR - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.GROUP_CONCAT - 284)) | (1 << (SpeakQlParser.MAX - 284)) | (1 << (SpeakQlParser.MIN - 284)) | (1 << (SpeakQlParser.STD - 284)) | (1 << (SpeakQlParser.STDDEV - 284)) | (1 << (SpeakQlParser.STDDEV_POP - 284)) | (1 << (SpeakQlParser.STDDEV_SAMP - 284)) | (1 << (SpeakQlParser.SUM - 284)) | (1 << (SpeakQlParser.VAR_POP - 284)) | (1 << (SpeakQlParser.VAR_SAMP - 284)) | (1 << (SpeakQlParser.VARIANCE - 284)) | (1 << (SpeakQlParser.POSITION - 284)) | (1 << (SpeakQlParser.ACCOUNT - 284)) | (1 << (SpeakQlParser.ACTION - 284)) | (1 << (SpeakQlParser.AFTER - 284)) | (1 << (SpeakQlParser.AGGREGATE - 284)) | (1 << (SpeakQlParser.ALGORITHM - 284)) | (1 << (SpeakQlParser.ANY - 284)) | (1 << (SpeakQlParser.AT - 284)) | (1 << (SpeakQlParser.AUTHORS - 284)) | (1 << (SpeakQlParser.AUTOCOMMIT - 284)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 284)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 284)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 284)) | (1 << (SpeakQlParser.BEGIN - 284)) | (1 << (SpeakQlParser.BINLOG - 284)) | (1 << (SpeakQlParser.BIT - 284)) | (1 << (SpeakQlParser.BLOCK - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (SpeakQlParser.BOOL - 348)) | (1 << (SpeakQlParser.BOOLEAN - 348)) | (1 << (SpeakQlParser.BTREE - 348)) | (1 << (SpeakQlParser.CACHE - 348)) | (1 << (SpeakQlParser.CASCADED - 348)) | (1 << (SpeakQlParser.CHAIN - 348)) | (1 << (SpeakQlParser.CHANGED - 348)) | (1 << (SpeakQlParser.CHANNEL - 348)) | (1 << (SpeakQlParser.CHECKSUM - 348)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 348)) | (1 << (SpeakQlParser.CIPHER - 348)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 348)) | (1 << (SpeakQlParser.CLIENT - 348)) | (1 << (SpeakQlParser.CLOSE - 348)) | (1 << (SpeakQlParser.COALESCE - 348)) | (1 << (SpeakQlParser.CODE - 348)) | (1 << (SpeakQlParser.COLUMNS - 348)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 348)) | (1 << (SpeakQlParser.COLUMN_NAME - 348)) | (1 << (SpeakQlParser.COMMENT - 348)) | (1 << (SpeakQlParser.COMMIT - 348)) | (1 << (SpeakQlParser.COMPACT - 348)) | (1 << (SpeakQlParser.COMPLETION - 348)) | (1 << (SpeakQlParser.COMPRESSED - 348)) | (1 << (SpeakQlParser.COMPRESSION - 348)) | (1 << (SpeakQlParser.CONCURRENT - 348)) | (1 << (SpeakQlParser.CONNECT - 348)) | (1 << (SpeakQlParser.CONNECTION - 348)) | (1 << (SpeakQlParser.CONSISTENT - 348)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 348)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 348)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 348)) | (1 << (SpeakQlParser.CONTAINS - 348)) | (1 << (SpeakQlParser.CONTEXT - 348)) | (1 << (SpeakQlParser.CONTRIBUTORS - 348)) | (1 << (SpeakQlParser.COPY - 348)) | (1 << (SpeakQlParser.CPU - 348)) | (1 << (SpeakQlParser.CURSOR_NAME - 348)) | (1 << (SpeakQlParser.DATA - 348)) | (1 << (SpeakQlParser.DATAFILE - 348)) | (1 << (SpeakQlParser.DEALLOCATE - 348)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 348)) | (1 << (SpeakQlParser.DEFINER - 348)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 348)) | (1 << (SpeakQlParser.DES_KEY_FILE - 348)) | (1 << (SpeakQlParser.DIRECTORY - 348)) | (1 << (SpeakQlParser.DISABLE - 348)) | (1 << (SpeakQlParser.DISCARD - 348)) | (1 << (SpeakQlParser.DISK - 348)) | (1 << (SpeakQlParser.DO - 348)) | (1 << (SpeakQlParser.DUMPFILE - 348)) | (1 << (SpeakQlParser.DUPLICATE - 348)) | (1 << (SpeakQlParser.DYNAMIC - 348)) | (1 << (SpeakQlParser.ENABLE - 348)) | (1 << (SpeakQlParser.ENCRYPTION - 348)) | (1 << (SpeakQlParser.END - 348)) | (1 << (SpeakQlParser.ENDS - 348)) | (1 << (SpeakQlParser.ENGINE - 348)) | (1 << (SpeakQlParser.ENGINES - 348)) | (1 << (SpeakQlParser.ERROR - 348)) | (1 << (SpeakQlParser.ERRORS - 348)) | (1 << (SpeakQlParser.ESCAPE - 348)) | (1 << (SpeakQlParser.EVEN - 348)) | (1 << (SpeakQlParser.EVENT - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (SpeakQlParser.EVENTS - 412)) | (1 << (SpeakQlParser.EVERY - 412)) | (1 << (SpeakQlParser.EXCHANGE - 412)) | (1 << (SpeakQlParser.EXCLUSIVE - 412)) | (1 << (SpeakQlParser.EXPIRE - 412)) | (1 << (SpeakQlParser.EXPORT - 412)) | (1 << (SpeakQlParser.EXTENDED - 412)) | (1 << (SpeakQlParser.EXTENT_SIZE - 412)) | (1 << (SpeakQlParser.FAST - 412)) | (1 << (SpeakQlParser.FAULTS - 412)) | (1 << (SpeakQlParser.FIELDS - 412)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.FILTER - 412)) | (1 << (SpeakQlParser.FIRST - 412)) | (1 << (SpeakQlParser.FIXED - 412)) | (1 << (SpeakQlParser.FLUSH - 412)) | (1 << (SpeakQlParser.FOLLOWS - 412)) | (1 << (SpeakQlParser.FOUND - 412)) | (1 << (SpeakQlParser.FULL - 412)) | (1 << (SpeakQlParser.FUNCTION - 412)) | (1 << (SpeakQlParser.GENERAL - 412)) | (1 << (SpeakQlParser.GLOBAL - 412)) | (1 << (SpeakQlParser.GRANTS - 412)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 412)) | (1 << (SpeakQlParser.HANDLER - 412)) | (1 << (SpeakQlParser.HASH - 412)) | (1 << (SpeakQlParser.HELP - 412)) | (1 << (SpeakQlParser.HOST - 412)) | (1 << (SpeakQlParser.HOSTS - 412)) | (1 << (SpeakQlParser.IDENTIFIED - 412)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 412)) | (1 << (SpeakQlParser.IMPORT - 412)) | (1 << (SpeakQlParser.INDEXES - 412)) | (1 << (SpeakQlParser.INITIAL_SIZE - 412)) | (1 << (SpeakQlParser.INPLACE - 412)) | (1 << (SpeakQlParser.INSERT_METHOD - 412)) | (1 << (SpeakQlParser.INSTALL - 412)) | (1 << (SpeakQlParser.INSTANCE - 412)) | (1 << (SpeakQlParser.INVISIBLE - 412)) | (1 << (SpeakQlParser.INVOKER - 412)) | (1 << (SpeakQlParser.IO - 412)) | (1 << (SpeakQlParser.IO_THREAD - 412)) | (1 << (SpeakQlParser.IPC - 412)) | (1 << (SpeakQlParser.ISOLATION - 412)) | (1 << (SpeakQlParser.ISSUER - 412)) | (1 << (SpeakQlParser.JSON - 412)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 412)) | (1 << (SpeakQlParser.LANGUAGE - 412)) | (1 << (SpeakQlParser.LAST - 412)) | (1 << (SpeakQlParser.LEAVES - 412)) | (1 << (SpeakQlParser.LESS - 412)) | (1 << (SpeakQlParser.LEVEL - 412)) | (1 << (SpeakQlParser.LIST - 412)) | (1 << (SpeakQlParser.LOCAL - 412)) | (1 << (SpeakQlParser.LOGFILE - 412)) | (1 << (SpeakQlParser.LOGS - 412)) | (1 << (SpeakQlParser.MASTER - 412)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 412)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 412)) | (1 << (SpeakQlParser.MASTER_DELAY - 412)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 412)) | (1 << (SpeakQlParser.MASTER_HOST - 412)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 412)))) != 0) or ((((_la - 476)) & ~0x3f) == 0 and ((1 << (_la - 476)) & ((1 << (SpeakQlParser.MASTER_LOG_POS - 476)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 476)) | (1 << (SpeakQlParser.MASTER_PORT - 476)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 476)) | (1 << (SpeakQlParser.MASTER_SSL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 476)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 476)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 476)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 476)) | (1 << (SpeakQlParser.MASTER_USER - 476)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_ROWS - 476)) | (1 << (SpeakQlParser.MAX_SIZE - 476)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 476)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 476)) | (1 << (SpeakQlParser.MEDIUM - 476)) | (1 << (SpeakQlParser.MEMBER - 476)) | (1 << (SpeakQlParser.MERGE - 476)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 476)) | (1 << (SpeakQlParser.MID - 476)) | (1 << (SpeakQlParser.MIGRATE - 476)) | (1 << (SpeakQlParser.MIN_ROWS - 476)) | (1 << (SpeakQlParser.MODE - 476)) | (1 << (SpeakQlParser.MODIFY - 476)) | (1 << (SpeakQlParser.MUTEX - 476)) | (1 << (SpeakQlParser.MYSQL - 476)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 476)) | (1 << (SpeakQlParser.NAME - 476)) | (1 << (SpeakQlParser.NAMES - 476)) | (1 << (SpeakQlParser.NCHAR - 476)) | (1 << (SpeakQlParser.NEVER - 476)) | (1 << (SpeakQlParser.NEXT - 476)) | (1 << (SpeakQlParser.NO - 476)) | (1 << (SpeakQlParser.NODEGROUP - 476)) | (1 << (SpeakQlParser.NONE - 476)) | (1 << (SpeakQlParser.ODBC - 476)) | (1 << (SpeakQlParser.OFFLINE - 476)) | (1 << (SpeakQlParser.OFFSET - 476)) | (1 << (SpeakQlParser.OF - 476)) | (1 << (SpeakQlParser.OJ - 476)) | (1 << (SpeakQlParser.OLD_PASSWORD - 476)) | (1 << (SpeakQlParser.ONE - 476)) | (1 << (SpeakQlParser.ONLINE - 476)) | (1 << (SpeakQlParser.ONLY - 476)) | (1 << (SpeakQlParser.OPEN - 476)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 476)) | (1 << (SpeakQlParser.OPTIONS - 476)) | (1 << (SpeakQlParser.OWNER - 476)) | (1 << (SpeakQlParser.PACK_KEYS - 476)) | (1 << (SpeakQlParser.PAGE - 476)) | (1 << (SpeakQlParser.PARSER - 476)) | (1 << (SpeakQlParser.PARTIAL - 476)) | (1 << (SpeakQlParser.PARTITIONING - 476)) | (1 << (SpeakQlParser.PARTITIONS - 476)) | (1 << (SpeakQlParser.PASSWORD - 476)) | (1 << (SpeakQlParser.PHASE - 476)) | (1 << (SpeakQlParser.PLUGIN - 476)) | (1 << (SpeakQlParser.PLUGIN_DIR - 476)) | (1 << (SpeakQlParser.PLUGINS - 476)))) != 0) or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & ((1 << (SpeakQlParser.PORT - 540)) | (1 << (SpeakQlParser.PRECEDES - 540)) | (1 << (SpeakQlParser.PREPARE - 540)) | (1 << (SpeakQlParser.PRESERVE - 540)) | (1 << (SpeakQlParser.PREV - 540)) | (1 << (SpeakQlParser.PROCESSLIST - 540)) | (1 << (SpeakQlParser.PROFILE - 540)) | (1 << (SpeakQlParser.PROFILES - 540)) | (1 << (SpeakQlParser.PROXY - 540)) | (1 << (SpeakQlParser.QUERY - 540)) | (1 << (SpeakQlParser.QUICK - 540)) | (1 << (SpeakQlParser.REBUILD - 540)) | (1 << (SpeakQlParser.RECOVER - 540)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 540)) | (1 << (SpeakQlParser.REDUNDANT - 540)) | (1 << (SpeakQlParser.RELAY - 540)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 540)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 540)) | (1 << (SpeakQlParser.RELAYLOG - 540)) | (1 << (SpeakQlParser.REMOVE - 540)) | (1 << (SpeakQlParser.REORGANIZE - 540)) | (1 << (SpeakQlParser.REPAIR - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 540)) | (1 << (SpeakQlParser.REPLICATION - 540)) | (1 << (SpeakQlParser.RESET - 540)) | (1 << (SpeakQlParser.RESUME - 540)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 540)) | (1 << (SpeakQlParser.RETURNS - 540)) | (1 << (SpeakQlParser.ROLE - 540)) | (1 << (SpeakQlParser.ROLLBACK - 540)) | (1 << (SpeakQlParser.ROLLUP - 540)) | (1 << (SpeakQlParser.ROTATE - 540)) | (1 << (SpeakQlParser.ROW - 540)) | (1 << (SpeakQlParser.ROWS - 540)) | (1 << (SpeakQlParser.ROW_FORMAT - 540)) | (1 << (SpeakQlParser.SAVEPOINT - 540)) | (1 << (SpeakQlParser.SCHEDULE - 540)) | (1 << (SpeakQlParser.SECURITY - 540)) | (1 << (SpeakQlParser.SERVER - 540)) | (1 << (SpeakQlParser.SESSION - 540)) | (1 << (SpeakQlParser.SHARE - 540)) | (1 << (SpeakQlParser.SHARED - 540)) | (1 << (SpeakQlParser.SIGNED - 540)) | (1 << (SpeakQlParser.SIMPLE - 540)) | (1 << (SpeakQlParser.SLAVE - 540)) | (1 << (SpeakQlParser.SLOW - 540)) | (1 << (SpeakQlParser.SNAPSHOT - 540)) | (1 << (SpeakQlParser.SOCKET - 540)) | (1 << (SpeakQlParser.SOME - 540)) | (1 << (SpeakQlParser.SONAME - 540)) | (1 << (SpeakQlParser.SOUNDS - 540)) | (1 << (SpeakQlParser.SOURCE - 540)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 540)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 540)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 540)))) != 0) or ((((_la - 604)) & ~0x3f) == 0 and ((1 << (_la - 604)) & ((1 << (SpeakQlParser.SQL_CACHE - 604)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 604)) | (1 << (SpeakQlParser.SQL_THREAD - 604)) | (1 << (SpeakQlParser.START - 604)) | (1 << (SpeakQlParser.STARTS - 604)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 604)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 604)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 604)) | (1 << (SpeakQlParser.STATUS - 604)) | (1 << (SpeakQlParser.STOP - 604)) | (1 << (SpeakQlParser.STORAGE - 604)) | (1 << (SpeakQlParser.STRING - 604)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 604)) | (1 << (SpeakQlParser.SUBJECT - 604)) | (1 << (SpeakQlParser.SUBPARTITION - 604)) | (1 << (SpeakQlParser.SUBPARTITIONS - 604)) | (1 << (SpeakQlParser.SUSPEND - 604)) | (1 << (SpeakQlParser.SWAPS - 604)) | (1 << (SpeakQlParser.SWITCHES - 604)) | (1 << (SpeakQlParser.TABLE_NAME - 604)) | (1 << (SpeakQlParser.TABLESPACE - 604)) | (1 << (SpeakQlParser.TEMPORARY - 604)) | (1 << (SpeakQlParser.TEMPTABLE - 604)) | (1 << (SpeakQlParser.THAN - 604)) | (1 << (SpeakQlParser.TRADITIONAL - 604)) | (1 << (SpeakQlParser.TRANSACTION - 604)) | (1 << (SpeakQlParser.TRANSACTIONAL - 604)) | (1 << (SpeakQlParser.TRIGGERS - 604)) | (1 << (SpeakQlParser.TRUNCATE - 604)) | (1 << (SpeakQlParser.UNDEFINED - 604)) | (1 << (SpeakQlParser.UNDOFILE - 604)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 604)) | (1 << (SpeakQlParser.UNINSTALL - 604)) | (1 << (SpeakQlParser.UNKNOWN - 604)) | (1 << (SpeakQlParser.UNTIL - 604)) | (1 << (SpeakQlParser.UPGRADE - 604)) | (1 << (SpeakQlParser.USER - 604)) | (1 << (SpeakQlParser.USE_FRM - 604)) | (1 << (SpeakQlParser.USER_RESOURCES - 604)) | (1 << (SpeakQlParser.VALIDATION - 604)) | (1 << (SpeakQlParser.VALUE - 604)) | (1 << (SpeakQlParser.VARIABLES - 604)) | (1 << (SpeakQlParser.VIEW - 604)) | (1 << (SpeakQlParser.VISIBLE - 604)) | (1 << (SpeakQlParser.WAIT - 604)) | (1 << (SpeakQlParser.WARNINGS - 604)) | (1 << (SpeakQlParser.WITHOUT - 604)) | (1 << (SpeakQlParser.WORK - 604)) | (1 << (SpeakQlParser.WRAPPER - 604)) | (1 << (SpeakQlParser.X509 - 604)) | (1 << (SpeakQlParser.XA - 604)) | (1 << (SpeakQlParser.XML - 604)) | (1 << (SpeakQlParser.EUR - 604)) | (1 << (SpeakQlParser.USA - 604)) | (1 << (SpeakQlParser.JIS - 604)) | (1 << (SpeakQlParser.ISO - 604)) | (1 << (SpeakQlParser.INTERNAL - 604)) | (1 << (SpeakQlParser.QUARTER - 604)) | (1 << (SpeakQlParser.MONTH - 604)))) != 0) or ((((_la - 668)) & ~0x3f) == 0 and ((1 << (_la - 668)) & ((1 << (SpeakQlParser.DAY - 668)) | (1 << (SpeakQlParser.HOUR - 668)) | (1 << (SpeakQlParser.MINUTE - 668)) | (1 << (SpeakQlParser.WEEK - 668)) | (1 << (SpeakQlParser.SECOND - 668)) | (1 << (SpeakQlParser.MICROSECOND - 668)) | (1 << (SpeakQlParser.TABLES - 668)) | (1 << (SpeakQlParser.ROUTINE - 668)) | (1 << (SpeakQlParser.EXECUTE - 668)) | (1 << (SpeakQlParser.FILE - 668)) | (1 << (SpeakQlParser.PROCESS - 668)) | (1 << (SpeakQlParser.RELOAD - 668)) | (1 << (SpeakQlParser.SHUTDOWN - 668)) | (1 << (SpeakQlParser.SUPER - 668)) | (1 << (SpeakQlParser.PRIVILEGES - 668)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 668)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 668)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.CLONE_ADMIN - 668)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 668)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_ADMIN - 668)) | (1 << (SpeakQlParser.FIREWALL_USER - 668)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 668)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 668)) | (1 << (SpeakQlParser.NDB_STORED_USER - 668)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 668)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 668)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 668)) | (1 << (SpeakQlParser.ROLE_ADMIN - 668)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.SET_USER_ID - 668)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 668)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 668)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 668)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 668)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 668)) | (1 << (SpeakQlParser.ARMSCII8 - 668)) | (1 << (SpeakQlParser.ASCII - 668)) | (1 << (SpeakQlParser.BIG5 - 668)) | (1 << (SpeakQlParser.CP1250 - 668)) | (1 << (SpeakQlParser.CP1251 - 668)) | (1 << (SpeakQlParser.CP1256 - 668)) | (1 << (SpeakQlParser.CP1257 - 668)) | (1 << (SpeakQlParser.CP850 - 668)) | (1 << (SpeakQlParser.CP852 - 668)) | (1 << (SpeakQlParser.CP866 - 668)) | (1 << (SpeakQlParser.CP932 - 668)) | (1 << (SpeakQlParser.DEC8 - 668)) | (1 << (SpeakQlParser.EUCJPMS - 668)) | (1 << (SpeakQlParser.EUCKR - 668)) | (1 << (SpeakQlParser.GB18030 - 668)) | (1 << (SpeakQlParser.GB2312 - 668)) | (1 << (SpeakQlParser.GBK - 668)))) != 0) or ((((_la - 732)) & ~0x3f) == 0 and ((1 << (_la - 732)) & ((1 << (SpeakQlParser.GEOSTD8 - 732)) | (1 << (SpeakQlParser.GREEK - 732)) | (1 << (SpeakQlParser.HEBREW - 732)) | (1 << (SpeakQlParser.HP8 - 732)) | (1 << (SpeakQlParser.KEYBCS2 - 732)) | (1 << (SpeakQlParser.KOI8R - 732)) | (1 << (SpeakQlParser.KOI8U - 732)) | (1 << (SpeakQlParser.LATIN1 - 732)) | (1 << (SpeakQlParser.LATIN2 - 732)) | (1 << (SpeakQlParser.LATIN5 - 732)) | (1 << (SpeakQlParser.LATIN7 - 732)) | (1 << (SpeakQlParser.MACCE - 732)) | (1 << (SpeakQlParser.MACROMAN - 732)) | (1 << (SpeakQlParser.SJIS - 732)) | (1 << (SpeakQlParser.SWE7 - 732)) | (1 << (SpeakQlParser.TIS620 - 732)) | (1 << (SpeakQlParser.UCS2 - 732)) | (1 << (SpeakQlParser.UJIS - 732)) | (1 << (SpeakQlParser.UTF16 - 732)) | (1 << (SpeakQlParser.UTF16LE - 732)) | (1 << (SpeakQlParser.UTF32 - 732)) | (1 << (SpeakQlParser.UTF8 - 732)) | (1 << (SpeakQlParser.UTF8MB3 - 732)) | (1 << (SpeakQlParser.UTF8MB4 - 732)) | (1 << (SpeakQlParser.ARCHIVE - 732)) | (1 << (SpeakQlParser.BLACKHOLE - 732)) | (1 << (SpeakQlParser.CSV - 732)) | (1 << (SpeakQlParser.FEDERATED - 732)) | (1 << (SpeakQlParser.INNODB - 732)) | (1 << (SpeakQlParser.MEMORY - 732)) | (1 << (SpeakQlParser.MRG_MYISAM - 732)) | (1 << (SpeakQlParser.MYISAM - 732)) | (1 << (SpeakQlParser.NDB - 732)) | (1 << (SpeakQlParser.NDBCLUSTER - 732)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 732)) | (1 << (SpeakQlParser.TOKUDB - 732)) | (1 << (SpeakQlParser.REPEATABLE - 732)) | (1 << (SpeakQlParser.COMMITTED - 732)) | (1 << (SpeakQlParser.UNCOMMITTED - 732)) | (1 << (SpeakQlParser.SERIALIZABLE - 732)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTION - 732)) | (1 << (SpeakQlParser.LINESTRING - 732)) | (1 << (SpeakQlParser.MULTILINESTRING - 732)) | (1 << (SpeakQlParser.MULTIPOINT - 732)) | (1 << (SpeakQlParser.MULTIPOLYGON - 732)) | (1 << (SpeakQlParser.POINT - 732)) | (1 << (SpeakQlParser.POLYGON - 732)) | (1 << (SpeakQlParser.ABS - 732)) | (1 << (SpeakQlParser.ACOS - 732)) | (1 << (SpeakQlParser.ADDDATE - 732)) | (1 << (SpeakQlParser.ADDTIME - 732)) | (1 << (SpeakQlParser.AES_DECRYPT - 732)) | (1 << (SpeakQlParser.AES_ENCRYPT - 732)) | (1 << (SpeakQlParser.AREA - 732)) | (1 << (SpeakQlParser.ASBINARY - 732)) | (1 << (SpeakQlParser.ASIN - 732)) | (1 << (SpeakQlParser.ASTEXT - 732)) | (1 << (SpeakQlParser.ASWKB - 732)) | (1 << (SpeakQlParser.ASWKT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 732)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 732)))) != 0) or ((((_la - 796)) & ~0x3f) == 0 and ((1 << (_la - 796)) & ((1 << (SpeakQlParser.ASYMMETRIC_SIGN - 796)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 796)) | (1 << (SpeakQlParser.ATAN - 796)) | (1 << (SpeakQlParser.ATAN2 - 796)) | (1 << (SpeakQlParser.BENCHMARK - 796)) | (1 << (SpeakQlParser.BIN - 796)) | (1 << (SpeakQlParser.BIT_COUNT - 796)) | (1 << (SpeakQlParser.BIT_LENGTH - 796)) | (1 << (SpeakQlParser.BUFFER - 796)) | (1 << (SpeakQlParser.CATALOG_NAME - 796)) | (1 << (SpeakQlParser.CEIL - 796)) | (1 << (SpeakQlParser.CEILING - 796)) | (1 << (SpeakQlParser.CENTROID - 796)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 796)) | (1 << (SpeakQlParser.CHARSET - 796)) | (1 << (SpeakQlParser.CHAR_LENGTH - 796)) | (1 << (SpeakQlParser.COERCIBILITY - 796)) | (1 << (SpeakQlParser.COLLATION - 796)) | (1 << (SpeakQlParser.COMPRESS - 796)) | (1 << (SpeakQlParser.CONCAT - 796)) | (1 << (SpeakQlParser.CONCAT_WS - 796)) | (1 << (SpeakQlParser.CONNECTION_ID - 796)) | (1 << (SpeakQlParser.CONV - 796)) | (1 << (SpeakQlParser.CONVERT_TZ - 796)) | (1 << (SpeakQlParser.COS - 796)) | (1 << (SpeakQlParser.COT - 796)) | (1 << (SpeakQlParser.CRC32 - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 796)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 796)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 796)) | (1 << (SpeakQlParser.CREATE_DIGEST - 796)) | (1 << (SpeakQlParser.CROSSES - 796)) | (1 << (SpeakQlParser.DATEDIFF - 796)) | (1 << (SpeakQlParser.DATE_FORMAT - 796)) | (1 << (SpeakQlParser.DAYNAME - 796)) | (1 << (SpeakQlParser.DAYOFMONTH - 796)) | (1 << (SpeakQlParser.DAYOFWEEK - 796)) | (1 << (SpeakQlParser.DAYOFYEAR - 796)) | (1 << (SpeakQlParser.DECODE - 796)) | (1 << (SpeakQlParser.DEGREES - 796)) | (1 << (SpeakQlParser.DES_DECRYPT - 796)) | (1 << (SpeakQlParser.DES_ENCRYPT - 796)) | (1 << (SpeakQlParser.DIMENSION - 796)) | (1 << (SpeakQlParser.DISJOINT - 796)) | (1 << (SpeakQlParser.ELT - 796)) | (1 << (SpeakQlParser.ENCODE - 796)) | (1 << (SpeakQlParser.ENCRYPT - 796)) | (1 << (SpeakQlParser.ENDPOINT - 796)) | (1 << (SpeakQlParser.ENVELOPE - 796)) | (1 << (SpeakQlParser.EQUALS - 796)) | (1 << (SpeakQlParser.EXP - 796)) | (1 << (SpeakQlParser.EXPORT_SET - 796)) | (1 << (SpeakQlParser.EXTERIORRING - 796)) | (1 << (SpeakQlParser.EXTRACTVALUE - 796)) | (1 << (SpeakQlParser.FIELD - 796)) | (1 << (SpeakQlParser.FIND_IN_SET - 796)) | (1 << (SpeakQlParser.FLOOR - 796)) | (1 << (SpeakQlParser.FORMAT - 796)) | (1 << (SpeakQlParser.FOUND_ROWS - 796)) | (1 << (SpeakQlParser.FROM_BASE64 - 796)) | (1 << (SpeakQlParser.FROM_DAYS - 796)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 796)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 796)))) != 0) or ((((_la - 860)) & ~0x3f) == 0 and ((1 << (_la - 860)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 860)) | (1 << (SpeakQlParser.GEOMETRYN - 860)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 860)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 860)) | (1 << (SpeakQlParser.GEOMFROMWKB - 860)) | (1 << (SpeakQlParser.GET_FORMAT - 860)) | (1 << (SpeakQlParser.GET_LOCK - 860)) | (1 << (SpeakQlParser.GLENGTH - 860)) | (1 << (SpeakQlParser.GREATEST - 860)) | (1 << (SpeakQlParser.GTID_SUBSET - 860)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 860)) | (1 << (SpeakQlParser.HEX - 860)) | (1 << (SpeakQlParser.IFNULL - 860)) | (1 << (SpeakQlParser.INET6_ATON - 860)) | (1 << (SpeakQlParser.INET6_NTOA - 860)) | (1 << (SpeakQlParser.INET_ATON - 860)) | (1 << (SpeakQlParser.INET_NTOA - 860)) | (1 << (SpeakQlParser.INSTR - 860)) | (1 << (SpeakQlParser.INTERIORRINGN - 860)) | (1 << (SpeakQlParser.INTERSECTS - 860)) | (1 << (SpeakQlParser.ISCLOSED - 860)) | (1 << (SpeakQlParser.ISEMPTY - 860)) | (1 << (SpeakQlParser.ISNULL - 860)) | (1 << (SpeakQlParser.ISSIMPLE - 860)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 860)) | (1 << (SpeakQlParser.IS_IPV4 - 860)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 860)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 860)) | (1 << (SpeakQlParser.IS_IPV6 - 860)) | (1 << (SpeakQlParser.IS_USED_LOCK - 860)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 860)) | (1 << (SpeakQlParser.LCASE - 860)) | (1 << (SpeakQlParser.LEAST - 860)) | (1 << (SpeakQlParser.LENGTH - 860)) | (1 << (SpeakQlParser.LINEFROMTEXT - 860)) | (1 << (SpeakQlParser.LINEFROMWKB - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 860)) | (1 << (SpeakQlParser.LINESTRINGFROMWKB - 860)) | (1 << (SpeakQlParser.LN - 860)) | (1 << (SpeakQlParser.LOAD_FILE - 860)) | (1 << (SpeakQlParser.LOCATE - 860)) | (1 << (SpeakQlParser.LOG - 860)) | (1 << (SpeakQlParser.LOG10 - 860)) | (1 << (SpeakQlParser.LOG2 - 860)) | (1 << (SpeakQlParser.LOWER - 860)) | (1 << (SpeakQlParser.LPAD - 860)) | (1 << (SpeakQlParser.LTRIM - 860)) | (1 << (SpeakQlParser.MAKEDATE - 860)) | (1 << (SpeakQlParser.MAKETIME - 860)) | (1 << (SpeakQlParser.MAKE_SET - 860)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 860)) | (1 << (SpeakQlParser.MBRCONTAINS - 860)) | (1 << (SpeakQlParser.MBRDISJOINT - 860)) | (1 << (SpeakQlParser.MBREQUAL - 860)) | (1 << (SpeakQlParser.MBRINTERSECTS - 860)) | (1 << (SpeakQlParser.MBROVERLAPS - 860)) | (1 << (SpeakQlParser.MBRTOUCHES - 860)) | (1 << (SpeakQlParser.MBRWITHIN - 860)) | (1 << (SpeakQlParser.MD5 - 860)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 860)) | (1 << (SpeakQlParser.MLINEFROMWKB - 860)))) != 0) or ((((_la - 924)) & ~0x3f) == 0 and ((1 << (_la - 924)) & ((1 << (SpeakQlParser.MONTHNAME - 924)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 924)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.NAME_CONST - 924)) | (1 << (SpeakQlParser.NULLIF - 924)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 924)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 924)) | (1 << (SpeakQlParser.NUMPOINTS - 924)) | (1 << (SpeakQlParser.OCT - 924)) | (1 << (SpeakQlParser.OCTET_LENGTH - 924)) | (1 << (SpeakQlParser.ORD - 924)) | (1 << (SpeakQlParser.OVERLAPS - 924)) | (1 << (SpeakQlParser.PERIOD_ADD - 924)) | (1 << (SpeakQlParser.PERIOD_DIFF - 924)) | (1 << (SpeakQlParser.PI - 924)) | (1 << (SpeakQlParser.POINTFROMTEXT - 924)) | (1 << (SpeakQlParser.POINTFROMWKB - 924)) | (1 << (SpeakQlParser.POINTN - 924)) | (1 << (SpeakQlParser.POLYFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYFROMWKB - 924)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 924)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 924)) | (1 << (SpeakQlParser.POW - 924)) | (1 << (SpeakQlParser.POWER - 924)) | (1 << (SpeakQlParser.QUOTE - 924)) | (1 << (SpeakQlParser.RADIANS - 924)) | (1 << (SpeakQlParser.RAND - 924)) | (1 << (SpeakQlParser.RANDOM_BYTES - 924)) | (1 << (SpeakQlParser.RELEASE_LOCK - 924)) | (1 << (SpeakQlParser.REVERSE - 924)) | (1 << (SpeakQlParser.ROUND - 924)) | (1 << (SpeakQlParser.ROW_COUNT - 924)) | (1 << (SpeakQlParser.RPAD - 924)) | (1 << (SpeakQlParser.RTRIM - 924)) | (1 << (SpeakQlParser.SEC_TO_TIME - 924)) | (1 << (SpeakQlParser.SESSION_USER - 924)) | (1 << (SpeakQlParser.SHA - 924)) | (1 << (SpeakQlParser.SHA1 - 924)) | (1 << (SpeakQlParser.SHA2 - 924)) | (1 << (SpeakQlParser.SCHEMA_NAME - 924)) | (1 << (SpeakQlParser.SIGN - 924)) | (1 << (SpeakQlParser.SIN - 924)) | (1 << (SpeakQlParser.SLEEP - 924)) | (1 << (SpeakQlParser.SOUNDEX - 924)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 924)) | (1 << (SpeakQlParser.SQRT - 924)) | (1 << (SpeakQlParser.SRID - 924)) | (1 << (SpeakQlParser.STARTPOINT - 924)) | (1 << (SpeakQlParser.STRCMP - 924)) | (1 << (SpeakQlParser.STR_TO_DATE - 924)) | (1 << (SpeakQlParser.ST_AREA - 924)) | (1 << (SpeakQlParser.ST_ASBINARY - 924)) | (1 << (SpeakQlParser.ST_ASTEXT - 924)) | (1 << (SpeakQlParser.ST_ASWKB - 924)) | (1 << (SpeakQlParser.ST_ASWKT - 924)) | (1 << (SpeakQlParser.ST_BUFFER - 924)))) != 0) or ((((_la - 988)) & ~0x3f) == 0 and ((1 << (_la - 988)) & ((1 << (SpeakQlParser.ST_CENTROID - 988)) | (1 << (SpeakQlParser.ST_CONTAINS - 988)) | (1 << (SpeakQlParser.ST_CROSSES - 988)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_DIMENSION - 988)) | (1 << (SpeakQlParser.ST_DISJOINT - 988)) | (1 << (SpeakQlParser.ST_DISTANCE - 988)) | (1 << (SpeakQlParser.ST_ENDPOINT - 988)) | (1 << (SpeakQlParser.ST_ENVELOPE - 988)) | (1 << (SpeakQlParser.ST_EQUALS - 988)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 988)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 988)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 988)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 988)) | (1 << (SpeakQlParser.ST_INTERSECTION - 988)) | (1 << (SpeakQlParser.ST_INTERSECTS - 988)) | (1 << (SpeakQlParser.ST_ISCLOSED - 988)) | (1 << (SpeakQlParser.ST_ISEMPTY - 988)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 988)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 988)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 988)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 988)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 988)) | (1 << (SpeakQlParser.ST_OVERLAPS - 988)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POINTN - 988)) | (1 << (SpeakQlParser.ST_POLYFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 988)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 988)) | (1 << (SpeakQlParser.ST_SRID - 988)) | (1 << (SpeakQlParser.ST_STARTPOINT - 988)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 988)) | (1 << (SpeakQlParser.ST_TOUCHES - 988)) | (1 << (SpeakQlParser.ST_UNION - 988)) | (1 << (SpeakQlParser.ST_WITHIN - 988)) | (1 << (SpeakQlParser.ST_X - 988)) | (1 << (SpeakQlParser.ST_Y - 988)) | (1 << (SpeakQlParser.SUBDATE - 988)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 988)) | (1 << (SpeakQlParser.SUBTIME - 988)) | (1 << (SpeakQlParser.SYSTEM_USER - 988)) | (1 << (SpeakQlParser.TAN - 988)) | (1 << (SpeakQlParser.TIMEDIFF - 988)) | (1 << (SpeakQlParser.TIMESTAMPADD - 988)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 988)) | (1 << (SpeakQlParser.TIME_FORMAT - 988)) | (1 << (SpeakQlParser.TIME_TO_SEC - 988)) | (1 << (SpeakQlParser.TOUCHES - 988)) | (1 << (SpeakQlParser.TO_BASE64 - 988)))) != 0) or ((((_la - 1052)) & ~0x3f) == 0 and ((1 << (_la - 1052)) & ((1 << (SpeakQlParser.TO_DAYS - 1052)) | (1 << (SpeakQlParser.TO_SECONDS - 1052)) | (1 << (SpeakQlParser.UCASE - 1052)) | (1 << (SpeakQlParser.UNCOMPRESS - 1052)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1052)) | (1 << (SpeakQlParser.UNHEX - 1052)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1052)) | (1 << (SpeakQlParser.UPDATEXML - 1052)) | (1 << (SpeakQlParser.UPPER - 1052)) | (1 << (SpeakQlParser.UUID - 1052)) | (1 << (SpeakQlParser.UUID_SHORT - 1052)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1052)) | (1 << (SpeakQlParser.VERSION - 1052)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1052)) | (1 << (SpeakQlParser.WEEKDAY - 1052)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1052)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1052)) | (1 << (SpeakQlParser.WITHIN - 1052)) | (1 << (SpeakQlParser.YEARWEEK - 1052)) | (1 << (SpeakQlParser.Y_FUNCTION - 1052)) | (1 << (SpeakQlParser.X_FUNCTION - 1052)) | (1 << (SpeakQlParser.MOD - 1052)) | (1 << (SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING - 1052)) | (1 << (SpeakQlParser.STRING_LITERAL - 1052)))) != 0) or ((((_la - 1121)) & ~0x3f) == 0 and ((1 << (_la - 1121)) & ((1 << (SpeakQlParser.ID - 1121)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1121)) | (1 << (SpeakQlParser.OPTIONAL - 1121)))) != 0):
                self.state = 4435
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_cursorStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CloseCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.CursorStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLOSE(self):
            return self.getToken(SpeakQlParser.CLOSE, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseCursor" ):
                listener.enterCloseCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseCursor" ):
                listener.exitCloseCursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCloseCursor" ):
                return visitor.visitCloseCursor(self)
            else:
                return visitor.visitChildren(self)


    class OpenCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.CursorStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN(self):
            return self.getToken(SpeakQlParser.OPEN, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenCursor" ):
                listener.enterOpenCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenCursor" ):
                listener.exitOpenCursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenCursor" ):
                return visitor.visitOpenCursor(self)
            else:
                return visitor.visitChildren(self)


    class FetchCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.CursorStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(SpeakQlParser.FETCH, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def INTO(self):
            return self.getToken(SpeakQlParser.INTO, 0)
        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)

        def FROM(self):
            return self.getToken(SpeakQlParser.FROM, 0)
        def NEXT(self):
            return self.getToken(SpeakQlParser.NEXT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchCursor" ):
                listener.enterFetchCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchCursor" ):
                listener.exitFetchCursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFetchCursor" ):
                return visitor.visitFetchCursor(self)
            else:
                return visitor.visitChildren(self)



    def cursorStatement(self):

        localctx = SpeakQlParser.CursorStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_cursorStatement)
        self._la = 0 # Token type
        try:
            self.state = 4453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.CLOSE]:
                localctx = SpeakQlParser.CloseCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4438
                self.match(SpeakQlParser.CLOSE)
                self.state = 4439
                self.uid()
                pass
            elif token in [SpeakQlParser.FETCH]:
                localctx = SpeakQlParser.FetchCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4440
                self.match(SpeakQlParser.FETCH)
                self.state = 4445
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,628,self._ctx)
                if la_ == 1:
                    self.state = 4442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SpeakQlParser.NEXT:
                        self.state = 4441
                        self.match(SpeakQlParser.NEXT)


                    self.state = 4444
                    self.match(SpeakQlParser.FROM)


                self.state = 4447
                self.uid()
                self.state = 4448
                self.match(SpeakQlParser.INTO)
                self.state = 4449
                self.uidList()
                pass
            elif token in [SpeakQlParser.OPEN]:
                localctx = SpeakQlParser.OpenCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4451
                self.match(SpeakQlParser.OPEN)
                self.state = 4452
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(SpeakQlParser.DECLARE, 0)

        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)


        def dataType(self):
            return self.getTypedRuleContext(SpeakQlParser.DataTypeContext,0)


        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_declareVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareVariable" ):
                listener.enterDeclareVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareVariable" ):
                listener.exitDeclareVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclareVariable" ):
                return visitor.visitDeclareVariable(self)
            else:
                return visitor.visitChildren(self)




    def declareVariable(self):

        localctx = SpeakQlParser.DeclareVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_declareVariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4455
            self.match(SpeakQlParser.DECLARE)
            self.state = 4456
            self.uidList()
            self.state = 4457
            self.dataType()
            self.state = 4460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.DEFAULT:
                self.state = 4458
                self.match(SpeakQlParser.DEFAULT)
                self.state = 4459
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(SpeakQlParser.DECLARE, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def CONDITION(self):
            return self.getToken(SpeakQlParser.CONDITION, 0)

        def FOR(self):
            return self.getToken(SpeakQlParser.FOR, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def SQLSTATE(self):
            return self.getToken(SpeakQlParser.SQLSTATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def VALUE(self):
            return self.getToken(SpeakQlParser.VALUE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_declareCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareCondition" ):
                listener.enterDeclareCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareCondition" ):
                listener.exitDeclareCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclareCondition" ):
                return visitor.visitDeclareCondition(self)
            else:
                return visitor.visitChildren(self)




    def declareCondition(self):

        localctx = SpeakQlParser.DeclareConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_declareCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4462
            self.match(SpeakQlParser.DECLARE)
            self.state = 4463
            self.uid()
            self.state = 4464
            self.match(SpeakQlParser.CONDITION)
            self.state = 4465
            self.match(SpeakQlParser.FOR)
            self.state = 4472
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.ZERO_DECIMAL, SpeakQlParser.ONE_DECIMAL, SpeakQlParser.TWO_DECIMAL, SpeakQlParser.DECIMAL_LITERAL, SpeakQlParser.REAL_LITERAL]:
                self.state = 4466
                self.decimalLiteral()
                pass
            elif token in [SpeakQlParser.SQLSTATE]:
                self.state = 4467
                self.match(SpeakQlParser.SQLSTATE)
                self.state = 4469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.VALUE:
                    self.state = 4468
                    self.match(SpeakQlParser.VALUE)


                self.state = 4471
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareCursorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(SpeakQlParser.DECLARE, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def CURSOR(self):
            return self.getToken(SpeakQlParser.CURSOR, 0)

        def FOR(self):
            return self.getToken(SpeakQlParser.FOR, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectStatementContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_declareCursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareCursor" ):
                listener.enterDeclareCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareCursor" ):
                listener.exitDeclareCursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclareCursor" ):
                return visitor.visitDeclareCursor(self)
            else:
                return visitor.visitChildren(self)




    def declareCursor(self):

        localctx = SpeakQlParser.DeclareCursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_declareCursor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4474
            self.match(SpeakQlParser.DECLARE)
            self.state = 4475
            self.uid()
            self.state = 4476
            self.match(SpeakQlParser.CURSOR)
            self.state = 4477
            self.match(SpeakQlParser.FOR)
            self.state = 4478
            self.selectStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareHandlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.handlerAction = None # Token

        def DECLARE(self):
            return self.getToken(SpeakQlParser.DECLARE, 0)

        def HANDLER(self):
            return self.getToken(SpeakQlParser.HANDLER, 0)

        def FOR(self):
            return self.getToken(SpeakQlParser.FOR, 0)

        def handlerConditionValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.HandlerConditionValueContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.HandlerConditionValueContext,i)


        def routineBody(self):
            return self.getTypedRuleContext(SpeakQlParser.RoutineBodyContext,0)


        def CONTINUE(self):
            return self.getToken(SpeakQlParser.CONTINUE, 0)

        def EXIT(self):
            return self.getToken(SpeakQlParser.EXIT, 0)

        def UNDO(self):
            return self.getToken(SpeakQlParser.UNDO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_declareHandler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareHandler" ):
                listener.enterDeclareHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareHandler" ):
                listener.exitDeclareHandler(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclareHandler" ):
                return visitor.visitDeclareHandler(self)
            else:
                return visitor.visitChildren(self)




    def declareHandler(self):

        localctx = SpeakQlParser.DeclareHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_declareHandler)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4480
            self.match(SpeakQlParser.DECLARE)
            self.state = 4481
            localctx.handlerAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.CONTINUE or _la==SpeakQlParser.EXIT or _la==SpeakQlParser.UNDO):
                localctx.handlerAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4482
            self.match(SpeakQlParser.HANDLER)
            self.state = 4483
            self.match(SpeakQlParser.FOR)
            self.state = 4484
            self.handlerConditionValue()
            self.state = 4489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 4485
                self.match(SpeakQlParser.COMMA)
                self.state = 4486
                self.handlerConditionValue()
                self.state = 4491
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4492
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerConditionValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_handlerConditionValue

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class HandlerConditionWarningContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQLWARNING(self):
            return self.getToken(SpeakQlParser.SQLWARNING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionWarning" ):
                listener.enterHandlerConditionWarning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionWarning" ):
                listener.exitHandlerConditionWarning(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerConditionWarning" ):
                return visitor.visitHandlerConditionWarning(self)
            else:
                return visitor.visitChildren(self)


    class HandlerConditionCodeContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionCode" ):
                listener.enterHandlerConditionCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionCode" ):
                listener.exitHandlerConditionCode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerConditionCode" ):
                return visitor.visitHandlerConditionCode(self)
            else:
                return visitor.visitChildren(self)


    class HandlerConditionNotfoundContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(SpeakQlParser.NOT, 0)
        def FOUND(self):
            return self.getToken(SpeakQlParser.FOUND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionNotfound" ):
                listener.enterHandlerConditionNotfound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionNotfound" ):
                listener.exitHandlerConditionNotfound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerConditionNotfound" ):
                return visitor.visitHandlerConditionNotfound(self)
            else:
                return visitor.visitChildren(self)


    class HandlerConditionStateContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQLSTATE(self):
            return self.getToken(SpeakQlParser.SQLSTATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)
        def VALUE(self):
            return self.getToken(SpeakQlParser.VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionState" ):
                listener.enterHandlerConditionState(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionState" ):
                listener.exitHandlerConditionState(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerConditionState" ):
                return visitor.visitHandlerConditionState(self)
            else:
                return visitor.visitChildren(self)


    class HandlerConditionExceptionContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQLEXCEPTION(self):
            return self.getToken(SpeakQlParser.SQLEXCEPTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionException" ):
                listener.enterHandlerConditionException(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionException" ):
                listener.exitHandlerConditionException(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerConditionException" ):
                return visitor.visitHandlerConditionException(self)
            else:
                return visitor.visitChildren(self)


    class HandlerConditionNameContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionName" ):
                listener.enterHandlerConditionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionName" ):
                listener.exitHandlerConditionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerConditionName" ):
                return visitor.visitHandlerConditionName(self)
            else:
                return visitor.visitChildren(self)



    def handlerConditionValue(self):

        localctx = SpeakQlParser.HandlerConditionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_handlerConditionValue)
        self._la = 0 # Token type
        try:
            self.state = 4505
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.ZERO_DECIMAL, SpeakQlParser.ONE_DECIMAL, SpeakQlParser.TWO_DECIMAL, SpeakQlParser.DECIMAL_LITERAL, SpeakQlParser.REAL_LITERAL]:
                localctx = SpeakQlParser.HandlerConditionCodeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4494
                self.decimalLiteral()
                pass
            elif token in [SpeakQlParser.SQLSTATE]:
                localctx = SpeakQlParser.HandlerConditionStateContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4495
                self.match(SpeakQlParser.SQLSTATE)
                self.state = 4497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.VALUE:
                    self.state = 4496
                    self.match(SpeakQlParser.VALUE)


                self.state = 4499
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.OPTIONAL]:
                localctx = SpeakQlParser.HandlerConditionNameContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4500
                self.uid()
                pass
            elif token in [SpeakQlParser.SQLWARNING]:
                localctx = SpeakQlParser.HandlerConditionWarningContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4501
                self.match(SpeakQlParser.SQLWARNING)
                pass
            elif token in [SpeakQlParser.NOT]:
                localctx = SpeakQlParser.HandlerConditionNotfoundContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4502
                self.match(SpeakQlParser.NOT)
                self.state = 4503
                self.match(SpeakQlParser.FOUND)
                pass
            elif token in [SpeakQlParser.SQLEXCEPTION]:
                localctx = SpeakQlParser.HandlerConditionExceptionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4504
                self.match(SpeakQlParser.SQLEXCEPTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureSqlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(SpeakQlParser.SEMI, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.CompoundStatementContext,0)


        def sqlStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SqlStatementContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_procedureSqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureSqlStatement" ):
                listener.enterProcedureSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureSqlStatement" ):
                listener.exitProcedureSqlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureSqlStatement" ):
                return visitor.visitProcedureSqlStatement(self)
            else:
                return visitor.visitChildren(self)




    def procedureSqlStatement(self):

        localctx = SpeakQlParser.ProcedureSqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_procedureSqlStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,636,self._ctx)
            if la_ == 1:
                self.state = 4507
                self.compoundStatement()
                pass

            elif la_ == 2:
                self.state = 4508
                self.sqlStatement()
                pass


            self.state = 4511
            self.match(SpeakQlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(SpeakQlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SpeakQlParser.THEN, 0)

        def constant(self):
            return self.getTypedRuleContext(SpeakQlParser.ConstantContext,0)


        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_caseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseAlternative" ):
                listener.enterCaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseAlternative" ):
                listener.exitCaseAlternative(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseAlternative" ):
                return visitor.visitCaseAlternative(self)
            else:
                return visitor.visitChildren(self)




    def caseAlternative(self):

        localctx = SpeakQlParser.CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_caseAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4513
            self.match(SpeakQlParser.WHEN)
            self.state = 4516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,637,self._ctx)
            if la_ == 1:
                self.state = 4514
                self.constant()
                pass

            elif la_ == 2:
                self.state = 4515
                self.expression(0)
                pass


            self.state = 4518
            self.match(SpeakQlParser.THEN)
            self.state = 4520 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4519
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4522 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,638,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElifAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEIF(self):
            return self.getToken(SpeakQlParser.ELSEIF, 0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(SpeakQlParser.THEN, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_elifAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElifAlternative" ):
                listener.enterElifAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElifAlternative" ):
                listener.exitElifAlternative(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElifAlternative" ):
                return visitor.visitElifAlternative(self)
            else:
                return visitor.visitChildren(self)




    def elifAlternative(self):

        localctx = SpeakQlParser.ElifAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_elifAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4524
            self.match(SpeakQlParser.ELSEIF)
            self.state = 4525
            self.expression(0)
            self.state = 4526
            self.match(SpeakQlParser.THEN)
            self.state = 4528 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4527
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4530 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,639,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_alterUser

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterUserMysqlV56Context(AlterUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterUserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SpeakQlParser.ALTER, 0)
        def USER(self):
            return self.getToken(SpeakQlParser.USER, 0)
        def userSpecification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserSpecificationContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserSpecificationContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserMysqlV56" ):
                listener.enterAlterUserMysqlV56(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserMysqlV56" ):
                listener.exitAlterUserMysqlV56(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterUserMysqlV56" ):
                return visitor.visitAlterUserMysqlV56(self)
            else:
                return visitor.visitChildren(self)


    class AlterUserMysqlV57Context(AlterUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.AlterUserContext
            super().__init__(parser)
            self.tlsNone = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SpeakQlParser.ALTER, 0)
        def USER(self):
            return self.getToken(SpeakQlParser.USER, 0)
        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserAuthOptionContext,i)

        def ifExists(self):
            return self.getTypedRuleContext(SpeakQlParser.IfExistsContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)
        def REQUIRE(self):
            return self.getToken(SpeakQlParser.REQUIRE, 0)
        def WITH(self):
            return self.getToken(SpeakQlParser.WITH, 0)
        def userPasswordOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserPasswordOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserPasswordOptionContext,i)

        def userLockOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserLockOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserLockOptionContext,i)

        def tlsOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.TlsOptionContext,i)

        def NONE(self):
            return self.getToken(SpeakQlParser.NONE, 0)
        def userResourceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserResourceOptionContext,i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.AND)
            else:
                return self.getToken(SpeakQlParser.AND, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserMysqlV57" ):
                listener.enterAlterUserMysqlV57(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserMysqlV57" ):
                listener.exitAlterUserMysqlV57(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterUserMysqlV57" ):
                return visitor.visitAlterUserMysqlV57(self)
            else:
                return visitor.visitChildren(self)



    def alterUser(self):

        localctx = SpeakQlParser.AlterUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_alterUser)
        self._la = 0 # Token type
        try:
            self.state = 4586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,651,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.AlterUserMysqlV56Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4532
                self.match(SpeakQlParser.ALTER)
                self.state = 4533
                self.match(SpeakQlParser.USER)
                self.state = 4534
                self.userSpecification()
                self.state = 4539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 4535
                    self.match(SpeakQlParser.COMMA)
                    self.state = 4536
                    self.userSpecification()
                    self.state = 4541
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = SpeakQlParser.AlterUserMysqlV57Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4542
                self.match(SpeakQlParser.ALTER)
                self.state = 4543
                self.match(SpeakQlParser.USER)
                self.state = 4545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.IF:
                    self.state = 4544
                    self.ifExists()


                self.state = 4547
                self.userAuthOption()
                self.state = 4552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 4548
                    self.match(SpeakQlParser.COMMA)
                    self.state = 4549
                    self.userAuthOption()
                    self.state = 4554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.REQUIRE:
                    self.state = 4555
                    self.match(SpeakQlParser.REQUIRE)
                    self.state = 4567
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SpeakQlParser.NONE]:
                        self.state = 4556
                        localctx.tlsNone = self.match(SpeakQlParser.NONE)
                        pass
                    elif token in [SpeakQlParser.SSL, SpeakQlParser.CIPHER, SpeakQlParser.ISSUER, SpeakQlParser.SUBJECT, SpeakQlParser.X509]:
                        self.state = 4557
                        self.tlsOption()
                        self.state = 4564
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SpeakQlParser.AND or _la==SpeakQlParser.SSL or _la==SpeakQlParser.CIPHER or _la==SpeakQlParser.ISSUER or _la==SpeakQlParser.SUBJECT or _la==SpeakQlParser.X509:
                            self.state = 4559
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==SpeakQlParser.AND:
                                self.state = 4558
                                self.match(SpeakQlParser.AND)


                            self.state = 4561
                            self.tlsOption()
                            self.state = 4566
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.WITH:
                    self.state = 4571
                    self.match(SpeakQlParser.WITH)
                    self.state = 4573 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4572
                        self.userResourceOption()
                        self.state = 4575 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 490)) & ~0x3f) == 0 and ((1 << (_la - 490)) & ((1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 490)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 490)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 490)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 490)))) != 0)):
                            break



                self.state = 4583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.ACCOUNT or _la==SpeakQlParser.PASSWORD:
                    self.state = 4581
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SpeakQlParser.PASSWORD]:
                        self.state = 4579
                        self.userPasswordOption()
                        pass
                    elif token in [SpeakQlParser.ACCOUNT]:
                        self.state = 4580
                        self.userLockOption()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4585
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_createUser

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CreateUserMysqlV57Context(CreateUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.CreateUserContext
            super().__init__(parser)
            self.tlsNone = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)
        def USER(self):
            return self.getToken(SpeakQlParser.USER, 0)
        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserAuthOptionContext,i)

        def ifNotExists(self):
            return self.getTypedRuleContext(SpeakQlParser.IfNotExistsContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)
        def REQUIRE(self):
            return self.getToken(SpeakQlParser.REQUIRE, 0)
        def WITH(self):
            return self.getToken(SpeakQlParser.WITH, 0)
        def userPasswordOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserPasswordOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserPasswordOptionContext,i)

        def userLockOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserLockOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserLockOptionContext,i)

        def tlsOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.TlsOptionContext,i)

        def NONE(self):
            return self.getToken(SpeakQlParser.NONE, 0)
        def userResourceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserResourceOptionContext,i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.AND)
            else:
                return self.getToken(SpeakQlParser.AND, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserMysqlV57" ):
                listener.enterCreateUserMysqlV57(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserMysqlV57" ):
                listener.exitCreateUserMysqlV57(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateUserMysqlV57" ):
                return visitor.visitCreateUserMysqlV57(self)
            else:
                return visitor.visitChildren(self)


    class CreateUserMysqlV56Context(CreateUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.CreateUserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)
        def USER(self):
            return self.getToken(SpeakQlParser.USER, 0)
        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserAuthOptionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserMysqlV56" ):
                listener.enterCreateUserMysqlV56(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserMysqlV56" ):
                listener.exitCreateUserMysqlV56(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateUserMysqlV56" ):
                return visitor.visitCreateUserMysqlV56(self)
            else:
                return visitor.visitChildren(self)



    def createUser(self):

        localctx = SpeakQlParser.CreateUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_createUser)
        self._la = 0 # Token type
        try:
            self.state = 4642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,663,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.CreateUserMysqlV56Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4588
                self.match(SpeakQlParser.CREATE)
                self.state = 4589
                self.match(SpeakQlParser.USER)
                self.state = 4590
                self.userAuthOption()
                self.state = 4595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 4591
                    self.match(SpeakQlParser.COMMA)
                    self.state = 4592
                    self.userAuthOption()
                    self.state = 4597
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = SpeakQlParser.CreateUserMysqlV57Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4598
                self.match(SpeakQlParser.CREATE)
                self.state = 4599
                self.match(SpeakQlParser.USER)
                self.state = 4601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.IF:
                    self.state = 4600
                    self.ifNotExists()


                self.state = 4603
                self.userAuthOption()
                self.state = 4608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 4604
                    self.match(SpeakQlParser.COMMA)
                    self.state = 4605
                    self.userAuthOption()
                    self.state = 4610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.REQUIRE:
                    self.state = 4611
                    self.match(SpeakQlParser.REQUIRE)
                    self.state = 4623
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SpeakQlParser.NONE]:
                        self.state = 4612
                        localctx.tlsNone = self.match(SpeakQlParser.NONE)
                        pass
                    elif token in [SpeakQlParser.SSL, SpeakQlParser.CIPHER, SpeakQlParser.ISSUER, SpeakQlParser.SUBJECT, SpeakQlParser.X509]:
                        self.state = 4613
                        self.tlsOption()
                        self.state = 4620
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SpeakQlParser.AND or _la==SpeakQlParser.SSL or _la==SpeakQlParser.CIPHER or _la==SpeakQlParser.ISSUER or _la==SpeakQlParser.SUBJECT or _la==SpeakQlParser.X509:
                            self.state = 4615
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==SpeakQlParser.AND:
                                self.state = 4614
                                self.match(SpeakQlParser.AND)


                            self.state = 4617
                            self.tlsOption()
                            self.state = 4622
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.WITH:
                    self.state = 4627
                    self.match(SpeakQlParser.WITH)
                    self.state = 4629 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4628
                        self.userResourceOption()
                        self.state = 4631 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 490)) & ~0x3f) == 0 and ((1 << (_la - 490)) & ((1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 490)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 490)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 490)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 490)))) != 0)):
                            break



                self.state = 4639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.ACCOUNT or _la==SpeakQlParser.PASSWORD:
                    self.state = 4637
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SpeakQlParser.PASSWORD]:
                        self.state = 4635
                        self.userPasswordOption()
                        pass
                    elif token in [SpeakQlParser.ACCOUNT]:
                        self.state = 4636
                        self.userLockOption()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4641
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)

        def USER(self):
            return self.getToken(SpeakQlParser.USER, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserNameContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(SpeakQlParser.IfExistsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_dropUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropUser" ):
                listener.enterDropUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropUser" ):
                listener.exitDropUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropUser" ):
                return visitor.visitDropUser(self)
            else:
                return visitor.visitChildren(self)




    def dropUser(self):

        localctx = SpeakQlParser.DropUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_dropUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4644
            self.match(SpeakQlParser.DROP)
            self.state = 4645
            self.match(SpeakQlParser.USER)
            self.state = 4647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IF:
                self.state = 4646
                self.ifExists()


            self.state = 4649
            self.userName()
            self.state = 4654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 4650
                self.match(SpeakQlParser.COMMA)
                self.state = 4651
                self.userName()
                self.state = 4656
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.privilegeObject = None # Token
            self.tlsNone = None # Token

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.GRANT)
            else:
                return self.getToken(SpeakQlParser.GRANT, i)

        def privelegeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PrivelegeClauseContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PrivelegeClauseContext,i)


        def ON(self):
            return self.getToken(SpeakQlParser.ON, 0)

        def privilegeLevel(self):
            return self.getTypedRuleContext(SpeakQlParser.PrivilegeLevelContext,0)


        def TO(self):
            return self.getToken(SpeakQlParser.TO, 0)

        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserAuthOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def REQUIRE(self):
            return self.getToken(SpeakQlParser.REQUIRE, 0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.WITH)
            else:
                return self.getToken(SpeakQlParser.WITH, i)

        def AS(self):
            return self.getToken(SpeakQlParser.AS, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserNameContext,i)


        def ROLE(self):
            return self.getToken(SpeakQlParser.ROLE, 0)

        def roleOption(self):
            return self.getTypedRuleContext(SpeakQlParser.RoleOptionContext,0)


        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)

        def FUNCTION(self):
            return self.getToken(SpeakQlParser.FUNCTION, 0)

        def PROCEDURE(self):
            return self.getToken(SpeakQlParser.PROCEDURE, 0)

        def tlsOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.TlsOptionContext,i)


        def NONE(self):
            return self.getToken(SpeakQlParser.NONE, 0)

        def OPTION(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.OPTION)
            else:
                return self.getToken(SpeakQlParser.OPTION, i)

        def userResourceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserResourceOptionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.AND)
            else:
                return self.getToken(SpeakQlParser.AND, i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)


        def ADMIN(self):
            return self.getToken(SpeakQlParser.ADMIN, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_grantStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantStatement" ):
                listener.enterGrantStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantStatement" ):
                listener.exitGrantStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantStatement" ):
                return visitor.visitGrantStatement(self)
            else:
                return visitor.visitChildren(self)




    def grantStatement(self):

        localctx = SpeakQlParser.GrantStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_grantStatement)
        self._la = 0 # Token type
        try:
            self.state = 4744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,682,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4657
                self.match(SpeakQlParser.GRANT)
                self.state = 4658
                self.privelegeClause()
                self.state = 4663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 4659
                    self.match(SpeakQlParser.COMMA)
                    self.state = 4660
                    self.privelegeClause()
                    self.state = 4665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4666
                self.match(SpeakQlParser.ON)
                self.state = 4668
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,667,self._ctx)
                if la_ == 1:
                    self.state = 4667
                    localctx.privilegeObject = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.PROCEDURE or _la==SpeakQlParser.TABLE or _la==SpeakQlParser.FUNCTION):
                        localctx.privilegeObject = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4670
                self.privilegeLevel()
                self.state = 4671
                self.match(SpeakQlParser.TO)
                self.state = 4672
                self.userAuthOption()
                self.state = 4677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 4673
                    self.match(SpeakQlParser.COMMA)
                    self.state = 4674
                    self.userAuthOption()
                    self.state = 4679
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.REQUIRE:
                    self.state = 4680
                    self.match(SpeakQlParser.REQUIRE)
                    self.state = 4692
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SpeakQlParser.NONE]:
                        self.state = 4681
                        localctx.tlsNone = self.match(SpeakQlParser.NONE)
                        pass
                    elif token in [SpeakQlParser.SSL, SpeakQlParser.CIPHER, SpeakQlParser.ISSUER, SpeakQlParser.SUBJECT, SpeakQlParser.X509]:
                        self.state = 4682
                        self.tlsOption()
                        self.state = 4689
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SpeakQlParser.AND or _la==SpeakQlParser.SSL or _la==SpeakQlParser.CIPHER or _la==SpeakQlParser.ISSUER or _la==SpeakQlParser.SUBJECT or _la==SpeakQlParser.X509:
                            self.state = 4684
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==SpeakQlParser.AND:
                                self.state = 4683
                                self.match(SpeakQlParser.AND)


                            self.state = 4686
                            self.tlsOption()
                            self.state = 4691
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.WITH:
                    self.state = 4696
                    self.match(SpeakQlParser.WITH)
                    self.state = 4702
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,674,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 4700
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [SpeakQlParser.GRANT]:
                                self.state = 4697
                                self.match(SpeakQlParser.GRANT)
                                self.state = 4698
                                self.match(SpeakQlParser.OPTION)
                                pass
                            elif token in [SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS]:
                                self.state = 4699
                                self.userResourceOption()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 4704
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,674,self._ctx)



                self.state = 4713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.AS:
                    self.state = 4707
                    self.match(SpeakQlParser.AS)
                    self.state = 4708
                    self.userName()
                    self.state = 4709
                    self.match(SpeakQlParser.WITH)
                    self.state = 4710
                    self.match(SpeakQlParser.ROLE)
                    self.state = 4711
                    self.roleOption()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4715
                self.match(SpeakQlParser.GRANT)
                self.state = 4716
                self.uid()
                self.state = 4721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 4717
                    self.match(SpeakQlParser.COMMA)
                    self.state = 4718
                    self.uid()
                    self.state = 4723
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4724
                self.match(SpeakQlParser.TO)
                self.state = 4727
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,678,self._ctx)
                if la_ == 1:
                    self.state = 4725
                    self.userName()
                    pass

                elif la_ == 2:
                    self.state = 4726
                    self.uid()
                    pass


                self.state = 4736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 4729
                    self.match(SpeakQlParser.COMMA)
                    self.state = 4732
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,679,self._ctx)
                    if la_ == 1:
                        self.state = 4730
                        self.userName()
                        pass

                    elif la_ == 2:
                        self.state = 4731
                        self.uid()
                        pass


                    self.state = 4738
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.WITH:
                    self.state = 4739
                    self.match(SpeakQlParser.WITH)
                    self.state = 4740
                    self.match(SpeakQlParser.ADMIN)
                    self.state = 4741
                    self.match(SpeakQlParser.OPTION)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)

        def NONE(self):
            return self.getToken(SpeakQlParser.NONE, 0)

        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)

        def EXCEPT(self):
            return self.getToken(SpeakQlParser.EXCEPT, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_roleOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleOption" ):
                listener.enterRoleOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleOption" ):
                listener.exitRoleOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoleOption" ):
                return visitor.visitRoleOption(self)
            else:
                return visitor.visitChildren(self)




    def roleOption(self):

        localctx = SpeakQlParser.RoleOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_roleOption)
        self._la = 0 # Token type
        try:
            self.state = 4768
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4746
                self.match(SpeakQlParser.DEFAULT)
                pass
            elif token in [SpeakQlParser.NONE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4747
                self.match(SpeakQlParser.NONE)
                pass
            elif token in [SpeakQlParser.ALL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4748
                self.match(SpeakQlParser.ALL)
                self.state = 4758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.EXCEPT:
                    self.state = 4749
                    self.match(SpeakQlParser.EXCEPT)
                    self.state = 4750
                    self.userName()
                    self.state = 4755
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SpeakQlParser.COMMA:
                        self.state = 4751
                        self.match(SpeakQlParser.COMMA)
                        self.state = 4752
                        self.userName()
                        self.state = 4757
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            elif token in [SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.STRING_USER_NAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4760
                self.userName()
                self.state = 4765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 4761
                    self.match(SpeakQlParser.COMMA)
                    self.state = 4762
                    self.userName()
                    self.state = 4767
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantProxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fromFirst = None # UserNameContext
            self.toFirst = None # UserNameContext
            self._userName = None # UserNameContext
            self.toOther = list() # of UserNameContexts

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.GRANT)
            else:
                return self.getToken(SpeakQlParser.GRANT, i)

        def PROXY(self):
            return self.getToken(SpeakQlParser.PROXY, 0)

        def ON(self):
            return self.getToken(SpeakQlParser.ON, 0)

        def TO(self):
            return self.getToken(SpeakQlParser.TO, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def WITH(self):
            return self.getToken(SpeakQlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(SpeakQlParser.OPTION, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_grantProxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantProxy" ):
                listener.enterGrantProxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantProxy" ):
                listener.exitGrantProxy(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantProxy" ):
                return visitor.visitGrantProxy(self)
            else:
                return visitor.visitChildren(self)




    def grantProxy(self):

        localctx = SpeakQlParser.GrantProxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_grantProxy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4770
            self.match(SpeakQlParser.GRANT)
            self.state = 4771
            self.match(SpeakQlParser.PROXY)
            self.state = 4772
            self.match(SpeakQlParser.ON)
            self.state = 4773
            localctx.fromFirst = self.userName()
            self.state = 4774
            self.match(SpeakQlParser.TO)
            self.state = 4775
            localctx.toFirst = self.userName()
            self.state = 4780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 4776
                self.match(SpeakQlParser.COMMA)
                self.state = 4777
                localctx._userName = self.userName()
                localctx.toOther.append(localctx._userName)
                self.state = 4782
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.WITH:
                self.state = 4783
                self.match(SpeakQlParser.WITH)
                self.state = 4784
                self.match(SpeakQlParser.GRANT)
                self.state = 4785
                self.match(SpeakQlParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(SpeakQlParser.RENAME, 0)

        def USER(self):
            return self.getToken(SpeakQlParser.USER, 0)

        def renameUserClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.RenameUserClauseContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.RenameUserClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_renameUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameUser" ):
                listener.enterRenameUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameUser" ):
                listener.exitRenameUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameUser" ):
                return visitor.visitRenameUser(self)
            else:
                return visitor.visitChildren(self)




    def renameUser(self):

        localctx = SpeakQlParser.RenameUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_renameUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4788
            self.match(SpeakQlParser.RENAME)
            self.state = 4789
            self.match(SpeakQlParser.USER)
            self.state = 4790
            self.renameUserClause()
            self.state = 4795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 4791
                self.match(SpeakQlParser.COMMA)
                self.state = 4792
                self.renameUserClause()
                self.state = 4797
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_revokeStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DetailRevokeContext(RevokeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.RevokeStatementContext
            super().__init__(parser)
            self.privilegeObject = None # Token
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(SpeakQlParser.REVOKE, 0)
        def privelegeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PrivelegeClauseContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PrivelegeClauseContext,i)

        def ON(self):
            return self.getToken(SpeakQlParser.ON, 0)
        def privilegeLevel(self):
            return self.getTypedRuleContext(SpeakQlParser.PrivilegeLevelContext,0)

        def FROM(self):
            return self.getToken(SpeakQlParser.FROM, 0)
        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserNameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)
        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)
        def FUNCTION(self):
            return self.getToken(SpeakQlParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(SpeakQlParser.PROCEDURE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetailRevoke" ):
                listener.enterDetailRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetailRevoke" ):
                listener.exitDetailRevoke(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDetailRevoke" ):
                return visitor.visitDetailRevoke(self)
            else:
                return visitor.visitChildren(self)


    class RoleRevokeContext(RevokeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.RevokeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(SpeakQlParser.REVOKE, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)

        def FROM(self):
            return self.getToken(SpeakQlParser.FROM, 0)
        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserNameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleRevoke" ):
                listener.enterRoleRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleRevoke" ):
                listener.exitRoleRevoke(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoleRevoke" ):
                return visitor.visitRoleRevoke(self)
            else:
                return visitor.visitChildren(self)


    class ShortRevokeContext(RevokeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.RevokeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(SpeakQlParser.REVOKE, 0)
        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)
        def GRANT(self):
            return self.getToken(SpeakQlParser.GRANT, 0)
        def OPTION(self):
            return self.getToken(SpeakQlParser.OPTION, 0)
        def FROM(self):
            return self.getToken(SpeakQlParser.FROM, 0)
        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserNameContext,i)

        def PRIVILEGES(self):
            return self.getToken(SpeakQlParser.PRIVILEGES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortRevoke" ):
                listener.enterShortRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortRevoke" ):
                listener.exitShortRevoke(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShortRevoke" ):
                return visitor.visitShortRevoke(self)
            else:
                return visitor.visitChildren(self)



    def revokeStatement(self):

        localctx = SpeakQlParser.RevokeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_revokeStatement)
        self._la = 0 # Token type
        try:
            self.state = 4862
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,699,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.DetailRevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4798
                self.match(SpeakQlParser.REVOKE)
                self.state = 4799
                self.privelegeClause()
                self.state = 4804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 4800
                    self.match(SpeakQlParser.COMMA)
                    self.state = 4801
                    self.privelegeClause()
                    self.state = 4806
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4807
                self.match(SpeakQlParser.ON)
                self.state = 4809
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,691,self._ctx)
                if la_ == 1:
                    self.state = 4808
                    localctx.privilegeObject = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.PROCEDURE or _la==SpeakQlParser.TABLE or _la==SpeakQlParser.FUNCTION):
                        localctx.privilegeObject = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4811
                self.privilegeLevel()
                self.state = 4812
                self.match(SpeakQlParser.FROM)
                self.state = 4813
                self.userName()
                self.state = 4818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 4814
                    self.match(SpeakQlParser.COMMA)
                    self.state = 4815
                    self.userName()
                    self.state = 4820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = SpeakQlParser.ShortRevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4821
                self.match(SpeakQlParser.REVOKE)
                self.state = 4822
                self.match(SpeakQlParser.ALL)
                self.state = 4824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.PRIVILEGES:
                    self.state = 4823
                    self.match(SpeakQlParser.PRIVILEGES)


                self.state = 4826
                self.match(SpeakQlParser.COMMA)
                self.state = 4827
                self.match(SpeakQlParser.GRANT)
                self.state = 4828
                self.match(SpeakQlParser.OPTION)
                self.state = 4829
                self.match(SpeakQlParser.FROM)
                self.state = 4830
                self.userName()
                self.state = 4835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 4831
                    self.match(SpeakQlParser.COMMA)
                    self.state = 4832
                    self.userName()
                    self.state = 4837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = SpeakQlParser.RoleRevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4838
                self.match(SpeakQlParser.REVOKE)
                self.state = 4839
                self.uid()
                self.state = 4844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 4840
                    self.match(SpeakQlParser.COMMA)
                    self.state = 4841
                    self.uid()
                    self.state = 4846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4847
                self.match(SpeakQlParser.FROM)
                self.state = 4850
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,696,self._ctx)
                if la_ == 1:
                    self.state = 4848
                    self.userName()
                    pass

                elif la_ == 2:
                    self.state = 4849
                    self.uid()
                    pass


                self.state = 4859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 4852
                    self.match(SpeakQlParser.COMMA)
                    self.state = 4855
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,697,self._ctx)
                    if la_ == 1:
                        self.state = 4853
                        self.userName()
                        pass

                    elif la_ == 2:
                        self.state = 4854
                        self.uid()
                        pass


                    self.state = 4861
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeProxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.onUser = None # UserNameContext
            self.fromFirst = None # UserNameContext
            self._userName = None # UserNameContext
            self.fromOther = list() # of UserNameContexts

        def REVOKE(self):
            return self.getToken(SpeakQlParser.REVOKE, 0)

        def PROXY(self):
            return self.getToken(SpeakQlParser.PROXY, 0)

        def ON(self):
            return self.getToken(SpeakQlParser.ON, 0)

        def FROM(self):
            return self.getToken(SpeakQlParser.FROM, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_revokeProxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeProxy" ):
                listener.enterRevokeProxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeProxy" ):
                listener.exitRevokeProxy(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevokeProxy" ):
                return visitor.visitRevokeProxy(self)
            else:
                return visitor.visitChildren(self)




    def revokeProxy(self):

        localctx = SpeakQlParser.RevokeProxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_revokeProxy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4864
            self.match(SpeakQlParser.REVOKE)
            self.state = 4865
            self.match(SpeakQlParser.PROXY)
            self.state = 4866
            self.match(SpeakQlParser.ON)
            self.state = 4867
            localctx.onUser = self.userName()
            self.state = 4868
            self.match(SpeakQlParser.FROM)
            self.state = 4869
            localctx.fromFirst = self.userName()
            self.state = 4874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 4870
                self.match(SpeakQlParser.COMMA)
                self.state = 4871
                localctx._userName = self.userName()
                localctx.fromOther.append(localctx._userName)
                self.state = 4876
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetPasswordStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)

        def PASSWORD(self):
            return self.getToken(SpeakQlParser.PASSWORD, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def passwordFunctionClause(self):
            return self.getTypedRuleContext(SpeakQlParser.PasswordFunctionClauseContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def FOR(self):
            return self.getToken(SpeakQlParser.FOR, 0)

        def userName(self):
            return self.getTypedRuleContext(SpeakQlParser.UserNameContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_setPasswordStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPasswordStatement" ):
                listener.enterSetPasswordStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPasswordStatement" ):
                listener.exitSetPasswordStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetPasswordStatement" ):
                return visitor.visitSetPasswordStatement(self)
            else:
                return visitor.visitChildren(self)




    def setPasswordStatement(self):

        localctx = SpeakQlParser.SetPasswordStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_setPasswordStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4877
            self.match(SpeakQlParser.SET)
            self.state = 4878
            self.match(SpeakQlParser.PASSWORD)
            self.state = 4881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.FOR:
                self.state = 4879
                self.match(SpeakQlParser.FOR)
                self.state = 4880
                self.userName()


            self.state = 4883
            self.match(SpeakQlParser.EQUAL_SYMBOL)
            self.state = 4886
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.OLD_PASSWORD, SpeakQlParser.PASSWORD]:
                self.state = 4884
                self.passwordFunctionClause()
                pass
            elif token in [SpeakQlParser.STRING_LITERAL]:
                self.state = 4885
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userName(self):
            return self.getTypedRuleContext(SpeakQlParser.UserNameContext,0)


        def userPasswordOption(self):
            return self.getTypedRuleContext(SpeakQlParser.UserPasswordOptionContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_userSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserSpecification" ):
                listener.enterUserSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserSpecification" ):
                listener.exitUserSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserSpecification" ):
                return visitor.visitUserSpecification(self)
            else:
                return visitor.visitChildren(self)




    def userSpecification(self):

        localctx = SpeakQlParser.UserSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_userSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4888
            self.userName()
            self.state = 4889
            self.userPasswordOption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserAuthOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_userAuthOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.UserAuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(SpeakQlParser.UserNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleAuthOption" ):
                listener.enterSimpleAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleAuthOption" ):
                listener.exitSimpleAuthOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleAuthOption" ):
                return visitor.visitSimpleAuthOption(self)
            else:
                return visitor.visitChildren(self)


    class PasswordAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.UserAuthOptionContext
            super().__init__(parser)
            self.hashed = None # Token
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(SpeakQlParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(SpeakQlParser.IDENTIFIED, 0)
        def BY(self):
            return self.getToken(SpeakQlParser.BY, 0)
        def PASSWORD(self):
            return self.getToken(SpeakQlParser.PASSWORD, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordAuthOption" ):
                listener.enterPasswordAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordAuthOption" ):
                listener.exitPasswordAuthOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPasswordAuthOption" ):
                return visitor.visitPasswordAuthOption(self)
            else:
                return visitor.visitChildren(self)


    class StringAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.UserAuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(SpeakQlParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(SpeakQlParser.IDENTIFIED, 0)
        def BY(self):
            return self.getToken(SpeakQlParser.BY, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)
        def WITH(self):
            return self.getToken(SpeakQlParser.WITH, 0)
        def authPlugin(self):
            return self.getTypedRuleContext(SpeakQlParser.AuthPluginContext,0)

        def RETAIN(self):
            return self.getToken(SpeakQlParser.RETAIN, 0)
        def CURRENT(self):
            return self.getToken(SpeakQlParser.CURRENT, 0)
        def PASSWORD(self):
            return self.getToken(SpeakQlParser.PASSWORD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringAuthOption" ):
                listener.enterStringAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringAuthOption" ):
                listener.exitStringAuthOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringAuthOption" ):
                return visitor.visitStringAuthOption(self)
            else:
                return visitor.visitChildren(self)


    class HashAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.UserAuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(SpeakQlParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(SpeakQlParser.IDENTIFIED, 0)
        def WITH(self):
            return self.getToken(SpeakQlParser.WITH, 0)
        def authPlugin(self):
            return self.getTypedRuleContext(SpeakQlParser.AuthPluginContext,0)

        def AS(self):
            return self.getToken(SpeakQlParser.AS, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHashAuthOption" ):
                listener.enterHashAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHashAuthOption" ):
                listener.exitHashAuthOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHashAuthOption" ):
                return visitor.visitHashAuthOption(self)
            else:
                return visitor.visitChildren(self)



    def userAuthOption(self):

        localctx = SpeakQlParser.UserAuthOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_userAuthOption)
        self._la = 0 # Token type
        try:
            self.state = 4919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,706,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.PasswordAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4891
                self.userName()
                self.state = 4892
                self.match(SpeakQlParser.IDENTIFIED)
                self.state = 4893
                self.match(SpeakQlParser.BY)
                self.state = 4894
                self.match(SpeakQlParser.PASSWORD)
                self.state = 4895
                localctx.hashed = self.match(SpeakQlParser.STRING_LITERAL)
                pass

            elif la_ == 2:
                localctx = SpeakQlParser.StringAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4897
                self.userName()
                self.state = 4898
                self.match(SpeakQlParser.IDENTIFIED)
                self.state = 4901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.WITH:
                    self.state = 4899
                    self.match(SpeakQlParser.WITH)
                    self.state = 4900
                    self.authPlugin()


                self.state = 4903
                self.match(SpeakQlParser.BY)
                self.state = 4904
                self.match(SpeakQlParser.STRING_LITERAL)
                self.state = 4908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.RETAIN:
                    self.state = 4905
                    self.match(SpeakQlParser.RETAIN)
                    self.state = 4906
                    self.match(SpeakQlParser.CURRENT)
                    self.state = 4907
                    self.match(SpeakQlParser.PASSWORD)


                pass

            elif la_ == 3:
                localctx = SpeakQlParser.HashAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4910
                self.userName()
                self.state = 4911
                self.match(SpeakQlParser.IDENTIFIED)
                self.state = 4912
                self.match(SpeakQlParser.WITH)
                self.state = 4913
                self.authPlugin()
                self.state = 4916
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,705,self._ctx)
                if la_ == 1:
                    self.state = 4914
                    self.match(SpeakQlParser.AS)
                    self.state = 4915
                    self.match(SpeakQlParser.STRING_LITERAL)


                pass

            elif la_ == 4:
                localctx = SpeakQlParser.SimpleAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4918
                self.userName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TlsOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SSL(self):
            return self.getToken(SpeakQlParser.SSL, 0)

        def X509(self):
            return self.getToken(SpeakQlParser.X509, 0)

        def CIPHER(self):
            return self.getToken(SpeakQlParser.CIPHER, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def ISSUER(self):
            return self.getToken(SpeakQlParser.ISSUER, 0)

        def SUBJECT(self):
            return self.getToken(SpeakQlParser.SUBJECT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_tlsOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTlsOption" ):
                listener.enterTlsOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTlsOption" ):
                listener.exitTlsOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTlsOption" ):
                return visitor.visitTlsOption(self)
            else:
                return visitor.visitChildren(self)




    def tlsOption(self):

        localctx = SpeakQlParser.TlsOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_tlsOption)
        try:
            self.state = 4929
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.SSL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4921
                self.match(SpeakQlParser.SSL)
                pass
            elif token in [SpeakQlParser.X509]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4922
                self.match(SpeakQlParser.X509)
                pass
            elif token in [SpeakQlParser.CIPHER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4923
                self.match(SpeakQlParser.CIPHER)
                self.state = 4924
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.ISSUER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4925
                self.match(SpeakQlParser.ISSUER)
                self.state = 4926
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.SUBJECT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4927
                self.match(SpeakQlParser.SUBJECT)
                self.state = 4928
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserResourceOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAX_QUERIES_PER_HOUR(self):
            return self.getToken(SpeakQlParser.MAX_QUERIES_PER_HOUR, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def MAX_UPDATES_PER_HOUR(self):
            return self.getToken(SpeakQlParser.MAX_UPDATES_PER_HOUR, 0)

        def MAX_CONNECTIONS_PER_HOUR(self):
            return self.getToken(SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, 0)

        def MAX_USER_CONNECTIONS(self):
            return self.getToken(SpeakQlParser.MAX_USER_CONNECTIONS, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_userResourceOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserResourceOption" ):
                listener.enterUserResourceOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserResourceOption" ):
                listener.exitUserResourceOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserResourceOption" ):
                return visitor.visitUserResourceOption(self)
            else:
                return visitor.visitChildren(self)




    def userResourceOption(self):

        localctx = SpeakQlParser.UserResourceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_userResourceOption)
        try:
            self.state = 4939
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.MAX_QUERIES_PER_HOUR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4931
                self.match(SpeakQlParser.MAX_QUERIES_PER_HOUR)
                self.state = 4932
                self.decimalLiteral()
                pass
            elif token in [SpeakQlParser.MAX_UPDATES_PER_HOUR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4933
                self.match(SpeakQlParser.MAX_UPDATES_PER_HOUR)
                self.state = 4934
                self.decimalLiteral()
                pass
            elif token in [SpeakQlParser.MAX_CONNECTIONS_PER_HOUR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4935
                self.match(SpeakQlParser.MAX_CONNECTIONS_PER_HOUR)
                self.state = 4936
                self.decimalLiteral()
                pass
            elif token in [SpeakQlParser.MAX_USER_CONNECTIONS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4937
                self.match(SpeakQlParser.MAX_USER_CONNECTIONS)
                self.state = 4938
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserPasswordOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expireType = None # Token

        def PASSWORD(self):
            return self.getToken(SpeakQlParser.PASSWORD, 0)

        def EXPIRE(self):
            return self.getToken(SpeakQlParser.EXPIRE, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def DAY(self):
            return self.getToken(SpeakQlParser.DAY, 0)

        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)

        def NEVER(self):
            return self.getToken(SpeakQlParser.NEVER, 0)

        def INTERVAL(self):
            return self.getToken(SpeakQlParser.INTERVAL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_userPasswordOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPasswordOption" ):
                listener.enterUserPasswordOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPasswordOption" ):
                listener.exitUserPasswordOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserPasswordOption" ):
                return visitor.visitUserPasswordOption(self)
            else:
                return visitor.visitChildren(self)




    def userPasswordOption(self):

        localctx = SpeakQlParser.UserPasswordOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_userPasswordOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4941
            self.match(SpeakQlParser.PASSWORD)
            self.state = 4942
            self.match(SpeakQlParser.EXPIRE)
            self.state = 4949
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.DEFAULT]:
                self.state = 4943
                localctx.expireType = self.match(SpeakQlParser.DEFAULT)
                pass
            elif token in [SpeakQlParser.NEVER]:
                self.state = 4944
                localctx.expireType = self.match(SpeakQlParser.NEVER)
                pass
            elif token in [SpeakQlParser.INTERVAL]:
                self.state = 4945
                localctx.expireType = self.match(SpeakQlParser.INTERVAL)
                self.state = 4946
                self.decimalLiteral()
                self.state = 4947
                self.match(SpeakQlParser.DAY)
                pass
            elif token in [SpeakQlParser.EOF, SpeakQlParser.RETRIEVE, SpeakQlParser.SHOW_ME, SpeakQlParser.DISPLAY, SpeakQlParser.PRESENT, SpeakQlParser.FIND, SpeakQlParser.IN_TABLE, SpeakQlParser.FROM_TABLE, SpeakQlParser.ALTER, SpeakQlParser.ANALYZE, SpeakQlParser.CALL, SpeakQlParser.CHANGE, SpeakQlParser.CHECK, SpeakQlParser.CREATE, SpeakQlParser.DELETE, SpeakQlParser.DESC, SpeakQlParser.DESCRIBE, SpeakQlParser.DROP, SpeakQlParser.EXPLAIN, SpeakQlParser.FROM, SpeakQlParser.GET, SpeakQlParser.GRANT, SpeakQlParser.GROUP, SpeakQlParser.HAVING, SpeakQlParser.INSERT, SpeakQlParser.INTO, SpeakQlParser.KILL, SpeakQlParser.LIMIT, SpeakQlParser.LOAD, SpeakQlParser.LOCK, SpeakQlParser.OPTIMIZE, SpeakQlParser.ORDER, SpeakQlParser.PURGE, SpeakQlParser.RELEASE, SpeakQlParser.RENAME, SpeakQlParser.REPLACE, SpeakQlParser.RESIGNAL, SpeakQlParser.REVOKE, SpeakQlParser.SELECT, SpeakQlParser.SET, SpeakQlParser.SHOW, SpeakQlParser.SIGNAL, SpeakQlParser.UNLOCK, SpeakQlParser.UPDATE, SpeakQlParser.USE, SpeakQlParser.WHERE, SpeakQlParser.ACCOUNT, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.CACHE, SpeakQlParser.CHECKSUM, SpeakQlParser.COMMIT, SpeakQlParser.DEALLOCATE, SpeakQlParser.DO, SpeakQlParser.FLUSH, SpeakQlParser.HANDLER, SpeakQlParser.HELP, SpeakQlParser.INSTALL, SpeakQlParser.PASSWORD, SpeakQlParser.PREPARE, SpeakQlParser.REPAIR, SpeakQlParser.RESET, SpeakQlParser.ROLLBACK, SpeakQlParser.SAVEPOINT, SpeakQlParser.START, SpeakQlParser.STOP, SpeakQlParser.TRUNCATE, SpeakQlParser.UNINSTALL, SpeakQlParser.WINDOW, SpeakQlParser.XA, SpeakQlParser.EXECUTE, SpeakQlParser.SHUTDOWN, SpeakQlParser.MINUS, SpeakQlParser.LR_BRACKET, SpeakQlParser.COMMA, SpeakQlParser.SEMI]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserLockOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lockType = None # Token

        def ACCOUNT(self):
            return self.getToken(SpeakQlParser.ACCOUNT, 0)

        def LOCK(self):
            return self.getToken(SpeakQlParser.LOCK, 0)

        def UNLOCK(self):
            return self.getToken(SpeakQlParser.UNLOCK, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_userLockOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserLockOption" ):
                listener.enterUserLockOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserLockOption" ):
                listener.exitUserLockOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserLockOption" ):
                return visitor.visitUserLockOption(self)
            else:
                return visitor.visitChildren(self)




    def userLockOption(self):

        localctx = SpeakQlParser.UserLockOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_userLockOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4951
            self.match(SpeakQlParser.ACCOUNT)
            self.state = 4952
            localctx.lockType = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.LOCK or _la==SpeakQlParser.UNLOCK):
                localctx.lockType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivelegeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilege(self):
            return self.getTypedRuleContext(SpeakQlParser.PrivilegeContext,0)


        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_privelegeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivelegeClause" ):
                listener.enterPrivelegeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivelegeClause" ):
                listener.exitPrivelegeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivelegeClause" ):
                return visitor.visitPrivelegeClause(self)
            else:
                return visitor.visitChildren(self)




    def privelegeClause(self):

        localctx = SpeakQlParser.PrivelegeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_privelegeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4954
            self.privilege()
            self.state = 4959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.LR_BRACKET:
                self.state = 4955
                self.leftParen()
                self.state = 4956
                self.uidList()
                self.state = 4957
                self.rightParen()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)

        def PRIVILEGES(self):
            return self.getToken(SpeakQlParser.PRIVILEGES, 0)

        def ALTER(self):
            return self.getToken(SpeakQlParser.ALTER, 0)

        def ROUTINE(self):
            return self.getToken(SpeakQlParser.ROUTINE, 0)

        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)

        def TEMPORARY(self):
            return self.getToken(SpeakQlParser.TEMPORARY, 0)

        def TABLES(self):
            return self.getToken(SpeakQlParser.TABLES, 0)

        def VIEW(self):
            return self.getToken(SpeakQlParser.VIEW, 0)

        def USER(self):
            return self.getToken(SpeakQlParser.USER, 0)

        def TABLESPACE(self):
            return self.getToken(SpeakQlParser.TABLESPACE, 0)

        def ROLE(self):
            return self.getToken(SpeakQlParser.ROLE, 0)

        def DELETE(self):
            return self.getToken(SpeakQlParser.DELETE, 0)

        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)

        def EVENT(self):
            return self.getToken(SpeakQlParser.EVENT, 0)

        def EXECUTE(self):
            return self.getToken(SpeakQlParser.EXECUTE, 0)

        def FILE(self):
            return self.getToken(SpeakQlParser.FILE, 0)

        def GRANT(self):
            return self.getToken(SpeakQlParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(SpeakQlParser.OPTION, 0)

        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)

        def INSERT(self):
            return self.getToken(SpeakQlParser.INSERT, 0)

        def LOCK(self):
            return self.getToken(SpeakQlParser.LOCK, 0)

        def PROCESS(self):
            return self.getToken(SpeakQlParser.PROCESS, 0)

        def PROXY(self):
            return self.getToken(SpeakQlParser.PROXY, 0)

        def REFERENCES(self):
            return self.getToken(SpeakQlParser.REFERENCES, 0)

        def RELOAD(self):
            return self.getToken(SpeakQlParser.RELOAD, 0)

        def REPLICATION(self):
            return self.getToken(SpeakQlParser.REPLICATION, 0)

        def CLIENT(self):
            return self.getToken(SpeakQlParser.CLIENT, 0)

        def SLAVE(self):
            return self.getToken(SpeakQlParser.SLAVE, 0)

        def SELECT(self):
            return self.getToken(SpeakQlParser.SELECT, 0)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)

        def DATABASES(self):
            return self.getToken(SpeakQlParser.DATABASES, 0)

        def SHUTDOWN(self):
            return self.getToken(SpeakQlParser.SHUTDOWN, 0)

        def SUPER(self):
            return self.getToken(SpeakQlParser.SUPER, 0)

        def TRIGGER(self):
            return self.getToken(SpeakQlParser.TRIGGER, 0)

        def UPDATE(self):
            return self.getToken(SpeakQlParser.UPDATE, 0)

        def USAGE(self):
            return self.getToken(SpeakQlParser.USAGE, 0)

        def APPLICATION_PASSWORD_ADMIN(self):
            return self.getToken(SpeakQlParser.APPLICATION_PASSWORD_ADMIN, 0)

        def AUDIT_ADMIN(self):
            return self.getToken(SpeakQlParser.AUDIT_ADMIN, 0)

        def BACKUP_ADMIN(self):
            return self.getToken(SpeakQlParser.BACKUP_ADMIN, 0)

        def BINLOG_ADMIN(self):
            return self.getToken(SpeakQlParser.BINLOG_ADMIN, 0)

        def BINLOG_ENCRYPTION_ADMIN(self):
            return self.getToken(SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, 0)

        def CLONE_ADMIN(self):
            return self.getToken(SpeakQlParser.CLONE_ADMIN, 0)

        def CONNECTION_ADMIN(self):
            return self.getToken(SpeakQlParser.CONNECTION_ADMIN, 0)

        def ENCRYPTION_KEY_ADMIN(self):
            return self.getToken(SpeakQlParser.ENCRYPTION_KEY_ADMIN, 0)

        def FIREWALL_ADMIN(self):
            return self.getToken(SpeakQlParser.FIREWALL_ADMIN, 0)

        def FIREWALL_USER(self):
            return self.getToken(SpeakQlParser.FIREWALL_USER, 0)

        def FLUSH_OPTIMIZER_COSTS(self):
            return self.getToken(SpeakQlParser.FLUSH_OPTIMIZER_COSTS, 0)

        def FLUSH_STATUS(self):
            return self.getToken(SpeakQlParser.FLUSH_STATUS, 0)

        def FLUSH_TABLES(self):
            return self.getToken(SpeakQlParser.FLUSH_TABLES, 0)

        def FLUSH_USER_RESOURCES(self):
            return self.getToken(SpeakQlParser.FLUSH_USER_RESOURCES, 0)

        def GROUP_REPLICATION_ADMIN(self):
            return self.getToken(SpeakQlParser.GROUP_REPLICATION_ADMIN, 0)

        def INNODB_REDO_LOG_ARCHIVE(self):
            return self.getToken(SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, 0)

        def INNODB_REDO_LOG_ENABLE(self):
            return self.getToken(SpeakQlParser.INNODB_REDO_LOG_ENABLE, 0)

        def NDB_STORED_USER(self):
            return self.getToken(SpeakQlParser.NDB_STORED_USER, 0)

        def PERSIST_RO_VARIABLES_ADMIN(self):
            return self.getToken(SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, 0)

        def REPLICATION_APPLIER(self):
            return self.getToken(SpeakQlParser.REPLICATION_APPLIER, 0)

        def REPLICATION_SLAVE_ADMIN(self):
            return self.getToken(SpeakQlParser.REPLICATION_SLAVE_ADMIN, 0)

        def RESOURCE_GROUP_ADMIN(self):
            return self.getToken(SpeakQlParser.RESOURCE_GROUP_ADMIN, 0)

        def RESOURCE_GROUP_USER(self):
            return self.getToken(SpeakQlParser.RESOURCE_GROUP_USER, 0)

        def ROLE_ADMIN(self):
            return self.getToken(SpeakQlParser.ROLE_ADMIN, 0)

        def SERVICE_CONNECTION_ADMIN(self):
            return self.getToken(SpeakQlParser.SERVICE_CONNECTION_ADMIN, 0)

        def SESSION_VARIABLES_ADMIN(self):
            return self.getToken(SpeakQlParser.SESSION_VARIABLES_ADMIN, 0)

        def SET_USER_ID(self):
            return self.getToken(SpeakQlParser.SET_USER_ID, 0)

        def SHOW_ROUTINE(self):
            return self.getToken(SpeakQlParser.SHOW_ROUTINE, 0)

        def SYSTEM_USER(self):
            return self.getToken(SpeakQlParser.SYSTEM_USER, 0)

        def SYSTEM_VARIABLES_ADMIN(self):
            return self.getToken(SpeakQlParser.SYSTEM_VARIABLES_ADMIN, 0)

        def TABLE_ENCRYPTION_ADMIN(self):
            return self.getToken(SpeakQlParser.TABLE_ENCRYPTION_ADMIN, 0)

        def VERSION_TOKEN_ADMIN(self):
            return self.getToken(SpeakQlParser.VERSION_TOKEN_ADMIN, 0)

        def XA_RECOVER_ADMIN(self):
            return self.getToken(SpeakQlParser.XA_RECOVER_ADMIN, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivilege" ):
                return visitor.visitPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def privilege(self):

        localctx = SpeakQlParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_privilege)
        self._la = 0 # Token type
        try:
            self.state = 5040
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4961
                self.match(SpeakQlParser.ALL)
                self.state = 4963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.PRIVILEGES:
                    self.state = 4962
                    self.match(SpeakQlParser.PRIVILEGES)


                pass
            elif token in [SpeakQlParser.ALTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4965
                self.match(SpeakQlParser.ALTER)
                self.state = 4967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.ROUTINE:
                    self.state = 4966
                    self.match(SpeakQlParser.ROUTINE)


                pass
            elif token in [SpeakQlParser.CREATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4969
                self.match(SpeakQlParser.CREATE)
                self.state = 4977
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.TEMPORARY]:
                    self.state = 4970
                    self.match(SpeakQlParser.TEMPORARY)
                    self.state = 4971
                    self.match(SpeakQlParser.TABLES)
                    pass
                elif token in [SpeakQlParser.ROUTINE]:
                    self.state = 4972
                    self.match(SpeakQlParser.ROUTINE)
                    pass
                elif token in [SpeakQlParser.VIEW]:
                    self.state = 4973
                    self.match(SpeakQlParser.VIEW)
                    pass
                elif token in [SpeakQlParser.USER]:
                    self.state = 4974
                    self.match(SpeakQlParser.USER)
                    pass
                elif token in [SpeakQlParser.TABLESPACE]:
                    self.state = 4975
                    self.match(SpeakQlParser.TABLESPACE)
                    pass
                elif token in [SpeakQlParser.ROLE]:
                    self.state = 4976
                    self.match(SpeakQlParser.ROLE)
                    pass
                elif token in [SpeakQlParser.ON, SpeakQlParser.LR_BRACKET, SpeakQlParser.COMMA]:
                    pass
                else:
                    pass
                pass
            elif token in [SpeakQlParser.DELETE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4979
                self.match(SpeakQlParser.DELETE)
                pass
            elif token in [SpeakQlParser.DROP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4980
                self.match(SpeakQlParser.DROP)
                self.state = 4982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.ROLE:
                    self.state = 4981
                    self.match(SpeakQlParser.ROLE)


                pass
            elif token in [SpeakQlParser.EVENT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4984
                self.match(SpeakQlParser.EVENT)
                pass
            elif token in [SpeakQlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4985
                self.match(SpeakQlParser.EXECUTE)
                pass
            elif token in [SpeakQlParser.FILE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4986
                self.match(SpeakQlParser.FILE)
                pass
            elif token in [SpeakQlParser.GRANT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4987
                self.match(SpeakQlParser.GRANT)
                self.state = 4988
                self.match(SpeakQlParser.OPTION)
                pass
            elif token in [SpeakQlParser.INDEX]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4989
                self.match(SpeakQlParser.INDEX)
                pass
            elif token in [SpeakQlParser.INSERT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4990
                self.match(SpeakQlParser.INSERT)
                pass
            elif token in [SpeakQlParser.LOCK]:
                self.enterOuterAlt(localctx, 12)
                self.state = 4991
                self.match(SpeakQlParser.LOCK)
                self.state = 4992
                self.match(SpeakQlParser.TABLES)
                pass
            elif token in [SpeakQlParser.PROCESS]:
                self.enterOuterAlt(localctx, 13)
                self.state = 4993
                self.match(SpeakQlParser.PROCESS)
                pass
            elif token in [SpeakQlParser.PROXY]:
                self.enterOuterAlt(localctx, 14)
                self.state = 4994
                self.match(SpeakQlParser.PROXY)
                pass
            elif token in [SpeakQlParser.REFERENCES]:
                self.enterOuterAlt(localctx, 15)
                self.state = 4995
                self.match(SpeakQlParser.REFERENCES)
                pass
            elif token in [SpeakQlParser.RELOAD]:
                self.enterOuterAlt(localctx, 16)
                self.state = 4996
                self.match(SpeakQlParser.RELOAD)
                pass
            elif token in [SpeakQlParser.REPLICATION]:
                self.enterOuterAlt(localctx, 17)
                self.state = 4997
                self.match(SpeakQlParser.REPLICATION)
                self.state = 4998
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.CLIENT or _la==SpeakQlParser.SLAVE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SpeakQlParser.SELECT]:
                self.enterOuterAlt(localctx, 18)
                self.state = 4999
                self.match(SpeakQlParser.SELECT)
                pass
            elif token in [SpeakQlParser.SHOW]:
                self.enterOuterAlt(localctx, 19)
                self.state = 5000
                self.match(SpeakQlParser.SHOW)
                self.state = 5001
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.DATABASES or _la==SpeakQlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SpeakQlParser.SHUTDOWN]:
                self.enterOuterAlt(localctx, 20)
                self.state = 5002
                self.match(SpeakQlParser.SHUTDOWN)
                pass
            elif token in [SpeakQlParser.SUPER]:
                self.enterOuterAlt(localctx, 21)
                self.state = 5003
                self.match(SpeakQlParser.SUPER)
                pass
            elif token in [SpeakQlParser.TRIGGER]:
                self.enterOuterAlt(localctx, 22)
                self.state = 5004
                self.match(SpeakQlParser.TRIGGER)
                pass
            elif token in [SpeakQlParser.UPDATE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 5005
                self.match(SpeakQlParser.UPDATE)
                pass
            elif token in [SpeakQlParser.USAGE]:
                self.enterOuterAlt(localctx, 24)
                self.state = 5006
                self.match(SpeakQlParser.USAGE)
                pass
            elif token in [SpeakQlParser.APPLICATION_PASSWORD_ADMIN]:
                self.enterOuterAlt(localctx, 25)
                self.state = 5007
                self.match(SpeakQlParser.APPLICATION_PASSWORD_ADMIN)
                pass
            elif token in [SpeakQlParser.AUDIT_ADMIN]:
                self.enterOuterAlt(localctx, 26)
                self.state = 5008
                self.match(SpeakQlParser.AUDIT_ADMIN)
                pass
            elif token in [SpeakQlParser.BACKUP_ADMIN]:
                self.enterOuterAlt(localctx, 27)
                self.state = 5009
                self.match(SpeakQlParser.BACKUP_ADMIN)
                pass
            elif token in [SpeakQlParser.BINLOG_ADMIN]:
                self.enterOuterAlt(localctx, 28)
                self.state = 5010
                self.match(SpeakQlParser.BINLOG_ADMIN)
                pass
            elif token in [SpeakQlParser.BINLOG_ENCRYPTION_ADMIN]:
                self.enterOuterAlt(localctx, 29)
                self.state = 5011
                self.match(SpeakQlParser.BINLOG_ENCRYPTION_ADMIN)
                pass
            elif token in [SpeakQlParser.CLONE_ADMIN]:
                self.enterOuterAlt(localctx, 30)
                self.state = 5012
                self.match(SpeakQlParser.CLONE_ADMIN)
                pass
            elif token in [SpeakQlParser.CONNECTION_ADMIN]:
                self.enterOuterAlt(localctx, 31)
                self.state = 5013
                self.match(SpeakQlParser.CONNECTION_ADMIN)
                pass
            elif token in [SpeakQlParser.ENCRYPTION_KEY_ADMIN]:
                self.enterOuterAlt(localctx, 32)
                self.state = 5014
                self.match(SpeakQlParser.ENCRYPTION_KEY_ADMIN)
                pass
            elif token in [SpeakQlParser.FIREWALL_ADMIN]:
                self.enterOuterAlt(localctx, 33)
                self.state = 5015
                self.match(SpeakQlParser.FIREWALL_ADMIN)
                pass
            elif token in [SpeakQlParser.FIREWALL_USER]:
                self.enterOuterAlt(localctx, 34)
                self.state = 5016
                self.match(SpeakQlParser.FIREWALL_USER)
                pass
            elif token in [SpeakQlParser.FLUSH_OPTIMIZER_COSTS]:
                self.enterOuterAlt(localctx, 35)
                self.state = 5017
                self.match(SpeakQlParser.FLUSH_OPTIMIZER_COSTS)
                pass
            elif token in [SpeakQlParser.FLUSH_STATUS]:
                self.enterOuterAlt(localctx, 36)
                self.state = 5018
                self.match(SpeakQlParser.FLUSH_STATUS)
                pass
            elif token in [SpeakQlParser.FLUSH_TABLES]:
                self.enterOuterAlt(localctx, 37)
                self.state = 5019
                self.match(SpeakQlParser.FLUSH_TABLES)
                pass
            elif token in [SpeakQlParser.FLUSH_USER_RESOURCES]:
                self.enterOuterAlt(localctx, 38)
                self.state = 5020
                self.match(SpeakQlParser.FLUSH_USER_RESOURCES)
                pass
            elif token in [SpeakQlParser.GROUP_REPLICATION_ADMIN]:
                self.enterOuterAlt(localctx, 39)
                self.state = 5021
                self.match(SpeakQlParser.GROUP_REPLICATION_ADMIN)
                pass
            elif token in [SpeakQlParser.INNODB_REDO_LOG_ARCHIVE]:
                self.enterOuterAlt(localctx, 40)
                self.state = 5022
                self.match(SpeakQlParser.INNODB_REDO_LOG_ARCHIVE)
                pass
            elif token in [SpeakQlParser.INNODB_REDO_LOG_ENABLE]:
                self.enterOuterAlt(localctx, 41)
                self.state = 5023
                self.match(SpeakQlParser.INNODB_REDO_LOG_ENABLE)
                pass
            elif token in [SpeakQlParser.NDB_STORED_USER]:
                self.enterOuterAlt(localctx, 42)
                self.state = 5024
                self.match(SpeakQlParser.NDB_STORED_USER)
                pass
            elif token in [SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN]:
                self.enterOuterAlt(localctx, 43)
                self.state = 5025
                self.match(SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN)
                pass
            elif token in [SpeakQlParser.REPLICATION_APPLIER]:
                self.enterOuterAlt(localctx, 44)
                self.state = 5026
                self.match(SpeakQlParser.REPLICATION_APPLIER)
                pass
            elif token in [SpeakQlParser.REPLICATION_SLAVE_ADMIN]:
                self.enterOuterAlt(localctx, 45)
                self.state = 5027
                self.match(SpeakQlParser.REPLICATION_SLAVE_ADMIN)
                pass
            elif token in [SpeakQlParser.RESOURCE_GROUP_ADMIN]:
                self.enterOuterAlt(localctx, 46)
                self.state = 5028
                self.match(SpeakQlParser.RESOURCE_GROUP_ADMIN)
                pass
            elif token in [SpeakQlParser.RESOURCE_GROUP_USER]:
                self.enterOuterAlt(localctx, 47)
                self.state = 5029
                self.match(SpeakQlParser.RESOURCE_GROUP_USER)
                pass
            elif token in [SpeakQlParser.ROLE_ADMIN]:
                self.enterOuterAlt(localctx, 48)
                self.state = 5030
                self.match(SpeakQlParser.ROLE_ADMIN)
                pass
            elif token in [SpeakQlParser.SERVICE_CONNECTION_ADMIN]:
                self.enterOuterAlt(localctx, 49)
                self.state = 5031
                self.match(SpeakQlParser.SERVICE_CONNECTION_ADMIN)
                pass
            elif token in [SpeakQlParser.SESSION_VARIABLES_ADMIN]:
                self.enterOuterAlt(localctx, 50)
                self.state = 5032
                self.match(SpeakQlParser.SESSION_VARIABLES_ADMIN)
                pass
            elif token in [SpeakQlParser.SET_USER_ID]:
                self.enterOuterAlt(localctx, 51)
                self.state = 5033
                self.match(SpeakQlParser.SET_USER_ID)
                pass
            elif token in [SpeakQlParser.SHOW_ROUTINE]:
                self.enterOuterAlt(localctx, 52)
                self.state = 5034
                self.match(SpeakQlParser.SHOW_ROUTINE)
                pass
            elif token in [SpeakQlParser.SYSTEM_USER]:
                self.enterOuterAlt(localctx, 53)
                self.state = 5035
                self.match(SpeakQlParser.SYSTEM_USER)
                pass
            elif token in [SpeakQlParser.SYSTEM_VARIABLES_ADMIN]:
                self.enterOuterAlt(localctx, 54)
                self.state = 5036
                self.match(SpeakQlParser.SYSTEM_VARIABLES_ADMIN)
                pass
            elif token in [SpeakQlParser.TABLE_ENCRYPTION_ADMIN]:
                self.enterOuterAlt(localctx, 55)
                self.state = 5037
                self.match(SpeakQlParser.TABLE_ENCRYPTION_ADMIN)
                pass
            elif token in [SpeakQlParser.VERSION_TOKEN_ADMIN]:
                self.enterOuterAlt(localctx, 56)
                self.state = 5038
                self.match(SpeakQlParser.VERSION_TOKEN_ADMIN)
                pass
            elif token in [SpeakQlParser.XA_RECOVER_ADMIN]:
                self.enterOuterAlt(localctx, 57)
                self.state = 5039
                self.match(SpeakQlParser.XA_RECOVER_ADMIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_privilegeLevel

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DefiniteSchemaPrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def DOT(self):
            return self.getToken(SpeakQlParser.DOT, 0)
        def STAR(self):
            return self.getToken(SpeakQlParser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteSchemaPrivLevel" ):
                listener.enterDefiniteSchemaPrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteSchemaPrivLevel" ):
                listener.exitDefiniteSchemaPrivLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefiniteSchemaPrivLevel" ):
                return visitor.visitDefiniteSchemaPrivLevel(self)
            else:
                return visitor.visitChildren(self)


    class DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def dottedId(self):
            return self.getTypedRuleContext(SpeakQlParser.DottedIdContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteFullTablePrivLevel2" ):
                listener.enterDefiniteFullTablePrivLevel2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteFullTablePrivLevel2" ):
                listener.exitDefiniteFullTablePrivLevel2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefiniteFullTablePrivLevel2" ):
                return visitor.visitDefiniteFullTablePrivLevel2(self)
            else:
                return visitor.visitChildren(self)


    class DefiniteFullTablePrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)

        def DOT(self):
            return self.getToken(SpeakQlParser.DOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteFullTablePrivLevel" ):
                listener.enterDefiniteFullTablePrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteFullTablePrivLevel" ):
                listener.exitDefiniteFullTablePrivLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefiniteFullTablePrivLevel" ):
                return visitor.visitDefiniteFullTablePrivLevel(self)
            else:
                return visitor.visitChildren(self)


    class GlobalPrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.STAR)
            else:
                return self.getToken(SpeakQlParser.STAR, i)
        def DOT(self):
            return self.getToken(SpeakQlParser.DOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalPrivLevel" ):
                listener.enterGlobalPrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalPrivLevel" ):
                listener.exitGlobalPrivLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalPrivLevel" ):
                return visitor.visitGlobalPrivLevel(self)
            else:
                return visitor.visitChildren(self)


    class DefiniteTablePrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteTablePrivLevel" ):
                listener.enterDefiniteTablePrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteTablePrivLevel" ):
                listener.exitDefiniteTablePrivLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefiniteTablePrivLevel" ):
                return visitor.visitDefiniteTablePrivLevel(self)
            else:
                return visitor.visitChildren(self)


    class CurrentSchemaPriviLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STAR(self):
            return self.getToken(SpeakQlParser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentSchemaPriviLevel" ):
                listener.enterCurrentSchemaPriviLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentSchemaPriviLevel" ):
                listener.exitCurrentSchemaPriviLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentSchemaPriviLevel" ):
                return visitor.visitCurrentSchemaPriviLevel(self)
            else:
                return visitor.visitChildren(self)



    def privilegeLevel(self):

        localctx = SpeakQlParser.PrivilegeLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_privilegeLevel)
        try:
            self.state = 5058
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,716,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.CurrentSchemaPriviLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5042
                self.match(SpeakQlParser.STAR)
                pass

            elif la_ == 2:
                localctx = SpeakQlParser.GlobalPrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5043
                self.match(SpeakQlParser.STAR)
                self.state = 5044
                self.match(SpeakQlParser.DOT)
                self.state = 5045
                self.match(SpeakQlParser.STAR)
                pass

            elif la_ == 3:
                localctx = SpeakQlParser.DefiniteSchemaPrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5046
                self.uid()
                self.state = 5047
                self.match(SpeakQlParser.DOT)
                self.state = 5048
                self.match(SpeakQlParser.STAR)
                pass

            elif la_ == 4:
                localctx = SpeakQlParser.DefiniteFullTablePrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5050
                self.uid()
                self.state = 5051
                self.match(SpeakQlParser.DOT)
                self.state = 5052
                self.uid()
                pass

            elif la_ == 5:
                localctx = SpeakQlParser.DefiniteFullTablePrivLevel2Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5054
                self.uid()
                self.state = 5055
                self.dottedId()
                pass

            elif la_ == 6:
                localctx = SpeakQlParser.DefiniteTablePrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5057
                self.uid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameUserClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fromFirst = None # UserNameContext
            self.toFirst = None # UserNameContext

        def TO(self):
            return self.getToken(SpeakQlParser.TO, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UserNameContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_renameUserClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameUserClause" ):
                listener.enterRenameUserClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameUserClause" ):
                listener.exitRenameUserClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameUserClause" ):
                return visitor.visitRenameUserClause(self)
            else:
                return visitor.visitChildren(self)




    def renameUserClause(self):

        localctx = SpeakQlParser.RenameUserClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_renameUserClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5060
            localctx.fromFirst = self.userName()
            self.state = 5061
            self.match(SpeakQlParser.TO)
            self.state = 5062
            localctx.toFirst = self.userName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnalyzeTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def ANALYZE(self):
            return self.getToken(SpeakQlParser.ANALYZE, 0)

        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(SpeakQlParser.TablesContext,0)


        def UPDATE(self):
            return self.getToken(SpeakQlParser.UPDATE, 0)

        def HISTOGRAM(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.HISTOGRAM)
            else:
                return self.getToken(SpeakQlParser.HISTOGRAM, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.ON)
            else:
                return self.getToken(SpeakQlParser.ON, i)

        def fullColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.FullColumnNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.FullColumnNameContext,i)


        def DROP(self):
            return self.getToken(SpeakQlParser.DROP, 0)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(SpeakQlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(SpeakQlParser.LOCAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def WITH(self):
            return self.getToken(SpeakQlParser.WITH, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def BUCKETS(self):
            return self.getToken(SpeakQlParser.BUCKETS, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_analyzeTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyzeTable" ):
                listener.enterAnalyzeTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyzeTable" ):
                listener.exitAnalyzeTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyzeTable" ):
                return visitor.visitAnalyzeTable(self)
            else:
                return visitor.visitChildren(self)




    def analyzeTable(self):

        localctx = SpeakQlParser.AnalyzeTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_analyzeTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5064
            self.match(SpeakQlParser.ANALYZE)
            self.state = 5066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.NO_WRITE_TO_BINLOG or _la==SpeakQlParser.LOCAL:
                self.state = 5065
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.NO_WRITE_TO_BINLOG or _la==SpeakQlParser.LOCAL):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5068
            self.match(SpeakQlParser.TABLE)
            self.state = 5069
            self.tables()
            self.state = 5087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,720,self._ctx)
            if la_ == 1:
                self.state = 5070
                self.match(SpeakQlParser.UPDATE)
                self.state = 5071
                self.match(SpeakQlParser.HISTOGRAM)
                self.state = 5072
                self.match(SpeakQlParser.ON)
                self.state = 5073
                self.fullColumnName()
                self.state = 5078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 5074
                    self.match(SpeakQlParser.COMMA)
                    self.state = 5075
                    self.fullColumnName()
                    self.state = 5080
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.WITH:
                    self.state = 5081
                    self.match(SpeakQlParser.WITH)
                    self.state = 5082
                    self.decimalLiteral()
                    self.state = 5083
                    self.match(SpeakQlParser.BUCKETS)




            self.state = 5100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,722,self._ctx)
            if la_ == 1:
                self.state = 5089
                self.match(SpeakQlParser.DROP)
                self.state = 5090
                self.match(SpeakQlParser.HISTOGRAM)
                self.state = 5091
                self.match(SpeakQlParser.ON)
                self.state = 5092
                self.fullColumnName()
                self.state = 5097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 5093
                    self.match(SpeakQlParser.COMMA)
                    self.state = 5094
                    self.fullColumnName()
                    self.state = 5099
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(SpeakQlParser.CHECK, 0)

        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(SpeakQlParser.TablesContext,0)


        def checkTableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.CheckTableOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.CheckTableOptionContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_checkTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckTable" ):
                listener.enterCheckTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckTable" ):
                listener.exitCheckTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheckTable" ):
                return visitor.visitCheckTable(self)
            else:
                return visitor.visitChildren(self)




    def checkTable(self):

        localctx = SpeakQlParser.CheckTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_checkTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5102
            self.match(SpeakQlParser.CHECK)
            self.state = 5103
            self.match(SpeakQlParser.TABLE)
            self.state = 5104
            self.tables()
            self.state = 5108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.FOR or _la==SpeakQlParser.CHANGED or _la==SpeakQlParser.EXTENDED or _la==SpeakQlParser.FAST or _la==SpeakQlParser.MEDIUM or _la==SpeakQlParser.QUICK:
                self.state = 5105
                self.checkTableOption()
                self.state = 5110
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChecksumTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def CHECKSUM(self):
            return self.getToken(SpeakQlParser.CHECKSUM, 0)

        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(SpeakQlParser.TablesContext,0)


        def QUICK(self):
            return self.getToken(SpeakQlParser.QUICK, 0)

        def EXTENDED(self):
            return self.getToken(SpeakQlParser.EXTENDED, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_checksumTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecksumTable" ):
                listener.enterChecksumTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecksumTable" ):
                listener.exitChecksumTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChecksumTable" ):
                return visitor.visitChecksumTable(self)
            else:
                return visitor.visitChildren(self)




    def checksumTable(self):

        localctx = SpeakQlParser.ChecksumTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_checksumTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5111
            self.match(SpeakQlParser.CHECKSUM)
            self.state = 5112
            self.match(SpeakQlParser.TABLE)
            self.state = 5113
            self.tables()
            self.state = 5115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.EXTENDED or _la==SpeakQlParser.QUICK:
                self.state = 5114
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.EXTENDED or _la==SpeakQlParser.QUICK):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptimizeTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def OPTIMIZE(self):
            return self.getToken(SpeakQlParser.OPTIMIZE, 0)

        def tables(self):
            return self.getTypedRuleContext(SpeakQlParser.TablesContext,0)


        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(SpeakQlParser.TABLES, 0)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(SpeakQlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(SpeakQlParser.LOCAL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_optimizeTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimizeTable" ):
                listener.enterOptimizeTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimizeTable" ):
                listener.exitOptimizeTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptimizeTable" ):
                return visitor.visitOptimizeTable(self)
            else:
                return visitor.visitChildren(self)




    def optimizeTable(self):

        localctx = SpeakQlParser.OptimizeTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_optimizeTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5117
            self.match(SpeakQlParser.OPTIMIZE)
            self.state = 5119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.NO_WRITE_TO_BINLOG or _la==SpeakQlParser.LOCAL:
                self.state = 5118
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.NO_WRITE_TO_BINLOG or _la==SpeakQlParser.LOCAL):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5121
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.TABLE or _la==SpeakQlParser.TABLES):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5122
            self.tables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepairTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def REPAIR(self):
            return self.getToken(SpeakQlParser.REPAIR, 0)

        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(SpeakQlParser.TablesContext,0)


        def QUICK(self):
            return self.getToken(SpeakQlParser.QUICK, 0)

        def EXTENDED(self):
            return self.getToken(SpeakQlParser.EXTENDED, 0)

        def USE_FRM(self):
            return self.getToken(SpeakQlParser.USE_FRM, 0)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(SpeakQlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(SpeakQlParser.LOCAL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_repairTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepairTable" ):
                listener.enterRepairTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepairTable" ):
                listener.exitRepairTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepairTable" ):
                return visitor.visitRepairTable(self)
            else:
                return visitor.visitChildren(self)




    def repairTable(self):

        localctx = SpeakQlParser.RepairTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_repairTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5124
            self.match(SpeakQlParser.REPAIR)
            self.state = 5126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.NO_WRITE_TO_BINLOG or _la==SpeakQlParser.LOCAL:
                self.state = 5125
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.NO_WRITE_TO_BINLOG or _la==SpeakQlParser.LOCAL):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5128
            self.match(SpeakQlParser.TABLE)
            self.state = 5129
            self.tables()
            self.state = 5131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.QUICK:
                self.state = 5130
                self.match(SpeakQlParser.QUICK)


            self.state = 5134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.EXTENDED:
                self.state = 5133
                self.match(SpeakQlParser.EXTENDED)


            self.state = 5137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.USE_FRM:
                self.state = 5136
                self.match(SpeakQlParser.USE_FRM)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckTableOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(SpeakQlParser.FOR, 0)

        def UPGRADE(self):
            return self.getToken(SpeakQlParser.UPGRADE, 0)

        def QUICK(self):
            return self.getToken(SpeakQlParser.QUICK, 0)

        def FAST(self):
            return self.getToken(SpeakQlParser.FAST, 0)

        def MEDIUM(self):
            return self.getToken(SpeakQlParser.MEDIUM, 0)

        def EXTENDED(self):
            return self.getToken(SpeakQlParser.EXTENDED, 0)

        def CHANGED(self):
            return self.getToken(SpeakQlParser.CHANGED, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_checkTableOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckTableOption" ):
                listener.enterCheckTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckTableOption" ):
                listener.exitCheckTableOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheckTableOption" ):
                return visitor.visitCheckTableOption(self)
            else:
                return visitor.visitChildren(self)




    def checkTableOption(self):

        localctx = SpeakQlParser.CheckTableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_checkTableOption)
        try:
            self.state = 5146
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5139
                self.match(SpeakQlParser.FOR)
                self.state = 5140
                self.match(SpeakQlParser.UPGRADE)
                pass
            elif token in [SpeakQlParser.QUICK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5141
                self.match(SpeakQlParser.QUICK)
                pass
            elif token in [SpeakQlParser.FAST]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5142
                self.match(SpeakQlParser.FAST)
                pass
            elif token in [SpeakQlParser.MEDIUM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5143
                self.match(SpeakQlParser.MEDIUM)
                pass
            elif token in [SpeakQlParser.EXTENDED]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5144
                self.match(SpeakQlParser.EXTENDED)
                pass
            elif token in [SpeakQlParser.CHANGED]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5145
                self.match(SpeakQlParser.CHANGED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUdfunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.returnType = None # Token

        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(SpeakQlParser.FUNCTION, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def RETURNS(self):
            return self.getToken(SpeakQlParser.RETURNS, 0)

        def SONAME(self):
            return self.getToken(SpeakQlParser.SONAME, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def STRING(self):
            return self.getToken(SpeakQlParser.STRING, 0)

        def INTEGER(self):
            return self.getToken(SpeakQlParser.INTEGER, 0)

        def REAL(self):
            return self.getToken(SpeakQlParser.REAL, 0)

        def DECIMAL(self):
            return self.getToken(SpeakQlParser.DECIMAL, 0)

        def AGGREGATE(self):
            return self.getToken(SpeakQlParser.AGGREGATE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_createUdfunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUdfunction" ):
                listener.enterCreateUdfunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUdfunction" ):
                listener.exitCreateUdfunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateUdfunction" ):
                return visitor.visitCreateUdfunction(self)
            else:
                return visitor.visitChildren(self)




    def createUdfunction(self):

        localctx = SpeakQlParser.CreateUdfunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_createUdfunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5148
            self.match(SpeakQlParser.CREATE)
            self.state = 5150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.AGGREGATE:
                self.state = 5149
                self.match(SpeakQlParser.AGGREGATE)


            self.state = 5152
            self.match(SpeakQlParser.FUNCTION)
            self.state = 5153
            self.uid()
            self.state = 5154
            self.match(SpeakQlParser.RETURNS)
            self.state = 5155
            localctx.returnType = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & ((1 << (SpeakQlParser.INTEGER - 209)) | (1 << (SpeakQlParser.REAL - 209)) | (1 << (SpeakQlParser.DECIMAL - 209)))) != 0) or _la==SpeakQlParser.STRING):
                localctx.returnType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5156
            self.match(SpeakQlParser.SONAME)
            self.state = 5157
            self.match(SpeakQlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstallPluginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTALL(self):
            return self.getToken(SpeakQlParser.INSTALL, 0)

        def PLUGIN(self):
            return self.getToken(SpeakQlParser.PLUGIN, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def SONAME(self):
            return self.getToken(SpeakQlParser.SONAME, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_installPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstallPlugin" ):
                listener.enterInstallPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstallPlugin" ):
                listener.exitInstallPlugin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstallPlugin" ):
                return visitor.visitInstallPlugin(self)
            else:
                return visitor.visitChildren(self)




    def installPlugin(self):

        localctx = SpeakQlParser.InstallPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_installPlugin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5159
            self.match(SpeakQlParser.INSTALL)
            self.state = 5160
            self.match(SpeakQlParser.PLUGIN)
            self.state = 5161
            self.uid()
            self.state = 5162
            self.match(SpeakQlParser.SONAME)
            self.state = 5163
            self.match(SpeakQlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UninstallPluginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNINSTALL(self):
            return self.getToken(SpeakQlParser.UNINSTALL, 0)

        def PLUGIN(self):
            return self.getToken(SpeakQlParser.PLUGIN, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_uninstallPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUninstallPlugin" ):
                listener.enterUninstallPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUninstallPlugin" ):
                listener.exitUninstallPlugin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUninstallPlugin" ):
                return visitor.visitUninstallPlugin(self)
            else:
                return visitor.visitChildren(self)




    def uninstallPlugin(self):

        localctx = SpeakQlParser.UninstallPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_uninstallPlugin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5165
            self.match(SpeakQlParser.UNINSTALL)
            self.state = 5166
            self.match(SpeakQlParser.PLUGIN)
            self.state = 5167
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_setStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SetTransactionContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setTransactionStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SetTransactionStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTransaction" ):
                listener.enterSetTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTransaction" ):
                listener.exitSetTransaction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTransaction" ):
                return visitor.visitSetTransaction(self)
            else:
                return visitor.visitChildren(self)


    class SetCharsetContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.SET)
            else:
                return self.getToken(SpeakQlParser.SET, i)
        def CHARACTER(self):
            return self.getToken(SpeakQlParser.CHARACTER, 0)
        def CHARSET(self):
            return self.getToken(SpeakQlParser.CHARSET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(SpeakQlParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetCharset" ):
                listener.enterSetCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetCharset" ):
                listener.exitSetCharset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetCharset" ):
                return visitor.visitSetCharset(self)
            else:
                return visitor.visitChildren(self)


    class SetNamesContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)
        def NAMES(self):
            return self.getToken(SpeakQlParser.NAMES, 0)
        def charsetName(self):
            return self.getTypedRuleContext(SpeakQlParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)
        def COLLATE(self):
            return self.getToken(SpeakQlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(SpeakQlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNames" ):
                listener.enterSetNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNames" ):
                listener.exitSetNames(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetNames" ):
                return visitor.visitSetNames(self)
            else:
                return visitor.visitChildren(self)


    class SetPasswordContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setPasswordStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SetPasswordStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPassword" ):
                listener.enterSetPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPassword" ):
                listener.exitSetPassword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetPassword" ):
                return visitor.visitSetPassword(self)
            else:
                return visitor.visitChildren(self)


    class SetAutocommitContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setAutocommitStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SetAutocommitStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAutocommit" ):
                listener.enterSetAutocommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAutocommit" ):
                listener.exitSetAutocommit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetAutocommit" ):
                return visitor.visitSetAutocommit(self)
            else:
                return visitor.visitChildren(self)


    class SetNewValueInsideTriggerContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)
        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.FullIdContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,i)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(SpeakQlParser.EQUAL_SYMBOL, i)
        def VAR_ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.VAR_ASSIGN)
            else:
                return self.getToken(SpeakQlParser.VAR_ASSIGN, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNewValueInsideTrigger" ):
                listener.enterSetNewValueInsideTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNewValueInsideTrigger" ):
                listener.exitSetNewValueInsideTrigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetNewValueInsideTrigger" ):
                return visitor.visitSetNewValueInsideTrigger(self)
            else:
                return visitor.visitChildren(self)


    class SetVariableContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)
        def variableClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.VariableClauseContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.VariableClauseContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,i)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(SpeakQlParser.EQUAL_SYMBOL, i)
        def VAR_ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.VAR_ASSIGN)
            else:
                return self.getToken(SpeakQlParser.VAR_ASSIGN, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetVariable" ):
                listener.enterSetVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetVariable" ):
                listener.exitSetVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetVariable" ):
                return visitor.visitSetVariable(self)
            else:
                return visitor.visitChildren(self)



    def setStatement(self):

        localctx = SpeakQlParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_setStatement)
        self._la = 0 # Token type
        try:
            self.state = 5220
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,738,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.SetVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5169
                self.match(SpeakQlParser.SET)
                self.state = 5170
                self.variableClause()
                self.state = 5171
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.VAR_ASSIGN or _la==SpeakQlParser.EQUAL_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5172
                self.expression(0)
                self.state = 5180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 5173
                    self.match(SpeakQlParser.COMMA)
                    self.state = 5174
                    self.variableClause()
                    self.state = 5175
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.VAR_ASSIGN or _la==SpeakQlParser.EQUAL_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5176
                    self.expression(0)
                    self.state = 5182
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = SpeakQlParser.SetCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5183
                self.match(SpeakQlParser.SET)
                self.state = 5187
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.CHARACTER]:
                    self.state = 5184
                    self.match(SpeakQlParser.CHARACTER)
                    self.state = 5185
                    self.match(SpeakQlParser.SET)
                    pass
                elif token in [SpeakQlParser.CHARSET]:
                    self.state = 5186
                    self.match(SpeakQlParser.CHARSET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5191
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.BINARY, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL]:
                    self.state = 5189
                    self.charsetName()
                    pass
                elif token in [SpeakQlParser.DEFAULT]:
                    self.state = 5190
                    self.match(SpeakQlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                localctx = SpeakQlParser.SetNamesContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5193
                self.match(SpeakQlParser.SET)
                self.state = 5194
                self.match(SpeakQlParser.NAMES)
                self.state = 5201
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.BINARY, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL]:
                    self.state = 5195
                    self.charsetName()
                    self.state = 5198
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SpeakQlParser.COLLATE:
                        self.state = 5196
                        self.match(SpeakQlParser.COLLATE)
                        self.state = 5197
                        self.collationName()


                    pass
                elif token in [SpeakQlParser.DEFAULT]:
                    self.state = 5200
                    self.match(SpeakQlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = SpeakQlParser.SetPasswordContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5203
                self.setPasswordStatement()
                pass

            elif la_ == 5:
                localctx = SpeakQlParser.SetTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5204
                self.setTransactionStatement()
                pass

            elif la_ == 6:
                localctx = SpeakQlParser.SetAutocommitContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5205
                self.setAutocommitStatement()
                pass

            elif la_ == 7:
                localctx = SpeakQlParser.SetNewValueInsideTriggerContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5206
                self.match(SpeakQlParser.SET)
                self.state = 5207
                self.fullId()
                self.state = 5208
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.VAR_ASSIGN or _la==SpeakQlParser.EQUAL_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5209
                self.expression(0)
                self.state = 5217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 5210
                    self.match(SpeakQlParser.COMMA)
                    self.state = 5211
                    self.fullId()
                    self.state = 5212
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.VAR_ASSIGN or _la==SpeakQlParser.EQUAL_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5213
                    self.expression(0)
                    self.state = 5219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_showStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ShowOpenTablesContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ShowStatementContext
            super().__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)
        def OPEN(self):
            return self.getToken(SpeakQlParser.OPEN, 0)
        def TABLES(self):
            return self.getToken(SpeakQlParser.TABLES, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(SpeakQlParser.ShowFilterContext,0)

        def FROM(self):
            return self.getToken(SpeakQlParser.FROM, 0)
        def IN(self):
            return self.getToken(SpeakQlParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowOpenTables" ):
                listener.enterShowOpenTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowOpenTables" ):
                listener.exitShowOpenTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowOpenTables" ):
                return visitor.visitShowOpenTables(self)
            else:
                return visitor.visitChildren(self)


    class ShowGlobalInfoContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)
        def showGlobalInfoClause(self):
            return self.getTypedRuleContext(SpeakQlParser.ShowGlobalInfoClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGlobalInfo" ):
                listener.enterShowGlobalInfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGlobalInfo" ):
                listener.exitShowGlobalInfo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowGlobalInfo" ):
                return visitor.visitShowGlobalInfo(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateFullIdObjectContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ShowStatementContext
            super().__init__(parser)
            self.namedEntity = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)
        def fullId(self):
            return self.getTypedRuleContext(SpeakQlParser.FullIdContext,0)

        def EVENT(self):
            return self.getToken(SpeakQlParser.EVENT, 0)
        def FUNCTION(self):
            return self.getToken(SpeakQlParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(SpeakQlParser.PROCEDURE, 0)
        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)
        def TRIGGER(self):
            return self.getToken(SpeakQlParser.TRIGGER, 0)
        def VIEW(self):
            return self.getToken(SpeakQlParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateFullIdObject" ):
                listener.enterShowCreateFullIdObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateFullIdObject" ):
                listener.exitShowCreateFullIdObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateFullIdObject" ):
                return visitor.visitShowCreateFullIdObject(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateUserContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)
        def USER(self):
            return self.getToken(SpeakQlParser.USER, 0)
        def userName(self):
            return self.getTypedRuleContext(SpeakQlParser.UserNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateUser" ):
                listener.enterShowCreateUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateUser" ):
                listener.exitShowCreateUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateUser" ):
                return visitor.visitShowCreateUser(self)
            else:
                return visitor.visitChildren(self)


    class ShowErrorsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ShowStatementContext
            super().__init__(parser)
            self.errorFormat = None # Token
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)
        def ERRORS(self):
            return self.getToken(SpeakQlParser.ERRORS, 0)
        def WARNINGS(self):
            return self.getToken(SpeakQlParser.WARNINGS, 0)
        def LIMIT(self):
            return self.getToken(SpeakQlParser.LIMIT, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,i)

        def COMMA(self):
            return self.getToken(SpeakQlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowErrors" ):
                listener.enterShowErrors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowErrors" ):
                listener.exitShowErrors(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowErrors" ):
                return visitor.visitShowErrors(self)
            else:
                return visitor.visitChildren(self)


    class ShowCountErrorsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ShowStatementContext
            super().__init__(parser)
            self.errorFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)
        def COUNT(self):
            return self.getToken(SpeakQlParser.COUNT, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def STAR(self):
            return self.getToken(SpeakQlParser.STAR, 0)
        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def ERRORS(self):
            return self.getToken(SpeakQlParser.ERRORS, 0)
        def WARNINGS(self):
            return self.getToken(SpeakQlParser.WARNINGS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCountErrors" ):
                listener.enterShowCountErrors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCountErrors" ):
                listener.exitShowCountErrors(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCountErrors" ):
                return visitor.visitShowCountErrors(self)
            else:
                return visitor.visitChildren(self)


    class ShowObjectFilterContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)
        def showCommonEntity(self):
            return self.getTypedRuleContext(SpeakQlParser.ShowCommonEntityContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(SpeakQlParser.ShowFilterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowObjectFilter" ):
                listener.enterShowObjectFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowObjectFilter" ):
                listener.exitShowObjectFilter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowObjectFilter" ):
                return visitor.visitShowObjectFilter(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateDbContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ShowStatementContext
            super().__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SpeakQlParser.CREATE, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def DATABASE(self):
            return self.getToken(SpeakQlParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(SpeakQlParser.SCHEMA, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(SpeakQlParser.IfNotExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateDb" ):
                listener.enterShowCreateDb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateDb" ):
                listener.exitShowCreateDb(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateDb" ):
                return visitor.visitShowCreateDb(self)
            else:
                return visitor.visitChildren(self)


    class ShowEngineContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ShowStatementContext
            super().__init__(parser)
            self.engineOption = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)
        def ENGINE(self):
            return self.getToken(SpeakQlParser.ENGINE, 0)
        def engineName(self):
            return self.getTypedRuleContext(SpeakQlParser.EngineNameContext,0)

        def STATUS(self):
            return self.getToken(SpeakQlParser.STATUS, 0)
        def MUTEX(self):
            return self.getToken(SpeakQlParser.MUTEX, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowEngine" ):
                listener.enterShowEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowEngine" ):
                listener.exitShowEngine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowEngine" ):
                return visitor.visitShowEngine(self)
            else:
                return visitor.visitChildren(self)


    class ShowSchemaFilterContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ShowStatementContext
            super().__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)
        def showSchemaEntity(self):
            return self.getTypedRuleContext(SpeakQlParser.ShowSchemaEntityContext,0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(SpeakQlParser.ShowFilterContext,0)

        def FROM(self):
            return self.getToken(SpeakQlParser.FROM, 0)
        def IN(self):
            return self.getToken(SpeakQlParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemaFilter" ):
                listener.enterShowSchemaFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemaFilter" ):
                listener.exitShowSchemaFilter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSchemaFilter" ):
                return visitor.visitShowSchemaFilter(self)
            else:
                return visitor.visitChildren(self)


    class ShowIndexesContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ShowStatementContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.tableFormat = None # Token
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)
        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)

        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)
        def INDEXES(self):
            return self.getToken(SpeakQlParser.INDEXES, 0)
        def KEYS(self):
            return self.getToken(SpeakQlParser.KEYS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.FROM)
            else:
                return self.getToken(SpeakQlParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.IN)
            else:
                return self.getToken(SpeakQlParser.IN, i)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def WHERE(self):
            return self.getToken(SpeakQlParser.WHERE, 0)
        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowIndexes" ):
                listener.enterShowIndexes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowIndexes" ):
                listener.exitShowIndexes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowIndexes" ):
                return visitor.visitShowIndexes(self)
            else:
                return visitor.visitChildren(self)


    class ShowLogEventsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ShowStatementContext
            super().__init__(parser)
            self.logFormat = None # Token
            self.filename = None # Token
            self.fromPosition = None # DecimalLiteralContext
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)
        def EVENTS(self):
            return self.getToken(SpeakQlParser.EVENTS, 0)
        def BINLOG(self):
            return self.getToken(SpeakQlParser.BINLOG, 0)
        def RELAYLOG(self):
            return self.getToken(SpeakQlParser.RELAYLOG, 0)
        def IN(self):
            return self.getToken(SpeakQlParser.IN, 0)
        def FROM(self):
            return self.getToken(SpeakQlParser.FROM, 0)
        def LIMIT(self):
            return self.getToken(SpeakQlParser.LIMIT, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,i)

        def COMMA(self):
            return self.getToken(SpeakQlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowLogEvents" ):
                listener.enterShowLogEvents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowLogEvents" ):
                listener.exitShowLogEvents(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowLogEvents" ):
                return visitor.visitShowLogEvents(self)
            else:
                return visitor.visitChildren(self)


    class ShowMasterLogsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ShowStatementContext
            super().__init__(parser)
            self.logFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)
        def LOGS(self):
            return self.getToken(SpeakQlParser.LOGS, 0)
        def BINARY(self):
            return self.getToken(SpeakQlParser.BINARY, 0)
        def MASTER(self):
            return self.getToken(SpeakQlParser.MASTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowMasterLogs" ):
                listener.enterShowMasterLogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowMasterLogs" ):
                listener.exitShowMasterLogs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowMasterLogs" ):
                return visitor.visitShowMasterLogs(self)
            else:
                return visitor.visitChildren(self)


    class ShowGrantsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)
        def GRANTS(self):
            return self.getToken(SpeakQlParser.GRANTS, 0)
        def FOR(self):
            return self.getToken(SpeakQlParser.FOR, 0)
        def userName(self):
            return self.getTypedRuleContext(SpeakQlParser.UserNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGrants" ):
                listener.enterShowGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGrants" ):
                listener.exitShowGrants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowGrants" ):
                return visitor.visitShowGrants(self)
            else:
                return visitor.visitChildren(self)


    class ShowSlaveStatusContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)
        def SLAVE(self):
            return self.getToken(SpeakQlParser.SLAVE, 0)
        def STATUS(self):
            return self.getToken(SpeakQlParser.STATUS, 0)
        def FOR(self):
            return self.getToken(SpeakQlParser.FOR, 0)
        def CHANNEL(self):
            return self.getToken(SpeakQlParser.CHANNEL, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSlaveStatus" ):
                listener.enterShowSlaveStatus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSlaveStatus" ):
                listener.exitShowSlaveStatus(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSlaveStatus" ):
                return visitor.visitShowSlaveStatus(self)
            else:
                return visitor.visitChildren(self)


    class ShowRoutineContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ShowStatementContext
            super().__init__(parser)
            self.routine = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)
        def CODE(self):
            return self.getToken(SpeakQlParser.CODE, 0)
        def fullId(self):
            return self.getTypedRuleContext(SpeakQlParser.FullIdContext,0)

        def FUNCTION(self):
            return self.getToken(SpeakQlParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(SpeakQlParser.PROCEDURE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoutine" ):
                listener.enterShowRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoutine" ):
                listener.exitShowRoutine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRoutine" ):
                return visitor.visitShowRoutine(self)
            else:
                return visitor.visitChildren(self)


    class ShowProfileContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ShowStatementContext
            super().__init__(parser)
            self.queryCount = None # DecimalLiteralContext
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)
        def PROFILE(self):
            return self.getToken(SpeakQlParser.PROFILE, 0)
        def showProfileType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ShowProfileTypeContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ShowProfileTypeContext,i)

        def LIMIT(self):
            return self.getToken(SpeakQlParser.LIMIT, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)
        def FOR(self):
            return self.getToken(SpeakQlParser.FOR, 0)
        def QUERY(self):
            return self.getToken(SpeakQlParser.QUERY, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProfile" ):
                listener.enterShowProfile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProfile" ):
                listener.exitShowProfile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowProfile" ):
                return visitor.visitShowProfile(self)
            else:
                return visitor.visitChildren(self)


    class ShowColumnsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ShowStatementContext
            super().__init__(parser)
            self.columnsFormat = None # Token
            self.tableFormat = None # Token
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SpeakQlParser.SHOW, 0)
        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)

        def COLUMNS(self):
            return self.getToken(SpeakQlParser.COLUMNS, 0)
        def FIELDS(self):
            return self.getToken(SpeakQlParser.FIELDS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.FROM)
            else:
                return self.getToken(SpeakQlParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.IN)
            else:
                return self.getToken(SpeakQlParser.IN, i)
        def FULL(self):
            return self.getToken(SpeakQlParser.FULL, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(SpeakQlParser.ShowFilterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowColumns" ):
                return visitor.visitShowColumns(self)
            else:
                return visitor.visitChildren(self)



    def showStatement(self):

        localctx = SpeakQlParser.ShowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_showStatement)
        self._la = 0 # Token type
        try:
            self.state = 5374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,760,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.ShowMasterLogsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5222
                self.match(SpeakQlParser.SHOW)
                self.state = 5223
                localctx.logFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.BINARY or _la==SpeakQlParser.MASTER):
                    localctx.logFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5224
                self.match(SpeakQlParser.LOGS)
                pass

            elif la_ == 2:
                localctx = SpeakQlParser.ShowLogEventsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5225
                self.match(SpeakQlParser.SHOW)
                self.state = 5226
                localctx.logFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.BINLOG or _la==SpeakQlParser.RELAYLOG):
                    localctx.logFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5227
                self.match(SpeakQlParser.EVENTS)
                self.state = 5230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.IN:
                    self.state = 5228
                    self.match(SpeakQlParser.IN)
                    self.state = 5229
                    localctx.filename = self.match(SpeakQlParser.STRING_LITERAL)


                self.state = 5234
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,740,self._ctx)
                if la_ == 1:
                    self.state = 5232
                    self.match(SpeakQlParser.FROM)
                    self.state = 5233
                    localctx.fromPosition = self.decimalLiteral()


                self.state = 5243
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,742,self._ctx)
                if la_ == 1:
                    self.state = 5236
                    self.match(SpeakQlParser.LIMIT)
                    self.state = 5240
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,741,self._ctx)
                    if la_ == 1:
                        self.state = 5237
                        localctx.offset = self.decimalLiteral()
                        self.state = 5238
                        self.match(SpeakQlParser.COMMA)


                    self.state = 5242
                    localctx.rowCount = self.decimalLiteral()


                pass

            elif la_ == 3:
                localctx = SpeakQlParser.ShowObjectFilterContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5245
                self.match(SpeakQlParser.SHOW)
                self.state = 5246
                self.showCommonEntity()
                self.state = 5248
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,743,self._ctx)
                if la_ == 1:
                    self.state = 5247
                    self.showFilter()


                pass

            elif la_ == 4:
                localctx = SpeakQlParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5250
                self.match(SpeakQlParser.SHOW)
                self.state = 5252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.FULL:
                    self.state = 5251
                    self.match(SpeakQlParser.FULL)


                self.state = 5254
                localctx.columnsFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.COLUMNS or _la==SpeakQlParser.FIELDS):
                    localctx.columnsFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5255
                localctx.tableFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.FROM or _la==SpeakQlParser.IN):
                    localctx.tableFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5256
                self.tableName()
                self.state = 5259
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,745,self._ctx)
                if la_ == 1:
                    self.state = 5257
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.FROM or _la==SpeakQlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5258
                    self.uid()


                self.state = 5262
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,746,self._ctx)
                if la_ == 1:
                    self.state = 5261
                    self.showFilter()


                pass

            elif la_ == 5:
                localctx = SpeakQlParser.ShowCreateDbContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5264
                self.match(SpeakQlParser.SHOW)
                self.state = 5265
                self.match(SpeakQlParser.CREATE)
                self.state = 5266
                localctx.schemaFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.DATABASE or _la==SpeakQlParser.SCHEMA):
                    localctx.schemaFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.IF:
                    self.state = 5267
                    self.ifNotExists()


                self.state = 5270
                self.uid()
                pass

            elif la_ == 6:
                localctx = SpeakQlParser.ShowCreateFullIdObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5271
                self.match(SpeakQlParser.SHOW)
                self.state = 5272
                self.match(SpeakQlParser.CREATE)
                self.state = 5273
                localctx.namedEntity = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (SpeakQlParser.PROCEDURE - 137)) | (1 << (SpeakQlParser.TABLE - 137)) | (1 << (SpeakQlParser.TRIGGER - 137)))) != 0) or _la==SpeakQlParser.EVENT or _la==SpeakQlParser.FUNCTION or _la==SpeakQlParser.VIEW):
                    localctx.namedEntity = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5274
                self.fullId()
                pass

            elif la_ == 7:
                localctx = SpeakQlParser.ShowCreateUserContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5275
                self.match(SpeakQlParser.SHOW)
                self.state = 5276
                self.match(SpeakQlParser.CREATE)
                self.state = 5277
                self.match(SpeakQlParser.USER)
                self.state = 5278
                self.userName()
                pass

            elif la_ == 8:
                localctx = SpeakQlParser.ShowEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 5279
                self.match(SpeakQlParser.SHOW)
                self.state = 5280
                self.match(SpeakQlParser.ENGINE)
                self.state = 5281
                self.engineName()
                self.state = 5282
                localctx.engineOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.MUTEX or _la==SpeakQlParser.STATUS):
                    localctx.engineOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                localctx = SpeakQlParser.ShowGlobalInfoContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 5284
                self.match(SpeakQlParser.SHOW)
                self.state = 5285
                self.showGlobalInfoClause()
                pass

            elif la_ == 10:
                localctx = SpeakQlParser.ShowErrorsContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 5286
                self.match(SpeakQlParser.SHOW)
                self.state = 5287
                localctx.errorFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.ERRORS or _la==SpeakQlParser.WARNINGS):
                    localctx.errorFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

                self.state = 5288
                self.match(SpeakQlParser.LIMIT)
                self.state = 5292
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,748,self._ctx)
                if la_ == 1:
                    self.state = 5289
                    localctx.offset = self.decimalLiteral()
                    self.state = 5290
                    self.match(SpeakQlParser.COMMA)


                self.state = 5294
                localctx.rowCount = self.decimalLiteral()
                pass

            elif la_ == 11:
                localctx = SpeakQlParser.ShowCountErrorsContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 5295
                self.match(SpeakQlParser.SHOW)
                self.state = 5296
                self.match(SpeakQlParser.COUNT)
                self.state = 5297
                self.leftParen()
                self.state = 5298
                self.match(SpeakQlParser.STAR)
                self.state = 5299
                self.rightParen()
                self.state = 5300
                localctx.errorFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.ERRORS or _la==SpeakQlParser.WARNINGS):
                    localctx.errorFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 12:
                localctx = SpeakQlParser.ShowSchemaFilterContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 5302
                self.match(SpeakQlParser.SHOW)
                self.state = 5303
                self.showSchemaEntity()
                self.state = 5306
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,749,self._ctx)
                if la_ == 1:
                    self.state = 5304
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.FROM or _la==SpeakQlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5305
                    self.uid()


                self.state = 5309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,750,self._ctx)
                if la_ == 1:
                    self.state = 5308
                    self.showFilter()


                pass

            elif la_ == 13:
                localctx = SpeakQlParser.ShowRoutineContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 5311
                self.match(SpeakQlParser.SHOW)
                self.state = 5312
                localctx.routine = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.PROCEDURE or _la==SpeakQlParser.FUNCTION):
                    localctx.routine = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5313
                self.match(SpeakQlParser.CODE)
                self.state = 5314
                self.fullId()
                pass

            elif la_ == 14:
                localctx = SpeakQlParser.ShowGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 5315
                self.match(SpeakQlParser.SHOW)
                self.state = 5316
                self.match(SpeakQlParser.GRANTS)
                self.state = 5319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.FOR:
                    self.state = 5317
                    self.match(SpeakQlParser.FOR)
                    self.state = 5318
                    self.userName()


                pass

            elif la_ == 15:
                localctx = SpeakQlParser.ShowIndexesContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 5321
                self.match(SpeakQlParser.SHOW)
                self.state = 5322
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEYS or _la==SpeakQlParser.INDEXES):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5323
                localctx.tableFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.FROM or _la==SpeakQlParser.IN):
                    localctx.tableFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5324
                self.tableName()
                self.state = 5327
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,752,self._ctx)
                if la_ == 1:
                    self.state = 5325
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.FROM or _la==SpeakQlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5326
                    self.uid()


                self.state = 5331
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,753,self._ctx)
                if la_ == 1:
                    self.state = 5329
                    self.match(SpeakQlParser.WHERE)
                    self.state = 5330
                    self.expression(0)


                pass

            elif la_ == 16:
                localctx = SpeakQlParser.ShowOpenTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 5333
                self.match(SpeakQlParser.SHOW)
                self.state = 5334
                self.match(SpeakQlParser.OPEN)
                self.state = 5335
                self.match(SpeakQlParser.TABLES)
                self.state = 5338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,754,self._ctx)
                if la_ == 1:
                    self.state = 5336
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.FROM or _la==SpeakQlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5337
                    self.uid()


                self.state = 5341
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,755,self._ctx)
                if la_ == 1:
                    self.state = 5340
                    self.showFilter()


                pass

            elif la_ == 17:
                localctx = SpeakQlParser.ShowProfileContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 5343
                self.match(SpeakQlParser.SHOW)
                self.state = 5344
                self.match(SpeakQlParser.PROFILE)
                self.state = 5345
                self.showProfileType()
                self.state = 5350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 5346
                    self.match(SpeakQlParser.COMMA)
                    self.state = 5347
                    self.showProfileType()
                    self.state = 5352
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.FOR:
                    self.state = 5353
                    self.match(SpeakQlParser.FOR)
                    self.state = 5354
                    self.match(SpeakQlParser.QUERY)
                    self.state = 5355
                    localctx.queryCount = self.decimalLiteral()


                self.state = 5358
                self.match(SpeakQlParser.LIMIT)
                self.state = 5362
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,758,self._ctx)
                if la_ == 1:
                    self.state = 5359
                    localctx.offset = self.decimalLiteral()
                    self.state = 5360
                    self.match(SpeakQlParser.COMMA)


                self.state = 5364
                localctx.rowCount = self.decimalLiteral()
                pass

            elif la_ == 18:
                localctx = SpeakQlParser.ShowSlaveStatusContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 5366
                self.match(SpeakQlParser.SHOW)
                self.state = 5367
                self.match(SpeakQlParser.SLAVE)
                self.state = 5368
                self.match(SpeakQlParser.STATUS)
                self.state = 5372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.FOR:
                    self.state = 5369
                    self.match(SpeakQlParser.FOR)
                    self.state = 5370
                    self.match(SpeakQlParser.CHANNEL)
                    self.state = 5371
                    self.match(SpeakQlParser.STRING_LITERAL)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(SpeakQlParser.LOCAL_ID, 0)

        def GLOBAL_ID(self):
            return self.getToken(SpeakQlParser.GLOBAL_ID, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def GLOBAL(self):
            return self.getToken(SpeakQlParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(SpeakQlParser.SESSION, 0)

        def LOCAL(self):
            return self.getToken(SpeakQlParser.LOCAL, 0)

        def AT_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.AT_SIGN)
            else:
                return self.getToken(SpeakQlParser.AT_SIGN, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_variableClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableClause" ):
                listener.enterVariableClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableClause" ):
                listener.exitVariableClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableClause" ):
                return visitor.visitVariableClause(self)
            else:
                return visitor.visitChildren(self)




    def variableClause(self):

        localctx = SpeakQlParser.VariableClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_variableClause)
        self._la = 0 # Token type
        try:
            self.state = 5386
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5376
                self.match(SpeakQlParser.LOCAL_ID)
                pass
            elif token in [SpeakQlParser.GLOBAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5377
                self.match(SpeakQlParser.GLOBAL_ID)
                pass
            elif token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.AT_SIGN, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.OPTIONAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5383
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,762,self._ctx)
                if la_ == 1:
                    self.state = 5380
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SpeakQlParser.AT_SIGN:
                        self.state = 5378
                        self.match(SpeakQlParser.AT_SIGN)
                        self.state = 5379
                        self.match(SpeakQlParser.AT_SIGN)


                    self.state = 5382
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.GLOBAL or _la==SpeakQlParser.LOCAL or _la==SpeakQlParser.SESSION):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5385
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCommonEntityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(SpeakQlParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)

        def COLLATION(self):
            return self.getToken(SpeakQlParser.COLLATION, 0)

        def DATABASES(self):
            return self.getToken(SpeakQlParser.DATABASES, 0)

        def SCHEMAS(self):
            return self.getToken(SpeakQlParser.SCHEMAS, 0)

        def FUNCTION(self):
            return self.getToken(SpeakQlParser.FUNCTION, 0)

        def STATUS(self):
            return self.getToken(SpeakQlParser.STATUS, 0)

        def PROCEDURE(self):
            return self.getToken(SpeakQlParser.PROCEDURE, 0)

        def VARIABLES(self):
            return self.getToken(SpeakQlParser.VARIABLES, 0)

        def GLOBAL(self):
            return self.getToken(SpeakQlParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(SpeakQlParser.SESSION, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_showCommonEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCommonEntity" ):
                listener.enterShowCommonEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCommonEntity" ):
                listener.exitShowCommonEntity(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCommonEntity" ):
                return visitor.visitShowCommonEntity(self)
            else:
                return visitor.visitChildren(self)




    def showCommonEntity(self):

        localctx = SpeakQlParser.ShowCommonEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_showCommonEntity)
        self._la = 0 # Token type
        try:
            self.state = 5401
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.CHARACTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5388
                self.match(SpeakQlParser.CHARACTER)
                self.state = 5389
                self.match(SpeakQlParser.SET)
                pass
            elif token in [SpeakQlParser.COLLATION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5390
                self.match(SpeakQlParser.COLLATION)
                pass
            elif token in [SpeakQlParser.DATABASES]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5391
                self.match(SpeakQlParser.DATABASES)
                pass
            elif token in [SpeakQlParser.SCHEMAS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5392
                self.match(SpeakQlParser.SCHEMAS)
                pass
            elif token in [SpeakQlParser.FUNCTION]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5393
                self.match(SpeakQlParser.FUNCTION)
                self.state = 5394
                self.match(SpeakQlParser.STATUS)
                pass
            elif token in [SpeakQlParser.PROCEDURE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5395
                self.match(SpeakQlParser.PROCEDURE)
                self.state = 5396
                self.match(SpeakQlParser.STATUS)
                pass
            elif token in [SpeakQlParser.GLOBAL, SpeakQlParser.SESSION, SpeakQlParser.STATUS, SpeakQlParser.VARIABLES]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.GLOBAL or _la==SpeakQlParser.SESSION:
                    self.state = 5397
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.GLOBAL or _la==SpeakQlParser.SESSION):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5400
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.STATUS or _la==SpeakQlParser.VARIABLES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowFilterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(SpeakQlParser.LIKE, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def WHERE(self):
            return self.getToken(SpeakQlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_showFilter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFilter" ):
                listener.enterShowFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFilter" ):
                listener.exitShowFilter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowFilter" ):
                return visitor.visitShowFilter(self)
            else:
                return visitor.visitChildren(self)




    def showFilter(self):

        localctx = SpeakQlParser.ShowFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_showFilter)
        try:
            self.state = 5407
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.LIKE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5403
                self.match(SpeakQlParser.LIKE)
                self.state = 5404
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.WHERE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5405
                self.match(SpeakQlParser.WHERE)
                self.state = 5406
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowGlobalInfoClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENGINES(self):
            return self.getToken(SpeakQlParser.ENGINES, 0)

        def STORAGE(self):
            return self.getToken(SpeakQlParser.STORAGE, 0)

        def MASTER(self):
            return self.getToken(SpeakQlParser.MASTER, 0)

        def STATUS(self):
            return self.getToken(SpeakQlParser.STATUS, 0)

        def PLUGINS(self):
            return self.getToken(SpeakQlParser.PLUGINS, 0)

        def PRIVILEGES(self):
            return self.getToken(SpeakQlParser.PRIVILEGES, 0)

        def PROCESSLIST(self):
            return self.getToken(SpeakQlParser.PROCESSLIST, 0)

        def FULL(self):
            return self.getToken(SpeakQlParser.FULL, 0)

        def PROFILES(self):
            return self.getToken(SpeakQlParser.PROFILES, 0)

        def SLAVE(self):
            return self.getToken(SpeakQlParser.SLAVE, 0)

        def HOSTS(self):
            return self.getToken(SpeakQlParser.HOSTS, 0)

        def AUTHORS(self):
            return self.getToken(SpeakQlParser.AUTHORS, 0)

        def CONTRIBUTORS(self):
            return self.getToken(SpeakQlParser.CONTRIBUTORS, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_showGlobalInfoClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGlobalInfoClause" ):
                listener.enterShowGlobalInfoClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGlobalInfoClause" ):
                listener.exitShowGlobalInfoClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowGlobalInfoClause" ):
                return visitor.visitShowGlobalInfoClause(self)
            else:
                return visitor.visitChildren(self)




    def showGlobalInfoClause(self):

        localctx = SpeakQlParser.ShowGlobalInfoClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_showGlobalInfoClause)
        self._la = 0 # Token type
        try:
            self.state = 5426
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.ENGINES, SpeakQlParser.STORAGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.STORAGE:
                    self.state = 5409
                    self.match(SpeakQlParser.STORAGE)


                self.state = 5412
                self.match(SpeakQlParser.ENGINES)
                pass
            elif token in [SpeakQlParser.MASTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5413
                self.match(SpeakQlParser.MASTER)
                self.state = 5414
                self.match(SpeakQlParser.STATUS)
                pass
            elif token in [SpeakQlParser.PLUGINS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5415
                self.match(SpeakQlParser.PLUGINS)
                pass
            elif token in [SpeakQlParser.PRIVILEGES]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5416
                self.match(SpeakQlParser.PRIVILEGES)
                pass
            elif token in [SpeakQlParser.FULL, SpeakQlParser.PROCESSLIST]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.FULL:
                    self.state = 5417
                    self.match(SpeakQlParser.FULL)


                self.state = 5420
                self.match(SpeakQlParser.PROCESSLIST)
                pass
            elif token in [SpeakQlParser.PROFILES]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5421
                self.match(SpeakQlParser.PROFILES)
                pass
            elif token in [SpeakQlParser.SLAVE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5422
                self.match(SpeakQlParser.SLAVE)
                self.state = 5423
                self.match(SpeakQlParser.HOSTS)
                pass
            elif token in [SpeakQlParser.AUTHORS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5424
                self.match(SpeakQlParser.AUTHORS)
                pass
            elif token in [SpeakQlParser.CONTRIBUTORS]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5425
                self.match(SpeakQlParser.CONTRIBUTORS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowSchemaEntityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENTS(self):
            return self.getToken(SpeakQlParser.EVENTS, 0)

        def TABLE(self):
            return self.getToken(SpeakQlParser.TABLE, 0)

        def STATUS(self):
            return self.getToken(SpeakQlParser.STATUS, 0)

        def TABLES(self):
            return self.getToken(SpeakQlParser.TABLES, 0)

        def FULL(self):
            return self.getToken(SpeakQlParser.FULL, 0)

        def TRIGGERS(self):
            return self.getToken(SpeakQlParser.TRIGGERS, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_showSchemaEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemaEntity" ):
                listener.enterShowSchemaEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemaEntity" ):
                listener.exitShowSchemaEntity(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSchemaEntity" ):
                return visitor.visitShowSchemaEntity(self)
            else:
                return visitor.visitChildren(self)




    def showSchemaEntity(self):

        localctx = SpeakQlParser.ShowSchemaEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_showSchemaEntity)
        self._la = 0 # Token type
        try:
            self.state = 5436
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.EVENTS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5428
                self.match(SpeakQlParser.EVENTS)
                pass
            elif token in [SpeakQlParser.TABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5429
                self.match(SpeakQlParser.TABLE)
                self.state = 5430
                self.match(SpeakQlParser.STATUS)
                pass
            elif token in [SpeakQlParser.FULL, SpeakQlParser.TABLES]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.FULL:
                    self.state = 5431
                    self.match(SpeakQlParser.FULL)


                self.state = 5434
                self.match(SpeakQlParser.TABLES)
                pass
            elif token in [SpeakQlParser.TRIGGERS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5435
                self.match(SpeakQlParser.TRIGGERS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowProfileTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)

        def BLOCK(self):
            return self.getToken(SpeakQlParser.BLOCK, 0)

        def IO(self):
            return self.getToken(SpeakQlParser.IO, 0)

        def CONTEXT(self):
            return self.getToken(SpeakQlParser.CONTEXT, 0)

        def SWITCHES(self):
            return self.getToken(SpeakQlParser.SWITCHES, 0)

        def CPU(self):
            return self.getToken(SpeakQlParser.CPU, 0)

        def IPC(self):
            return self.getToken(SpeakQlParser.IPC, 0)

        def MEMORY(self):
            return self.getToken(SpeakQlParser.MEMORY, 0)

        def PAGE(self):
            return self.getToken(SpeakQlParser.PAGE, 0)

        def FAULTS(self):
            return self.getToken(SpeakQlParser.FAULTS, 0)

        def SOURCE(self):
            return self.getToken(SpeakQlParser.SOURCE, 0)

        def SWAPS(self):
            return self.getToken(SpeakQlParser.SWAPS, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_showProfileType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProfileType" ):
                listener.enterShowProfileType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProfileType" ):
                listener.exitShowProfileType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowProfileType" ):
                return visitor.visitShowProfileType(self)
            else:
                return visitor.visitChildren(self)




    def showProfileType(self):

        localctx = SpeakQlParser.ShowProfileTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_showProfileType)
        try:
            self.state = 5450
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5438
                self.match(SpeakQlParser.ALL)
                pass
            elif token in [SpeakQlParser.BLOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5439
                self.match(SpeakQlParser.BLOCK)
                self.state = 5440
                self.match(SpeakQlParser.IO)
                pass
            elif token in [SpeakQlParser.CONTEXT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5441
                self.match(SpeakQlParser.CONTEXT)
                self.state = 5442
                self.match(SpeakQlParser.SWITCHES)
                pass
            elif token in [SpeakQlParser.CPU]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5443
                self.match(SpeakQlParser.CPU)
                pass
            elif token in [SpeakQlParser.IPC]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5444
                self.match(SpeakQlParser.IPC)
                pass
            elif token in [SpeakQlParser.MEMORY]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5445
                self.match(SpeakQlParser.MEMORY)
                pass
            elif token in [SpeakQlParser.PAGE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5446
                self.match(SpeakQlParser.PAGE)
                self.state = 5447
                self.match(SpeakQlParser.FAULTS)
                pass
            elif token in [SpeakQlParser.SOURCE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5448
                self.match(SpeakQlParser.SOURCE)
                pass
            elif token in [SpeakQlParser.SWAPS]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5449
                self.match(SpeakQlParser.SWAPS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinlogStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINLOG(self):
            return self.getToken(SpeakQlParser.BINLOG, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_binlogStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinlogStatement" ):
                listener.enterBinlogStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinlogStatement" ):
                listener.exitBinlogStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinlogStatement" ):
                return visitor.visitBinlogStatement(self)
            else:
                return visitor.visitChildren(self)




    def binlogStatement(self):

        localctx = SpeakQlParser.BinlogStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_binlogStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5452
            self.match(SpeakQlParser.BINLOG)
            self.state = 5453
            self.match(SpeakQlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CacheIndexStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # UidContext

        def CACHE(self):
            return self.getToken(SpeakQlParser.CACHE, 0)

        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)

        def tableIndexes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.TableIndexesContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.TableIndexesContext,i)


        def IN(self):
            return self.getToken(SpeakQlParser.IN, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)


        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_cacheIndexStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCacheIndexStatement" ):
                listener.enterCacheIndexStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCacheIndexStatement" ):
                listener.exitCacheIndexStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCacheIndexStatement" ):
                return visitor.visitCacheIndexStatement(self)
            else:
                return visitor.visitChildren(self)




    def cacheIndexStatement(self):

        localctx = SpeakQlParser.CacheIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_cacheIndexStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5455
            self.match(SpeakQlParser.CACHE)
            self.state = 5456
            self.match(SpeakQlParser.INDEX)
            self.state = 5457
            self.tableIndexes()
            self.state = 5462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 5458
                self.match(SpeakQlParser.COMMA)
                self.state = 5459
                self.tableIndexes()
                self.state = 5464
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.PARTITION:
                self.state = 5465
                self.match(SpeakQlParser.PARTITION)
                self.state = 5466
                self.leftParen()
                self.state = 5469
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.OPTIONAL]:
                    self.state = 5467
                    self.uidList()
                    pass
                elif token in [SpeakQlParser.ALL]:
                    self.state = 5468
                    self.match(SpeakQlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5471
                self.rightParen()


            self.state = 5475
            self.match(SpeakQlParser.IN)
            self.state = 5476
            localctx.schema = self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.flushFormat = None # Token

        def FLUSH(self):
            return self.getToken(SpeakQlParser.FLUSH, 0)

        def flushOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.FlushOptionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.FlushOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(SpeakQlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(SpeakQlParser.LOCAL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_flushStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushStatement" ):
                listener.enterFlushStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushStatement" ):
                listener.exitFlushStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlushStatement" ):
                return visitor.visitFlushStatement(self)
            else:
                return visitor.visitChildren(self)




    def flushStatement(self):

        localctx = SpeakQlParser.FlushStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_flushStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5478
            self.match(SpeakQlParser.FLUSH)
            self.state = 5480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.NO_WRITE_TO_BINLOG or _la==SpeakQlParser.LOCAL:
                self.state = 5479
                localctx.flushFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.NO_WRITE_TO_BINLOG or _la==SpeakQlParser.LOCAL):
                    localctx.flushFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5482
            self.flushOption()
            self.state = 5487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 5483
                self.match(SpeakQlParser.COMMA)
                self.state = 5484
                self.flushOption()
                self.state = 5489
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KillStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.connectionFormat = None # Token

        def KILL(self):
            return self.getToken(SpeakQlParser.KILL, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,i)


        def CONNECTION(self):
            return self.getToken(SpeakQlParser.CONNECTION, 0)

        def QUERY(self):
            return self.getToken(SpeakQlParser.QUERY, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_killStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKillStatement" ):
                listener.enterKillStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKillStatement" ):
                listener.exitKillStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKillStatement" ):
                return visitor.visitKillStatement(self)
            else:
                return visitor.visitChildren(self)




    def killStatement(self):

        localctx = SpeakQlParser.KillStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_killStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5490
            self.match(SpeakQlParser.KILL)
            self.state = 5492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.CONNECTION or _la==SpeakQlParser.QUERY:
                self.state = 5491
                localctx.connectionFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.CONNECTION or _la==SpeakQlParser.QUERY):
                    localctx.connectionFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5495 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5494
                self.decimalLiteral()
                self.state = 5497 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & ((1 << (SpeakQlParser.ZERO_DECIMAL - 1103)) | (1 << (SpeakQlParser.ONE_DECIMAL - 1103)) | (1 << (SpeakQlParser.TWO_DECIMAL - 1103)) | (1 << (SpeakQlParser.DECIMAL_LITERAL - 1103)) | (1 << (SpeakQlParser.REAL_LITERAL - 1103)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadIndexIntoCacheContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(SpeakQlParser.LOAD, 0)

        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)

        def INTO(self):
            return self.getToken(SpeakQlParser.INTO, 0)

        def CACHE(self):
            return self.getToken(SpeakQlParser.CACHE, 0)

        def loadedTableIndexes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.LoadedTableIndexesContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.LoadedTableIndexesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_loadIndexIntoCache

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadIndexIntoCache" ):
                listener.enterLoadIndexIntoCache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadIndexIntoCache" ):
                listener.exitLoadIndexIntoCache(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadIndexIntoCache" ):
                return visitor.visitLoadIndexIntoCache(self)
            else:
                return visitor.visitChildren(self)




    def loadIndexIntoCache(self):

        localctx = SpeakQlParser.LoadIndexIntoCacheContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_loadIndexIntoCache)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5499
            self.match(SpeakQlParser.LOAD)
            self.state = 5500
            self.match(SpeakQlParser.INDEX)
            self.state = 5501
            self.match(SpeakQlParser.INTO)
            self.state = 5502
            self.match(SpeakQlParser.CACHE)
            self.state = 5503
            self.loadedTableIndexes()
            self.state = 5508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 5504
                self.match(SpeakQlParser.COMMA)
                self.state = 5505
                self.loadedTableIndexes()
                self.state = 5510
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(SpeakQlParser.RESET, 0)

        def QUERY(self):
            return self.getToken(SpeakQlParser.QUERY, 0)

        def CACHE(self):
            return self.getToken(SpeakQlParser.CACHE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_resetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetStatement" ):
                listener.enterResetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetStatement" ):
                listener.exitResetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetStatement" ):
                return visitor.visitResetStatement(self)
            else:
                return visitor.visitChildren(self)




    def resetStatement(self):

        localctx = SpeakQlParser.ResetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_resetStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5511
            self.match(SpeakQlParser.RESET)
            self.state = 5512
            self.match(SpeakQlParser.QUERY)
            self.state = 5513
            self.match(SpeakQlParser.CACHE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShutdownStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHUTDOWN(self):
            return self.getToken(SpeakQlParser.SHUTDOWN, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_shutdownStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShutdownStatement" ):
                listener.enterShutdownStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShutdownStatement" ):
                listener.exitShutdownStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShutdownStatement" ):
                return visitor.visitShutdownStatement(self)
            else:
                return visitor.visitChildren(self)




    def shutdownStatement(self):

        localctx = SpeakQlParser.ShutdownStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_shutdownStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5515
            self.match(SpeakQlParser.SHUTDOWN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIndexesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexFormat = None # Token

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def uidList(self):
            return self.getTypedRuleContext(SpeakQlParser.UidListContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)

        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_tableIndexes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIndexes" ):
                listener.enterTableIndexes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIndexes" ):
                listener.exitTableIndexes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIndexes" ):
                return visitor.visitTableIndexes(self)
            else:
                return visitor.visitChildren(self)




    def tableIndexes(self):

        localctx = SpeakQlParser.TableIndexesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_tableIndexes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5517
            self.tableName()
            self.state = 5525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEY or _la==SpeakQlParser.LR_BRACKET:
                self.state = 5519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEY:
                    self.state = 5518
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5521
                self.leftParen()
                self.state = 5522
                self.uidList()
                self.state = 5523
                self.rightParen()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_flushOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.FlushOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLES(self):
            return self.getToken(SpeakQlParser.TABLES, 0)
        def tables(self):
            return self.getTypedRuleContext(SpeakQlParser.TablesContext,0)

        def flushTableOption(self):
            return self.getTypedRuleContext(SpeakQlParser.FlushTableOptionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFlushOption" ):
                listener.enterTableFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFlushOption" ):
                listener.exitTableFlushOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFlushOption" ):
                return visitor.visitTableFlushOption(self)
            else:
                return visitor.visitChildren(self)


    class ChannelFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.FlushOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RELAY(self):
            return self.getToken(SpeakQlParser.RELAY, 0)
        def LOGS(self):
            return self.getToken(SpeakQlParser.LOGS, 0)
        def channelOption(self):
            return self.getTypedRuleContext(SpeakQlParser.ChannelOptionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannelFlushOption" ):
                listener.enterChannelFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannelFlushOption" ):
                listener.exitChannelFlushOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChannelFlushOption" ):
                return visitor.visitChannelFlushOption(self)
            else:
                return visitor.visitChildren(self)


    class SimpleFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.FlushOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DES_KEY_FILE(self):
            return self.getToken(SpeakQlParser.DES_KEY_FILE, 0)
        def HOSTS(self):
            return self.getToken(SpeakQlParser.HOSTS, 0)
        def LOGS(self):
            return self.getToken(SpeakQlParser.LOGS, 0)
        def OPTIMIZER_COSTS(self):
            return self.getToken(SpeakQlParser.OPTIMIZER_COSTS, 0)
        def PRIVILEGES(self):
            return self.getToken(SpeakQlParser.PRIVILEGES, 0)
        def QUERY(self):
            return self.getToken(SpeakQlParser.QUERY, 0)
        def CACHE(self):
            return self.getToken(SpeakQlParser.CACHE, 0)
        def STATUS(self):
            return self.getToken(SpeakQlParser.STATUS, 0)
        def USER_RESOURCES(self):
            return self.getToken(SpeakQlParser.USER_RESOURCES, 0)
        def TABLES(self):
            return self.getToken(SpeakQlParser.TABLES, 0)
        def WITH(self):
            return self.getToken(SpeakQlParser.WITH, 0)
        def READ(self):
            return self.getToken(SpeakQlParser.READ, 0)
        def LOCK(self):
            return self.getToken(SpeakQlParser.LOCK, 0)
        def BINARY(self):
            return self.getToken(SpeakQlParser.BINARY, 0)
        def ENGINE(self):
            return self.getToken(SpeakQlParser.ENGINE, 0)
        def ERROR(self):
            return self.getToken(SpeakQlParser.ERROR, 0)
        def GENERAL(self):
            return self.getToken(SpeakQlParser.GENERAL, 0)
        def RELAY(self):
            return self.getToken(SpeakQlParser.RELAY, 0)
        def SLOW(self):
            return self.getToken(SpeakQlParser.SLOW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFlushOption" ):
                listener.enterSimpleFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFlushOption" ):
                listener.exitSimpleFlushOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleFlushOption" ):
                return visitor.visitSimpleFlushOption(self)
            else:
                return visitor.visitChildren(self)



    def flushOption(self):

        localctx = SpeakQlParser.FlushOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_flushOption)
        self._la = 0 # Token type
        try:
            self.state = 5557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,788,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.SimpleFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5545
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.DES_KEY_FILE]:
                    self.state = 5527
                    self.match(SpeakQlParser.DES_KEY_FILE)
                    pass
                elif token in [SpeakQlParser.HOSTS]:
                    self.state = 5528
                    self.match(SpeakQlParser.HOSTS)
                    pass
                elif token in [SpeakQlParser.BINARY, SpeakQlParser.ENGINE, SpeakQlParser.ERROR, SpeakQlParser.GENERAL, SpeakQlParser.LOGS, SpeakQlParser.RELAY, SpeakQlParser.SLOW]:
                    self.state = 5530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SpeakQlParser.BINARY or ((((_la - 405)) & ~0x3f) == 0 and ((1 << (_la - 405)) & ((1 << (SpeakQlParser.ENGINE - 405)) | (1 << (SpeakQlParser.ERROR - 405)) | (1 << (SpeakQlParser.GENERAL - 405)))) != 0) or _la==SpeakQlParser.RELAY or _la==SpeakQlParser.SLOW:
                        self.state = 5529
                        _la = self._input.LA(1)
                        if not(_la==SpeakQlParser.BINARY or ((((_la - 405)) & ~0x3f) == 0 and ((1 << (_la - 405)) & ((1 << (SpeakQlParser.ENGINE - 405)) | (1 << (SpeakQlParser.ERROR - 405)) | (1 << (SpeakQlParser.GENERAL - 405)))) != 0) or _la==SpeakQlParser.RELAY or _la==SpeakQlParser.SLOW):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 5532
                    self.match(SpeakQlParser.LOGS)
                    pass
                elif token in [SpeakQlParser.OPTIMIZER_COSTS]:
                    self.state = 5533
                    self.match(SpeakQlParser.OPTIMIZER_COSTS)
                    pass
                elif token in [SpeakQlParser.PRIVILEGES]:
                    self.state = 5534
                    self.match(SpeakQlParser.PRIVILEGES)
                    pass
                elif token in [SpeakQlParser.QUERY]:
                    self.state = 5535
                    self.match(SpeakQlParser.QUERY)
                    self.state = 5536
                    self.match(SpeakQlParser.CACHE)
                    pass
                elif token in [SpeakQlParser.STATUS]:
                    self.state = 5537
                    self.match(SpeakQlParser.STATUS)
                    pass
                elif token in [SpeakQlParser.USER_RESOURCES]:
                    self.state = 5538
                    self.match(SpeakQlParser.USER_RESOURCES)
                    pass
                elif token in [SpeakQlParser.TABLES]:
                    self.state = 5539
                    self.match(SpeakQlParser.TABLES)
                    self.state = 5543
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SpeakQlParser.WITH:
                        self.state = 5540
                        self.match(SpeakQlParser.WITH)
                        self.state = 5541
                        self.match(SpeakQlParser.READ)
                        self.state = 5542
                        self.match(SpeakQlParser.LOCK)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = SpeakQlParser.ChannelFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5547
                self.match(SpeakQlParser.RELAY)
                self.state = 5548
                self.match(SpeakQlParser.LOGS)
                self.state = 5550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.FOR:
                    self.state = 5549
                    self.channelOption()


                pass

            elif la_ == 3:
                localctx = SpeakQlParser.TableFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5552
                self.match(SpeakQlParser.TABLES)
                self.state = 5553
                self.tables()
                self.state = 5555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.FOR or _la==SpeakQlParser.WITH:
                    self.state = 5554
                    self.flushTableOption()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushTableOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SpeakQlParser.WITH, 0)

        def READ(self):
            return self.getToken(SpeakQlParser.READ, 0)

        def LOCK(self):
            return self.getToken(SpeakQlParser.LOCK, 0)

        def FOR(self):
            return self.getToken(SpeakQlParser.FOR, 0)

        def EXPORT(self):
            return self.getToken(SpeakQlParser.EXPORT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_flushTableOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushTableOption" ):
                listener.enterFlushTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushTableOption" ):
                listener.exitFlushTableOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlushTableOption" ):
                return visitor.visitFlushTableOption(self)
            else:
                return visitor.visitChildren(self)




    def flushTableOption(self):

        localctx = SpeakQlParser.FlushTableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_flushTableOption)
        try:
            self.state = 5564
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5559
                self.match(SpeakQlParser.WITH)
                self.state = 5560
                self.match(SpeakQlParser.READ)
                self.state = 5561
                self.match(SpeakQlParser.LOCK)
                pass
            elif token in [SpeakQlParser.FOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5562
                self.match(SpeakQlParser.FOR)
                self.state = 5563
                self.match(SpeakQlParser.EXPORT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadedTableIndexesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partitionList = None # UidListContext
            self.indexFormat = None # Token
            self.indexList = None # UidListContext

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)

        def leftParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.LeftParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,i)


        def rightParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.RightParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.RightParenContext,i)


        def IGNORE(self):
            return self.getToken(SpeakQlParser.IGNORE, 0)

        def LEAVES(self):
            return self.getToken(SpeakQlParser.LEAVES, 0)

        def uidList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidListContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidListContext,i)


        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)

        def INDEX(self):
            return self.getToken(SpeakQlParser.INDEX, 0)

        def KEY(self):
            return self.getToken(SpeakQlParser.KEY, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_loadedTableIndexes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadedTableIndexes" ):
                listener.enterLoadedTableIndexes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadedTableIndexes" ):
                listener.exitLoadedTableIndexes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadedTableIndexes" ):
                return visitor.visitLoadedTableIndexes(self)
            else:
                return visitor.visitChildren(self)




    def loadedTableIndexes(self):

        localctx = SpeakQlParser.LoadedTableIndexesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_loadedTableIndexes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5566
            self.tableName()
            self.state = 5575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.PARTITION:
                self.state = 5567
                self.match(SpeakQlParser.PARTITION)
                self.state = 5568
                self.leftParen()
                self.state = 5571
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.OPTIONAL]:
                    self.state = 5569
                    localctx.partitionList = self.uidList()
                    pass
                elif token in [SpeakQlParser.ALL]:
                    self.state = 5570
                    self.match(SpeakQlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5573
                self.rightParen()


            self.state = 5584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,793,self._ctx)
            if la_ == 1:
                self.state = 5578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEY:
                    self.state = 5577
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.INDEX or _la==SpeakQlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5580
                self.leftParen()
                self.state = 5581
                localctx.indexList = self.uidList()
                self.state = 5582
                self.rightParen()


            self.state = 5588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.IGNORE:
                self.state = 5586
                self.match(SpeakQlParser.IGNORE)
                self.state = 5587
                self.match(SpeakQlParser.LEAVES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleDescribeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.command = None # Token
            self.column = None # UidContext
            self.pattern = None # Token

        def tableName(self):
            return self.getTypedRuleContext(SpeakQlParser.TableNameContext,0)


        def EXPLAIN(self):
            return self.getToken(SpeakQlParser.EXPLAIN, 0)

        def DESCRIBE(self):
            return self.getToken(SpeakQlParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(SpeakQlParser.DESC, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_simpleDescribeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDescribeStatement" ):
                listener.enterSimpleDescribeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDescribeStatement" ):
                listener.exitSimpleDescribeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleDescribeStatement" ):
                return visitor.visitSimpleDescribeStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleDescribeStatement(self):

        localctx = SpeakQlParser.SimpleDescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_simpleDescribeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5590
            localctx.command = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & ((1 << (SpeakQlParser.DESC - 57)) | (1 << (SpeakQlParser.DESCRIBE - 57)) | (1 << (SpeakQlParser.EXPLAIN - 57)))) != 0)):
                localctx.command = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5591
            self.tableName()
            self.state = 5594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,795,self._ctx)
            if la_ == 1:
                self.state = 5592
                localctx.column = self.uid()

            elif la_ == 2:
                self.state = 5593
                localctx.pattern = self.match(SpeakQlParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullDescribeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.command = None # Token
            self.formatType = None # Token
            self.formatValue = None # Token

        def describeObjectClause(self):
            return self.getTypedRuleContext(SpeakQlParser.DescribeObjectClauseContext,0)


        def EXPLAIN(self):
            return self.getToken(SpeakQlParser.EXPLAIN, 0)

        def DESCRIBE(self):
            return self.getToken(SpeakQlParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(SpeakQlParser.DESC, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def EXTENDED(self):
            return self.getToken(SpeakQlParser.EXTENDED, 0)

        def PARTITIONS(self):
            return self.getToken(SpeakQlParser.PARTITIONS, 0)

        def FORMAT(self):
            return self.getToken(SpeakQlParser.FORMAT, 0)

        def TRADITIONAL(self):
            return self.getToken(SpeakQlParser.TRADITIONAL, 0)

        def JSON(self):
            return self.getToken(SpeakQlParser.JSON, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_fullDescribeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullDescribeStatement" ):
                listener.enterFullDescribeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullDescribeStatement" ):
                listener.exitFullDescribeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullDescribeStatement" ):
                return visitor.visitFullDescribeStatement(self)
            else:
                return visitor.visitChildren(self)




    def fullDescribeStatement(self):

        localctx = SpeakQlParser.FullDescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_fullDescribeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5596
            localctx.command = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & ((1 << (SpeakQlParser.DESC - 57)) | (1 << (SpeakQlParser.DESCRIBE - 57)) | (1 << (SpeakQlParser.EXPLAIN - 57)))) != 0)):
                localctx.command = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.EXTENDED or _la==SpeakQlParser.PARTITIONS or _la==SpeakQlParser.FORMAT:
                self.state = 5597
                localctx.formatType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.EXTENDED or _la==SpeakQlParser.PARTITIONS or _la==SpeakQlParser.FORMAT):
                    localctx.formatType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5598
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 5599
                localctx.formatValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.JSON or _la==SpeakQlParser.TRADITIONAL):
                    localctx.formatValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5602
            self.describeObjectClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HelpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HELP(self):
            return self.getToken(SpeakQlParser.HELP, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_helpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpStatement" ):
                listener.enterHelpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpStatement" ):
                listener.exitHelpStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHelpStatement" ):
                return visitor.visitHelpStatement(self)
            else:
                return visitor.visitChildren(self)




    def helpStatement(self):

        localctx = SpeakQlParser.HelpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_helpStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5604
            self.match(SpeakQlParser.HELP)
            self.state = 5605
            self.match(SpeakQlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(SpeakQlParser.USE, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseStatement" ):
                return visitor.visitUseStatement(self)
            else:
                return visitor.visitChildren(self)




    def useStatement(self):

        localctx = SpeakQlParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5607
            self.match(SpeakQlParser.USE)
            self.state = 5608
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNAL(self):
            return self.getToken(SpeakQlParser.SIGNAL, 0)

        def ID(self):
            return self.getToken(SpeakQlParser.ID, 0)

        def REVERSE_QUOTE_ID(self):
            return self.getToken(SpeakQlParser.REVERSE_QUOTE_ID, 0)

        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)

        def signalConditionInformation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.SignalConditionInformationContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.SignalConditionInformationContext,i)


        def SQLSTATE(self):
            return self.getToken(SpeakQlParser.SQLSTATE, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.StringLiteralContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def VALUE(self):
            return self.getToken(SpeakQlParser.VALUE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_signalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalStatement" ):
                listener.enterSignalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalStatement" ):
                listener.exitSignalStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignalStatement" ):
                return visitor.visitSignalStatement(self)
            else:
                return visitor.visitChildren(self)




    def signalStatement(self):

        localctx = SpeakQlParser.SignalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_signalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5610
            self.match(SpeakQlParser.SIGNAL)
            self.state = 5618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.SQLSTATE]:
                self.state = 5611
                self.match(SpeakQlParser.SQLSTATE)
                self.state = 5613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.VALUE:
                    self.state = 5612
                    self.match(SpeakQlParser.VALUE)


                self.state = 5615
                self.stringLiteral()
                pass
            elif token in [SpeakQlParser.ID]:
                self.state = 5616
                self.match(SpeakQlParser.ID)
                pass
            elif token in [SpeakQlParser.REVERSE_QUOTE_ID]:
                self.state = 5617
                self.match(SpeakQlParser.REVERSE_QUOTE_ID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,800,self._ctx)
            if la_ == 1:
                self.state = 5620
                self.match(SpeakQlParser.SET)
                self.state = 5621
                self.signalConditionInformation()
                self.state = 5626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 5622
                    self.match(SpeakQlParser.COMMA)
                    self.state = 5623
                    self.signalConditionInformation()
                    self.state = 5628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResignalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESIGNAL(self):
            return self.getToken(SpeakQlParser.RESIGNAL, 0)

        def ID(self):
            return self.getToken(SpeakQlParser.ID, 0)

        def REVERSE_QUOTE_ID(self):
            return self.getToken(SpeakQlParser.REVERSE_QUOTE_ID, 0)

        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)

        def signalConditionInformation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.SignalConditionInformationContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.SignalConditionInformationContext,i)


        def SQLSTATE(self):
            return self.getToken(SpeakQlParser.SQLSTATE, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.StringLiteralContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def VALUE(self):
            return self.getToken(SpeakQlParser.VALUE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_resignalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResignalStatement" ):
                listener.enterResignalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResignalStatement" ):
                listener.exitResignalStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResignalStatement" ):
                return visitor.visitResignalStatement(self)
            else:
                return visitor.visitChildren(self)




    def resignalStatement(self):

        localctx = SpeakQlParser.ResignalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_resignalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5631
            self.match(SpeakQlParser.RESIGNAL)
            self.state = 5639
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.SQLSTATE]:
                self.state = 5632
                self.match(SpeakQlParser.SQLSTATE)
                self.state = 5634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.VALUE:
                    self.state = 5633
                    self.match(SpeakQlParser.VALUE)


                self.state = 5636
                self.stringLiteral()
                pass
            elif token in [SpeakQlParser.ID]:
                self.state = 5637
                self.match(SpeakQlParser.ID)
                pass
            elif token in [SpeakQlParser.REVERSE_QUOTE_ID]:
                self.state = 5638
                self.match(SpeakQlParser.REVERSE_QUOTE_ID)
                pass
            elif token in [SpeakQlParser.EOF, SpeakQlParser.RETRIEVE, SpeakQlParser.SHOW_ME, SpeakQlParser.DISPLAY, SpeakQlParser.PRESENT, SpeakQlParser.FIND, SpeakQlParser.IN_TABLE, SpeakQlParser.FROM_TABLE, SpeakQlParser.ALTER, SpeakQlParser.ANALYZE, SpeakQlParser.CALL, SpeakQlParser.CHANGE, SpeakQlParser.CHECK, SpeakQlParser.CREATE, SpeakQlParser.DELETE, SpeakQlParser.DESC, SpeakQlParser.DESCRIBE, SpeakQlParser.DROP, SpeakQlParser.EXPLAIN, SpeakQlParser.FROM, SpeakQlParser.GET, SpeakQlParser.GRANT, SpeakQlParser.GROUP, SpeakQlParser.HAVING, SpeakQlParser.INSERT, SpeakQlParser.INTO, SpeakQlParser.KILL, SpeakQlParser.LIMIT, SpeakQlParser.LOAD, SpeakQlParser.LOCK, SpeakQlParser.OPTIMIZE, SpeakQlParser.ORDER, SpeakQlParser.PURGE, SpeakQlParser.RELEASE, SpeakQlParser.RENAME, SpeakQlParser.REPLACE, SpeakQlParser.RESIGNAL, SpeakQlParser.REVOKE, SpeakQlParser.SELECT, SpeakQlParser.SET, SpeakQlParser.SHOW, SpeakQlParser.SIGNAL, SpeakQlParser.UNLOCK, SpeakQlParser.UPDATE, SpeakQlParser.USE, SpeakQlParser.WHERE, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.CACHE, SpeakQlParser.CHECKSUM, SpeakQlParser.COMMIT, SpeakQlParser.DEALLOCATE, SpeakQlParser.DO, SpeakQlParser.FLUSH, SpeakQlParser.HANDLER, SpeakQlParser.HELP, SpeakQlParser.INSTALL, SpeakQlParser.PREPARE, SpeakQlParser.REPAIR, SpeakQlParser.RESET, SpeakQlParser.ROLLBACK, SpeakQlParser.SAVEPOINT, SpeakQlParser.START, SpeakQlParser.STOP, SpeakQlParser.TRUNCATE, SpeakQlParser.UNINSTALL, SpeakQlParser.WINDOW, SpeakQlParser.XA, SpeakQlParser.EXECUTE, SpeakQlParser.SHUTDOWN, SpeakQlParser.MINUS, SpeakQlParser.LR_BRACKET, SpeakQlParser.SEMI]:
                pass
            else:
                pass
            self.state = 5650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,804,self._ctx)
            if la_ == 1:
                self.state = 5641
                self.match(SpeakQlParser.SET)
                self.state = 5642
                self.signalConditionInformation()
                self.state = 5647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 5643
                    self.match(SpeakQlParser.COMMA)
                    self.state = 5644
                    self.signalConditionInformation()
                    self.state = 5649
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalConditionInformationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def CLASS_ORIGIN(self):
            return self.getToken(SpeakQlParser.CLASS_ORIGIN, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(SpeakQlParser.SUBCLASS_ORIGIN, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(SpeakQlParser.MESSAGE_TEXT, 0)

        def MYSQL_ERRNO(self):
            return self.getToken(SpeakQlParser.MYSQL_ERRNO, 0)

        def CONSTRAINT_CATALOG(self):
            return self.getToken(SpeakQlParser.CONSTRAINT_CATALOG, 0)

        def CONSTRAINT_SCHEMA(self):
            return self.getToken(SpeakQlParser.CONSTRAINT_SCHEMA, 0)

        def CONSTRAINT_NAME(self):
            return self.getToken(SpeakQlParser.CONSTRAINT_NAME, 0)

        def CATALOG_NAME(self):
            return self.getToken(SpeakQlParser.CATALOG_NAME, 0)

        def SCHEMA_NAME(self):
            return self.getToken(SpeakQlParser.SCHEMA_NAME, 0)

        def TABLE_NAME(self):
            return self.getToken(SpeakQlParser.TABLE_NAME, 0)

        def COLUMN_NAME(self):
            return self.getToken(SpeakQlParser.COLUMN_NAME, 0)

        def CURSOR_NAME(self):
            return self.getToken(SpeakQlParser.CURSOR_NAME, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.StringLiteralContext,0)


        def DECIMAL_LITERAL(self):
            return self.getToken(SpeakQlParser.DECIMAL_LITERAL, 0)

        def mysqlVariable(self):
            return self.getTypedRuleContext(SpeakQlParser.MysqlVariableContext,0)


        def simpleId(self):
            return self.getTypedRuleContext(SpeakQlParser.SimpleIdContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_signalConditionInformation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalConditionInformation" ):
                listener.enterSignalConditionInformation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalConditionInformation" ):
                listener.exitSignalConditionInformation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignalConditionInformation" ):
                return visitor.visitSignalConditionInformation(self)
            else:
                return visitor.visitChildren(self)




    def signalConditionInformation(self):

        localctx = SpeakQlParser.SignalConditionInformationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_signalConditionInformation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5652
            _la = self._input.LA(1)
            if not(((((_la - 359)) & ~0x3f) == 0 and ((1 << (_la - 359)) & ((1 << (SpeakQlParser.CLASS_ORIGIN - 359)) | (1 << (SpeakQlParser.COLUMN_NAME - 359)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 359)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 359)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 359)) | (1 << (SpeakQlParser.CURSOR_NAME - 359)))) != 0) or _la==SpeakQlParser.MESSAGE_TEXT or _la==SpeakQlParser.MYSQL_ERRNO or _la==SpeakQlParser.SUBCLASS_ORIGIN or _la==SpeakQlParser.TABLE_NAME or _la==SpeakQlParser.CATALOG_NAME or _la==SpeakQlParser.SCHEMA_NAME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5653
            self.match(SpeakQlParser.EQUAL_SYMBOL)
            self.state = 5658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,805,self._ctx)
            if la_ == 1:
                self.state = 5654
                self.stringLiteral()
                pass

            elif la_ == 2:
                self.state = 5655
                self.match(SpeakQlParser.DECIMAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 5656
                self.mysqlVariable()
                pass

            elif la_ == 4:
                self.state = 5657
                self.simpleId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiagnosticsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(SpeakQlParser.GET, 0)

        def DIAGNOSTICS(self):
            return self.getToken(SpeakQlParser.DIAGNOSTICS, 0)

        def CURRENT(self):
            return self.getToken(SpeakQlParser.CURRENT, 0)

        def STACKED(self):
            return self.getToken(SpeakQlParser.STACKED, 0)

        def variableClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.VariableClauseContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.VariableClauseContext,i)


        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(SpeakQlParser.EQUAL_SYMBOL, i)

        def CONDITION(self):
            return self.getToken(SpeakQlParser.CONDITION, 0)

        def diagnosticsConditionInformationName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.DiagnosticsConditionInformationNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.DiagnosticsConditionInformationNameContext,i)


        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.NUMBER)
            else:
                return self.getToken(SpeakQlParser.NUMBER, i)

        def ROW_COUNT(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.ROW_COUNT)
            else:
                return self.getToken(SpeakQlParser.ROW_COUNT, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_diagnosticsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagnosticsStatement" ):
                listener.enterDiagnosticsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagnosticsStatement" ):
                listener.exitDiagnosticsStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiagnosticsStatement" ):
                return visitor.visitDiagnosticsStatement(self)
            else:
                return visitor.visitChildren(self)




    def diagnosticsStatement(self):

        localctx = SpeakQlParser.DiagnosticsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_diagnosticsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5660
            self.match(SpeakQlParser.GET)
            self.state = 5662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.CURRENT or _la==SpeakQlParser.STACKED:
                self.state = 5661
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.CURRENT or _la==SpeakQlParser.STACKED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5664
            self.match(SpeakQlParser.DIAGNOSTICS)
            self.state = 5696
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.AT_SIGN, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.LOCAL_ID, SpeakQlParser.GLOBAL_ID, SpeakQlParser.OPTIONAL]:
                self.state = 5665
                self.variableClause()
                self.state = 5666
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 5667
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.NUMBER or _la==SpeakQlParser.ROW_COUNT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 5668
                    self.match(SpeakQlParser.COMMA)
                    self.state = 5669
                    self.variableClause()
                    self.state = 5670
                    self.match(SpeakQlParser.EQUAL_SYMBOL)
                    self.state = 5671
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.NUMBER or _la==SpeakQlParser.ROW_COUNT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5677
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SpeakQlParser.CONDITION]:
                self.state = 5678
                self.match(SpeakQlParser.CONDITION)
                self.state = 5681
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.ZERO_DECIMAL, SpeakQlParser.ONE_DECIMAL, SpeakQlParser.TWO_DECIMAL, SpeakQlParser.DECIMAL_LITERAL, SpeakQlParser.REAL_LITERAL]:
                    self.state = 5679
                    self.decimalLiteral()
                    pass
                elif token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.AT_SIGN, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.LOCAL_ID, SpeakQlParser.GLOBAL_ID, SpeakQlParser.OPTIONAL]:
                    self.state = 5680
                    self.variableClause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5683
                self.variableClause()
                self.state = 5684
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 5685
                self.diagnosticsConditionInformationName()
                self.state = 5693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 5686
                    self.match(SpeakQlParser.COMMA)
                    self.state = 5687
                    self.variableClause()
                    self.state = 5688
                    self.match(SpeakQlParser.EQUAL_SYMBOL)
                    self.state = 5689
                    self.diagnosticsConditionInformationName()
                    self.state = 5695
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiagnosticsConditionInformationNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS_ORIGIN(self):
            return self.getToken(SpeakQlParser.CLASS_ORIGIN, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(SpeakQlParser.SUBCLASS_ORIGIN, 0)

        def RETURNED_SQLSTATE(self):
            return self.getToken(SpeakQlParser.RETURNED_SQLSTATE, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(SpeakQlParser.MESSAGE_TEXT, 0)

        def MYSQL_ERRNO(self):
            return self.getToken(SpeakQlParser.MYSQL_ERRNO, 0)

        def CONSTRAINT_CATALOG(self):
            return self.getToken(SpeakQlParser.CONSTRAINT_CATALOG, 0)

        def CONSTRAINT_SCHEMA(self):
            return self.getToken(SpeakQlParser.CONSTRAINT_SCHEMA, 0)

        def CONSTRAINT_NAME(self):
            return self.getToken(SpeakQlParser.CONSTRAINT_NAME, 0)

        def CATALOG_NAME(self):
            return self.getToken(SpeakQlParser.CATALOG_NAME, 0)

        def SCHEMA_NAME(self):
            return self.getToken(SpeakQlParser.SCHEMA_NAME, 0)

        def TABLE_NAME(self):
            return self.getToken(SpeakQlParser.TABLE_NAME, 0)

        def COLUMN_NAME(self):
            return self.getToken(SpeakQlParser.COLUMN_NAME, 0)

        def CURSOR_NAME(self):
            return self.getToken(SpeakQlParser.CURSOR_NAME, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_diagnosticsConditionInformationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagnosticsConditionInformationName" ):
                listener.enterDiagnosticsConditionInformationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagnosticsConditionInformationName" ):
                listener.exitDiagnosticsConditionInformationName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiagnosticsConditionInformationName" ):
                return visitor.visitDiagnosticsConditionInformationName(self)
            else:
                return visitor.visitChildren(self)




    def diagnosticsConditionInformationName(self):

        localctx = SpeakQlParser.DiagnosticsConditionInformationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_diagnosticsConditionInformationName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5698
            _la = self._input.LA(1)
            if not(((((_la - 359)) & ~0x3f) == 0 and ((1 << (_la - 359)) & ((1 << (SpeakQlParser.CLASS_ORIGIN - 359)) | (1 << (SpeakQlParser.COLUMN_NAME - 359)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 359)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 359)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 359)) | (1 << (SpeakQlParser.CURSOR_NAME - 359)))) != 0) or _la==SpeakQlParser.MESSAGE_TEXT or _la==SpeakQlParser.MYSQL_ERRNO or ((((_la - 573)) & ~0x3f) == 0 and ((1 << (_la - 573)) & ((1 << (SpeakQlParser.RETURNED_SQLSTATE - 573)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 573)) | (1 << (SpeakQlParser.TABLE_NAME - 573)))) != 0) or _la==SpeakQlParser.CATALOG_NAME or _la==SpeakQlParser.SCHEMA_NAME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeObjectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_describeObjectClause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DescribeStatementsContext(DescribeObjectClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.DescribeObjectClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectStatementContext,0)

        def deleteStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.DeleteStatementContext,0)

        def insertStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.InsertStatementContext,0)

        def replaceStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.ReplaceStatementContext,0)

        def updateStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.UpdateStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeStatements" ):
                listener.enterDescribeStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeStatements" ):
                listener.exitDescribeStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeStatements" ):
                return visitor.visitDescribeStatements(self)
            else:
                return visitor.visitChildren(self)


    class DescribeConnectionContext(DescribeObjectClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.DescribeObjectClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(SpeakQlParser.FOR, 0)
        def CONNECTION(self):
            return self.getToken(SpeakQlParser.CONNECTION, 0)
        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeConnection" ):
                listener.enterDescribeConnection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeConnection" ):
                listener.exitDescribeConnection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeConnection" ):
                return visitor.visitDescribeConnection(self)
            else:
                return visitor.visitChildren(self)



    def describeObjectClause(self):

        localctx = SpeakQlParser.DescribeObjectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_describeObjectClause)
        try:
            self.state = 5710
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.RETRIEVE, SpeakQlParser.SHOW_ME, SpeakQlParser.DISPLAY, SpeakQlParser.PRESENT, SpeakQlParser.FIND, SpeakQlParser.IN_TABLE, SpeakQlParser.FROM_TABLE, SpeakQlParser.DELETE, SpeakQlParser.FROM, SpeakQlParser.GROUP, SpeakQlParser.HAVING, SpeakQlParser.INSERT, SpeakQlParser.INTO, SpeakQlParser.LIMIT, SpeakQlParser.ORDER, SpeakQlParser.REPLACE, SpeakQlParser.SELECT, SpeakQlParser.UPDATE, SpeakQlParser.WHERE, SpeakQlParser.WINDOW, SpeakQlParser.LR_BRACKET]:
                localctx = SpeakQlParser.DescribeStatementsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5705
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.RETRIEVE, SpeakQlParser.SHOW_ME, SpeakQlParser.DISPLAY, SpeakQlParser.PRESENT, SpeakQlParser.FIND, SpeakQlParser.IN_TABLE, SpeakQlParser.FROM_TABLE, SpeakQlParser.FROM, SpeakQlParser.GROUP, SpeakQlParser.HAVING, SpeakQlParser.INTO, SpeakQlParser.LIMIT, SpeakQlParser.ORDER, SpeakQlParser.SELECT, SpeakQlParser.WHERE, SpeakQlParser.WINDOW, SpeakQlParser.LR_BRACKET]:
                    self.state = 5700
                    self.selectStatement()
                    pass
                elif token in [SpeakQlParser.DELETE]:
                    self.state = 5701
                    self.deleteStatement()
                    pass
                elif token in [SpeakQlParser.INSERT]:
                    self.state = 5702
                    self.insertStatement()
                    pass
                elif token in [SpeakQlParser.REPLACE]:
                    self.state = 5703
                    self.replaceStatement()
                    pass
                elif token in [SpeakQlParser.UPDATE]:
                    self.state = 5704
                    self.updateStatement()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [SpeakQlParser.FOR]:
                localctx = SpeakQlParser.DescribeConnectionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5707
                self.match(SpeakQlParser.FOR)
                self.state = 5708
                self.match(SpeakQlParser.CONNECTION)
                self.state = 5709
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)


        def DOT_ID(self):
            return self.getToken(SpeakQlParser.DOT_ID, 0)

        def DOT(self):
            return self.getToken(SpeakQlParser.DOT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_fullId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullId" ):
                listener.enterFullId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullId" ):
                listener.exitFullId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullId" ):
                return visitor.visitFullId(self)
            else:
                return visitor.visitChildren(self)




    def fullId(self):

        localctx = SpeakQlParser.FullIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_fullId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5712
            self.uid()
            self.state = 5716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,813,self._ctx)
            if la_ == 1:
                self.state = 5713
                self.match(SpeakQlParser.DOT_ID)

            elif la_ == 2:
                self.state = 5714
                self.match(SpeakQlParser.DOT)
                self.state = 5715
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullId(self):
            return self.getTypedRuleContext(SpeakQlParser.FullIdContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_tableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)




    def tableName(self):

        localctx = SpeakQlParser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_tableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5718
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def dottedId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.DottedIdContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.DottedIdContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_fullColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnName" ):
                listener.enterFullColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnName" ):
                listener.exitFullColumnName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullColumnName" ):
                return visitor.visitFullColumnName(self)
            else:
                return visitor.visitChildren(self)




    def fullColumnName(self):

        localctx = SpeakQlParser.FullColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_fullColumnName)
        try:
            self.state = 5732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,817,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5720
                self.uid()
                self.state = 5725
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,815,self._ctx)
                if la_ == 1:
                    self.state = 5721
                    self.dottedId()
                    self.state = 5723
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,814,self._ctx)
                    if la_ == 1:
                        self.state = 5722
                        self.dottedId()




                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5727
                self.matchWildcard()
                self.state = 5728
                self.dottedId()
                self.state = 5730
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,816,self._ctx)
                if la_ == 1:
                    self.state = 5729
                    self.dottedId()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sortType = None # Token

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def ASC(self):
            return self.getToken(SpeakQlParser.ASC, 0)

        def DESC(self):
            return self.getToken(SpeakQlParser.DESC, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_indexColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnName" ):
                listener.enterIndexColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnName" ):
                listener.exitIndexColumnName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexColumnName" ):
                return visitor.visitIndexColumnName(self)
            else:
                return visitor.visitChildren(self)




    def indexColumnName(self):

        localctx = SpeakQlParser.IndexColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_indexColumnName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,820,self._ctx)
            if la_ == 1:
                self.state = 5736
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,818,self._ctx)
                if la_ == 1:
                    self.state = 5734
                    self.uid()
                    pass

                elif la_ == 2:
                    self.state = 5735
                    self.match(SpeakQlParser.STRING_LITERAL)
                    pass


                self.state = 5742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LR_BRACKET:
                    self.state = 5738
                    self.leftParen()
                    self.state = 5739
                    self.decimalLiteral()
                    self.state = 5740
                    self.rightParen()


                pass

            elif la_ == 2:
                self.state = 5744
                self.expression(0)
                pass


            self.state = 5748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.ASC or _la==SpeakQlParser.DESC:
                self.state = 5747
                localctx.sortType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.ASC or _la==SpeakQlParser.DESC):
                    localctx.sortType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_USER_NAME(self):
            return self.getToken(SpeakQlParser.STRING_USER_NAME, 0)

        def ID(self):
            return self.getToken(SpeakQlParser.ID, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserName" ):
                return visitor.visitUserName(self)
            else:
                return visitor.visitChildren(self)




    def userName(self):

        localctx = SpeakQlParser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_userName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5750
            _la = self._input.LA(1)
            if not(((((_la - 1113)) & ~0x3f) == 0 and ((1 << (_la - 1113)) & ((1 << (SpeakQlParser.STRING_LITERAL - 1113)) | (1 << (SpeakQlParser.ID - 1113)) | (1 << (SpeakQlParser.STRING_USER_NAME - 1113)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MysqlVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(SpeakQlParser.LOCAL_ID, 0)

        def GLOBAL_ID(self):
            return self.getToken(SpeakQlParser.GLOBAL_ID, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_mysqlVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMysqlVariable" ):
                listener.enterMysqlVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMysqlVariable" ):
                listener.exitMysqlVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMysqlVariable" ):
                return visitor.visitMysqlVariable(self)
            else:
                return visitor.visitChildren(self)




    def mysqlVariable(self):

        localctx = SpeakQlParser.MysqlVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_mysqlVariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5752
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.LOCAL_ID or _la==SpeakQlParser.GLOBAL_ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(SpeakQlParser.BINARY, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(SpeakQlParser.CharsetNameBaseContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def CHARSET_REVERSE_QOUTE_STRING(self):
            return self.getToken(SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_charsetName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetName" ):
                listener.enterCharsetName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetName" ):
                listener.exitCharsetName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharsetName" ):
                return visitor.visitCharsetName(self)
            else:
                return visitor.visitChildren(self)




    def charsetName(self):

        localctx = SpeakQlParser.CharsetNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_charsetName)
        try:
            self.state = 5758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,822,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5754
                self.match(SpeakQlParser.BINARY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5755
                self.charsetNameBase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5756
                self.match(SpeakQlParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5757
                self.match(SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollationNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_collationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollationName" ):
                listener.enterCollationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollationName" ):
                listener.exitCollationName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollationName" ):
                return visitor.visitCollationName(self)
            else:
                return visitor.visitChildren(self)




    def collationName(self):

        localctx = SpeakQlParser.CollationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_collationName)
        try:
            self.state = 5762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,823,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5760
                self.uid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5761
                self.match(SpeakQlParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EngineNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARCHIVE(self):
            return self.getToken(SpeakQlParser.ARCHIVE, 0)

        def BLACKHOLE(self):
            return self.getToken(SpeakQlParser.BLACKHOLE, 0)

        def CSV(self):
            return self.getToken(SpeakQlParser.CSV, 0)

        def FEDERATED(self):
            return self.getToken(SpeakQlParser.FEDERATED, 0)

        def INNODB(self):
            return self.getToken(SpeakQlParser.INNODB, 0)

        def MEMORY(self):
            return self.getToken(SpeakQlParser.MEMORY, 0)

        def MRG_MYISAM(self):
            return self.getToken(SpeakQlParser.MRG_MYISAM, 0)

        def MYISAM(self):
            return self.getToken(SpeakQlParser.MYISAM, 0)

        def NDB(self):
            return self.getToken(SpeakQlParser.NDB, 0)

        def NDBCLUSTER(self):
            return self.getToken(SpeakQlParser.NDBCLUSTER, 0)

        def PERFORMANCE_SCHEMA(self):
            return self.getToken(SpeakQlParser.PERFORMANCE_SCHEMA, 0)

        def TOKUDB(self):
            return self.getToken(SpeakQlParser.TOKUDB, 0)

        def ID(self):
            return self.getToken(SpeakQlParser.ID, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def REVERSE_QUOTE_ID(self):
            return self.getToken(SpeakQlParser.REVERSE_QUOTE_ID, 0)

        def CONNECT(self):
            return self.getToken(SpeakQlParser.CONNECT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_engineName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEngineName" ):
                listener.enterEngineName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEngineName" ):
                listener.exitEngineName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEngineName" ):
                return visitor.visitEngineName(self)
            else:
                return visitor.visitChildren(self)




    def engineName(self):

        localctx = SpeakQlParser.EngineNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_engineName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5764
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.CONNECT or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (SpeakQlParser.ARCHIVE - 756)) | (1 << (SpeakQlParser.BLACKHOLE - 756)) | (1 << (SpeakQlParser.CSV - 756)) | (1 << (SpeakQlParser.FEDERATED - 756)) | (1 << (SpeakQlParser.INNODB - 756)) | (1 << (SpeakQlParser.MEMORY - 756)) | (1 << (SpeakQlParser.MRG_MYISAM - 756)) | (1 << (SpeakQlParser.MYISAM - 756)) | (1 << (SpeakQlParser.NDB - 756)) | (1 << (SpeakQlParser.NDBCLUSTER - 756)) | (1 << (SpeakQlParser.PERFORMANCE_SCHEMA - 756)) | (1 << (SpeakQlParser.TOKUDB - 756)))) != 0) or ((((_la - 1113)) & ~0x3f) == 0 and ((1 << (_la - 1113)) & ((1 << (SpeakQlParser.STRING_LITERAL - 1113)) | (1 << (SpeakQlParser.ID - 1113)) | (1 << (SpeakQlParser.REVERSE_QUOTE_ID - 1113)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UuidSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,i)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.MINUS)
            else:
                return self.getToken(SpeakQlParser.MINUS, i)

        def COLON_SYMB(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COLON_SYMB)
            else:
                return self.getToken(SpeakQlParser.COLON_SYMB, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_uuidSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUuidSet" ):
                listener.enterUuidSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUuidSet" ):
                listener.exitUuidSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUuidSet" ):
                return visitor.visitUuidSet(self)
            else:
                return visitor.visitChildren(self)




    def uuidSet(self):

        localctx = SpeakQlParser.UuidSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_uuidSet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5766
            self.decimalLiteral()
            self.state = 5767
            self.match(SpeakQlParser.MINUS)
            self.state = 5768
            self.decimalLiteral()
            self.state = 5769
            self.match(SpeakQlParser.MINUS)
            self.state = 5770
            self.decimalLiteral()
            self.state = 5771
            self.match(SpeakQlParser.MINUS)
            self.state = 5772
            self.decimalLiteral()
            self.state = 5773
            self.match(SpeakQlParser.MINUS)
            self.state = 5774
            self.decimalLiteral()
            self.state = 5780 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5775
                self.match(SpeakQlParser.COLON_SYMB)
                self.state = 5776
                self.decimalLiteral()
                self.state = 5777
                self.match(SpeakQlParser.MINUS)
                self.state = 5778
                self.decimalLiteral()
                self.state = 5782 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SpeakQlParser.COLON_SYMB):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.globalTableUid = None # XuidStringIdContext
            self.qualifier = None # XuidStringIdContext
            self.idFormat = None # DecimalLiteralContext

        def xuidStringId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.XuidStringIdContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.XuidStringIdContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_xid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXid" ):
                listener.enterXid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXid" ):
                listener.exitXid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXid" ):
                return visitor.visitXid(self)
            else:
                return visitor.visitChildren(self)




    def xid(self):

        localctx = SpeakQlParser.XidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_xid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5784
            localctx.globalTableUid = self.xuidStringId()
            self.state = 5791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.COMMA:
                self.state = 5785
                self.match(SpeakQlParser.COMMA)
                self.state = 5786
                localctx.qualifier = self.xuidStringId()
                self.state = 5789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.COMMA:
                    self.state = 5787
                    self.match(SpeakQlParser.COMMA)
                    self.state = 5788
                    localctx.idFormat = self.decimalLiteral()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XuidStringIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def BIT_STRING(self):
            return self.getToken(SpeakQlParser.BIT_STRING, 0)

        def HEXADECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.HEXADECIMAL_LITERAL)
            else:
                return self.getToken(SpeakQlParser.HEXADECIMAL_LITERAL, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_xuidStringId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXuidStringId" ):
                listener.enterXuidStringId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXuidStringId" ):
                listener.exitXuidStringId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXuidStringId" ):
                return visitor.visitXuidStringId(self)
            else:
                return visitor.visitChildren(self)




    def xuidStringId(self):

        localctx = SpeakQlParser.XuidStringIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_xuidStringId)
        self._la = 0 # Token type
        try:
            self.state = 5800
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5793
                self.match(SpeakQlParser.STRING_LITERAL)
                pass
            elif token in [SpeakQlParser.BIT_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5794
                self.match(SpeakQlParser.BIT_STRING)
                pass
            elif token in [SpeakQlParser.HEXADECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5796 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5795
                    self.match(SpeakQlParser.HEXADECIMAL_LITERAL)
                    self.state = 5798 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SpeakQlParser.HEXADECIMAL_LITERAL):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPluginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_authPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPlugin" ):
                listener.enterAuthPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPlugin" ):
                listener.exitAuthPlugin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAuthPlugin" ):
                return visitor.visitAuthPlugin(self)
            else:
                return visitor.visitChildren(self)




    def authPlugin(self):

        localctx = SpeakQlParser.AuthPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_authPlugin)
        try:
            self.state = 5804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,829,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5802
                self.uid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5803
                self.match(SpeakQlParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleId(self):
            return self.getTypedRuleContext(SpeakQlParser.SimpleIdContext,0)


        def REVERSE_QUOTE_ID(self):
            return self.getToken(SpeakQlParser.REVERSE_QUOTE_ID, 0)

        def CHARSET_REVERSE_QOUTE_STRING(self):
            return self.getToken(SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_uid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUid" ):
                listener.enterUid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUid" ):
                listener.exitUid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUid" ):
                return visitor.visitUid(self)
            else:
                return visitor.visitChildren(self)




    def uid(self):

        localctx = SpeakQlParser.UidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_uid)
        try:
            self.state = 5809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,830,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5806
                self.simpleId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5807
                self.match(SpeakQlParser.REVERSE_QUOTE_ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5808
                self.match(SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(SpeakQlParser.ID, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(SpeakQlParser.CharsetNameBaseContext,0)


        def transactionLevelBase(self):
            return self.getTypedRuleContext(SpeakQlParser.TransactionLevelBaseContext,0)


        def engineName(self):
            return self.getTypedRuleContext(SpeakQlParser.EngineNameContext,0)


        def privilegesBase(self):
            return self.getTypedRuleContext(SpeakQlParser.PrivilegesBaseContext,0)


        def intervalTypeBase(self):
            return self.getTypedRuleContext(SpeakQlParser.IntervalTypeBaseContext,0)


        def dataTypeBase(self):
            return self.getTypedRuleContext(SpeakQlParser.DataTypeBaseContext,0)


        def keywordsCanBeId(self):
            return self.getTypedRuleContext(SpeakQlParser.KeywordsCanBeIdContext,0)


        def functionNameBase(self):
            return self.getTypedRuleContext(SpeakQlParser.FunctionNameBaseContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_simpleId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleId" ):
                listener.enterSimpleId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleId" ):
                listener.exitSimpleId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleId" ):
                return visitor.visitSimpleId(self)
            else:
                return visitor.visitChildren(self)




    def simpleId(self):

        localctx = SpeakQlParser.SimpleIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_simpleId)
        try:
            self.state = 5820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,831,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5811
                self.match(SpeakQlParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5812
                self.charsetNameBase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5813
                self.transactionLevelBase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5814
                self.engineName()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5815
                self.privilegesBase()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5816
                self.intervalTypeBase()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5817
                self.dataTypeBase()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5818
                self.keywordsCanBeId()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5819
                self.functionNameBase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_ID(self):
            return self.getToken(SpeakQlParser.DOT_ID, 0)

        def DOT(self):
            return self.getToken(SpeakQlParser.DOT, 0)

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_dottedId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedId" ):
                listener.enterDottedId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedId" ):
                listener.exitDottedId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDottedId" ):
                return visitor.visitDottedId(self)
            else:
                return visitor.visitChildren(self)




    def dottedId(self):

        localctx = SpeakQlParser.DottedIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_dottedId)
        try:
            self.state = 5825
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.DOT_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5822
                self.match(SpeakQlParser.DOT_ID)
                pass
            elif token in [SpeakQlParser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5823
                self.match(SpeakQlParser.DOT)
                self.state = 5824
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(SpeakQlParser.DECIMAL_LITERAL, 0)

        def ZERO_DECIMAL(self):
            return self.getToken(SpeakQlParser.ZERO_DECIMAL, 0)

        def ONE_DECIMAL(self):
            return self.getToken(SpeakQlParser.ONE_DECIMAL, 0)

        def TWO_DECIMAL(self):
            return self.getToken(SpeakQlParser.TWO_DECIMAL, 0)

        def REAL_LITERAL(self):
            return self.getToken(SpeakQlParser.REAL_LITERAL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_decimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)




    def decimalLiteral(self):

        localctx = SpeakQlParser.DecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_decimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5827
            _la = self._input.LA(1)
            if not(((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & ((1 << (SpeakQlParser.ZERO_DECIMAL - 1103)) | (1 << (SpeakQlParser.ONE_DECIMAL - 1103)) | (1 << (SpeakQlParser.TWO_DECIMAL - 1103)) | (1 << (SpeakQlParser.DECIMAL_LITERAL - 1103)) | (1 << (SpeakQlParser.REAL_LITERAL - 1103)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileSizeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILESIZE_LITERAL(self):
            return self.getToken(SpeakQlParser.FILESIZE_LITERAL, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_fileSizeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileSizeLiteral" ):
                listener.enterFileSizeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileSizeLiteral" ):
                listener.exitFileSizeLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileSizeLiteral" ):
                return visitor.visitFileSizeLiteral(self)
            else:
                return visitor.visitChildren(self)




    def fileSizeLiteral(self):

        localctx = SpeakQlParser.FileSizeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_fileSizeLiteral)
        try:
            self.state = 5831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.FILESIZE_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5829
                self.match(SpeakQlParser.FILESIZE_LITERAL)
                pass
            elif token in [SpeakQlParser.ZERO_DECIMAL, SpeakQlParser.ONE_DECIMAL, SpeakQlParser.TWO_DECIMAL, SpeakQlParser.DECIMAL_LITERAL, SpeakQlParser.REAL_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5830
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.STRING_LITERAL)
            else:
                return self.getToken(SpeakQlParser.STRING_LITERAL, i)

        def START_NATIONAL_STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.START_NATIONAL_STRING_LITERAL, 0)

        def STRING_CHARSET_NAME(self):
            return self.getToken(SpeakQlParser.STRING_CHARSET_NAME, 0)

        def COLLATE(self):
            return self.getToken(SpeakQlParser.COLLATE, 0)

        def collationName(self):
            return self.getTypedRuleContext(SpeakQlParser.CollationNameContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = SpeakQlParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_stringLiteral)
        self._la = 0 # Token type
        try:
            self.state = 5856
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,840,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5838
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.STRING_LITERAL, SpeakQlParser.STRING_CHARSET_NAME]:
                    self.state = 5834
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SpeakQlParser.STRING_CHARSET_NAME:
                        self.state = 5833
                        self.match(SpeakQlParser.STRING_CHARSET_NAME)


                    self.state = 5836
                    self.match(SpeakQlParser.STRING_LITERAL)
                    pass
                elif token in [SpeakQlParser.START_NATIONAL_STRING_LITERAL]:
                    self.state = 5837
                    self.match(SpeakQlParser.START_NATIONAL_STRING_LITERAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5841 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 5840
                        self.match(SpeakQlParser.STRING_LITERAL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 5843 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,836,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5850
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SpeakQlParser.STRING_LITERAL, SpeakQlParser.STRING_CHARSET_NAME]:
                    self.state = 5846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SpeakQlParser.STRING_CHARSET_NAME:
                        self.state = 5845
                        self.match(SpeakQlParser.STRING_CHARSET_NAME)


                    self.state = 5848
                    self.match(SpeakQlParser.STRING_LITERAL)
                    pass
                elif token in [SpeakQlParser.START_NATIONAL_STRING_LITERAL]:
                    self.state = 5849
                    self.match(SpeakQlParser.START_NATIONAL_STRING_LITERAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5854
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,839,self._ctx)
                if la_ == 1:
                    self.state = 5852
                    self.match(SpeakQlParser.COLLATE)
                    self.state = 5853
                    self.collationName()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SpeakQlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SpeakQlParser.FALSE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = SpeakQlParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5858
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.FALSE or _la==SpeakQlParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexadecimalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(SpeakQlParser.HEXADECIMAL_LITERAL, 0)

        def STRING_CHARSET_NAME(self):
            return self.getToken(SpeakQlParser.STRING_CHARSET_NAME, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_hexadecimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexadecimalLiteral" ):
                listener.enterHexadecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexadecimalLiteral" ):
                listener.exitHexadecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHexadecimalLiteral" ):
                return visitor.visitHexadecimalLiteral(self)
            else:
                return visitor.visitChildren(self)




    def hexadecimalLiteral(self):

        localctx = SpeakQlParser.HexadecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_hexadecimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.STRING_CHARSET_NAME:
                self.state = 5860
                self.match(SpeakQlParser.STRING_CHARSET_NAME)


            self.state = 5863
            self.match(SpeakQlParser.HEXADECIMAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullNotnullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(SpeakQlParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(SpeakQlParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(SpeakQlParser.NOT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_nullNotnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullNotnull" ):
                listener.enterNullNotnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullNotnull" ):
                listener.exitNullNotnull(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullNotnull" ):
                return visitor.visitNullNotnull(self)
            else:
                return visitor.visitChildren(self)




    def nullNotnull(self):

        localctx = SpeakQlParser.NullNotnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_nullNotnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.NOT:
                self.state = 5865
                self.match(SpeakQlParser.NOT)


            self.state = 5868
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.NULL_LITERAL or _la==SpeakQlParser.NULL_SPEC_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nullLiteral = None # Token

        def stringLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def MINUS(self):
            return self.getToken(SpeakQlParser.MINUS, 0)

        def hexadecimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.HexadecimalLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.BooleanLiteralContext,0)


        def REAL_LITERAL(self):
            return self.getToken(SpeakQlParser.REAL_LITERAL, 0)

        def BIT_STRING(self):
            return self.getToken(SpeakQlParser.BIT_STRING, 0)

        def NULL_LITERAL(self):
            return self.getToken(SpeakQlParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(SpeakQlParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(SpeakQlParser.NOT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = SpeakQlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 5882
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,844,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5870
                self.stringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5871
                self.decimalLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5872
                self.match(SpeakQlParser.MINUS)
                self.state = 5873
                self.decimalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5874
                self.hexadecimalLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5875
                self.booleanLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5876
                self.match(SpeakQlParser.REAL_LITERAL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5877
                self.match(SpeakQlParser.BIT_STRING)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.NOT:
                    self.state = 5878
                    self.match(SpeakQlParser.NOT)


                self.state = 5881
                localctx.nullLiteral = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.NULL_LITERAL or _la==SpeakQlParser.NULL_SPEC_LITERAL):
                    localctx.nullLiteral = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpatialDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def GEOMETRYCOLLECTION(self):
            return self.getToken(SpeakQlParser.GEOMETRYCOLLECTION, 0)
        def GEOMCOLLECTION(self):
            return self.getToken(SpeakQlParser.GEOMCOLLECTION, 0)
        def LINESTRING(self):
            return self.getToken(SpeakQlParser.LINESTRING, 0)
        def MULTILINESTRING(self):
            return self.getToken(SpeakQlParser.MULTILINESTRING, 0)
        def MULTIPOINT(self):
            return self.getToken(SpeakQlParser.MULTIPOINT, 0)
        def MULTIPOLYGON(self):
            return self.getToken(SpeakQlParser.MULTIPOLYGON, 0)
        def POINT(self):
            return self.getToken(SpeakQlParser.POINT, 0)
        def POLYGON(self):
            return self.getToken(SpeakQlParser.POLYGON, 0)
        def JSON(self):
            return self.getToken(SpeakQlParser.JSON, 0)
        def GEOMETRY(self):
            return self.getToken(SpeakQlParser.GEOMETRY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpatialDataType" ):
                listener.enterSpatialDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpatialDataType" ):
                listener.exitSpatialDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpatialDataType" ):
                return visitor.visitSpatialDataType(self)
            else:
                return visitor.visitChildren(self)


    class LongVarbinaryDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LONG(self):
            return self.getToken(SpeakQlParser.LONG, 0)
        def VARBINARY(self):
            return self.getToken(SpeakQlParser.VARBINARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLongVarbinaryDataType" ):
                listener.enterLongVarbinaryDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLongVarbinaryDataType" ):
                listener.exitLongVarbinaryDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLongVarbinaryDataType" ):
                return visitor.visitLongVarbinaryDataType(self)
            else:
                return visitor.visitChildren(self)


    class CollectionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def collectionOptions(self):
            return self.getTypedRuleContext(SpeakQlParser.CollectionOptionsContext,0)

        def ENUM(self):
            return self.getToken(SpeakQlParser.ENUM, 0)
        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.SET)
            else:
                return self.getToken(SpeakQlParser.SET, i)
        def BINARY(self):
            return self.getToken(SpeakQlParser.BINARY, 0)
        def charsetName(self):
            return self.getTypedRuleContext(SpeakQlParser.CharsetNameContext,0)

        def CHARACTER(self):
            return self.getToken(SpeakQlParser.CHARACTER, 0)
        def CHARSET(self):
            return self.getToken(SpeakQlParser.CHARSET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionDataType" ):
                listener.enterCollectionDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionDataType" ):
                listener.exitCollectionDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollectionDataType" ):
                return visitor.visitCollectionDataType(self)
            else:
                return visitor.visitChildren(self)


    class NationalVaryingStringDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def NATIONAL(self):
            return self.getToken(SpeakQlParser.NATIONAL, 0)
        def VARYING(self):
            return self.getToken(SpeakQlParser.VARYING, 0)
        def CHAR(self):
            return self.getToken(SpeakQlParser.CHAR, 0)
        def CHARACTER(self):
            return self.getToken(SpeakQlParser.CHARACTER, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(SpeakQlParser.LengthOneDimensionContext,0)

        def BINARY(self):
            return self.getToken(SpeakQlParser.BINARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNationalVaryingStringDataType" ):
                listener.enterNationalVaryingStringDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNationalVaryingStringDataType" ):
                listener.exitNationalVaryingStringDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNationalVaryingStringDataType" ):
                return visitor.visitNationalVaryingStringDataType(self)
            else:
                return visitor.visitChildren(self)


    class DimensionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def TINYINT(self):
            return self.getToken(SpeakQlParser.TINYINT, 0)
        def SMALLINT(self):
            return self.getToken(SpeakQlParser.SMALLINT, 0)
        def MEDIUMINT(self):
            return self.getToken(SpeakQlParser.MEDIUMINT, 0)
        def INT(self):
            return self.getToken(SpeakQlParser.INT, 0)
        def INTEGER(self):
            return self.getToken(SpeakQlParser.INTEGER, 0)
        def BIGINT(self):
            return self.getToken(SpeakQlParser.BIGINT, 0)
        def MIDDLEINT(self):
            return self.getToken(SpeakQlParser.MIDDLEINT, 0)
        def INT1(self):
            return self.getToken(SpeakQlParser.INT1, 0)
        def INT2(self):
            return self.getToken(SpeakQlParser.INT2, 0)
        def INT3(self):
            return self.getToken(SpeakQlParser.INT3, 0)
        def INT4(self):
            return self.getToken(SpeakQlParser.INT4, 0)
        def INT8(self):
            return self.getToken(SpeakQlParser.INT8, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(SpeakQlParser.LengthOneDimensionContext,0)

        def ZEROFILL(self):
            return self.getToken(SpeakQlParser.ZEROFILL, 0)
        def SIGNED(self):
            return self.getToken(SpeakQlParser.SIGNED, 0)
        def UNSIGNED(self):
            return self.getToken(SpeakQlParser.UNSIGNED, 0)
        def REAL(self):
            return self.getToken(SpeakQlParser.REAL, 0)
        def lengthTwoDimension(self):
            return self.getTypedRuleContext(SpeakQlParser.LengthTwoDimensionContext,0)

        def DOUBLE(self):
            return self.getToken(SpeakQlParser.DOUBLE, 0)
        def PRECISION(self):
            return self.getToken(SpeakQlParser.PRECISION, 0)
        def DECIMAL(self):
            return self.getToken(SpeakQlParser.DECIMAL, 0)
        def DEC(self):
            return self.getToken(SpeakQlParser.DEC, 0)
        def FIXED(self):
            return self.getToken(SpeakQlParser.FIXED, 0)
        def NUMERIC(self):
            return self.getToken(SpeakQlParser.NUMERIC, 0)
        def FLOAT(self):
            return self.getToken(SpeakQlParser.FLOAT, 0)
        def FLOAT4(self):
            return self.getToken(SpeakQlParser.FLOAT4, 0)
        def FLOAT8(self):
            return self.getToken(SpeakQlParser.FLOAT8, 0)
        def lengthTwoOptionalDimension(self):
            return self.getTypedRuleContext(SpeakQlParser.LengthTwoOptionalDimensionContext,0)

        def BIT(self):
            return self.getToken(SpeakQlParser.BIT, 0)
        def TIME(self):
            return self.getToken(SpeakQlParser.TIME, 0)
        def TIMESTAMP(self):
            return self.getToken(SpeakQlParser.TIMESTAMP, 0)
        def DATETIME(self):
            return self.getToken(SpeakQlParser.DATETIME, 0)
        def BINARY(self):
            return self.getToken(SpeakQlParser.BINARY, 0)
        def VARBINARY(self):
            return self.getToken(SpeakQlParser.VARBINARY, 0)
        def BLOB(self):
            return self.getToken(SpeakQlParser.BLOB, 0)
        def YEAR(self):
            return self.getToken(SpeakQlParser.YEAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimensionDataType" ):
                listener.enterDimensionDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimensionDataType" ):
                listener.exitDimensionDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDimensionDataType" ):
                return visitor.visitDimensionDataType(self)
            else:
                return visitor.visitChildren(self)


    class StringDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def CHAR(self):
            return self.getToken(SpeakQlParser.CHAR, 0)
        def CHARACTER(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.CHARACTER)
            else:
                return self.getToken(SpeakQlParser.CHARACTER, i)
        def VARCHAR(self):
            return self.getToken(SpeakQlParser.VARCHAR, 0)
        def TINYTEXT(self):
            return self.getToken(SpeakQlParser.TINYTEXT, 0)
        def TEXT(self):
            return self.getToken(SpeakQlParser.TEXT, 0)
        def MEDIUMTEXT(self):
            return self.getToken(SpeakQlParser.MEDIUMTEXT, 0)
        def LONGTEXT(self):
            return self.getToken(SpeakQlParser.LONGTEXT, 0)
        def NCHAR(self):
            return self.getToken(SpeakQlParser.NCHAR, 0)
        def NVARCHAR(self):
            return self.getToken(SpeakQlParser.NVARCHAR, 0)
        def LONG(self):
            return self.getToken(SpeakQlParser.LONG, 0)
        def VARYING(self):
            return self.getToken(SpeakQlParser.VARYING, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(SpeakQlParser.LengthOneDimensionContext,0)

        def BINARY(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.BINARY)
            else:
                return self.getToken(SpeakQlParser.BINARY, i)
        def charsetName(self):
            return self.getTypedRuleContext(SpeakQlParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(SpeakQlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(SpeakQlParser.CollationNameContext,0)

        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)
        def CHARSET(self):
            return self.getToken(SpeakQlParser.CHARSET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringDataType" ):
                listener.enterStringDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringDataType" ):
                listener.exitStringDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringDataType" ):
                return visitor.visitStringDataType(self)
            else:
                return visitor.visitChildren(self)


    class LongVarcharDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def LONG(self):
            return self.getToken(SpeakQlParser.LONG, 0)
        def VARCHAR(self):
            return self.getToken(SpeakQlParser.VARCHAR, 0)
        def BINARY(self):
            return self.getToken(SpeakQlParser.BINARY, 0)
        def charsetName(self):
            return self.getTypedRuleContext(SpeakQlParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(SpeakQlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(SpeakQlParser.CollationNameContext,0)

        def CHARACTER(self):
            return self.getToken(SpeakQlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)
        def CHARSET(self):
            return self.getToken(SpeakQlParser.CHARSET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLongVarcharDataType" ):
                listener.enterLongVarcharDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLongVarcharDataType" ):
                listener.exitLongVarcharDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLongVarcharDataType" ):
                return visitor.visitLongVarcharDataType(self)
            else:
                return visitor.visitChildren(self)


    class NationalStringDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def NATIONAL(self):
            return self.getToken(SpeakQlParser.NATIONAL, 0)
        def VARCHAR(self):
            return self.getToken(SpeakQlParser.VARCHAR, 0)
        def CHARACTER(self):
            return self.getToken(SpeakQlParser.CHARACTER, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(SpeakQlParser.LengthOneDimensionContext,0)

        def BINARY(self):
            return self.getToken(SpeakQlParser.BINARY, 0)
        def NCHAR(self):
            return self.getToken(SpeakQlParser.NCHAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNationalStringDataType" ):
                listener.enterNationalStringDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNationalStringDataType" ):
                listener.exitNationalStringDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNationalStringDataType" ):
                return visitor.visitNationalStringDataType(self)
            else:
                return visitor.visitChildren(self)


    class SimpleDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(SpeakQlParser.DATE, 0)
        def TINYBLOB(self):
            return self.getToken(SpeakQlParser.TINYBLOB, 0)
        def MEDIUMBLOB(self):
            return self.getToken(SpeakQlParser.MEDIUMBLOB, 0)
        def LONGBLOB(self):
            return self.getToken(SpeakQlParser.LONGBLOB, 0)
        def BOOL(self):
            return self.getToken(SpeakQlParser.BOOL, 0)
        def BOOLEAN(self):
            return self.getToken(SpeakQlParser.BOOLEAN, 0)
        def SERIAL(self):
            return self.getToken(SpeakQlParser.SERIAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDataType" ):
                listener.enterSimpleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDataType" ):
                listener.exitSimpleDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleDataType" ):
                return visitor.visitSimpleDataType(self)
            else:
                return visitor.visitChildren(self)



    def dataType(self):

        localctx = SpeakQlParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 6015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,879,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.StringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5884
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.CHARACTER or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (SpeakQlParser.CHAR - 225)) | (1 << (SpeakQlParser.VARCHAR - 225)) | (1 << (SpeakQlParser.NVARCHAR - 225)) | (1 << (SpeakQlParser.LONG - 225)) | (1 << (SpeakQlParser.TINYTEXT - 225)) | (1 << (SpeakQlParser.TEXT - 225)) | (1 << (SpeakQlParser.MEDIUMTEXT - 225)) | (1 << (SpeakQlParser.LONGTEXT - 225)))) != 0) or _la==SpeakQlParser.NCHAR):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.VARYING:
                    self.state = 5885
                    self.match(SpeakQlParser.VARYING)


                self.state = 5889
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,846,self._ctx)
                if la_ == 1:
                    self.state = 5888
                    self.lengthOneDimension()


                self.state = 5892
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,847,self._ctx)
                if la_ == 1:
                    self.state = 5891
                    self.match(SpeakQlParser.BINARY)


                self.state = 5900
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,849,self._ctx)
                if la_ == 1:
                    self.state = 5897
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SpeakQlParser.CHARACTER]:
                        self.state = 5894
                        self.match(SpeakQlParser.CHARACTER)
                        self.state = 5895
                        self.match(SpeakQlParser.SET)
                        pass
                    elif token in [SpeakQlParser.CHARSET]:
                        self.state = 5896
                        self.match(SpeakQlParser.CHARSET)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 5899
                    self.charsetName()


                self.state = 5905
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,850,self._ctx)
                if la_ == 1:
                    self.state = 5902
                    self.match(SpeakQlParser.COLLATE)
                    self.state = 5903
                    self.collationName()

                elif la_ == 2:
                    self.state = 5904
                    self.match(SpeakQlParser.BINARY)


                pass

            elif la_ == 2:
                localctx = SpeakQlParser.NationalStringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5907
                self.match(SpeakQlParser.NATIONAL)
                self.state = 5908
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.CHARACTER or _la==SpeakQlParser.VARCHAR):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5910
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,851,self._ctx)
                if la_ == 1:
                    self.state = 5909
                    self.lengthOneDimension()


                self.state = 5913
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,852,self._ctx)
                if la_ == 1:
                    self.state = 5912
                    self.match(SpeakQlParser.BINARY)


                pass

            elif la_ == 3:
                localctx = SpeakQlParser.NationalStringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5915
                self.match(SpeakQlParser.NCHAR)
                self.state = 5916
                localctx.typeName = self.match(SpeakQlParser.VARCHAR)
                self.state = 5918
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,853,self._ctx)
                if la_ == 1:
                    self.state = 5917
                    self.lengthOneDimension()


                self.state = 5921
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,854,self._ctx)
                if la_ == 1:
                    self.state = 5920
                    self.match(SpeakQlParser.BINARY)


                pass

            elif la_ == 4:
                localctx = SpeakQlParser.NationalVaryingStringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5923
                self.match(SpeakQlParser.NATIONAL)
                self.state = 5924
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.CHARACTER or _la==SpeakQlParser.CHAR):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5925
                self.match(SpeakQlParser.VARYING)
                self.state = 5927
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,855,self._ctx)
                if la_ == 1:
                    self.state = 5926
                    self.lengthOneDimension()


                self.state = 5930
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,856,self._ctx)
                if la_ == 1:
                    self.state = 5929
                    self.match(SpeakQlParser.BINARY)


                pass

            elif la_ == 5:
                localctx = SpeakQlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5932
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & ((1 << (SpeakQlParser.TINYINT - 199)) | (1 << (SpeakQlParser.SMALLINT - 199)) | (1 << (SpeakQlParser.MEDIUMINT - 199)) | (1 << (SpeakQlParser.MIDDLEINT - 199)) | (1 << (SpeakQlParser.INT - 199)) | (1 << (SpeakQlParser.INT1 - 199)) | (1 << (SpeakQlParser.INT2 - 199)) | (1 << (SpeakQlParser.INT3 - 199)) | (1 << (SpeakQlParser.INT4 - 199)) | (1 << (SpeakQlParser.INT8 - 199)) | (1 << (SpeakQlParser.INTEGER - 199)) | (1 << (SpeakQlParser.BIGINT - 199)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5934
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,857,self._ctx)
                if la_ == 1:
                    self.state = 5933
                    self.lengthOneDimension()


                self.state = 5937
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,858,self._ctx)
                if la_ == 1:
                    self.state = 5936
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.UNSIGNED or _la==SpeakQlParser.SIGNED):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.ZEROFILL:
                    self.state = 5939
                    self.match(SpeakQlParser.ZEROFILL)


                pass

            elif la_ == 6:
                localctx = SpeakQlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5942
                localctx.typeName = self.match(SpeakQlParser.REAL)
                self.state = 5944
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,860,self._ctx)
                if la_ == 1:
                    self.state = 5943
                    self.lengthTwoDimension()


                self.state = 5947
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,861,self._ctx)
                if la_ == 1:
                    self.state = 5946
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.UNSIGNED or _la==SpeakQlParser.SIGNED):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.ZEROFILL:
                    self.state = 5949
                    self.match(SpeakQlParser.ZEROFILL)


                pass

            elif la_ == 7:
                localctx = SpeakQlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5952
                localctx.typeName = self.match(SpeakQlParser.DOUBLE)
                self.state = 5954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.PRECISION:
                    self.state = 5953
                    self.match(SpeakQlParser.PRECISION)


                self.state = 5957
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,864,self._ctx)
                if la_ == 1:
                    self.state = 5956
                    self.lengthTwoDimension()


                self.state = 5960
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,865,self._ctx)
                if la_ == 1:
                    self.state = 5959
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.UNSIGNED or _la==SpeakQlParser.SIGNED):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.ZEROFILL:
                    self.state = 5962
                    self.match(SpeakQlParser.ZEROFILL)


                pass

            elif la_ == 8:
                localctx = SpeakQlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 5965
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & ((1 << (SpeakQlParser.FLOAT - 214)) | (1 << (SpeakQlParser.FLOAT4 - 214)) | (1 << (SpeakQlParser.FLOAT8 - 214)) | (1 << (SpeakQlParser.DECIMAL - 214)) | (1 << (SpeakQlParser.DEC - 214)) | (1 << (SpeakQlParser.NUMERIC - 214)))) != 0) or _la==SpeakQlParser.FIXED):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5967
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,867,self._ctx)
                if la_ == 1:
                    self.state = 5966
                    self.lengthTwoOptionalDimension()


                self.state = 5970
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,868,self._ctx)
                if la_ == 1:
                    self.state = 5969
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.UNSIGNED or _la==SpeakQlParser.SIGNED):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.ZEROFILL:
                    self.state = 5972
                    self.match(SpeakQlParser.ZEROFILL)


                pass

            elif la_ == 9:
                localctx = SpeakQlParser.SimpleDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 5975
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TINYBLOB - 220)) | (1 << (SpeakQlParser.MEDIUMBLOB - 220)) | (1 << (SpeakQlParser.LONGBLOB - 220)) | (1 << (SpeakQlParser.SERIAL - 220)))) != 0) or _la==SpeakQlParser.BOOL or _la==SpeakQlParser.BOOLEAN):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 10:
                localctx = SpeakQlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 5976
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 221)) & ~0x3f) == 0 and ((1 << (_la - 221)) & ((1 << (SpeakQlParser.TIME - 221)) | (1 << (SpeakQlParser.TIMESTAMP - 221)) | (1 << (SpeakQlParser.DATETIME - 221)) | (1 << (SpeakQlParser.YEAR - 221)) | (1 << (SpeakQlParser.BINARY - 221)) | (1 << (SpeakQlParser.VARBINARY - 221)) | (1 << (SpeakQlParser.BLOB - 221)))) != 0) or _la==SpeakQlParser.BIT):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5978
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,870,self._ctx)
                if la_ == 1:
                    self.state = 5977
                    self.lengthOneDimension()


                pass

            elif la_ == 11:
                localctx = SpeakQlParser.CollectionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 5980
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.SET or _la==SpeakQlParser.ENUM):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5981
                self.collectionOptions()
                self.state = 5983
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,871,self._ctx)
                if la_ == 1:
                    self.state = 5982
                    self.match(SpeakQlParser.BINARY)


                self.state = 5991
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,873,self._ctx)
                if la_ == 1:
                    self.state = 5988
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SpeakQlParser.CHARACTER]:
                        self.state = 5985
                        self.match(SpeakQlParser.CHARACTER)
                        self.state = 5986
                        self.match(SpeakQlParser.SET)
                        pass
                    elif token in [SpeakQlParser.CHARSET]:
                        self.state = 5987
                        self.match(SpeakQlParser.CHARSET)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 5990
                    self.charsetName()


                pass

            elif la_ == 12:
                localctx = SpeakQlParser.SpatialDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 5993
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.JSON or ((((_la - 772)) & ~0x3f) == 0 and ((1 << (_la - 772)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTION - 772)) | (1 << (SpeakQlParser.GEOMCOLLECTION - 772)) | (1 << (SpeakQlParser.GEOMETRY - 772)) | (1 << (SpeakQlParser.LINESTRING - 772)) | (1 << (SpeakQlParser.MULTILINESTRING - 772)) | (1 << (SpeakQlParser.MULTIPOINT - 772)) | (1 << (SpeakQlParser.MULTIPOLYGON - 772)) | (1 << (SpeakQlParser.POINT - 772)) | (1 << (SpeakQlParser.POLYGON - 772)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 13:
                localctx = SpeakQlParser.LongVarcharDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 5994
                localctx.typeName = self.match(SpeakQlParser.LONG)
                self.state = 5996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.VARCHAR:
                    self.state = 5995
                    self.match(SpeakQlParser.VARCHAR)


                self.state = 5999
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,875,self._ctx)
                if la_ == 1:
                    self.state = 5998
                    self.match(SpeakQlParser.BINARY)


                self.state = 6007
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,877,self._ctx)
                if la_ == 1:
                    self.state = 6004
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SpeakQlParser.CHARACTER]:
                        self.state = 6001
                        self.match(SpeakQlParser.CHARACTER)
                        self.state = 6002
                        self.match(SpeakQlParser.SET)
                        pass
                    elif token in [SpeakQlParser.CHARSET]:
                        self.state = 6003
                        self.match(SpeakQlParser.CHARSET)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 6006
                    self.charsetName()


                self.state = 6011
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,878,self._ctx)
                if la_ == 1:
                    self.state = 6009
                    self.match(SpeakQlParser.COLLATE)
                    self.state = 6010
                    self.collationName()


                pass

            elif la_ == 14:
                localctx = SpeakQlParser.LongVarbinaryDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 6013
                self.match(SpeakQlParser.LONG)
                self.state = 6014
                self.match(SpeakQlParser.VARBINARY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.STRING_LITERAL)
            else:
                return self.getToken(SpeakQlParser.STRING_LITERAL, i)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_collectionOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionOptions" ):
                listener.enterCollectionOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionOptions" ):
                listener.exitCollectionOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollectionOptions" ):
                return visitor.visitCollectionOptions(self)
            else:
                return visitor.visitChildren(self)




    def collectionOptions(self):

        localctx = SpeakQlParser.CollectionOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_collectionOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6017
            self.leftParen()
            self.state = 6018
            self.match(SpeakQlParser.STRING_LITERAL)
            self.state = 6023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 6019
                self.match(SpeakQlParser.COMMA)
                self.state = 6020
                self.match(SpeakQlParser.STRING_LITERAL)
                self.state = 6025
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6026
            self.rightParen()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConvertedDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typeName = None # Token

        def BINARY(self):
            return self.getToken(SpeakQlParser.BINARY, 0)

        def NCHAR(self):
            return self.getToken(SpeakQlParser.NCHAR, 0)

        def lengthOneDimension(self):
            return self.getTypedRuleContext(SpeakQlParser.LengthOneDimensionContext,0)


        def CHAR(self):
            return self.getToken(SpeakQlParser.CHAR, 0)

        def charsetName(self):
            return self.getTypedRuleContext(SpeakQlParser.CharsetNameContext,0)


        def CHARACTER(self):
            return self.getToken(SpeakQlParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(SpeakQlParser.SET, 0)

        def CHARSET(self):
            return self.getToken(SpeakQlParser.CHARSET, 0)

        def DATE(self):
            return self.getToken(SpeakQlParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(SpeakQlParser.DATETIME, 0)

        def TIME(self):
            return self.getToken(SpeakQlParser.TIME, 0)

        def JSON(self):
            return self.getToken(SpeakQlParser.JSON, 0)

        def DECIMAL(self):
            return self.getToken(SpeakQlParser.DECIMAL, 0)

        def lengthTwoDimension(self):
            return self.getTypedRuleContext(SpeakQlParser.LengthTwoDimensionContext,0)


        def SIGNED(self):
            return self.getToken(SpeakQlParser.SIGNED, 0)

        def UNSIGNED(self):
            return self.getToken(SpeakQlParser.UNSIGNED, 0)

        def INTEGER(self):
            return self.getToken(SpeakQlParser.INTEGER, 0)

        def ARRAY(self):
            return self.getToken(SpeakQlParser.ARRAY, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_convertedDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConvertedDataType" ):
                listener.enterConvertedDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConvertedDataType" ):
                listener.exitConvertedDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConvertedDataType" ):
                return visitor.visitConvertedDataType(self)
            else:
                return visitor.visitChildren(self)




    def convertedDataType(self):

        localctx = SpeakQlParser.ConvertedDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_convertedDataType)
        self._la = 0 # Token type
        try:
            self.state = 6055
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,887,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6028
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.BINARY or _la==SpeakQlParser.NCHAR):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LR_BRACKET:
                    self.state = 6029
                    self.lengthOneDimension()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6032
                localctx.typeName = self.match(SpeakQlParser.CHAR)
                self.state = 6034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LR_BRACKET:
                    self.state = 6033
                    self.lengthOneDimension()


                self.state = 6042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.CHARACTER or _la==SpeakQlParser.CHARSET:
                    self.state = 6039
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SpeakQlParser.CHARACTER]:
                        self.state = 6036
                        self.match(SpeakQlParser.CHARACTER)
                        self.state = 6037
                        self.match(SpeakQlParser.SET)
                        pass
                    elif token in [SpeakQlParser.CHARSET]:
                        self.state = 6038
                        self.match(SpeakQlParser.CHARSET)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 6041
                    self.charsetName()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6044
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.DATETIME - 220)))) != 0) or _la==SpeakQlParser.JSON):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6045
                localctx.typeName = self.match(SpeakQlParser.DECIMAL)
                self.state = 6047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LR_BRACKET:
                    self.state = 6046
                    self.lengthTwoDimension()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6049
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.UNSIGNED or _la==SpeakQlParser.SIGNED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.INTEGER:
                    self.state = 6050
                    self.match(SpeakQlParser.INTEGER)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6053
                self.match(SpeakQlParser.UNSIGNED)
                self.state = 6054
                self.match(SpeakQlParser.ARRAY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthOneDimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_lengthOneDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthOneDimension" ):
                listener.enterLengthOneDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthOneDimension" ):
                listener.exitLengthOneDimension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLengthOneDimension" ):
                return visitor.visitLengthOneDimension(self)
            else:
                return visitor.visitChildren(self)




    def lengthOneDimension(self):

        localctx = SpeakQlParser.LengthOneDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_lengthOneDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6057
            self.leftParen()
            self.state = 6058
            self.decimalLiteral()
            self.state = 6059
            self.rightParen()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthTwoDimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,i)


        def COMMA(self):
            return self.getToken(SpeakQlParser.COMMA, 0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_lengthTwoDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthTwoDimension" ):
                listener.enterLengthTwoDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthTwoDimension" ):
                listener.exitLengthTwoDimension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLengthTwoDimension" ):
                return visitor.visitLengthTwoDimension(self)
            else:
                return visitor.visitChildren(self)




    def lengthTwoDimension(self):

        localctx = SpeakQlParser.LengthTwoDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_lengthTwoDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6061
            self.leftParen()
            self.state = 6062
            self.decimalLiteral()
            self.state = 6063
            self.match(SpeakQlParser.COMMA)
            self.state = 6064
            self.decimalLiteral()
            self.state = 6065
            self.rightParen()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthTwoOptionalDimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,i)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def COMMA(self):
            return self.getToken(SpeakQlParser.COMMA, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_lengthTwoOptionalDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthTwoOptionalDimension" ):
                listener.enterLengthTwoOptionalDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthTwoOptionalDimension" ):
                listener.exitLengthTwoOptionalDimension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLengthTwoOptionalDimension" ):
                return visitor.visitLengthTwoOptionalDimension(self)
            else:
                return visitor.visitChildren(self)




    def lengthTwoOptionalDimension(self):

        localctx = SpeakQlParser.LengthTwoOptionalDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_lengthTwoOptionalDimension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6067
            self.leftParen()
            self.state = 6068
            self.decimalLiteral()
            self.state = 6071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.COMMA:
                self.state = 6069
                self.match(SpeakQlParser.COMMA)
                self.state = 6070
                self.decimalLiteral()


            self.state = 6073
            self.rightParen()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.UidContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.UidContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_uidList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUidList" ):
                listener.enterUidList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUidList" ):
                listener.exitUidList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUidList" ):
                return visitor.visitUidList(self)
            else:
                return visitor.visitChildren(self)




    def uidList(self):

        localctx = SpeakQlParser.UidListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_uidList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6075
            self.uid()
            self.state = 6080
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,889,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6076
                    self.match(SpeakQlParser.COMMA)
                    self.state = 6077
                    self.uid() 
                self.state = 6082
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,889,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.TableNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTables" ):
                listener.enterTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTables" ):
                listener.exitTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTables" ):
                return visitor.visitTables(self)
            else:
                return visitor.visitChildren(self)




    def tables(self):

        localctx = SpeakQlParser.TablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_tables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6083
            self.tableName()
            self.state = 6088
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,890,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6084
                    self.match(SpeakQlParser.COMMA)
                    self.state = 6085
                    self.tableName() 
                self.state = 6090
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,890,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnNamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def indexColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.IndexColumnNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.IndexColumnNameContext,i)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_indexColumnNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnNames" ):
                listener.enterIndexColumnNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnNames" ):
                listener.exitIndexColumnNames(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexColumnNames" ):
                return visitor.visitIndexColumnNames(self)
            else:
                return visitor.visitChildren(self)




    def indexColumnNames(self):

        localctx = SpeakQlParser.IndexColumnNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_indexColumnNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6091
            self.leftParen()
            self.state = 6092
            self.indexColumnName()
            self.state = 6097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 6093
                self.match(SpeakQlParser.COMMA)
                self.state = 6094
                self.indexColumnName()
                self.state = 6099
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6100
            self.rightParen()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressions" ):
                return visitor.visitExpressions(self)
            else:
                return visitor.visitChildren(self)




    def expressions(self):

        localctx = SpeakQlParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6102
            self.expression(0)
            self.state = 6107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 6103
                self.match(SpeakQlParser.COMMA)
                self.state = 6104
                self.expression(0)
                self.state = 6109
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsWithDefaultsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionOrDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ExpressionOrDefaultContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ExpressionOrDefaultContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_expressionsWithDefaults

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionsWithDefaults" ):
                listener.enterExpressionsWithDefaults(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionsWithDefaults" ):
                listener.exitExpressionsWithDefaults(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionsWithDefaults" ):
                return visitor.visitExpressionsWithDefaults(self)
            else:
                return visitor.visitChildren(self)




    def expressionsWithDefaults(self):

        localctx = SpeakQlParser.ExpressionsWithDefaultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_expressionsWithDefaults)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6110
            self.expressionOrDefault()
            self.state = 6115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 6111
                self.match(SpeakQlParser.COMMA)
                self.state = 6112
                self.expressionOrDefault()
                self.state = 6117
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_constants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstants" ):
                listener.enterConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstants" ):
                listener.exitConstants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstants" ):
                return visitor.visitConstants(self)
            else:
                return visitor.visitChildren(self)




    def constants(self):

        localctx = SpeakQlParser.ConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_constants)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6118
            self.constant()
            self.state = 6123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 6119
                self.match(SpeakQlParser.COMMA)
                self.state = 6120
                self.constant()
                self.state = 6125
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStringsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.STRING_LITERAL)
            else:
                return self.getToken(SpeakQlParser.STRING_LITERAL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_simpleStrings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStrings" ):
                listener.enterSimpleStrings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStrings" ):
                listener.exitSimpleStrings(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleStrings" ):
                return visitor.visitSimpleStrings(self)
            else:
                return visitor.visitChildren(self)




    def simpleStrings(self):

        localctx = SpeakQlParser.SimpleStringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_simpleStrings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6126
            self.match(SpeakQlParser.STRING_LITERAL)
            self.state = 6131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 6127
                self.match(SpeakQlParser.COMMA)
                self.state = 6128
                self.match(SpeakQlParser.STRING_LITERAL)
                self.state = 6133
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserVariablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.LOCAL_ID)
            else:
                return self.getToken(SpeakQlParser.LOCAL_ID, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_userVariables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserVariables" ):
                listener.enterUserVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserVariables" ):
                listener.exitUserVariables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserVariables" ):
                return visitor.visitUserVariables(self)
            else:
                return visitor.visitChildren(self)




    def userVariables(self):

        localctx = SpeakQlParser.UserVariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_userVariables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6134
            self.match(SpeakQlParser.LOCAL_ID)
            self.state = 6139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 6135
                self.match(SpeakQlParser.COMMA)
                self.state = 6136
                self.match(SpeakQlParser.LOCAL_ID)
                self.state = 6141
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(SpeakQlParser.NULL_LITERAL, 0)

        def constant(self):
            return self.getTypedRuleContext(SpeakQlParser.ConstantContext,0)


        def currentTimestamp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.CurrentTimestampContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.CurrentTimestampContext,i)


        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def ON(self):
            return self.getToken(SpeakQlParser.ON, 0)

        def UPDATE(self):
            return self.getToken(SpeakQlParser.UPDATE, 0)

        def unaryOperator(self):
            return self.getTypedRuleContext(SpeakQlParser.UnaryOperatorContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultValue" ):
                return visitor.visitDefaultValue(self)
            else:
                return visitor.visitChildren(self)




    def defaultValue(self):

        localctx = SpeakQlParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,898,self._ctx)
            if la_ == 1:
                self.state = 6142
                self.match(SpeakQlParser.NULL_LITERAL)
                pass

            elif la_ == 2:
                self.state = 6144
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,897,self._ctx)
                if la_ == 1:
                    self.state = 6143
                    self.unaryOperator()


                self.state = 6146
                self.constant()
                pass

            elif la_ == 3:
                self.state = 6147
                self.currentTimestamp()
                pass

            elif la_ == 4:
                self.state = 6148
                self.leftParen()
                self.state = 6149
                self.expression(0)
                self.state = 6150
                self.rightParen()
                pass


            self.state = 6157
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,899,self._ctx)
            if la_ == 1:
                self.state = 6154
                self.match(SpeakQlParser.ON)
                self.state = 6155
                self.match(SpeakQlParser.UPDATE)
                self.state = 6156
                self.currentTimestamp()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CurrentTimestampContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOW(self):
            return self.getToken(SpeakQlParser.NOW, 0)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def CURRENT_TIMESTAMP(self):
            return self.getToken(SpeakQlParser.CURRENT_TIMESTAMP, 0)

        def LOCALTIME(self):
            return self.getToken(SpeakQlParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(SpeakQlParser.LOCALTIMESTAMP, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_currentTimestamp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentTimestamp" ):
                listener.enterCurrentTimestamp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentTimestamp" ):
                listener.exitCurrentTimestamp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentTimestamp" ):
                return visitor.visitCurrentTimestamp(self)
            else:
                return visitor.visitChildren(self)




    def currentTimestamp(self):

        localctx = SpeakQlParser.CurrentTimestampContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_currentTimestamp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6175
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.CURRENT_TIMESTAMP, SpeakQlParser.LOCALTIME, SpeakQlParser.LOCALTIMESTAMP]:
                self.state = 6159
                _la = self._input.LA(1)
                if not(((((_la - 315)) & ~0x3f) == 0 and ((1 << (_la - 315)) & ((1 << (SpeakQlParser.CURRENT_TIMESTAMP - 315)) | (1 << (SpeakQlParser.LOCALTIME - 315)) | (1 << (SpeakQlParser.LOCALTIMESTAMP - 315)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6166
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,901,self._ctx)
                if la_ == 1:
                    self.state = 6160
                    self.leftParen()
                    self.state = 6162
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & ((1 << (SpeakQlParser.ZERO_DECIMAL - 1103)) | (1 << (SpeakQlParser.ONE_DECIMAL - 1103)) | (1 << (SpeakQlParser.TWO_DECIMAL - 1103)) | (1 << (SpeakQlParser.DECIMAL_LITERAL - 1103)) | (1 << (SpeakQlParser.REAL_LITERAL - 1103)))) != 0):
                        self.state = 6161
                        self.decimalLiteral()


                    self.state = 6164
                    self.rightParen()


                pass
            elif token in [SpeakQlParser.NOW]:
                self.state = 6168
                self.match(SpeakQlParser.NOW)
                self.state = 6169
                self.leftParen()
                self.state = 6171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & ((1 << (SpeakQlParser.ZERO_DECIMAL - 1103)) | (1 << (SpeakQlParser.ONE_DECIMAL - 1103)) | (1 << (SpeakQlParser.TWO_DECIMAL - 1103)) | (1 << (SpeakQlParser.DECIMAL_LITERAL - 1103)) | (1 << (SpeakQlParser.REAL_LITERAL - 1103)))) != 0):
                    self.state = 6170
                    self.decimalLiteral()


                self.state = 6173
                self.rightParen()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(SpeakQlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_expressionOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionOrDefault" ):
                listener.enterExpressionOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionOrDefault" ):
                listener.exitExpressionOrDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionOrDefault" ):
                return visitor.visitExpressionOrDefault(self)
            else:
                return visitor.visitChildren(self)




    def expressionOrDefault(self):

        localctx = SpeakQlParser.ExpressionOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_expressionOrDefault)
        try:
            self.state = 6179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,904,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6177
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6178
                self.match(SpeakQlParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SpeakQlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SpeakQlParser.EXISTS, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_ifExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExists" ):
                listener.enterIfExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExists" ):
                listener.exitIfExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfExists" ):
                return visitor.visitIfExists(self)
            else:
                return visitor.visitChildren(self)




    def ifExists(self):

        localctx = SpeakQlParser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6181
            self.match(SpeakQlParser.IF)
            self.state = 6182
            self.match(SpeakQlParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNotExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SpeakQlParser.IF, 0)

        def NOT(self):
            return self.getToken(SpeakQlParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SpeakQlParser.EXISTS, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_ifNotExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNotExists" ):
                listener.enterIfNotExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNotExists" ):
                listener.exitIfNotExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfNotExists" ):
                return visitor.visitIfNotExists(self)
            else:
                return visitor.visitChildren(self)




    def ifNotExists(self):

        localctx = SpeakQlParser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6184
            self.match(SpeakQlParser.IF)
            self.state = 6185
            self.match(SpeakQlParser.NOT)
            self.state = 6186
            self.match(SpeakQlParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_functionCall

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpecificFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def specificFunction(self):
            return self.getTypedRuleContext(SpeakQlParser.SpecificFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecificFunctionCall" ):
                listener.enterSpecificFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecificFunctionCall" ):
                listener.exitSpecificFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecificFunctionCall" ):
                return visitor.visitSpecificFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class PasswordFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def passwordFunctionClause(self):
            return self.getTypedRuleContext(SpeakQlParser.PasswordFunctionClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordFunctionCall" ):
                listener.enterPasswordFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordFunctionCall" ):
                listener.exitPasswordFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPasswordFunctionCall" ):
                return visitor.visitPasswordFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class UdfFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(SpeakQlParser.FullIdContext,0)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def functionArgs(self):
            return self.getTypedRuleContext(SpeakQlParser.FunctionArgsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfFunctionCall" ):
                listener.enterUdfFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfFunctionCall" ):
                listener.exitUdfFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfFunctionCall" ):
                return visitor.visitUdfFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class NonAggregateFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nonAggregateWindowedFunction(self):
            return self.getTypedRuleContext(SpeakQlParser.NonAggregateWindowedFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonAggregateFunctionCall" ):
                listener.enterNonAggregateFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonAggregateFunctionCall" ):
                listener.exitNonAggregateFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonAggregateFunctionCall" ):
                return visitor.visitNonAggregateFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class AggregateFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregateWindowedFunction(self):
            return self.getTypedRuleContext(SpeakQlParser.AggregateWindowedFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateFunctionCall" ):
                listener.enterAggregateFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateFunctionCall" ):
                listener.exitAggregateFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregateFunctionCall" ):
                return visitor.visitAggregateFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class ScalarFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalarFunctionName(self):
            return self.getTypedRuleContext(SpeakQlParser.ScalarFunctionNameContext,0)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def functionArgs(self):
            return self.getTypedRuleContext(SpeakQlParser.FunctionArgsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarFunctionCall" ):
                listener.enterScalarFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarFunctionCall" ):
                listener.exitScalarFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalarFunctionCall" ):
                return visitor.visitScalarFunctionCall(self)
            else:
                return visitor.visitChildren(self)



    def functionCall(self):

        localctx = SpeakQlParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_functionCall)
        try:
            self.state = 6206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,907,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.SpecificFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 6188
                self.specificFunction()
                pass

            elif la_ == 2:
                localctx = SpeakQlParser.AggregateFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 6189
                self.aggregateWindowedFunction()
                pass

            elif la_ == 3:
                localctx = SpeakQlParser.NonAggregateFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 6190
                self.nonAggregateWindowedFunction()
                pass

            elif la_ == 4:
                localctx = SpeakQlParser.ScalarFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 6191
                self.scalarFunctionName()
                self.state = 6192
                self.leftParen()
                self.state = 6194
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,905,self._ctx)
                if la_ == 1:
                    self.state = 6193
                    self.functionArgs()


                self.state = 6196
                self.rightParen()
                pass

            elif la_ == 5:
                localctx = SpeakQlParser.UdfFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 6198
                self.fullId()
                self.state = 6199
                self.leftParen()
                self.state = 6201
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,906,self._ctx)
                if la_ == 1:
                    self.state = 6200
                    self.functionArgs()


                self.state = 6203
                self.rightParen()
                pass

            elif la_ == 6:
                localctx = SpeakQlParser.PasswordFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 6205
                self.passwordFunctionClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeftParenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(SpeakQlParser.LR_BRACKET, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_leftParen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeftParen" ):
                listener.enterLeftParen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeftParen" ):
                listener.exitLeftParen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLeftParen" ):
                return visitor.visitLeftParen(self)
            else:
                return visitor.visitChildren(self)




    def leftParen(self):

        localctx = SpeakQlParser.LeftParenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_leftParen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6208
            self.match(SpeakQlParser.LR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightParenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RR_BRACKET(self):
            return self.getToken(SpeakQlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_rightParen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightParen" ):
                listener.enterRightParen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightParen" ):
                listener.exitRightParen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRightParen" ):
                return visitor.visitRightParen(self)
            else:
                return visitor.visitChildren(self)




    def rightParen(self):

        localctx = SpeakQlParser.RightParenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_rightParen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6210
            self.match(SpeakQlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecificFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_specificFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PositionFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SpecificFunctionContext
            super().__init__(parser)
            self.positionString = None # StringLiteralContext
            self.positionExpression = None # ExpressionContext
            self.inString = None # StringLiteralContext
            self.inExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(SpeakQlParser.POSITION, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def IN(self):
            return self.getToken(SpeakQlParser.IN, 0)
        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.StringLiteralContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionFunctionCall" ):
                listener.enterPositionFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionFunctionCall" ):
                listener.exitPositionFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionFunctionCall" ):
                return visitor.visitPositionFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class TrimFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SpecificFunctionContext
            super().__init__(parser)
            self.positioinForm = None # Token
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.fromString = None # StringLiteralContext
            self.fromExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(SpeakQlParser.TRIM, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def FROM(self):
            return self.getToken(SpeakQlParser.FROM, 0)
        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def BOTH(self):
            return self.getToken(SpeakQlParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(SpeakQlParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(SpeakQlParser.TRAILING, 0)
        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.StringLiteralContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrimFunctionCall" ):
                listener.enterTrimFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrimFunctionCall" ):
                listener.exitTrimFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrimFunctionCall" ):
                return visitor.visitTrimFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class JsonValueFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JSON_VALUE(self):
            return self.getToken(SpeakQlParser.JSON_VALUE, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(SpeakQlParser.COMMA, 0)
        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def RETURNING(self):
            return self.getToken(SpeakQlParser.RETURNING, 0)
        def convertedDataType(self):
            return self.getTypedRuleContext(SpeakQlParser.ConvertedDataTypeContext,0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.ON)
            else:
                return self.getToken(SpeakQlParser.ON, i)
        def EMPTY(self):
            return self.getToken(SpeakQlParser.EMPTY, 0)
        def ERROR(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.ERROR)
            else:
                return self.getToken(SpeakQlParser.ERROR, i)
        def NULL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.NULL_LITERAL)
            else:
                return self.getToken(SpeakQlParser.NULL_LITERAL, i)
        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.DEFAULT)
            else:
                return self.getToken(SpeakQlParser.DEFAULT, i)
        def defaultValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.DefaultValueContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.DefaultValueContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValueFunctionCall" ):
                listener.enterJsonValueFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValueFunctionCall" ):
                listener.exitJsonValueFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonValueFunctionCall" ):
                return visitor.visitJsonValueFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class CaseFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SpecificFunctionContext
            super().__init__(parser)
            self.elseArg = None # FunctionArgContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SpeakQlParser.CASE, 0)
        def END(self):
            return self.getToken(SpeakQlParser.END, 0)
        def caseFuncAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.CaseFuncAlternativeContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.CaseFuncAlternativeContext,i)

        def ELSE(self):
            return self.getToken(SpeakQlParser.ELSE, 0)
        def functionArg(self):
            return self.getTypedRuleContext(SpeakQlParser.FunctionArgContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseFunctionCall" ):
                listener.enterCaseFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseFunctionCall" ):
                listener.exitCaseFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseFunctionCall" ):
                return visitor.visitCaseFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class ExtractFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SpecificFunctionContext
            super().__init__(parser)
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(SpeakQlParser.EXTRACT, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def intervalType(self):
            return self.getTypedRuleContext(SpeakQlParser.IntervalTypeContext,0)

        def FROM(self):
            return self.getToken(SpeakQlParser.FROM, 0)
        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def stringLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.StringLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractFunctionCall" ):
                listener.enterExtractFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractFunctionCall" ):
                listener.exitExtractFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtractFunctionCall" ):
                return visitor.visitExtractFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class DataTypeFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SpecificFunctionContext
            super().__init__(parser)
            self.separator = None # Token
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(SpeakQlParser.CONVERT, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)

        def convertedDataType(self):
            return self.getTypedRuleContext(SpeakQlParser.ConvertedDataTypeContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def COMMA(self):
            return self.getToken(SpeakQlParser.COMMA, 0)
        def USING(self):
            return self.getToken(SpeakQlParser.USING, 0)
        def charsetName(self):
            return self.getTypedRuleContext(SpeakQlParser.CharsetNameContext,0)

        def CAST(self):
            return self.getToken(SpeakQlParser.CAST, 0)
        def AS(self):
            return self.getToken(SpeakQlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeFunctionCall" ):
                listener.enterDataTypeFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeFunctionCall" ):
                listener.exitDataTypeFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataTypeFunctionCall" ):
                return visitor.visitDataTypeFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class ValuesFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES(self):
            return self.getToken(SpeakQlParser.VALUES, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def fullColumnName(self):
            return self.getTypedRuleContext(SpeakQlParser.FullColumnNameContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesFunctionCall" ):
                listener.enterValuesFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesFunctionCall" ):
                listener.exitValuesFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValuesFunctionCall" ):
                return visitor.visitValuesFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class CaseExpressionFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SpecificFunctionContext
            super().__init__(parser)
            self.elseArg = None # FunctionArgContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SpeakQlParser.CASE, 0)
        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)

        def END(self):
            return self.getToken(SpeakQlParser.END, 0)
        def caseFuncAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.CaseFuncAlternativeContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.CaseFuncAlternativeContext,i)

        def ELSE(self):
            return self.getToken(SpeakQlParser.ELSE, 0)
        def functionArg(self):
            return self.getTypedRuleContext(SpeakQlParser.FunctionArgContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpressionFunctionCall" ):
                listener.enterCaseExpressionFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpressionFunctionCall" ):
                listener.exitCaseExpressionFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseExpressionFunctionCall" ):
                return visitor.visitCaseExpressionFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class SimpleFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(SpeakQlParser.CURRENT_DATE, 0)
        def CURRENT_TIME(self):
            return self.getToken(SpeakQlParser.CURRENT_TIME, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(SpeakQlParser.CURRENT_TIMESTAMP, 0)
        def CURRENT_USER(self):
            return self.getToken(SpeakQlParser.CURRENT_USER, 0)
        def LOCALTIME(self):
            return self.getToken(SpeakQlParser.LOCALTIME, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFunctionCall" ):
                listener.enterSimpleFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFunctionCall" ):
                listener.exitSimpleFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleFunctionCall" ):
                return visitor.visitSimpleFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class CharFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHAR(self):
            return self.getToken(SpeakQlParser.CHAR, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def functionArgs(self):
            return self.getTypedRuleContext(SpeakQlParser.FunctionArgsContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def USING(self):
            return self.getToken(SpeakQlParser.USING, 0)
        def charsetName(self):
            return self.getTypedRuleContext(SpeakQlParser.CharsetNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharFunctionCall" ):
                listener.enterCharFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharFunctionCall" ):
                listener.exitCharFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharFunctionCall" ):
                return visitor.visitCharFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class WeightFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SpecificFunctionContext
            super().__init__(parser)
            self.stringFormat = None # Token
            self.copyFrom(ctx)

        def WEIGHT_STRING(self):
            return self.getToken(SpeakQlParser.WEIGHT_STRING, 0)
        def leftParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.LeftParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,i)

        def rightParen(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.RightParenContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.RightParenContext,i)

        def stringLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.StringLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(SpeakQlParser.AS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)

        def levelsInWeightString(self):
            return self.getTypedRuleContext(SpeakQlParser.LevelsInWeightStringContext,0)

        def CHAR(self):
            return self.getToken(SpeakQlParser.CHAR, 0)
        def BINARY(self):
            return self.getToken(SpeakQlParser.BINARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeightFunctionCall" ):
                listener.enterWeightFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeightFunctionCall" ):
                listener.exitWeightFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWeightFunctionCall" ):
                return visitor.visitWeightFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class GetFormatFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SpecificFunctionContext
            super().__init__(parser)
            self.datetimeFormat = None # Token
            self.copyFrom(ctx)

        def GET_FORMAT(self):
            return self.getToken(SpeakQlParser.GET_FORMAT, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def COMMA(self):
            return self.getToken(SpeakQlParser.COMMA, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.StringLiteralContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def DATE(self):
            return self.getToken(SpeakQlParser.DATE, 0)
        def TIME(self):
            return self.getToken(SpeakQlParser.TIME, 0)
        def DATETIME(self):
            return self.getToken(SpeakQlParser.DATETIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetFormatFunctionCall" ):
                listener.enterGetFormatFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetFormatFunctionCall" ):
                listener.exitGetFormatFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetFormatFunctionCall" ):
                return visitor.visitGetFormatFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class SubstrFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.SpecificFunctionContext
            super().__init__(parser)
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.fromDecimal = None # DecimalLiteralContext
            self.fromExpression = None # ExpressionContext
            self.forDecimal = None # DecimalLiteralContext
            self.forExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def FROM(self):
            return self.getToken(SpeakQlParser.FROM, 0)
        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def SUBSTR(self):
            return self.getToken(SpeakQlParser.SUBSTR, 0)
        def SUBSTRING(self):
            return self.getToken(SpeakQlParser.SUBSTRING, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.StringLiteralContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,i)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,i)

        def FOR(self):
            return self.getToken(SpeakQlParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstrFunctionCall" ):
                listener.enterSubstrFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstrFunctionCall" ):
                listener.exitSubstrFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubstrFunctionCall" ):
                return visitor.visitSubstrFunctionCall(self)
            else:
                return visitor.visitChildren(self)



    def specificFunction(self):

        localctx = SpeakQlParser.SpecificFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_specificFunction)
        self._la = 0 # Token type
        try:
            self.state = 6405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,933,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.SimpleFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 6212
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.CURRENT_USER or ((((_la - 313)) & ~0x3f) == 0 and ((1 << (_la - 313)) & ((1 << (SpeakQlParser.CURRENT_DATE - 313)) | (1 << (SpeakQlParser.CURRENT_TIME - 313)) | (1 << (SpeakQlParser.CURRENT_TIMESTAMP - 313)) | (1 << (SpeakQlParser.LOCALTIME - 313)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6216
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,908,self._ctx)
                if la_ == 1:
                    self.state = 6213
                    self.leftParen()
                    self.state = 6214
                    self.rightParen()


                pass

            elif la_ == 2:
                localctx = SpeakQlParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 6218
                self.match(SpeakQlParser.CONVERT)
                self.state = 6219
                self.leftParen()
                self.state = 6220
                self.expression(0)
                self.state = 6221
                localctx.separator = self.match(SpeakQlParser.COMMA)
                self.state = 6222
                self.convertedDataType()
                self.state = 6223
                self.rightParen()
                pass

            elif la_ == 3:
                localctx = SpeakQlParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 6225
                self.match(SpeakQlParser.CONVERT)
                self.state = 6226
                self.leftParen()
                self.state = 6227
                self.expression(0)
                self.state = 6228
                self.match(SpeakQlParser.USING)
                self.state = 6229
                self.charsetName()
                self.state = 6230
                self.rightParen()
                pass

            elif la_ == 4:
                localctx = SpeakQlParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 6232
                self.match(SpeakQlParser.CAST)
                self.state = 6233
                self.leftParen()
                self.state = 6234
                self.expression(0)
                self.state = 6235
                self.match(SpeakQlParser.AS)
                self.state = 6236
                self.convertedDataType()
                self.state = 6237
                self.rightParen()
                pass

            elif la_ == 5:
                localctx = SpeakQlParser.ValuesFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 6239
                self.match(SpeakQlParser.VALUES)
                self.state = 6240
                self.leftParen()
                self.state = 6241
                self.fullColumnName()
                self.state = 6242
                self.rightParen()
                pass

            elif la_ == 6:
                localctx = SpeakQlParser.CaseExpressionFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 6244
                self.match(SpeakQlParser.CASE)
                self.state = 6245
                self.expression(0)
                self.state = 6247 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6246
                    self.caseFuncAlternative()
                    self.state = 6249 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SpeakQlParser.WHEN):
                        break

                self.state = 6253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.ELSE:
                    self.state = 6251
                    self.match(SpeakQlParser.ELSE)
                    self.state = 6252
                    localctx.elseArg = self.functionArg()


                self.state = 6255
                self.match(SpeakQlParser.END)
                pass

            elif la_ == 7:
                localctx = SpeakQlParser.CaseFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 6257
                self.match(SpeakQlParser.CASE)
                self.state = 6259 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6258
                    self.caseFuncAlternative()
                    self.state = 6261 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SpeakQlParser.WHEN):
                        break

                self.state = 6265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.ELSE:
                    self.state = 6263
                    self.match(SpeakQlParser.ELSE)
                    self.state = 6264
                    localctx.elseArg = self.functionArg()


                self.state = 6267
                self.match(SpeakQlParser.END)
                pass

            elif la_ == 8:
                localctx = SpeakQlParser.CharFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 6269
                self.match(SpeakQlParser.CHAR)
                self.state = 6270
                self.leftParen()
                self.state = 6271
                self.functionArgs()
                self.state = 6274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.USING:
                    self.state = 6272
                    self.match(SpeakQlParser.USING)
                    self.state = 6273
                    self.charsetName()


                self.state = 6276
                self.rightParen()
                pass

            elif la_ == 9:
                localctx = SpeakQlParser.PositionFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 6278
                self.match(SpeakQlParser.POSITION)
                self.state = 6279
                self.leftParen()
                self.state = 6282
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,914,self._ctx)
                if la_ == 1:
                    self.state = 6280
                    localctx.positionString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6281
                    localctx.positionExpression = self.expression(0)
                    pass


                self.state = 6284
                self.match(SpeakQlParser.IN)
                self.state = 6287
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,915,self._ctx)
                if la_ == 1:
                    self.state = 6285
                    localctx.inString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6286
                    localctx.inExpression = self.expression(0)
                    pass


                self.state = 6289
                self.rightParen()
                pass

            elif la_ == 10:
                localctx = SpeakQlParser.SubstrFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 6291
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.SUBSTR or _la==SpeakQlParser.SUBSTRING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6292
                self.leftParen()
                self.state = 6295
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,916,self._ctx)
                if la_ == 1:
                    self.state = 6293
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6294
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 6297
                self.match(SpeakQlParser.FROM)
                self.state = 6300
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,917,self._ctx)
                if la_ == 1:
                    self.state = 6298
                    localctx.fromDecimal = self.decimalLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6299
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 6307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.FOR:
                    self.state = 6302
                    self.match(SpeakQlParser.FOR)
                    self.state = 6305
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,918,self._ctx)
                    if la_ == 1:
                        self.state = 6303
                        localctx.forDecimal = self.decimalLiteral()
                        pass

                    elif la_ == 2:
                        self.state = 6304
                        localctx.forExpression = self.expression(0)
                        pass




                self.state = 6309
                self.rightParen()
                pass

            elif la_ == 11:
                localctx = SpeakQlParser.TrimFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 6311
                self.match(SpeakQlParser.TRIM)
                self.state = 6312
                self.leftParen()
                self.state = 6313
                localctx.positioinForm = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.BOTH or _la==SpeakQlParser.LEADING or _la==SpeakQlParser.TRAILING):
                    localctx.positioinForm = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6316
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,920,self._ctx)
                if la_ == 1:
                    self.state = 6314
                    localctx.sourceString = self.stringLiteral()

                elif la_ == 2:
                    self.state = 6315
                    localctx.sourceExpression = self.expression(0)


                self.state = 6318
                self.match(SpeakQlParser.FROM)
                self.state = 6321
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,921,self._ctx)
                if la_ == 1:
                    self.state = 6319
                    localctx.fromString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6320
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 6323
                self.rightParen()
                pass

            elif la_ == 12:
                localctx = SpeakQlParser.TrimFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 6325
                self.match(SpeakQlParser.TRIM)
                self.state = 6326
                self.leftParen()
                self.state = 6329
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,922,self._ctx)
                if la_ == 1:
                    self.state = 6327
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6328
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 6331
                self.match(SpeakQlParser.FROM)
                self.state = 6334
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,923,self._ctx)
                if la_ == 1:
                    self.state = 6332
                    localctx.fromString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6333
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 6336
                self.rightParen()
                pass

            elif la_ == 13:
                localctx = SpeakQlParser.WeightFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 6338
                self.match(SpeakQlParser.WEIGHT_STRING)
                self.state = 6339
                self.leftParen()
                self.state = 6342
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,924,self._ctx)
                if la_ == 1:
                    self.state = 6340
                    self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6341
                    self.expression(0)
                    pass


                self.state = 6350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.AS:
                    self.state = 6344
                    self.match(SpeakQlParser.AS)
                    self.state = 6345
                    localctx.stringFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.CHAR or _la==SpeakQlParser.BINARY):
                        localctx.stringFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 6346
                    self.leftParen()
                    self.state = 6347
                    self.decimalLiteral()
                    self.state = 6348
                    self.rightParen()


                self.state = 6353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.LEVEL:
                    self.state = 6352
                    self.levelsInWeightString()


                self.state = 6355
                self.rightParen()
                pass

            elif la_ == 14:
                localctx = SpeakQlParser.ExtractFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 6357
                self.match(SpeakQlParser.EXTRACT)
                self.state = 6358
                self.leftParen()
                self.state = 6359
                self.intervalType()
                self.state = 6360
                self.match(SpeakQlParser.FROM)
                self.state = 6363
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,927,self._ctx)
                if la_ == 1:
                    self.state = 6361
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6362
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 6365
                self.rightParen()
                pass

            elif la_ == 15:
                localctx = SpeakQlParser.GetFormatFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 6367
                self.match(SpeakQlParser.GET_FORMAT)
                self.state = 6368
                self.leftParen()
                self.state = 6369
                localctx.datetimeFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.DATETIME - 220)))) != 0)):
                    localctx.datetimeFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6370
                self.match(SpeakQlParser.COMMA)
                self.state = 6371
                self.stringLiteral()
                self.state = 6372
                self.rightParen()
                pass

            elif la_ == 16:
                localctx = SpeakQlParser.JsonValueFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 6374
                self.match(SpeakQlParser.JSON_VALUE)
                self.state = 6375
                self.leftParen()
                self.state = 6376
                self.expression(0)
                self.state = 6377
                self.match(SpeakQlParser.COMMA)
                self.state = 6378
                self.expression(0)
                self.state = 6381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.RETURNING:
                    self.state = 6379
                    self.match(SpeakQlParser.RETURNING)
                    self.state = 6380
                    self.convertedDataType()


                self.state = 6391
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,930,self._ctx)
                if la_ == 1:
                    self.state = 6387
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SpeakQlParser.NULL_LITERAL]:
                        self.state = 6383
                        self.match(SpeakQlParser.NULL_LITERAL)
                        pass
                    elif token in [SpeakQlParser.ERROR]:
                        self.state = 6384
                        self.match(SpeakQlParser.ERROR)
                        pass
                    elif token in [SpeakQlParser.DEFAULT]:
                        self.state = 6385
                        self.match(SpeakQlParser.DEFAULT)
                        self.state = 6386
                        self.defaultValue()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 6389
                    self.match(SpeakQlParser.ON)
                    self.state = 6390
                    self.match(SpeakQlParser.EMPTY)


                self.state = 6401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.DEFAULT or _la==SpeakQlParser.NULL_LITERAL or _la==SpeakQlParser.ERROR:
                    self.state = 6397
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SpeakQlParser.NULL_LITERAL]:
                        self.state = 6393
                        self.match(SpeakQlParser.NULL_LITERAL)
                        pass
                    elif token in [SpeakQlParser.ERROR]:
                        self.state = 6394
                        self.match(SpeakQlParser.ERROR)
                        pass
                    elif token in [SpeakQlParser.DEFAULT]:
                        self.state = 6395
                        self.match(SpeakQlParser.DEFAULT)
                        self.state = 6396
                        self.defaultValue()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 6399
                    self.match(SpeakQlParser.ON)
                    self.state = 6400
                    self.match(SpeakQlParser.ERROR)


                self.state = 6403
                self.rightParen()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseFuncAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # FunctionArgContext
            self.consequent = None # FunctionArgContext

        def WHEN(self):
            return self.getToken(SpeakQlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SpeakQlParser.THEN, 0)

        def functionArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.FunctionArgContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.FunctionArgContext,i)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_caseFuncAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseFuncAlternative" ):
                listener.enterCaseFuncAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseFuncAlternative" ):
                listener.exitCaseFuncAlternative(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseFuncAlternative" ):
                return visitor.visitCaseFuncAlternative(self)
            else:
                return visitor.visitChildren(self)




    def caseFuncAlternative(self):

        localctx = SpeakQlParser.CaseFuncAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_caseFuncAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6407
            self.match(SpeakQlParser.WHEN)
            self.state = 6408
            localctx.condition = self.functionArg()
            self.state = 6409
            self.match(SpeakQlParser.THEN)
            self.state = 6410
            localctx.consequent = self.functionArg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelsInWeightStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_levelsInWeightString

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LevelWeightRangeContext(LevelsInWeightStringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.LevelsInWeightStringContext
            super().__init__(parser)
            self.firstLevel = None # DecimalLiteralContext
            self.lastLevel = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def LEVEL(self):
            return self.getToken(SpeakQlParser.LEVEL, 0)
        def MINUS(self):
            return self.getToken(SpeakQlParser.MINUS, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelWeightRange" ):
                listener.enterLevelWeightRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelWeightRange" ):
                listener.exitLevelWeightRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLevelWeightRange" ):
                return visitor.visitLevelWeightRange(self)
            else:
                return visitor.visitChildren(self)


    class LevelWeightListContext(LevelsInWeightStringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.LevelsInWeightStringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEVEL(self):
            return self.getToken(SpeakQlParser.LEVEL, 0)
        def levelInWeightListElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.LevelInWeightListElementContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.LevelInWeightListElementContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelWeightList" ):
                listener.enterLevelWeightList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelWeightList" ):
                listener.exitLevelWeightList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLevelWeightList" ):
                return visitor.visitLevelWeightList(self)
            else:
                return visitor.visitChildren(self)



    def levelsInWeightString(self):

        localctx = SpeakQlParser.LevelsInWeightStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_levelsInWeightString)
        self._la = 0 # Token type
        try:
            self.state = 6426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,935,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.LevelWeightListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 6412
                self.match(SpeakQlParser.LEVEL)
                self.state = 6413
                self.levelInWeightListElement()
                self.state = 6418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 6414
                    self.match(SpeakQlParser.COMMA)
                    self.state = 6415
                    self.levelInWeightListElement()
                    self.state = 6420
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = SpeakQlParser.LevelWeightRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 6421
                self.match(SpeakQlParser.LEVEL)
                self.state = 6422
                localctx.firstLevel = self.decimalLiteral()
                self.state = 6423
                self.match(SpeakQlParser.MINUS)
                self.state = 6424
                localctx.lastLevel = self.decimalLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelInWeightListElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.orderType = None # Token

        def decimalLiteral(self):
            return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,0)


        def ASC(self):
            return self.getToken(SpeakQlParser.ASC, 0)

        def DESC(self):
            return self.getToken(SpeakQlParser.DESC, 0)

        def REVERSE(self):
            return self.getToken(SpeakQlParser.REVERSE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_levelInWeightListElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelInWeightListElement" ):
                listener.enterLevelInWeightListElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelInWeightListElement" ):
                listener.exitLevelInWeightListElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLevelInWeightListElement" ):
                return visitor.visitLevelInWeightListElement(self)
            else:
                return visitor.visitChildren(self)




    def levelInWeightListElement(self):

        localctx = SpeakQlParser.LevelInWeightListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_levelInWeightListElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6428
            self.decimalLiteral()
            self.state = 6430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.ASC or _la==SpeakQlParser.DESC or _la==SpeakQlParser.REVERSE:
                self.state = 6429
                localctx.orderType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.ASC or _la==SpeakQlParser.DESC or _la==SpeakQlParser.REVERSE):
                    localctx.orderType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregateWindowedFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregator = None # Token
            self.starArg = None # Token
            self.separator = None # Token

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def functionArg(self):
            return self.getTypedRuleContext(SpeakQlParser.FunctionArgContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def AVG(self):
            return self.getToken(SpeakQlParser.AVG, 0)

        def MAX(self):
            return self.getToken(SpeakQlParser.MAX, 0)

        def MIN(self):
            return self.getToken(SpeakQlParser.MIN, 0)

        def SUM(self):
            return self.getToken(SpeakQlParser.SUM, 0)

        def overClause(self):
            return self.getTypedRuleContext(SpeakQlParser.OverClauseContext,0)


        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(SpeakQlParser.DISTINCT, 0)

        def COUNT(self):
            return self.getToken(SpeakQlParser.COUNT, 0)

        def functionArgs(self):
            return self.getTypedRuleContext(SpeakQlParser.FunctionArgsContext,0)


        def STAR(self):
            return self.getToken(SpeakQlParser.STAR, 0)

        def BIT_AND(self):
            return self.getToken(SpeakQlParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(SpeakQlParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(SpeakQlParser.BIT_XOR, 0)

        def STD(self):
            return self.getToken(SpeakQlParser.STD, 0)

        def STDDEV(self):
            return self.getToken(SpeakQlParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(SpeakQlParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(SpeakQlParser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(SpeakQlParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(SpeakQlParser.VAR_SAMP, 0)

        def VARIANCE(self):
            return self.getToken(SpeakQlParser.VARIANCE, 0)

        def GROUP_CONCAT(self):
            return self.getToken(SpeakQlParser.GROUP_CONCAT, 0)

        def ORDER(self):
            return self.getToken(SpeakQlParser.ORDER, 0)

        def BY(self):
            return self.getToken(SpeakQlParser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.OrderByExpressionContext,i)


        def SEPARATOR(self):
            return self.getToken(SpeakQlParser.SEPARATOR, 0)

        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_aggregateWindowedFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateWindowedFunction" ):
                listener.enterAggregateWindowedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateWindowedFunction" ):
                listener.exitAggregateWindowedFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregateWindowedFunction" ):
                return visitor.visitAggregateWindowedFunction(self)
            else:
                return visitor.visitChildren(self)




    def aggregateWindowedFunction(self):

        localctx = SpeakQlParser.AggregateWindowedFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_aggregateWindowedFunction)
        self._la = 0 # Token type
        try:
            self.state = 6491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.AVG, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.SUM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6432
                _la = self._input.LA(1)
                if not(((((_la - 286)) & ~0x3f) == 0 and ((1 << (_la - 286)) & ((1 << (SpeakQlParser.AVG - 286)) | (1 << (SpeakQlParser.MAX - 286)) | (1 << (SpeakQlParser.MIN - 286)) | (1 << (SpeakQlParser.SUM - 286)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6433
                self.leftParen()
                self.state = 6435
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,937,self._ctx)
                if la_ == 1:
                    self.state = 6434
                    localctx.aggregator = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SpeakQlParser.ALL or _la==SpeakQlParser.DISTINCT):
                        localctx.aggregator = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 6437
                self.functionArg()
                self.state = 6438
                self.rightParen()
                self.state = 6440
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,938,self._ctx)
                if la_ == 1:
                    self.state = 6439
                    self.overClause()


                pass
            elif token in [SpeakQlParser.COUNT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6442
                self.match(SpeakQlParser.COUNT)
                self.state = 6443
                self.leftParen()
                self.state = 6451
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,940,self._ctx)
                if la_ == 1:
                    self.state = 6444
                    localctx.starArg = self.match(SpeakQlParser.STAR)
                    pass

                elif la_ == 2:
                    self.state = 6446
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,939,self._ctx)
                    if la_ == 1:
                        self.state = 6445
                        localctx.aggregator = self.match(SpeakQlParser.ALL)


                    self.state = 6448
                    self.functionArg()
                    pass

                elif la_ == 3:
                    self.state = 6449
                    localctx.aggregator = self.match(SpeakQlParser.DISTINCT)
                    self.state = 6450
                    self.functionArgs()
                    pass


                self.state = 6453
                self.rightParen()
                self.state = 6455
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,941,self._ctx)
                if la_ == 1:
                    self.state = 6454
                    self.overClause()


                pass
            elif token in [SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6457
                _la = self._input.LA(1)
                if not(((((_la - 287)) & ~0x3f) == 0 and ((1 << (_la - 287)) & ((1 << (SpeakQlParser.BIT_AND - 287)) | (1 << (SpeakQlParser.BIT_OR - 287)) | (1 << (SpeakQlParser.BIT_XOR - 287)) | (1 << (SpeakQlParser.STD - 287)) | (1 << (SpeakQlParser.STDDEV - 287)) | (1 << (SpeakQlParser.STDDEV_POP - 287)) | (1 << (SpeakQlParser.STDDEV_SAMP - 287)) | (1 << (SpeakQlParser.VAR_POP - 287)) | (1 << (SpeakQlParser.VAR_SAMP - 287)) | (1 << (SpeakQlParser.VARIANCE - 287)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6458
                self.leftParen()
                self.state = 6460
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,942,self._ctx)
                if la_ == 1:
                    self.state = 6459
                    localctx.aggregator = self.match(SpeakQlParser.ALL)


                self.state = 6462
                self.functionArg()
                self.state = 6463
                self.rightParen()
                self.state = 6465
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,943,self._ctx)
                if la_ == 1:
                    self.state = 6464
                    self.overClause()


                pass
            elif token in [SpeakQlParser.GROUP_CONCAT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6467
                self.match(SpeakQlParser.GROUP_CONCAT)
                self.state = 6468
                self.leftParen()
                self.state = 6470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,944,self._ctx)
                if la_ == 1:
                    self.state = 6469
                    localctx.aggregator = self.match(SpeakQlParser.DISTINCT)


                self.state = 6472
                self.functionArgs()
                self.state = 6483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.ORDER:
                    self.state = 6473
                    self.match(SpeakQlParser.ORDER)
                    self.state = 6474
                    self.match(SpeakQlParser.BY)
                    self.state = 6475
                    self.orderByExpression()
                    self.state = 6480
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SpeakQlParser.COMMA:
                        self.state = 6476
                        self.match(SpeakQlParser.COMMA)
                        self.state = 6477
                        self.orderByExpression()
                        self.state = 6482
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.SEPARATOR:
                    self.state = 6485
                    self.match(SpeakQlParser.SEPARATOR)
                    self.state = 6486
                    localctx.separator = self.match(SpeakQlParser.STRING_LITERAL)


                self.state = 6489
                self.rightParen()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonAggregateWindowedFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def overClause(self):
            return self.getTypedRuleContext(SpeakQlParser.OverClauseContext,0)


        def LAG(self):
            return self.getToken(SpeakQlParser.LAG, 0)

        def LEAD(self):
            return self.getToken(SpeakQlParser.LEAD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.DecimalLiteralContext,i)


        def FIRST_VALUE(self):
            return self.getToken(SpeakQlParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(SpeakQlParser.LAST_VALUE, 0)

        def CUME_DIST(self):
            return self.getToken(SpeakQlParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(SpeakQlParser.DENSE_RANK, 0)

        def PERCENT_RANK(self):
            return self.getToken(SpeakQlParser.PERCENT_RANK, 0)

        def RANK(self):
            return self.getToken(SpeakQlParser.RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(SpeakQlParser.ROW_NUMBER, 0)

        def NTH_VALUE(self):
            return self.getToken(SpeakQlParser.NTH_VALUE, 0)

        def NTILE(self):
            return self.getToken(SpeakQlParser.NTILE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_nonAggregateWindowedFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonAggregateWindowedFunction" ):
                listener.enterNonAggregateWindowedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonAggregateWindowedFunction" ):
                listener.exitNonAggregateWindowedFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonAggregateWindowedFunction" ):
                return visitor.visitNonAggregateWindowedFunction(self)
            else:
                return visitor.visitChildren(self)




    def nonAggregateWindowedFunction(self):

        localctx = SpeakQlParser.NonAggregateWindowedFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_nonAggregateWindowedFunction)
        self._la = 0 # Token type
        try:
            self.state = 6532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.LAG, SpeakQlParser.LEAD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6493
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.LAG or _la==SpeakQlParser.LEAD):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6494
                self.leftParen()
                self.state = 6495
                self.expression(0)
                self.state = 6498
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,949,self._ctx)
                if la_ == 1:
                    self.state = 6496
                    self.match(SpeakQlParser.COMMA)
                    self.state = 6497
                    self.decimalLiteral()


                self.state = 6502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.COMMA:
                    self.state = 6500
                    self.match(SpeakQlParser.COMMA)
                    self.state = 6501
                    self.decimalLiteral()


                self.state = 6504
                self.rightParen()
                self.state = 6505
                self.overClause()
                pass
            elif token in [SpeakQlParser.FIRST_VALUE, SpeakQlParser.LAST_VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6507
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.FIRST_VALUE or _la==SpeakQlParser.LAST_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6508
                self.leftParen()
                self.state = 6509
                self.expression(0)
                self.state = 6510
                self.rightParen()
                self.state = 6511
                self.overClause()
                pass
            elif token in [SpeakQlParser.CUME_DIST, SpeakQlParser.DENSE_RANK, SpeakQlParser.PERCENT_RANK, SpeakQlParser.RANK, SpeakQlParser.ROW_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6513
                _la = self._input.LA(1)
                if not(((((_la - 291)) & ~0x3f) == 0 and ((1 << (_la - 291)) & ((1 << (SpeakQlParser.CUME_DIST - 291)) | (1 << (SpeakQlParser.DENSE_RANK - 291)) | (1 << (SpeakQlParser.PERCENT_RANK - 291)) | (1 << (SpeakQlParser.RANK - 291)) | (1 << (SpeakQlParser.ROW_NUMBER - 291)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6514
                self.leftParen()
                self.state = 6515
                self.rightParen()
                self.state = 6516
                self.overClause()
                pass
            elif token in [SpeakQlParser.NTH_VALUE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6518
                self.match(SpeakQlParser.NTH_VALUE)
                self.state = 6519
                self.leftParen()
                self.state = 6520
                self.expression(0)
                self.state = 6521
                self.match(SpeakQlParser.COMMA)
                self.state = 6522
                self.decimalLiteral()
                self.state = 6523
                self.rightParen()
                self.state = 6524
                self.overClause()
                pass
            elif token in [SpeakQlParser.NTILE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6526
                self.match(SpeakQlParser.NTILE)
                self.state = 6527
                self.leftParen()
                self.state = 6528
                self.decimalLiteral()
                self.state = 6529
                self.rightParen()
                self.state = 6530
                self.overClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(SpeakQlParser.OVER, 0)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def windowName(self):
            return self.getTypedRuleContext(SpeakQlParser.WindowNameContext,0)


        def windowSpec(self):
            return self.getTypedRuleContext(SpeakQlParser.WindowSpecContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_overClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverClause" ):
                listener.enterOverClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverClause" ):
                listener.exitOverClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverClause" ):
                return visitor.visitOverClause(self)
            else:
                return visitor.visitChildren(self)




    def overClause(self):

        localctx = SpeakQlParser.OverClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_overClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6534
            self.match(SpeakQlParser.OVER)
            self.state = 6542
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.LR_BRACKET]:
                self.state = 6535
                self.leftParen()
                self.state = 6537
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,952,self._ctx)
                if la_ == 1:
                    self.state = 6536
                    self.windowSpec()


                self.state = 6539
                self.rightParen()
                pass
            elif token in [SpeakQlParser.CURRENT, SpeakQlParser.DATABASE, SpeakQlParser.DIAGNOSTICS, SpeakQlParser.EXCEPT, SpeakQlParser.GROUP, SpeakQlParser.LEFT, SpeakQlParser.NUMBER, SpeakQlParser.ORDER, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.STACKED, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.DATETIME, SpeakQlParser.YEAR, SpeakQlParser.BINARY, SpeakQlParser.TEXT, SpeakQlParser.ENUM, SpeakQlParser.SERIAL, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.AVG, SpeakQlParser.BIT_AND, SpeakQlParser.BIT_OR, SpeakQlParser.BIT_XOR, SpeakQlParser.COUNT, SpeakQlParser.GROUP_CONCAT, SpeakQlParser.MAX, SpeakQlParser.MIN, SpeakQlParser.STD, SpeakQlParser.STDDEV, SpeakQlParser.STDDEV_POP, SpeakQlParser.STDDEV_SAMP, SpeakQlParser.SUM, SpeakQlParser.VAR_POP, SpeakQlParser.VAR_SAMP, SpeakQlParser.VARIANCE, SpeakQlParser.POSITION, SpeakQlParser.ACCOUNT, SpeakQlParser.ACTION, SpeakQlParser.AFTER, SpeakQlParser.AGGREGATE, SpeakQlParser.ALGORITHM, SpeakQlParser.ANY, SpeakQlParser.AT, SpeakQlParser.AUTHORS, SpeakQlParser.AUTOCOMMIT, SpeakQlParser.AUTOEXTEND_SIZE, SpeakQlParser.AUTO_INCREMENT, SpeakQlParser.AVG_ROW_LENGTH, SpeakQlParser.BEGIN, SpeakQlParser.BINLOG, SpeakQlParser.BIT, SpeakQlParser.BLOCK, SpeakQlParser.BOOL, SpeakQlParser.BOOLEAN, SpeakQlParser.BTREE, SpeakQlParser.CACHE, SpeakQlParser.CASCADED, SpeakQlParser.CHAIN, SpeakQlParser.CHANGED, SpeakQlParser.CHANNEL, SpeakQlParser.CHECKSUM, SpeakQlParser.PAGE_CHECKSUM, SpeakQlParser.CIPHER, SpeakQlParser.CLASS_ORIGIN, SpeakQlParser.CLIENT, SpeakQlParser.CLOSE, SpeakQlParser.COALESCE, SpeakQlParser.CODE, SpeakQlParser.COLUMNS, SpeakQlParser.COLUMN_FORMAT, SpeakQlParser.COLUMN_NAME, SpeakQlParser.COMMENT, SpeakQlParser.COMMIT, SpeakQlParser.COMPACT, SpeakQlParser.COMPLETION, SpeakQlParser.COMPRESSED, SpeakQlParser.COMPRESSION, SpeakQlParser.CONCURRENT, SpeakQlParser.CONNECT, SpeakQlParser.CONNECTION, SpeakQlParser.CONSISTENT, SpeakQlParser.CONSTRAINT_CATALOG, SpeakQlParser.CONSTRAINT_SCHEMA, SpeakQlParser.CONSTRAINT_NAME, SpeakQlParser.CONTAINS, SpeakQlParser.CONTEXT, SpeakQlParser.CONTRIBUTORS, SpeakQlParser.COPY, SpeakQlParser.CPU, SpeakQlParser.CURSOR_NAME, SpeakQlParser.DATA, SpeakQlParser.DATAFILE, SpeakQlParser.DEALLOCATE, SpeakQlParser.DEFAULT_AUTH, SpeakQlParser.DEFINER, SpeakQlParser.DELAY_KEY_WRITE, SpeakQlParser.DES_KEY_FILE, SpeakQlParser.DIRECTORY, SpeakQlParser.DISABLE, SpeakQlParser.DISCARD, SpeakQlParser.DISK, SpeakQlParser.DO, SpeakQlParser.DUMPFILE, SpeakQlParser.DUPLICATE, SpeakQlParser.DYNAMIC, SpeakQlParser.ENABLE, SpeakQlParser.ENCRYPTION, SpeakQlParser.END, SpeakQlParser.ENDS, SpeakQlParser.ENGINE, SpeakQlParser.ENGINES, SpeakQlParser.ERROR, SpeakQlParser.ERRORS, SpeakQlParser.ESCAPE, SpeakQlParser.EVEN, SpeakQlParser.EVENT, SpeakQlParser.EVENTS, SpeakQlParser.EVERY, SpeakQlParser.EXCHANGE, SpeakQlParser.EXCLUSIVE, SpeakQlParser.EXPIRE, SpeakQlParser.EXPORT, SpeakQlParser.EXTENDED, SpeakQlParser.EXTENT_SIZE, SpeakQlParser.FAST, SpeakQlParser.FAULTS, SpeakQlParser.FIELDS, SpeakQlParser.FILE_BLOCK_SIZE, SpeakQlParser.FILTER, SpeakQlParser.FIRST, SpeakQlParser.FIXED, SpeakQlParser.FLUSH, SpeakQlParser.FOLLOWS, SpeakQlParser.FOUND, SpeakQlParser.FULL, SpeakQlParser.FUNCTION, SpeakQlParser.GENERAL, SpeakQlParser.GLOBAL, SpeakQlParser.GRANTS, SpeakQlParser.GROUP_REPLICATION, SpeakQlParser.HANDLER, SpeakQlParser.HASH, SpeakQlParser.HELP, SpeakQlParser.HOST, SpeakQlParser.HOSTS, SpeakQlParser.IDENTIFIED, SpeakQlParser.IGNORE_SERVER_IDS, SpeakQlParser.IMPORT, SpeakQlParser.INDEXES, SpeakQlParser.INITIAL_SIZE, SpeakQlParser.INPLACE, SpeakQlParser.INSERT_METHOD, SpeakQlParser.INSTALL, SpeakQlParser.INSTANCE, SpeakQlParser.INVISIBLE, SpeakQlParser.INVOKER, SpeakQlParser.IO, SpeakQlParser.IO_THREAD, SpeakQlParser.IPC, SpeakQlParser.ISOLATION, SpeakQlParser.ISSUER, SpeakQlParser.JSON, SpeakQlParser.KEY_BLOCK_SIZE, SpeakQlParser.LANGUAGE, SpeakQlParser.LAST, SpeakQlParser.LEAVES, SpeakQlParser.LESS, SpeakQlParser.LEVEL, SpeakQlParser.LIST, SpeakQlParser.LOCAL, SpeakQlParser.LOGFILE, SpeakQlParser.LOGS, SpeakQlParser.MASTER, SpeakQlParser.MASTER_AUTO_POSITION, SpeakQlParser.MASTER_CONNECT_RETRY, SpeakQlParser.MASTER_DELAY, SpeakQlParser.MASTER_HEARTBEAT_PERIOD, SpeakQlParser.MASTER_HOST, SpeakQlParser.MASTER_LOG_FILE, SpeakQlParser.MASTER_LOG_POS, SpeakQlParser.MASTER_PASSWORD, SpeakQlParser.MASTER_PORT, SpeakQlParser.MASTER_RETRY_COUNT, SpeakQlParser.MASTER_SSL, SpeakQlParser.MASTER_SSL_CA, SpeakQlParser.MASTER_SSL_CAPATH, SpeakQlParser.MASTER_SSL_CERT, SpeakQlParser.MASTER_SSL_CIPHER, SpeakQlParser.MASTER_SSL_CRL, SpeakQlParser.MASTER_SSL_CRLPATH, SpeakQlParser.MASTER_SSL_KEY, SpeakQlParser.MASTER_TLS_VERSION, SpeakQlParser.MASTER_USER, SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, SpeakQlParser.MAX_QUERIES_PER_HOUR, SpeakQlParser.MAX_ROWS, SpeakQlParser.MAX_SIZE, SpeakQlParser.MAX_UPDATES_PER_HOUR, SpeakQlParser.MAX_USER_CONNECTIONS, SpeakQlParser.MEDIUM, SpeakQlParser.MEMBER, SpeakQlParser.MERGE, SpeakQlParser.MESSAGE_TEXT, SpeakQlParser.MID, SpeakQlParser.MIGRATE, SpeakQlParser.MIN_ROWS, SpeakQlParser.MODE, SpeakQlParser.MODIFY, SpeakQlParser.MUTEX, SpeakQlParser.MYSQL, SpeakQlParser.MYSQL_ERRNO, SpeakQlParser.NAME, SpeakQlParser.NAMES, SpeakQlParser.NCHAR, SpeakQlParser.NEVER, SpeakQlParser.NEXT, SpeakQlParser.NO, SpeakQlParser.NODEGROUP, SpeakQlParser.NONE, SpeakQlParser.ODBC, SpeakQlParser.OFFLINE, SpeakQlParser.OFFSET, SpeakQlParser.OF, SpeakQlParser.OJ, SpeakQlParser.OLD_PASSWORD, SpeakQlParser.ONE, SpeakQlParser.ONLINE, SpeakQlParser.ONLY, SpeakQlParser.OPEN, SpeakQlParser.OPTIMIZER_COSTS, SpeakQlParser.OPTIONS, SpeakQlParser.OWNER, SpeakQlParser.PACK_KEYS, SpeakQlParser.PAGE, SpeakQlParser.PARSER, SpeakQlParser.PARTIAL, SpeakQlParser.PARTITIONING, SpeakQlParser.PARTITIONS, SpeakQlParser.PASSWORD, SpeakQlParser.PHASE, SpeakQlParser.PLUGIN, SpeakQlParser.PLUGIN_DIR, SpeakQlParser.PLUGINS, SpeakQlParser.PORT, SpeakQlParser.PRECEDES, SpeakQlParser.PREPARE, SpeakQlParser.PRESERVE, SpeakQlParser.PREV, SpeakQlParser.PROCESSLIST, SpeakQlParser.PROFILE, SpeakQlParser.PROFILES, SpeakQlParser.PROXY, SpeakQlParser.QUERY, SpeakQlParser.QUICK, SpeakQlParser.REBUILD, SpeakQlParser.RECOVER, SpeakQlParser.REDO_BUFFER_SIZE, SpeakQlParser.REDUNDANT, SpeakQlParser.RELAY, SpeakQlParser.RELAY_LOG_FILE, SpeakQlParser.RELAY_LOG_POS, SpeakQlParser.RELAYLOG, SpeakQlParser.REMOVE, SpeakQlParser.REORGANIZE, SpeakQlParser.REPAIR, SpeakQlParser.REPLICATE_DO_DB, SpeakQlParser.REPLICATE_DO_TABLE, SpeakQlParser.REPLICATE_IGNORE_DB, SpeakQlParser.REPLICATE_IGNORE_TABLE, SpeakQlParser.REPLICATE_REWRITE_DB, SpeakQlParser.REPLICATE_WILD_DO_TABLE, SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, SpeakQlParser.REPLICATION, SpeakQlParser.RESET, SpeakQlParser.RESUME, SpeakQlParser.RETURNED_SQLSTATE, SpeakQlParser.RETURNS, SpeakQlParser.ROLE, SpeakQlParser.ROLLBACK, SpeakQlParser.ROLLUP, SpeakQlParser.ROTATE, SpeakQlParser.ROW, SpeakQlParser.ROWS, SpeakQlParser.ROW_FORMAT, SpeakQlParser.SAVEPOINT, SpeakQlParser.SCHEDULE, SpeakQlParser.SECURITY, SpeakQlParser.SERVER, SpeakQlParser.SESSION, SpeakQlParser.SHARE, SpeakQlParser.SHARED, SpeakQlParser.SIGNED, SpeakQlParser.SIMPLE, SpeakQlParser.SLAVE, SpeakQlParser.SLOW, SpeakQlParser.SNAPSHOT, SpeakQlParser.SOCKET, SpeakQlParser.SOME, SpeakQlParser.SONAME, SpeakQlParser.SOUNDS, SpeakQlParser.SOURCE, SpeakQlParser.SQL_AFTER_GTIDS, SpeakQlParser.SQL_AFTER_MTS_GAPS, SpeakQlParser.SQL_BEFORE_GTIDS, SpeakQlParser.SQL_BUFFER_RESULT, SpeakQlParser.SQL_CACHE, SpeakQlParser.SQL_NO_CACHE, SpeakQlParser.SQL_THREAD, SpeakQlParser.START, SpeakQlParser.STARTS, SpeakQlParser.STATS_AUTO_RECALC, SpeakQlParser.STATS_PERSISTENT, SpeakQlParser.STATS_SAMPLE_PAGES, SpeakQlParser.STATUS, SpeakQlParser.STOP, SpeakQlParser.STORAGE, SpeakQlParser.STRING, SpeakQlParser.SUBCLASS_ORIGIN, SpeakQlParser.SUBJECT, SpeakQlParser.SUBPARTITION, SpeakQlParser.SUBPARTITIONS, SpeakQlParser.SUSPEND, SpeakQlParser.SWAPS, SpeakQlParser.SWITCHES, SpeakQlParser.TABLE_NAME, SpeakQlParser.TABLESPACE, SpeakQlParser.TEMPORARY, SpeakQlParser.TEMPTABLE, SpeakQlParser.THAN, SpeakQlParser.TRADITIONAL, SpeakQlParser.TRANSACTION, SpeakQlParser.TRANSACTIONAL, SpeakQlParser.TRIGGERS, SpeakQlParser.TRUNCATE, SpeakQlParser.UNDEFINED, SpeakQlParser.UNDOFILE, SpeakQlParser.UNDO_BUFFER_SIZE, SpeakQlParser.UNINSTALL, SpeakQlParser.UNKNOWN, SpeakQlParser.UNTIL, SpeakQlParser.UPGRADE, SpeakQlParser.USER, SpeakQlParser.USE_FRM, SpeakQlParser.USER_RESOURCES, SpeakQlParser.VALIDATION, SpeakQlParser.VALUE, SpeakQlParser.VARIABLES, SpeakQlParser.VIEW, SpeakQlParser.VISIBLE, SpeakQlParser.WAIT, SpeakQlParser.WARNINGS, SpeakQlParser.WITHOUT, SpeakQlParser.WORK, SpeakQlParser.WRAPPER, SpeakQlParser.X509, SpeakQlParser.XA, SpeakQlParser.XML, SpeakQlParser.EUR, SpeakQlParser.USA, SpeakQlParser.JIS, SpeakQlParser.ISO, SpeakQlParser.INTERNAL, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.TABLES, SpeakQlParser.ROUTINE, SpeakQlParser.EXECUTE, SpeakQlParser.FILE, SpeakQlParser.PROCESS, SpeakQlParser.RELOAD, SpeakQlParser.SHUTDOWN, SpeakQlParser.SUPER, SpeakQlParser.PRIVILEGES, SpeakQlParser.AUDIT_ADMIN, SpeakQlParser.BACKUP_ADMIN, SpeakQlParser.BINLOG_ADMIN, SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, SpeakQlParser.CLONE_ADMIN, SpeakQlParser.CONNECTION_ADMIN, SpeakQlParser.ENCRYPTION_KEY_ADMIN, SpeakQlParser.FIREWALL_ADMIN, SpeakQlParser.FIREWALL_USER, SpeakQlParser.GROUP_REPLICATION_ADMIN, SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, SpeakQlParser.NDB_STORED_USER, SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, SpeakQlParser.REPLICATION_APPLIER, SpeakQlParser.REPLICATION_SLAVE_ADMIN, SpeakQlParser.RESOURCE_GROUP_ADMIN, SpeakQlParser.RESOURCE_GROUP_USER, SpeakQlParser.ROLE_ADMIN, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.SET_USER_ID, SpeakQlParser.SHOW_ROUTINE, SpeakQlParser.SYSTEM_VARIABLES_ADMIN, SpeakQlParser.TABLE_ENCRYPTION_ADMIN, SpeakQlParser.VERSION_TOKEN_ADMIN, SpeakQlParser.XA_RECOVER_ADMIN, SpeakQlParser.ARMSCII8, SpeakQlParser.ASCII, SpeakQlParser.BIG5, SpeakQlParser.CP1250, SpeakQlParser.CP1251, SpeakQlParser.CP1256, SpeakQlParser.CP1257, SpeakQlParser.CP850, SpeakQlParser.CP852, SpeakQlParser.CP866, SpeakQlParser.CP932, SpeakQlParser.DEC8, SpeakQlParser.EUCJPMS, SpeakQlParser.EUCKR, SpeakQlParser.GB18030, SpeakQlParser.GB2312, SpeakQlParser.GBK, SpeakQlParser.GEOSTD8, SpeakQlParser.GREEK, SpeakQlParser.HEBREW, SpeakQlParser.HP8, SpeakQlParser.KEYBCS2, SpeakQlParser.KOI8R, SpeakQlParser.KOI8U, SpeakQlParser.LATIN1, SpeakQlParser.LATIN2, SpeakQlParser.LATIN5, SpeakQlParser.LATIN7, SpeakQlParser.MACCE, SpeakQlParser.MACROMAN, SpeakQlParser.SJIS, SpeakQlParser.SWE7, SpeakQlParser.TIS620, SpeakQlParser.UCS2, SpeakQlParser.UJIS, SpeakQlParser.UTF16, SpeakQlParser.UTF16LE, SpeakQlParser.UTF32, SpeakQlParser.UTF8, SpeakQlParser.UTF8MB3, SpeakQlParser.UTF8MB4, SpeakQlParser.ARCHIVE, SpeakQlParser.BLACKHOLE, SpeakQlParser.CSV, SpeakQlParser.FEDERATED, SpeakQlParser.INNODB, SpeakQlParser.MEMORY, SpeakQlParser.MRG_MYISAM, SpeakQlParser.MYISAM, SpeakQlParser.NDB, SpeakQlParser.NDBCLUSTER, SpeakQlParser.PERFORMANCE_SCHEMA, SpeakQlParser.TOKUDB, SpeakQlParser.REPEATABLE, SpeakQlParser.COMMITTED, SpeakQlParser.UNCOMMITTED, SpeakQlParser.SERIALIZABLE, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CATALOG_NAME, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SCHEMA_NAME, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD, SpeakQlParser.CHARSET_REVERSE_QOUTE_STRING, SpeakQlParser.STRING_LITERAL, SpeakQlParser.ID, SpeakQlParser.REVERSE_QUOTE_ID, SpeakQlParser.OPTIONAL]:
                self.state = 6541
                self.windowName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowName(self):
            return self.getTypedRuleContext(SpeakQlParser.WindowNameContext,0)


        def partitionClause(self):
            return self.getTypedRuleContext(SpeakQlParser.PartitionClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(SpeakQlParser.OrderByClauseContext,0)


        def frameClause(self):
            return self.getTypedRuleContext(SpeakQlParser.FrameClauseContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_windowSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowSpec" ):
                listener.enterWindowSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowSpec" ):
                listener.exitWindowSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowSpec" ):
                return visitor.visitWindowSpec(self)
            else:
                return visitor.visitChildren(self)




    def windowSpec(self):

        localctx = SpeakQlParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_windowSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,954,self._ctx)
            if la_ == 1:
                self.state = 6544
                self.windowName()


            self.state = 6548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.PARTITION:
                self.state = 6547
                self.partitionClause()


            self.state = 6551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.ORDER:
                self.state = 6550
                self.orderByClause()


            self.state = 6554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SpeakQlParser.RANGE or _la==SpeakQlParser.ROWS:
                self.state = 6553
                self.frameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(SpeakQlParser.UidContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_windowName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowName" ):
                listener.enterWindowName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowName" ):
                listener.exitWindowName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowName" ):
                return visitor.visitWindowName(self)
            else:
                return visitor.visitChildren(self)




    def windowName(self):

        localctx = SpeakQlParser.WindowNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_windowName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6556
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frameUnits(self):
            return self.getTypedRuleContext(SpeakQlParser.FrameUnitsContext,0)


        def frameExtent(self):
            return self.getTypedRuleContext(SpeakQlParser.FrameExtentContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_frameClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameClause" ):
                listener.enterFrameClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameClause" ):
                listener.exitFrameClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameClause" ):
                return visitor.visitFrameClause(self)
            else:
                return visitor.visitChildren(self)




    def frameClause(self):

        localctx = SpeakQlParser.FrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_frameClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6558
            self.frameUnits()
            self.state = 6559
            self.frameExtent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameUnitsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS(self):
            return self.getToken(SpeakQlParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(SpeakQlParser.RANGE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_frameUnits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameUnits" ):
                listener.enterFrameUnits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameUnits" ):
                listener.exitFrameUnits(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameUnits" ):
                return visitor.visitFrameUnits(self)
            else:
                return visitor.visitChildren(self)




    def frameUnits(self):

        localctx = SpeakQlParser.FrameUnitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_frameUnits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6561
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.RANGE or _la==SpeakQlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameExtentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frameRange(self):
            return self.getTypedRuleContext(SpeakQlParser.FrameRangeContext,0)


        def frameBetween(self):
            return self.getTypedRuleContext(SpeakQlParser.FrameBetweenContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_frameExtent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameExtent" ):
                listener.enterFrameExtent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameExtent" ):
                listener.exitFrameExtent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameExtent" ):
                return visitor.visitFrameExtent(self)
            else:
                return visitor.visitChildren(self)




    def frameExtent(self):

        localctx = SpeakQlParser.FrameExtentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_frameExtent)
        try:
            self.state = 6565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,958,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6563
                self.frameRange()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6564
                self.frameBetween()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(SpeakQlParser.BETWEEN, 0)

        def frameRange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.FrameRangeContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.FrameRangeContext,i)


        def AND(self):
            return self.getToken(SpeakQlParser.AND, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_frameBetween

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameBetween" ):
                listener.enterFrameBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameBetween" ):
                listener.exitFrameBetween(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBetween" ):
                return visitor.visitFrameBetween(self)
            else:
                return visitor.visitChildren(self)




    def frameBetween(self):

        localctx = SpeakQlParser.FrameBetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_frameBetween)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6567
            self.match(SpeakQlParser.BETWEEN)
            self.state = 6568
            self.frameRange()
            self.state = 6569
            self.match(SpeakQlParser.AND)
            self.state = 6570
            self.frameRange()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(SpeakQlParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SpeakQlParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(SpeakQlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(SpeakQlParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SpeakQlParser.FOLLOWING, 0)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_frameRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameRange" ):
                listener.enterFrameRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameRange" ):
                listener.exitFrameRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameRange" ):
                return visitor.visitFrameRange(self)
            else:
                return visitor.visitChildren(self)




    def frameRange(self):

        localctx = SpeakQlParser.FrameRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_frameRange)
        self._la = 0 # Token type
        try:
            self.state = 6579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,959,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6572
                self.match(SpeakQlParser.CURRENT)
                self.state = 6573
                self.match(SpeakQlParser.ROW)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6574
                self.match(SpeakQlParser.UNBOUNDED)
                self.state = 6575
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.FOLLOWING or _la==SpeakQlParser.PRECEDING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6576
                self.expression(0)
                self.state = 6577
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.FOLLOWING or _la==SpeakQlParser.PRECEDING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(SpeakQlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(SpeakQlParser.BY, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_partitionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionClause" ):
                listener.enterPartitionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionClause" ):
                listener.exitPartitionClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionClause" ):
                return visitor.visitPartitionClause(self)
            else:
                return visitor.visitChildren(self)




    def partitionClause(self):

        localctx = SpeakQlParser.PartitionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_partitionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6581
            self.match(SpeakQlParser.PARTITION)
            self.state = 6582
            self.match(SpeakQlParser.BY)
            self.state = 6583
            self.expression(0)
            self.state = 6588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 6584
                self.match(SpeakQlParser.COMMA)
                self.state = 6585
                self.expression(0)
                self.state = 6590
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarFunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionNameBase(self):
            return self.getTypedRuleContext(SpeakQlParser.FunctionNameBaseContext,0)


        def ASCII(self):
            return self.getToken(SpeakQlParser.ASCII, 0)

        def CURDATE(self):
            return self.getToken(SpeakQlParser.CURDATE, 0)

        def CURRENT_DATE(self):
            return self.getToken(SpeakQlParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(SpeakQlParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SpeakQlParser.CURRENT_TIMESTAMP, 0)

        def CURTIME(self):
            return self.getToken(SpeakQlParser.CURTIME, 0)

        def DATE_ADD(self):
            return self.getToken(SpeakQlParser.DATE_ADD, 0)

        def DATE_SUB(self):
            return self.getToken(SpeakQlParser.DATE_SUB, 0)

        def IF(self):
            return self.getToken(SpeakQlParser.IF, 0)

        def INSERT(self):
            return self.getToken(SpeakQlParser.INSERT, 0)

        def LOCALTIME(self):
            return self.getToken(SpeakQlParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(SpeakQlParser.LOCALTIMESTAMP, 0)

        def MID(self):
            return self.getToken(SpeakQlParser.MID, 0)

        def NOW(self):
            return self.getToken(SpeakQlParser.NOW, 0)

        def REPLACE(self):
            return self.getToken(SpeakQlParser.REPLACE, 0)

        def SUBSTR(self):
            return self.getToken(SpeakQlParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(SpeakQlParser.SUBSTRING, 0)

        def SYSDATE(self):
            return self.getToken(SpeakQlParser.SYSDATE, 0)

        def TRIM(self):
            return self.getToken(SpeakQlParser.TRIM, 0)

        def UTC_DATE(self):
            return self.getToken(SpeakQlParser.UTC_DATE, 0)

        def UTC_TIME(self):
            return self.getToken(SpeakQlParser.UTC_TIME, 0)

        def UTC_TIMESTAMP(self):
            return self.getToken(SpeakQlParser.UTC_TIMESTAMP, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_scalarFunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarFunctionName" ):
                listener.enterScalarFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarFunctionName" ):
                listener.exitScalarFunctionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalarFunctionName" ):
                return visitor.visitScalarFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def scalarFunctionName(self):

        localctx = SpeakQlParser.ScalarFunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_scalarFunctionName)
        try:
            self.state = 6614
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.DATABASE, SpeakQlParser.LEFT, SpeakQlParser.RIGHT, SpeakQlParser.SCHEMA, SpeakQlParser.DATE, SpeakQlParser.TIME, SpeakQlParser.TIMESTAMP, SpeakQlParser.YEAR, SpeakQlParser.JSON_ARRAY, SpeakQlParser.JSON_OBJECT, SpeakQlParser.JSON_QUOTE, SpeakQlParser.JSON_CONTAINS, SpeakQlParser.JSON_CONTAINS_PATH, SpeakQlParser.JSON_EXTRACT, SpeakQlParser.JSON_KEYS, SpeakQlParser.JSON_OVERLAPS, SpeakQlParser.JSON_SEARCH, SpeakQlParser.JSON_VALUE, SpeakQlParser.JSON_ARRAY_APPEND, SpeakQlParser.JSON_ARRAY_INSERT, SpeakQlParser.JSON_INSERT, SpeakQlParser.JSON_MERGE, SpeakQlParser.JSON_MERGE_PATCH, SpeakQlParser.JSON_MERGE_PRESERVE, SpeakQlParser.JSON_REMOVE, SpeakQlParser.JSON_REPLACE, SpeakQlParser.JSON_SET, SpeakQlParser.JSON_UNQUOTE, SpeakQlParser.JSON_DEPTH, SpeakQlParser.JSON_LENGTH, SpeakQlParser.JSON_TYPE, SpeakQlParser.JSON_VALID, SpeakQlParser.JSON_TABLE, SpeakQlParser.JSON_SCHEMA_VALID, SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, SpeakQlParser.JSON_PRETTY, SpeakQlParser.JSON_STORAGE_FREE, SpeakQlParser.JSON_STORAGE_SIZE, SpeakQlParser.JSON_ARRAYAGG, SpeakQlParser.JSON_OBJECTAGG, SpeakQlParser.COUNT, SpeakQlParser.POSITION, SpeakQlParser.INVISIBLE, SpeakQlParser.VISIBLE, SpeakQlParser.QUARTER, SpeakQlParser.MONTH, SpeakQlParser.DAY, SpeakQlParser.HOUR, SpeakQlParser.MINUTE, SpeakQlParser.WEEK, SpeakQlParser.SECOND, SpeakQlParser.MICROSECOND, SpeakQlParser.SESSION_VARIABLES_ADMIN, SpeakQlParser.GEOMETRYCOLLECTION, SpeakQlParser.LINESTRING, SpeakQlParser.MULTILINESTRING, SpeakQlParser.MULTIPOINT, SpeakQlParser.MULTIPOLYGON, SpeakQlParser.POINT, SpeakQlParser.POLYGON, SpeakQlParser.ABS, SpeakQlParser.ACOS, SpeakQlParser.ADDDATE, SpeakQlParser.ADDTIME, SpeakQlParser.AES_DECRYPT, SpeakQlParser.AES_ENCRYPT, SpeakQlParser.AREA, SpeakQlParser.ASBINARY, SpeakQlParser.ASIN, SpeakQlParser.ASTEXT, SpeakQlParser.ASWKB, SpeakQlParser.ASWKT, SpeakQlParser.ASYMMETRIC_DECRYPT, SpeakQlParser.ASYMMETRIC_DERIVE, SpeakQlParser.ASYMMETRIC_ENCRYPT, SpeakQlParser.ASYMMETRIC_SIGN, SpeakQlParser.ASYMMETRIC_VERIFY, SpeakQlParser.ATAN, SpeakQlParser.ATAN2, SpeakQlParser.BENCHMARK, SpeakQlParser.BIN, SpeakQlParser.BIT_COUNT, SpeakQlParser.BIT_LENGTH, SpeakQlParser.BUFFER, SpeakQlParser.CEIL, SpeakQlParser.CEILING, SpeakQlParser.CENTROID, SpeakQlParser.CHARACTER_LENGTH, SpeakQlParser.CHARSET, SpeakQlParser.CHAR_LENGTH, SpeakQlParser.COERCIBILITY, SpeakQlParser.COLLATION, SpeakQlParser.COMPRESS, SpeakQlParser.CONCAT, SpeakQlParser.CONCAT_WS, SpeakQlParser.CONNECTION_ID, SpeakQlParser.CONV, SpeakQlParser.CONVERT_TZ, SpeakQlParser.COS, SpeakQlParser.COT, SpeakQlParser.CRC32, SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, SpeakQlParser.CREATE_DH_PARAMETERS, SpeakQlParser.CREATE_DIGEST, SpeakQlParser.CROSSES, SpeakQlParser.DATEDIFF, SpeakQlParser.DATE_FORMAT, SpeakQlParser.DAYNAME, SpeakQlParser.DAYOFMONTH, SpeakQlParser.DAYOFWEEK, SpeakQlParser.DAYOFYEAR, SpeakQlParser.DECODE, SpeakQlParser.DEGREES, SpeakQlParser.DES_DECRYPT, SpeakQlParser.DES_ENCRYPT, SpeakQlParser.DIMENSION, SpeakQlParser.DISJOINT, SpeakQlParser.ELT, SpeakQlParser.ENCODE, SpeakQlParser.ENCRYPT, SpeakQlParser.ENDPOINT, SpeakQlParser.ENVELOPE, SpeakQlParser.EQUALS, SpeakQlParser.EXP, SpeakQlParser.EXPORT_SET, SpeakQlParser.EXTERIORRING, SpeakQlParser.EXTRACTVALUE, SpeakQlParser.FIELD, SpeakQlParser.FIND_IN_SET, SpeakQlParser.FLOOR, SpeakQlParser.FORMAT, SpeakQlParser.FOUND_ROWS, SpeakQlParser.FROM_BASE64, SpeakQlParser.FROM_DAYS, SpeakQlParser.FROM_UNIXTIME, SpeakQlParser.GEOMCOLLFROMTEXT, SpeakQlParser.GEOMCOLLFROMWKB, SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.GEOMETRYFROMTEXT, SpeakQlParser.GEOMETRYFROMWKB, SpeakQlParser.GEOMETRYN, SpeakQlParser.GEOMETRYTYPE, SpeakQlParser.GEOMFROMTEXT, SpeakQlParser.GEOMFROMWKB, SpeakQlParser.GET_FORMAT, SpeakQlParser.GET_LOCK, SpeakQlParser.GLENGTH, SpeakQlParser.GREATEST, SpeakQlParser.GTID_SUBSET, SpeakQlParser.GTID_SUBTRACT, SpeakQlParser.HEX, SpeakQlParser.IFNULL, SpeakQlParser.INET6_ATON, SpeakQlParser.INET6_NTOA, SpeakQlParser.INET_ATON, SpeakQlParser.INET_NTOA, SpeakQlParser.INSTR, SpeakQlParser.INTERIORRINGN, SpeakQlParser.INTERSECTS, SpeakQlParser.ISCLOSED, SpeakQlParser.ISEMPTY, SpeakQlParser.ISNULL, SpeakQlParser.ISSIMPLE, SpeakQlParser.IS_FREE_LOCK, SpeakQlParser.IS_IPV4, SpeakQlParser.IS_IPV4_COMPAT, SpeakQlParser.IS_IPV4_MAPPED, SpeakQlParser.IS_IPV6, SpeakQlParser.IS_USED_LOCK, SpeakQlParser.LAST_INSERT_ID, SpeakQlParser.LCASE, SpeakQlParser.LEAST, SpeakQlParser.LENGTH, SpeakQlParser.LINEFROMTEXT, SpeakQlParser.LINEFROMWKB, SpeakQlParser.LINESTRINGFROMTEXT, SpeakQlParser.LINESTRINGFROMWKB, SpeakQlParser.LN, SpeakQlParser.LOAD_FILE, SpeakQlParser.LOCATE, SpeakQlParser.LOG, SpeakQlParser.LOG10, SpeakQlParser.LOG2, SpeakQlParser.LOWER, SpeakQlParser.LPAD, SpeakQlParser.LTRIM, SpeakQlParser.MAKEDATE, SpeakQlParser.MAKETIME, SpeakQlParser.MAKE_SET, SpeakQlParser.MASTER_POS_WAIT, SpeakQlParser.MBRCONTAINS, SpeakQlParser.MBRDISJOINT, SpeakQlParser.MBREQUAL, SpeakQlParser.MBRINTERSECTS, SpeakQlParser.MBROVERLAPS, SpeakQlParser.MBRTOUCHES, SpeakQlParser.MBRWITHIN, SpeakQlParser.MD5, SpeakQlParser.MLINEFROMTEXT, SpeakQlParser.MLINEFROMWKB, SpeakQlParser.MONTHNAME, SpeakQlParser.MPOINTFROMTEXT, SpeakQlParser.MPOINTFROMWKB, SpeakQlParser.MPOLYFROMTEXT, SpeakQlParser.MPOLYFROMWKB, SpeakQlParser.MULTILINESTRINGFROMTEXT, SpeakQlParser.MULTILINESTRINGFROMWKB, SpeakQlParser.MULTIPOINTFROMTEXT, SpeakQlParser.MULTIPOINTFROMWKB, SpeakQlParser.MULTIPOLYGONFROMTEXT, SpeakQlParser.MULTIPOLYGONFROMWKB, SpeakQlParser.NAME_CONST, SpeakQlParser.NULLIF, SpeakQlParser.NUMGEOMETRIES, SpeakQlParser.NUMINTERIORRINGS, SpeakQlParser.NUMPOINTS, SpeakQlParser.OCT, SpeakQlParser.OCTET_LENGTH, SpeakQlParser.ORD, SpeakQlParser.OVERLAPS, SpeakQlParser.PERIOD_ADD, SpeakQlParser.PERIOD_DIFF, SpeakQlParser.PI, SpeakQlParser.POINTFROMTEXT, SpeakQlParser.POINTFROMWKB, SpeakQlParser.POINTN, SpeakQlParser.POLYFROMTEXT, SpeakQlParser.POLYFROMWKB, SpeakQlParser.POLYGONFROMTEXT, SpeakQlParser.POLYGONFROMWKB, SpeakQlParser.POW, SpeakQlParser.POWER, SpeakQlParser.QUOTE, SpeakQlParser.RADIANS, SpeakQlParser.RAND, SpeakQlParser.RANDOM_BYTES, SpeakQlParser.RELEASE_LOCK, SpeakQlParser.REVERSE, SpeakQlParser.ROUND, SpeakQlParser.ROW_COUNT, SpeakQlParser.RPAD, SpeakQlParser.RTRIM, SpeakQlParser.SEC_TO_TIME, SpeakQlParser.SESSION_USER, SpeakQlParser.SHA, SpeakQlParser.SHA1, SpeakQlParser.SHA2, SpeakQlParser.SIGN, SpeakQlParser.SIN, SpeakQlParser.SLEEP, SpeakQlParser.SOUNDEX, SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, SpeakQlParser.SQRT, SpeakQlParser.SRID, SpeakQlParser.STARTPOINT, SpeakQlParser.STRCMP, SpeakQlParser.STR_TO_DATE, SpeakQlParser.ST_AREA, SpeakQlParser.ST_ASBINARY, SpeakQlParser.ST_ASTEXT, SpeakQlParser.ST_ASWKB, SpeakQlParser.ST_ASWKT, SpeakQlParser.ST_BUFFER, SpeakQlParser.ST_CENTROID, SpeakQlParser.ST_CONTAINS, SpeakQlParser.ST_CROSSES, SpeakQlParser.ST_DIFFERENCE, SpeakQlParser.ST_DIMENSION, SpeakQlParser.ST_DISJOINT, SpeakQlParser.ST_DISTANCE, SpeakQlParser.ST_ENDPOINT, SpeakQlParser.ST_ENVELOPE, SpeakQlParser.ST_EQUALS, SpeakQlParser.ST_EXTERIORRING, SpeakQlParser.ST_GEOMCOLLFROMTEXT, SpeakQlParser.ST_GEOMCOLLFROMTXT, SpeakQlParser.ST_GEOMCOLLFROMWKB, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, SpeakQlParser.ST_GEOMETRYFROMTEXT, SpeakQlParser.ST_GEOMETRYFROMWKB, SpeakQlParser.ST_GEOMETRYN, SpeakQlParser.ST_GEOMETRYTYPE, SpeakQlParser.ST_GEOMFROMTEXT, SpeakQlParser.ST_GEOMFROMWKB, SpeakQlParser.ST_INTERIORRINGN, SpeakQlParser.ST_INTERSECTION, SpeakQlParser.ST_INTERSECTS, SpeakQlParser.ST_ISCLOSED, SpeakQlParser.ST_ISEMPTY, SpeakQlParser.ST_ISSIMPLE, SpeakQlParser.ST_LINEFROMTEXT, SpeakQlParser.ST_LINEFROMWKB, SpeakQlParser.ST_LINESTRINGFROMTEXT, SpeakQlParser.ST_LINESTRINGFROMWKB, SpeakQlParser.ST_NUMGEOMETRIES, SpeakQlParser.ST_NUMINTERIORRING, SpeakQlParser.ST_NUMINTERIORRINGS, SpeakQlParser.ST_NUMPOINTS, SpeakQlParser.ST_OVERLAPS, SpeakQlParser.ST_POINTFROMTEXT, SpeakQlParser.ST_POINTFROMWKB, SpeakQlParser.ST_POINTN, SpeakQlParser.ST_POLYFROMTEXT, SpeakQlParser.ST_POLYFROMWKB, SpeakQlParser.ST_POLYGONFROMTEXT, SpeakQlParser.ST_POLYGONFROMWKB, SpeakQlParser.ST_SRID, SpeakQlParser.ST_STARTPOINT, SpeakQlParser.ST_SYMDIFFERENCE, SpeakQlParser.ST_TOUCHES, SpeakQlParser.ST_UNION, SpeakQlParser.ST_WITHIN, SpeakQlParser.ST_X, SpeakQlParser.ST_Y, SpeakQlParser.SUBDATE, SpeakQlParser.SUBSTRING_INDEX, SpeakQlParser.SUBTIME, SpeakQlParser.SYSTEM_USER, SpeakQlParser.TAN, SpeakQlParser.TIMEDIFF, SpeakQlParser.TIMESTAMPADD, SpeakQlParser.TIMESTAMPDIFF, SpeakQlParser.TIME_FORMAT, SpeakQlParser.TIME_TO_SEC, SpeakQlParser.TOUCHES, SpeakQlParser.TO_BASE64, SpeakQlParser.TO_DAYS, SpeakQlParser.TO_SECONDS, SpeakQlParser.UCASE, SpeakQlParser.UNCOMPRESS, SpeakQlParser.UNCOMPRESSED_LENGTH, SpeakQlParser.UNHEX, SpeakQlParser.UNIX_TIMESTAMP, SpeakQlParser.UPDATEXML, SpeakQlParser.UPPER, SpeakQlParser.UUID, SpeakQlParser.UUID_SHORT, SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, SpeakQlParser.VERSION, SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SpeakQlParser.WEEKDAY, SpeakQlParser.WEEKOFYEAR, SpeakQlParser.WEIGHT_STRING, SpeakQlParser.WITHIN, SpeakQlParser.YEARWEEK, SpeakQlParser.Y_FUNCTION, SpeakQlParser.X_FUNCTION, SpeakQlParser.MOD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6591
                self.functionNameBase()
                pass
            elif token in [SpeakQlParser.ASCII]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6592
                self.match(SpeakQlParser.ASCII)
                pass
            elif token in [SpeakQlParser.CURDATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6593
                self.match(SpeakQlParser.CURDATE)
                pass
            elif token in [SpeakQlParser.CURRENT_DATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6594
                self.match(SpeakQlParser.CURRENT_DATE)
                pass
            elif token in [SpeakQlParser.CURRENT_TIME]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6595
                self.match(SpeakQlParser.CURRENT_TIME)
                pass
            elif token in [SpeakQlParser.CURRENT_TIMESTAMP]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6596
                self.match(SpeakQlParser.CURRENT_TIMESTAMP)
                pass
            elif token in [SpeakQlParser.CURTIME]:
                self.enterOuterAlt(localctx, 7)
                self.state = 6597
                self.match(SpeakQlParser.CURTIME)
                pass
            elif token in [SpeakQlParser.DATE_ADD]:
                self.enterOuterAlt(localctx, 8)
                self.state = 6598
                self.match(SpeakQlParser.DATE_ADD)
                pass
            elif token in [SpeakQlParser.DATE_SUB]:
                self.enterOuterAlt(localctx, 9)
                self.state = 6599
                self.match(SpeakQlParser.DATE_SUB)
                pass
            elif token in [SpeakQlParser.IF]:
                self.enterOuterAlt(localctx, 10)
                self.state = 6600
                self.match(SpeakQlParser.IF)
                pass
            elif token in [SpeakQlParser.INSERT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 6601
                self.match(SpeakQlParser.INSERT)
                pass
            elif token in [SpeakQlParser.LOCALTIME]:
                self.enterOuterAlt(localctx, 12)
                self.state = 6602
                self.match(SpeakQlParser.LOCALTIME)
                pass
            elif token in [SpeakQlParser.LOCALTIMESTAMP]:
                self.enterOuterAlt(localctx, 13)
                self.state = 6603
                self.match(SpeakQlParser.LOCALTIMESTAMP)
                pass
            elif token in [SpeakQlParser.MID]:
                self.enterOuterAlt(localctx, 14)
                self.state = 6604
                self.match(SpeakQlParser.MID)
                pass
            elif token in [SpeakQlParser.NOW]:
                self.enterOuterAlt(localctx, 15)
                self.state = 6605
                self.match(SpeakQlParser.NOW)
                pass
            elif token in [SpeakQlParser.REPLACE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 6606
                self.match(SpeakQlParser.REPLACE)
                pass
            elif token in [SpeakQlParser.SUBSTR]:
                self.enterOuterAlt(localctx, 17)
                self.state = 6607
                self.match(SpeakQlParser.SUBSTR)
                pass
            elif token in [SpeakQlParser.SUBSTRING]:
                self.enterOuterAlt(localctx, 18)
                self.state = 6608
                self.match(SpeakQlParser.SUBSTRING)
                pass
            elif token in [SpeakQlParser.SYSDATE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 6609
                self.match(SpeakQlParser.SYSDATE)
                pass
            elif token in [SpeakQlParser.TRIM]:
                self.enterOuterAlt(localctx, 20)
                self.state = 6610
                self.match(SpeakQlParser.TRIM)
                pass
            elif token in [SpeakQlParser.UTC_DATE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 6611
                self.match(SpeakQlParser.UTC_DATE)
                pass
            elif token in [SpeakQlParser.UTC_TIME]:
                self.enterOuterAlt(localctx, 22)
                self.state = 6612
                self.match(SpeakQlParser.UTC_TIME)
                pass
            elif token in [SpeakQlParser.UTC_TIMESTAMP]:
                self.enterOuterAlt(localctx, 23)
                self.state = 6613
                self.match(SpeakQlParser.UTC_TIMESTAMP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PasswordFunctionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.functionName = None # Token

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)


        def functionArg(self):
            return self.getTypedRuleContext(SpeakQlParser.FunctionArgContext,0)


        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def PASSWORD(self):
            return self.getToken(SpeakQlParser.PASSWORD, 0)

        def OLD_PASSWORD(self):
            return self.getToken(SpeakQlParser.OLD_PASSWORD, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_passwordFunctionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordFunctionClause" ):
                listener.enterPasswordFunctionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordFunctionClause" ):
                listener.exitPasswordFunctionClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPasswordFunctionClause" ):
                return visitor.visitPasswordFunctionClause(self)
            else:
                return visitor.visitChildren(self)




    def passwordFunctionClause(self):

        localctx = SpeakQlParser.PasswordFunctionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_passwordFunctionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6616
            localctx.functionName = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.OLD_PASSWORD or _la==SpeakQlParser.PASSWORD):
                localctx.functionName = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6617
            self.leftParen()
            self.state = 6618
            self.functionArg()
            self.state = 6619
            self.rightParen()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ConstantContext,i)


        def fullColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.FullColumnNameContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.FullColumnNameContext,i)


        def functionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.FunctionCallContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.FunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_functionArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgs" ):
                listener.enterFunctionArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgs" ):
                listener.exitFunctionArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArgs" ):
                return visitor.visitFunctionArgs(self)
            else:
                return visitor.visitChildren(self)




    def functionArgs(self):

        localctx = SpeakQlParser.FunctionArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_functionArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,962,self._ctx)
            if la_ == 1:
                self.state = 6621
                self.constant()
                pass

            elif la_ == 2:
                self.state = 6622
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.state = 6623
                self.functionCall()
                pass

            elif la_ == 4:
                self.state = 6624
                self.expression(0)
                pass


            self.state = 6636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SpeakQlParser.COMMA:
                self.state = 6627
                self.match(SpeakQlParser.COMMA)
                self.state = 6632
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,963,self._ctx)
                if la_ == 1:
                    self.state = 6628
                    self.constant()
                    pass

                elif la_ == 2:
                    self.state = 6629
                    self.fullColumnName()
                    pass

                elif la_ == 3:
                    self.state = 6630
                    self.functionCall()
                    pass

                elif la_ == 4:
                    self.state = 6631
                    self.expression(0)
                    pass


                self.state = 6638
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(SpeakQlParser.ConstantContext,0)


        def fullColumnName(self):
            return self.getTypedRuleContext(SpeakQlParser.FullColumnNameContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(SpeakQlParser.FunctionCallContext,0)


        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SpeakQlParser.RULE_functionArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArg" ):
                listener.enterFunctionArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArg" ):
                listener.exitFunctionArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArg" ):
                return visitor.visitFunctionArg(self)
            else:
                return visitor.visitChildren(self)




    def functionArg(self):

        localctx = SpeakQlParser.FunctionArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_functionArg)
        try:
            self.state = 6643
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,965,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6639
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6640
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6641
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6642
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionContext
            super().__init__(parser)
            self.testValue = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SpeakQlParser.PredicateContext,0)

        def IS(self):
            return self.getToken(SpeakQlParser.IS, 0)
        def TRUE(self):
            return self.getToken(SpeakQlParser.TRUE, 0)
        def FALSE(self):
            return self.getToken(SpeakQlParser.FALSE, 0)
        def UNKNOWN(self):
            return self.getToken(SpeakQlParser.UNKNOWN, 0)
        def NOT(self):
            return self.getToken(SpeakQlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsExpression" ):
                listener.enterIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsExpression" ):
                listener.exitIsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsExpression" ):
                return visitor.visitIsExpression(self)
            else:
                return visitor.visitChildren(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionContext
            super().__init__(parser)
            self.notOperator = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)

        def NOT(self):
            return self.getToken(SpeakQlParser.NOT, 0)
        def EXCLAMATION_SYMBOL(self):
            return self.getToken(SpeakQlParser.EXCLAMATION_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotExpression" ):
                return visitor.visitNotExpression(self)
            else:
                return visitor.visitChildren(self)


    class LogicalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,i)

        def logicalOperator(self):
            return self.getTypedRuleContext(SpeakQlParser.LogicalOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExpression" ):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExpression" ):
                listener.exitLogicalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalExpression" ):
                return visitor.visitLogicalExpression(self)
            else:
                return visitor.visitChildren(self)


    class PredicateExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SpeakQlParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExpression" ):
                listener.enterPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExpression" ):
                listener.exitPredicateExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicateExpression" ):
                return visitor.visitPredicateExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SpeakQlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 650
        self.enterRecursionRule(localctx, 650, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,967,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 6646
                localctx.notOperator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.NOT or _la==SpeakQlParser.EXCLAMATION_SYMBOL):
                    localctx.notOperator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6647
                self.expression(4)
                pass

            elif la_ == 2:
                localctx = SpeakQlParser.IsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6648
                self.predicate(0)
                self.state = 6649
                self.match(SpeakQlParser.IS)
                self.state = 6651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SpeakQlParser.NOT:
                    self.state = 6650
                    self.match(SpeakQlParser.NOT)


                self.state = 6653
                localctx.testValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SpeakQlParser.FALSE or _la==SpeakQlParser.TRUE or _la==SpeakQlParser.UNKNOWN):
                    localctx.testValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                localctx = SpeakQlParser.PredicateExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6655
                self.predicate(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 6664
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,968,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SpeakQlParser.LogicalExpressionContext(self, SpeakQlParser.ExpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 6658
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 6659
                    self.logicalOperator()
                    self.state = 6660
                    self.expression(4) 
                self.state = 6666
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,968,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SoundsLikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PredicateContext,i)

        def SOUNDS(self):
            return self.getToken(SpeakQlParser.SOUNDS, 0)
        def LIKE(self):
            return self.getToken(SpeakQlParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoundsLikePredicate" ):
                listener.enterSoundsLikePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoundsLikePredicate" ):
                listener.exitSoundsLikePredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoundsLikePredicate" ):
                return visitor.visitSoundsLikePredicate(self)
            else:
                return visitor.visitChildren(self)


    class ExpressionAtomPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionAtomContext,0)

        def LOCAL_ID(self):
            return self.getToken(SpeakQlParser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(SpeakQlParser.VAR_ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionAtomPredicate" ):
                listener.enterExpressionAtomPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionAtomPredicate" ):
                listener.exitExpressionAtomPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionAtomPredicate" ):
                return visitor.visitExpressionAtomPredicate(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryComparisonPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PredicateContext
            super().__init__(parser)
            self.quantifier = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SpeakQlParser.PredicateContext,0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SpeakQlParser.ComparisonOperatorContext,0)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectStatementContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def ALL(self):
            return self.getToken(SpeakQlParser.ALL, 0)
        def ANY(self):
            return self.getToken(SpeakQlParser.ANY, 0)
        def SOME(self):
            return self.getToken(SpeakQlParser.SOME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryComparisonPredicate" ):
                listener.enterSubqueryComparisonPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryComparisonPredicate" ):
                listener.exitSubqueryComparisonPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryComparisonPredicate" ):
                return visitor.visitSubqueryComparisonPredicate(self)
            else:
                return visitor.visitChildren(self)


    class JsonMemberOfPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PredicateContext,i)

        def MEMBER(self):
            return self.getToken(SpeakQlParser.MEMBER, 0)
        def OF(self):
            return self.getToken(SpeakQlParser.OF, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonMemberOfPredicate" ):
                listener.enterJsonMemberOfPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonMemberOfPredicate" ):
                listener.exitJsonMemberOfPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonMemberOfPredicate" ):
                return visitor.visitJsonMemberOfPredicate(self)
            else:
                return visitor.visitChildren(self)


    class BinaryComparisonPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PredicateContext
            super().__init__(parser)
            self.left = None # PredicateContext
            self.right = None # PredicateContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SpeakQlParser.ComparisonOperatorContext,0)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PredicateContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryComparisonPredicate" ):
                listener.enterBinaryComparisonPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryComparisonPredicate" ):
                listener.exitBinaryComparisonPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryComparisonPredicate" ):
                return visitor.visitBinaryComparisonPredicate(self)
            else:
                return visitor.visitChildren(self)


    class InPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SpeakQlParser.PredicateContext,0)

        def IN(self):
            return self.getToken(SpeakQlParser.IN, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectStatementContext,0)

        def expressions(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionsContext,0)

        def NOT(self):
            return self.getToken(SpeakQlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInPredicate" ):
                listener.enterInPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInPredicate" ):
                listener.exitInPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInPredicate" ):
                return visitor.visitInPredicate(self)
            else:
                return visitor.visitChildren(self)


    class BetweenPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PredicateContext,i)

        def BETWEEN(self):
            return self.getToken(SpeakQlParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(SpeakQlParser.AND, 0)
        def NOT(self):
            return self.getToken(SpeakQlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenPredicate" ):
                listener.enterBetweenPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenPredicate" ):
                listener.exitBetweenPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetweenPredicate" ):
                return visitor.visitBetweenPredicate(self)
            else:
                return visitor.visitChildren(self)


    class IsNullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SpeakQlParser.PredicateContext,0)

        def IS(self):
            return self.getToken(SpeakQlParser.IS, 0)
        def nullNotnull(self):
            return self.getTypedRuleContext(SpeakQlParser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNullPredicate" ):
                listener.enterIsNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNullPredicate" ):
                listener.exitIsNullPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsNullPredicate" ):
                return visitor.visitIsNullPredicate(self)
            else:
                return visitor.visitChildren(self)


    class LikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PredicateContext,i)

        def LIKE(self):
            return self.getToken(SpeakQlParser.LIKE, 0)
        def NOT(self):
            return self.getToken(SpeakQlParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(SpeakQlParser.ESCAPE, 0)
        def STRING_LITERAL(self):
            return self.getToken(SpeakQlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikePredicate" ):
                listener.enterLikePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikePredicate" ):
                listener.exitLikePredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLikePredicate" ):
                return visitor.visitLikePredicate(self)
            else:
                return visitor.visitChildren(self)


    class RegexpPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.PredicateContext
            super().__init__(parser)
            self.regex = None # Token
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.PredicateContext,i)

        def REGEXP(self):
            return self.getToken(SpeakQlParser.REGEXP, 0)
        def RLIKE(self):
            return self.getToken(SpeakQlParser.RLIKE, 0)
        def NOT(self):
            return self.getToken(SpeakQlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegexpPredicate" ):
                listener.enterRegexpPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegexpPredicate" ):
                listener.exitRegexpPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegexpPredicate" ):
                return visitor.visitRegexpPredicate(self)
            else:
                return visitor.visitChildren(self)



    def predicate(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SpeakQlParser.PredicateContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 652
        self.enterRecursionRule(localctx, 652, self.RULE_predicate, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SpeakQlParser.ExpressionAtomPredicateContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 6670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,969,self._ctx)
            if la_ == 1:
                self.state = 6668
                self.match(SpeakQlParser.LOCAL_ID)
                self.state = 6669
                self.match(SpeakQlParser.VAR_ASSIGN)


            self.state = 6672
            self.expressionAtom(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 6738
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,977,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 6736
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,976,self._ctx)
                    if la_ == 1:
                        localctx = SpeakQlParser.BinaryComparisonPredicateContext(self, SpeakQlParser.PredicateContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6674
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 6675
                        self.comparisonOperator()
                        self.state = 6676
                        localctx.right = self.predicate(9)
                        pass

                    elif la_ == 2:
                        localctx = SpeakQlParser.BetweenPredicateContext(self, SpeakQlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6678
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 6680
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SpeakQlParser.NOT:
                            self.state = 6679
                            self.match(SpeakQlParser.NOT)


                        self.state = 6682
                        self.match(SpeakQlParser.BETWEEN)
                        self.state = 6683
                        self.predicate(0)
                        self.state = 6684
                        self.match(SpeakQlParser.AND)
                        self.state = 6685
                        self.predicate(7)
                        pass

                    elif la_ == 3:
                        localctx = SpeakQlParser.SoundsLikePredicateContext(self, SpeakQlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6687
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 6688
                        self.match(SpeakQlParser.SOUNDS)
                        self.state = 6689
                        self.match(SpeakQlParser.LIKE)
                        self.state = 6690
                        self.predicate(6)
                        pass

                    elif la_ == 4:
                        localctx = SpeakQlParser.RegexpPredicateContext(self, SpeakQlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6691
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 6693
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SpeakQlParser.NOT:
                            self.state = 6692
                            self.match(SpeakQlParser.NOT)


                        self.state = 6695
                        localctx.regex = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SpeakQlParser.REGEXP or _la==SpeakQlParser.RLIKE):
                            localctx.regex = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 6696
                        self.predicate(4)
                        pass

                    elif la_ == 5:
                        localctx = SpeakQlParser.InPredicateContext(self, SpeakQlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6697
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 6699
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SpeakQlParser.NOT:
                            self.state = 6698
                            self.match(SpeakQlParser.NOT)


                        self.state = 6701
                        self.match(SpeakQlParser.IN)
                        self.state = 6702
                        self.leftParen()
                        self.state = 6705
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,973,self._ctx)
                        if la_ == 1:
                            self.state = 6703
                            self.selectStatement()
                            pass

                        elif la_ == 2:
                            self.state = 6704
                            self.expressions()
                            pass


                        self.state = 6707
                        self.rightParen()
                        pass

                    elif la_ == 6:
                        localctx = SpeakQlParser.IsNullPredicateContext(self, SpeakQlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6709
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 6710
                        self.match(SpeakQlParser.IS)
                        self.state = 6711
                        self.nullNotnull()
                        pass

                    elif la_ == 7:
                        localctx = SpeakQlParser.SubqueryComparisonPredicateContext(self, SpeakQlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6712
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 6713
                        self.comparisonOperator()
                        self.state = 6714
                        localctx.quantifier = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SpeakQlParser.ALL or _la==SpeakQlParser.ANY or _la==SpeakQlParser.SOME):
                            localctx.quantifier = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 6715
                        self.leftParen()
                        self.state = 6716
                        self.selectStatement()
                        self.state = 6717
                        self.rightParen()
                        pass

                    elif la_ == 8:
                        localctx = SpeakQlParser.LikePredicateContext(self, SpeakQlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6719
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 6721
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SpeakQlParser.NOT:
                            self.state = 6720
                            self.match(SpeakQlParser.NOT)


                        self.state = 6723
                        self.match(SpeakQlParser.LIKE)
                        self.state = 6724
                        self.predicate(0)
                        self.state = 6727
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,975,self._ctx)
                        if la_ == 1:
                            self.state = 6725
                            self.match(SpeakQlParser.ESCAPE)
                            self.state = 6726
                            self.match(SpeakQlParser.STRING_LITERAL)


                        pass

                    elif la_ == 9:
                        localctx = SpeakQlParser.JsonMemberOfPredicateContext(self, SpeakQlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6729
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 6730
                        self.match(SpeakQlParser.MEMBER)
                        self.state = 6731
                        self.match(SpeakQlParser.OF)
                        self.state = 6732
                        self.leftParen()
                        self.state = 6733
                        self.predicate(0)
                        self.state = 6734
                        self.rightParen()
                        pass

             
                self.state = 6740
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,977,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SpeakQlParser.RULE_expressionAtom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class UnaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryOperator(self):
            return self.getTypedRuleContext(SpeakQlParser.UnaryOperatorContext,0)

        def expressionAtom(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpressionAtom" ):
                listener.enterUnaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpressionAtom" ):
                listener.exitUnaryExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpressionAtom" ):
                return visitor.visitUnaryExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class CollateExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionAtomContext,0)

        def COLLATE(self):
            return self.getToken(SpeakQlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(SpeakQlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollateExpressionAtom" ):
                listener.enterCollateExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollateExpressionAtom" ):
                listener.exitCollateExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollateExpressionAtom" ):
                return visitor.visitCollateExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class MysqlVariableExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def mysqlVariable(self):
            return self.getTypedRuleContext(SpeakQlParser.MysqlVariableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMysqlVariableExpressionAtom" ):
                listener.enterMysqlVariableExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMysqlVariableExpressionAtom" ):
                listener.exitMysqlVariableExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMysqlVariableExpressionAtom" ):
                return visitor.visitMysqlVariableExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class NestedExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,i)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedExpressionAtom" ):
                listener.enterNestedExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedExpressionAtom" ):
                listener.exitNestedExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedExpressionAtom" ):
                return visitor.visitNestedExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class NestedRowExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SpeakQlParser.ROW, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,i)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.COMMA)
            else:
                return self.getToken(SpeakQlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedRowExpressionAtom" ):
                listener.enterNestedRowExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedRowExpressionAtom" ):
                listener.exitNestedRowExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedRowExpressionAtom" ):
                return visitor.visitNestedRowExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class MathExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def mathOperator(self):
            return self.getTypedRuleContext(SpeakQlParser.MathOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathExpressionAtom" ):
                listener.enterMathExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathExpressionAtom" ):
                listener.exitMathExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMathExpressionAtom" ):
                return visitor.visitMathExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class ExistsExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SpeakQlParser.EXISTS, 0)
        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectStatementContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistsExpressionAtom" ):
                listener.enterExistsExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistsExpressionAtom" ):
                listener.exitExistsExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistsExpressionAtom" ):
                return visitor.visitExistsExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class IntervalExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(SpeakQlParser.INTERVAL, 0)
        def expression(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionContext,0)

        def intervalType(self):
            return self.getTypedRuleContext(SpeakQlParser.IntervalTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpressionAtom" ):
                listener.enterIntervalExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpressionAtom" ):
                listener.exitIntervalExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalExpressionAtom" ):
                return visitor.visitIntervalExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class JsonExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def jsonOperator(self):
            return self.getTypedRuleContext(SpeakQlParser.JsonOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExpressionAtom" ):
                listener.enterJsonExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExpressionAtom" ):
                listener.exitJsonExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonExpressionAtom" ):
                return visitor.visitJsonExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def leftParen(self):
            return self.getTypedRuleContext(SpeakQlParser.LeftParenContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(SpeakQlParser.SelectStatementContext,0)

        def rightParen(self):
            return self.getTypedRuleContext(SpeakQlParser.RightParenContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpressionAtom" ):
                listener.enterSubqueryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpressionAtom" ):
                listener.exitSubqueryExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpressionAtom" ):
                return visitor.visitSubqueryExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class ConstantExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(SpeakQlParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpressionAtom" ):
                listener.enterConstantExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpressionAtom" ):
                listener.exitConstantExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpressionAtom" ):
                return visitor.visitConstantExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(SpeakQlParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpressionAtom" ):
                listener.enterFunctionCallExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpressionAtom" ):
                listener.exitFunctionCallExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallExpressionAtom" ):
                return visitor.visitFunctionCallExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class BinaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY(self):
            return self.getToken(SpeakQlParser.BINARY, 0)
        def expressionAtom(self):
            return self.getTypedRuleContext(SpeakQlParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryExpressionAtom" ):
                listener.enterBinaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryExpressionAtom" ):
                listener.exitBinaryExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryExpressionAtom" ):
                return visitor.visitBinaryExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class FullColumnNameExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(SpeakQlParser.FullColumnNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnNameExpressionAtom" ):
                listener.enterFullColumnNameExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnNameExpressionAtom" ):
                listener.exitFullColumnNameExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullColumnNameExpressionAtom" ):
                return visitor.visitFullColumnNameExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class BitExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SpeakQlParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def bitOperator(self):
            return self.getTypedRuleContext(SpeakQlParser.BitOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SpeakQlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(SpeakQlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitExpressionAtom" ):
                listener.enterBitExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitExpressionAtom" ):
                listener.exitBitExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitExpressionAtom" ):
                return visitor.visitBitExpressionAtom(self)
            else:
                return visitor.visitChildren(self)



    def expressionAtom(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SpeakQlParser.ExpressionAtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 654
        self.enterRecursionRule(localctx, 654, self.RULE_expressionAtom, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,980,self._ctx)
            if la_ == 1:
                localctx = SpeakQlParser.ConstantExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 6742
                self.constant()
                pass

            elif la_ == 2:
                localctx = SpeakQlParser.FullColumnNameExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6743
                self.fullColumnName()
                pass

            elif la_ == 3:
                localctx = SpeakQlParser.FunctionCallExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6744
                self.functionCall()
                pass

            elif la_ == 4:
                localctx = SpeakQlParser.MysqlVariableExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6745
                self.mysqlVariable()
                pass

            elif la_ == 5:
                localctx = SpeakQlParser.UnaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6746
                self.unaryOperator()
                self.state = 6747
                self.expressionAtom(10)
                pass

            elif la_ == 6:
                localctx = SpeakQlParser.BinaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6749
                self.match(SpeakQlParser.BINARY)
                self.state = 6750
                self.expressionAtom(9)
                pass

            elif la_ == 7:
                localctx = SpeakQlParser.NestedExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6751
                self.leftParen()
                self.state = 6752
                self.expression(0)
                self.state = 6757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SpeakQlParser.COMMA:
                    self.state = 6753
                    self.match(SpeakQlParser.COMMA)
                    self.state = 6754
                    self.expression(0)
                    self.state = 6759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6760
                self.rightParen()
                pass

            elif la_ == 8:
                localctx = SpeakQlParser.NestedRowExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6762
                self.match(SpeakQlParser.ROW)
                self.state = 6763
                self.leftParen()
                self.state = 6764
                self.expression(0)
                self.state = 6767 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6765
                    self.match(SpeakQlParser.COMMA)
                    self.state = 6766
                    self.expression(0)
                    self.state = 6769 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SpeakQlParser.COMMA):
                        break

                self.state = 6771
                self.rightParen()
                pass

            elif la_ == 9:
                localctx = SpeakQlParser.ExistsExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6773
                self.match(SpeakQlParser.EXISTS)
                self.state = 6774
                self.leftParen()
                self.state = 6775
                self.selectStatement()
                self.state = 6776
                self.rightParen()
                pass

            elif la_ == 10:
                localctx = SpeakQlParser.SubqueryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6778
                self.leftParen()
                self.state = 6779
                self.selectStatement()
                self.state = 6780
                self.rightParen()
                pass

            elif la_ == 11:
                localctx = SpeakQlParser.IntervalExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6782
                self.match(SpeakQlParser.INTERVAL)
                self.state = 6783
                self.expression(0)
                self.state = 6784
                self.intervalType()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 6805
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,982,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 6803
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,981,self._ctx)
                    if la_ == 1:
                        localctx = SpeakQlParser.BitExpressionAtomContext(self, SpeakQlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 6788
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 6789
                        self.bitOperator()
                        self.state = 6790
                        localctx.right = self.expressionAtom(4)
                        pass

                    elif la_ == 2:
                        localctx = SpeakQlParser.MathExpressionAtomContext(self, SpeakQlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 6792
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 6793
                        self.mathOperator()
                        self.state = 6794
                        localctx.right = self.expressionAtom(3)
                        pass

                    elif la_ == 3:
                        localctx = SpeakQlParser.JsonExpressionAtomContext(self, SpeakQlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 6796
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 6797
                        self.jsonOperator()
                        self.state = 6798
                        localctx.right = self.expressionAtom(2)
                        pass

                    elif la_ == 4:
                        localctx = SpeakQlParser.CollateExpressionAtomContext(self, SpeakQlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 6800
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 6801
                        self.match(SpeakQlParser.COLLATE)
                        self.state = 6802
                        self.collationName()
                        pass

             
                self.state = 6807
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,982,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION_SYMBOL(self):
            return self.getToken(SpeakQlParser.EXCLAMATION_SYMBOL, 0)

        def BIT_NOT_OP(self):
            return self.getToken(SpeakQlParser.BIT_NOT_OP, 0)

        def PLUS(self):
            return self.getToken(SpeakQlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SpeakQlParser.MINUS, 0)

        def NOT(self):
            return self.getToken(SpeakQlParser.NOT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOperator" ):
                return visitor.visitUnaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def unaryOperator(self):

        localctx = SpeakQlParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6808
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.NOT or ((((_la - 1085)) & ~0x3f) == 0 and ((1 << (_la - 1085)) & ((1 << (SpeakQlParser.PLUS - 1085)) | (1 << (SpeakQlParser.MINUS - 1085)) | (1 << (SpeakQlParser.EXCLAMATION_SYMBOL - 1085)) | (1 << (SpeakQlParser.BIT_NOT_OP - 1085)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_SYMBOL(self):
            return self.getToken(SpeakQlParser.EQUAL_SYMBOL, 0)

        def GREATER_SYMBOL(self):
            return self.getToken(SpeakQlParser.GREATER_SYMBOL, 0)

        def LESS_SYMBOL(self):
            return self.getToken(SpeakQlParser.LESS_SYMBOL, 0)

        def EXCLAMATION_SYMBOL(self):
            return self.getToken(SpeakQlParser.EXCLAMATION_SYMBOL, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = SpeakQlParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_comparisonOperator)
        try:
            self.state = 6824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,983,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6810
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6811
                self.match(SpeakQlParser.GREATER_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6812
                self.match(SpeakQlParser.LESS_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6813
                self.match(SpeakQlParser.LESS_SYMBOL)
                self.state = 6814
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6815
                self.match(SpeakQlParser.GREATER_SYMBOL)
                self.state = 6816
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6817
                self.match(SpeakQlParser.LESS_SYMBOL)
                self.state = 6818
                self.match(SpeakQlParser.GREATER_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6819
                self.match(SpeakQlParser.EXCLAMATION_SYMBOL)
                self.state = 6820
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6821
                self.match(SpeakQlParser.LESS_SYMBOL)
                self.state = 6822
                self.match(SpeakQlParser.EQUAL_SYMBOL)
                self.state = 6823
                self.match(SpeakQlParser.GREATER_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(SpeakQlParser.AND, 0)

        def BIT_AND_OP(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.BIT_AND_OP)
            else:
                return self.getToken(SpeakQlParser.BIT_AND_OP, i)

        def XOR(self):
            return self.getToken(SpeakQlParser.XOR, 0)

        def OR(self):
            return self.getToken(SpeakQlParser.OR, 0)

        def BIT_OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.BIT_OR_OP)
            else:
                return self.getToken(SpeakQlParser.BIT_OR_OP, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_logicalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOperator" ):
                listener.enterLogicalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOperator" ):
                listener.exitLogicalOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOperator" ):
                return visitor.visitLogicalOperator(self)
            else:
                return visitor.visitChildren(self)




    def logicalOperator(self):

        localctx = SpeakQlParser.LogicalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_logicalOperator)
        try:
            self.state = 6833
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.AND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6826
                self.match(SpeakQlParser.AND)
                pass
            elif token in [SpeakQlParser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6827
                self.match(SpeakQlParser.BIT_AND_OP)
                self.state = 6828
                self.match(SpeakQlParser.BIT_AND_OP)
                pass
            elif token in [SpeakQlParser.XOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6829
                self.match(SpeakQlParser.XOR)
                pass
            elif token in [SpeakQlParser.OR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6830
                self.match(SpeakQlParser.OR)
                pass
            elif token in [SpeakQlParser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6831
                self.match(SpeakQlParser.BIT_OR_OP)
                self.state = 6832
                self.match(SpeakQlParser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.LESS_SYMBOL)
            else:
                return self.getToken(SpeakQlParser.LESS_SYMBOL, i)

        def GREATER_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.GREATER_SYMBOL)
            else:
                return self.getToken(SpeakQlParser.GREATER_SYMBOL, i)

        def BIT_AND_OP(self):
            return self.getToken(SpeakQlParser.BIT_AND_OP, 0)

        def BIT_XOR_OP(self):
            return self.getToken(SpeakQlParser.BIT_XOR_OP, 0)

        def BIT_OR_OP(self):
            return self.getToken(SpeakQlParser.BIT_OR_OP, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_bitOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOperator" ):
                listener.enterBitOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOperator" ):
                listener.exitBitOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitOperator" ):
                return visitor.visitBitOperator(self)
            else:
                return visitor.visitChildren(self)




    def bitOperator(self):

        localctx = SpeakQlParser.BitOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_bitOperator)
        try:
            self.state = 6842
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SpeakQlParser.LESS_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6835
                self.match(SpeakQlParser.LESS_SYMBOL)
                self.state = 6836
                self.match(SpeakQlParser.LESS_SYMBOL)
                pass
            elif token in [SpeakQlParser.GREATER_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6837
                self.match(SpeakQlParser.GREATER_SYMBOL)
                self.state = 6838
                self.match(SpeakQlParser.GREATER_SYMBOL)
                pass
            elif token in [SpeakQlParser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6839
                self.match(SpeakQlParser.BIT_AND_OP)
                pass
            elif token in [SpeakQlParser.BIT_XOR_OP]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6840
                self.match(SpeakQlParser.BIT_XOR_OP)
                pass
            elif token in [SpeakQlParser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6841
                self.match(SpeakQlParser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(SpeakQlParser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(SpeakQlParser.DIVIDE, 0)

        def MODULE(self):
            return self.getToken(SpeakQlParser.MODULE, 0)

        def DIV(self):
            return self.getToken(SpeakQlParser.DIV, 0)

        def MOD(self):
            return self.getToken(SpeakQlParser.MOD, 0)

        def PLUS(self):
            return self.getToken(SpeakQlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SpeakQlParser.MINUS, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_mathOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathOperator" ):
                listener.enterMathOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathOperator" ):
                listener.exitMathOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMathOperator" ):
                return visitor.visitMathOperator(self)
            else:
                return visitor.visitChildren(self)




    def mathOperator(self):

        localctx = SpeakQlParser.MathOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_mathOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6844
            _la = self._input.LA(1)
            if not(((((_la - 1082)) & ~0x3f) == 0 and ((1 << (_la - 1082)) & ((1 << (SpeakQlParser.STAR - 1082)) | (1 << (SpeakQlParser.DIVIDE - 1082)) | (1 << (SpeakQlParser.MODULE - 1082)) | (1 << (SpeakQlParser.PLUS - 1082)) | (1 << (SpeakQlParser.MINUS - 1082)) | (1 << (SpeakQlParser.DIV - 1082)) | (1 << (SpeakQlParser.MOD - 1082)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(SpeakQlParser.MINUS, 0)

        def GREATER_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(SpeakQlParser.GREATER_SYMBOL)
            else:
                return self.getToken(SpeakQlParser.GREATER_SYMBOL, i)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_jsonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOperator" ):
                listener.enterJsonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOperator" ):
                listener.exitJsonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonOperator" ):
                return visitor.visitJsonOperator(self)
            else:
                return visitor.visitChildren(self)




    def jsonOperator(self):

        localctx = SpeakQlParser.JsonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_jsonOperator)
        try:
            self.state = 6851
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,986,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6846
                self.match(SpeakQlParser.MINUS)
                self.state = 6847
                self.match(SpeakQlParser.GREATER_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6848
                self.match(SpeakQlParser.MINUS)
                self.state = 6849
                self.match(SpeakQlParser.GREATER_SYMBOL)
                self.state = 6850
                self.match(SpeakQlParser.GREATER_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetNameBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARMSCII8(self):
            return self.getToken(SpeakQlParser.ARMSCII8, 0)

        def ASCII(self):
            return self.getToken(SpeakQlParser.ASCII, 0)

        def BIG5(self):
            return self.getToken(SpeakQlParser.BIG5, 0)

        def BINARY(self):
            return self.getToken(SpeakQlParser.BINARY, 0)

        def CP1250(self):
            return self.getToken(SpeakQlParser.CP1250, 0)

        def CP1251(self):
            return self.getToken(SpeakQlParser.CP1251, 0)

        def CP1256(self):
            return self.getToken(SpeakQlParser.CP1256, 0)

        def CP1257(self):
            return self.getToken(SpeakQlParser.CP1257, 0)

        def CP850(self):
            return self.getToken(SpeakQlParser.CP850, 0)

        def CP852(self):
            return self.getToken(SpeakQlParser.CP852, 0)

        def CP866(self):
            return self.getToken(SpeakQlParser.CP866, 0)

        def CP932(self):
            return self.getToken(SpeakQlParser.CP932, 0)

        def DEC8(self):
            return self.getToken(SpeakQlParser.DEC8, 0)

        def EUCJPMS(self):
            return self.getToken(SpeakQlParser.EUCJPMS, 0)

        def EUCKR(self):
            return self.getToken(SpeakQlParser.EUCKR, 0)

        def GB18030(self):
            return self.getToken(SpeakQlParser.GB18030, 0)

        def GB2312(self):
            return self.getToken(SpeakQlParser.GB2312, 0)

        def GBK(self):
            return self.getToken(SpeakQlParser.GBK, 0)

        def GEOSTD8(self):
            return self.getToken(SpeakQlParser.GEOSTD8, 0)

        def GREEK(self):
            return self.getToken(SpeakQlParser.GREEK, 0)

        def HEBREW(self):
            return self.getToken(SpeakQlParser.HEBREW, 0)

        def HP8(self):
            return self.getToken(SpeakQlParser.HP8, 0)

        def KEYBCS2(self):
            return self.getToken(SpeakQlParser.KEYBCS2, 0)

        def KOI8R(self):
            return self.getToken(SpeakQlParser.KOI8R, 0)

        def KOI8U(self):
            return self.getToken(SpeakQlParser.KOI8U, 0)

        def LATIN1(self):
            return self.getToken(SpeakQlParser.LATIN1, 0)

        def LATIN2(self):
            return self.getToken(SpeakQlParser.LATIN2, 0)

        def LATIN5(self):
            return self.getToken(SpeakQlParser.LATIN5, 0)

        def LATIN7(self):
            return self.getToken(SpeakQlParser.LATIN7, 0)

        def MACCE(self):
            return self.getToken(SpeakQlParser.MACCE, 0)

        def MACROMAN(self):
            return self.getToken(SpeakQlParser.MACROMAN, 0)

        def SJIS(self):
            return self.getToken(SpeakQlParser.SJIS, 0)

        def SWE7(self):
            return self.getToken(SpeakQlParser.SWE7, 0)

        def TIS620(self):
            return self.getToken(SpeakQlParser.TIS620, 0)

        def UCS2(self):
            return self.getToken(SpeakQlParser.UCS2, 0)

        def UJIS(self):
            return self.getToken(SpeakQlParser.UJIS, 0)

        def UTF16(self):
            return self.getToken(SpeakQlParser.UTF16, 0)

        def UTF16LE(self):
            return self.getToken(SpeakQlParser.UTF16LE, 0)

        def UTF32(self):
            return self.getToken(SpeakQlParser.UTF32, 0)

        def UTF8(self):
            return self.getToken(SpeakQlParser.UTF8, 0)

        def UTF8MB3(self):
            return self.getToken(SpeakQlParser.UTF8MB3, 0)

        def UTF8MB4(self):
            return self.getToken(SpeakQlParser.UTF8MB4, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_charsetNameBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetNameBase" ):
                listener.enterCharsetNameBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetNameBase" ):
                listener.exitCharsetNameBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharsetNameBase" ):
                return visitor.visitCharsetNameBase(self)
            else:
                return visitor.visitChildren(self)




    def charsetNameBase(self):

        localctx = SpeakQlParser.CharsetNameBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_charsetNameBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6853
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.BINARY or ((((_la - 715)) & ~0x3f) == 0 and ((1 << (_la - 715)) & ((1 << (SpeakQlParser.ARMSCII8 - 715)) | (1 << (SpeakQlParser.ASCII - 715)) | (1 << (SpeakQlParser.BIG5 - 715)) | (1 << (SpeakQlParser.CP1250 - 715)) | (1 << (SpeakQlParser.CP1251 - 715)) | (1 << (SpeakQlParser.CP1256 - 715)) | (1 << (SpeakQlParser.CP1257 - 715)) | (1 << (SpeakQlParser.CP850 - 715)) | (1 << (SpeakQlParser.CP852 - 715)) | (1 << (SpeakQlParser.CP866 - 715)) | (1 << (SpeakQlParser.CP932 - 715)) | (1 << (SpeakQlParser.DEC8 - 715)) | (1 << (SpeakQlParser.EUCJPMS - 715)) | (1 << (SpeakQlParser.EUCKR - 715)) | (1 << (SpeakQlParser.GB18030 - 715)) | (1 << (SpeakQlParser.GB2312 - 715)) | (1 << (SpeakQlParser.GBK - 715)) | (1 << (SpeakQlParser.GEOSTD8 - 715)) | (1 << (SpeakQlParser.GREEK - 715)) | (1 << (SpeakQlParser.HEBREW - 715)) | (1 << (SpeakQlParser.HP8 - 715)) | (1 << (SpeakQlParser.KEYBCS2 - 715)) | (1 << (SpeakQlParser.KOI8R - 715)) | (1 << (SpeakQlParser.KOI8U - 715)) | (1 << (SpeakQlParser.LATIN1 - 715)) | (1 << (SpeakQlParser.LATIN2 - 715)) | (1 << (SpeakQlParser.LATIN5 - 715)) | (1 << (SpeakQlParser.LATIN7 - 715)) | (1 << (SpeakQlParser.MACCE - 715)) | (1 << (SpeakQlParser.MACROMAN - 715)) | (1 << (SpeakQlParser.SJIS - 715)) | (1 << (SpeakQlParser.SWE7 - 715)) | (1 << (SpeakQlParser.TIS620 - 715)) | (1 << (SpeakQlParser.UCS2 - 715)) | (1 << (SpeakQlParser.UJIS - 715)) | (1 << (SpeakQlParser.UTF16 - 715)) | (1 << (SpeakQlParser.UTF16LE - 715)) | (1 << (SpeakQlParser.UTF32 - 715)) | (1 << (SpeakQlParser.UTF8 - 715)) | (1 << (SpeakQlParser.UTF8MB3 - 715)) | (1 << (SpeakQlParser.UTF8MB4 - 715)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionLevelBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(SpeakQlParser.REPEATABLE, 0)

        def COMMITTED(self):
            return self.getToken(SpeakQlParser.COMMITTED, 0)

        def UNCOMMITTED(self):
            return self.getToken(SpeakQlParser.UNCOMMITTED, 0)

        def SERIALIZABLE(self):
            return self.getToken(SpeakQlParser.SERIALIZABLE, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_transactionLevelBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionLevelBase" ):
                listener.enterTransactionLevelBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionLevelBase" ):
                listener.exitTransactionLevelBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionLevelBase" ):
                return visitor.visitTransactionLevelBase(self)
            else:
                return visitor.visitChildren(self)




    def transactionLevelBase(self):

        localctx = SpeakQlParser.TransactionLevelBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_transactionLevelBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6855
            _la = self._input.LA(1)
            if not(((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & ((1 << (SpeakQlParser.REPEATABLE - 768)) | (1 << (SpeakQlParser.COMMITTED - 768)) | (1 << (SpeakQlParser.UNCOMMITTED - 768)) | (1 << (SpeakQlParser.SERIALIZABLE - 768)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegesBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLES(self):
            return self.getToken(SpeakQlParser.TABLES, 0)

        def ROUTINE(self):
            return self.getToken(SpeakQlParser.ROUTINE, 0)

        def EXECUTE(self):
            return self.getToken(SpeakQlParser.EXECUTE, 0)

        def FILE(self):
            return self.getToken(SpeakQlParser.FILE, 0)

        def PROCESS(self):
            return self.getToken(SpeakQlParser.PROCESS, 0)

        def RELOAD(self):
            return self.getToken(SpeakQlParser.RELOAD, 0)

        def SHUTDOWN(self):
            return self.getToken(SpeakQlParser.SHUTDOWN, 0)

        def SUPER(self):
            return self.getToken(SpeakQlParser.SUPER, 0)

        def PRIVILEGES(self):
            return self.getToken(SpeakQlParser.PRIVILEGES, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_privilegesBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegesBase" ):
                listener.enterPrivilegesBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegesBase" ):
                listener.exitPrivilegesBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivilegesBase" ):
                return visitor.visitPrivilegesBase(self)
            else:
                return visitor.visitChildren(self)




    def privilegesBase(self):

        localctx = SpeakQlParser.PrivilegesBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_privilegesBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6857
            _la = self._input.LA(1)
            if not(((((_la - 674)) & ~0x3f) == 0 and ((1 << (_la - 674)) & ((1 << (SpeakQlParser.TABLES - 674)) | (1 << (SpeakQlParser.ROUTINE - 674)) | (1 << (SpeakQlParser.EXECUTE - 674)) | (1 << (SpeakQlParser.FILE - 674)) | (1 << (SpeakQlParser.PROCESS - 674)) | (1 << (SpeakQlParser.RELOAD - 674)) | (1 << (SpeakQlParser.SHUTDOWN - 674)) | (1 << (SpeakQlParser.SUPER - 674)) | (1 << (SpeakQlParser.PRIVILEGES - 674)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalTypeBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUARTER(self):
            return self.getToken(SpeakQlParser.QUARTER, 0)

        def MONTH(self):
            return self.getToken(SpeakQlParser.MONTH, 0)

        def DAY(self):
            return self.getToken(SpeakQlParser.DAY, 0)

        def HOUR(self):
            return self.getToken(SpeakQlParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(SpeakQlParser.MINUTE, 0)

        def WEEK(self):
            return self.getToken(SpeakQlParser.WEEK, 0)

        def SECOND(self):
            return self.getToken(SpeakQlParser.SECOND, 0)

        def MICROSECOND(self):
            return self.getToken(SpeakQlParser.MICROSECOND, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_intervalTypeBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalTypeBase" ):
                listener.enterIntervalTypeBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalTypeBase" ):
                listener.exitIntervalTypeBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalTypeBase" ):
                return visitor.visitIntervalTypeBase(self)
            else:
                return visitor.visitChildren(self)




    def intervalTypeBase(self):

        localctx = SpeakQlParser.IntervalTypeBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_intervalTypeBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6859
            _la = self._input.LA(1)
            if not(((((_la - 666)) & ~0x3f) == 0 and ((1 << (_la - 666)) & ((1 << (SpeakQlParser.QUARTER - 666)) | (1 << (SpeakQlParser.MONTH - 666)) | (1 << (SpeakQlParser.DAY - 666)) | (1 << (SpeakQlParser.HOUR - 666)) | (1 << (SpeakQlParser.MINUTE - 666)) | (1 << (SpeakQlParser.WEEK - 666)) | (1 << (SpeakQlParser.SECOND - 666)) | (1 << (SpeakQlParser.MICROSECOND - 666)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(SpeakQlParser.DATE, 0)

        def TIME(self):
            return self.getToken(SpeakQlParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SpeakQlParser.TIMESTAMP, 0)

        def DATETIME(self):
            return self.getToken(SpeakQlParser.DATETIME, 0)

        def YEAR(self):
            return self.getToken(SpeakQlParser.YEAR, 0)

        def ENUM(self):
            return self.getToken(SpeakQlParser.ENUM, 0)

        def TEXT(self):
            return self.getToken(SpeakQlParser.TEXT, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_dataTypeBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeBase" ):
                listener.enterDataTypeBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeBase" ):
                listener.exitDataTypeBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataTypeBase" ):
                return visitor.visitDataTypeBase(self)
            else:
                return visitor.visitChildren(self)




    def dataTypeBase(self):

        localctx = SpeakQlParser.DataTypeBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_dataTypeBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6861
            _la = self._input.LA(1)
            if not(((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.DATETIME - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.TEXT - 220)) | (1 << (SpeakQlParser.ENUM - 220)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordsCanBeIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT(self):
            return self.getToken(SpeakQlParser.ACCOUNT, 0)

        def ACTION(self):
            return self.getToken(SpeakQlParser.ACTION, 0)

        def AFTER(self):
            return self.getToken(SpeakQlParser.AFTER, 0)

        def AGGREGATE(self):
            return self.getToken(SpeakQlParser.AGGREGATE, 0)

        def ALGORITHM(self):
            return self.getToken(SpeakQlParser.ALGORITHM, 0)

        def ANY(self):
            return self.getToken(SpeakQlParser.ANY, 0)

        def AT(self):
            return self.getToken(SpeakQlParser.AT, 0)

        def AUDIT_ADMIN(self):
            return self.getToken(SpeakQlParser.AUDIT_ADMIN, 0)

        def AUTHORS(self):
            return self.getToken(SpeakQlParser.AUTHORS, 0)

        def AUTOCOMMIT(self):
            return self.getToken(SpeakQlParser.AUTOCOMMIT, 0)

        def AUTOEXTEND_SIZE(self):
            return self.getToken(SpeakQlParser.AUTOEXTEND_SIZE, 0)

        def AUTO_INCREMENT(self):
            return self.getToken(SpeakQlParser.AUTO_INCREMENT, 0)

        def AVG(self):
            return self.getToken(SpeakQlParser.AVG, 0)

        def AVG_ROW_LENGTH(self):
            return self.getToken(SpeakQlParser.AVG_ROW_LENGTH, 0)

        def BACKUP_ADMIN(self):
            return self.getToken(SpeakQlParser.BACKUP_ADMIN, 0)

        def BEGIN(self):
            return self.getToken(SpeakQlParser.BEGIN, 0)

        def BINLOG(self):
            return self.getToken(SpeakQlParser.BINLOG, 0)

        def BINLOG_ADMIN(self):
            return self.getToken(SpeakQlParser.BINLOG_ADMIN, 0)

        def BINLOG_ENCRYPTION_ADMIN(self):
            return self.getToken(SpeakQlParser.BINLOG_ENCRYPTION_ADMIN, 0)

        def BIT(self):
            return self.getToken(SpeakQlParser.BIT, 0)

        def BIT_AND(self):
            return self.getToken(SpeakQlParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(SpeakQlParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(SpeakQlParser.BIT_XOR, 0)

        def BLOCK(self):
            return self.getToken(SpeakQlParser.BLOCK, 0)

        def BOOL(self):
            return self.getToken(SpeakQlParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(SpeakQlParser.BOOLEAN, 0)

        def BTREE(self):
            return self.getToken(SpeakQlParser.BTREE, 0)

        def CACHE(self):
            return self.getToken(SpeakQlParser.CACHE, 0)

        def CASCADED(self):
            return self.getToken(SpeakQlParser.CASCADED, 0)

        def CHAIN(self):
            return self.getToken(SpeakQlParser.CHAIN, 0)

        def CHANGED(self):
            return self.getToken(SpeakQlParser.CHANGED, 0)

        def CHANNEL(self):
            return self.getToken(SpeakQlParser.CHANNEL, 0)

        def CHECKSUM(self):
            return self.getToken(SpeakQlParser.CHECKSUM, 0)

        def PAGE_CHECKSUM(self):
            return self.getToken(SpeakQlParser.PAGE_CHECKSUM, 0)

        def CATALOG_NAME(self):
            return self.getToken(SpeakQlParser.CATALOG_NAME, 0)

        def CIPHER(self):
            return self.getToken(SpeakQlParser.CIPHER, 0)

        def CLASS_ORIGIN(self):
            return self.getToken(SpeakQlParser.CLASS_ORIGIN, 0)

        def CLIENT(self):
            return self.getToken(SpeakQlParser.CLIENT, 0)

        def CLONE_ADMIN(self):
            return self.getToken(SpeakQlParser.CLONE_ADMIN, 0)

        def CLOSE(self):
            return self.getToken(SpeakQlParser.CLOSE, 0)

        def COALESCE(self):
            return self.getToken(SpeakQlParser.COALESCE, 0)

        def CODE(self):
            return self.getToken(SpeakQlParser.CODE, 0)

        def COLUMNS(self):
            return self.getToken(SpeakQlParser.COLUMNS, 0)

        def COLUMN_FORMAT(self):
            return self.getToken(SpeakQlParser.COLUMN_FORMAT, 0)

        def COLUMN_NAME(self):
            return self.getToken(SpeakQlParser.COLUMN_NAME, 0)

        def COMMENT(self):
            return self.getToken(SpeakQlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(SpeakQlParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(SpeakQlParser.COMPACT, 0)

        def COMPLETION(self):
            return self.getToken(SpeakQlParser.COMPLETION, 0)

        def COMPRESSED(self):
            return self.getToken(SpeakQlParser.COMPRESSED, 0)

        def COMPRESSION(self):
            return self.getToken(SpeakQlParser.COMPRESSION, 0)

        def CONCURRENT(self):
            return self.getToken(SpeakQlParser.CONCURRENT, 0)

        def CONNECT(self):
            return self.getToken(SpeakQlParser.CONNECT, 0)

        def CONNECTION(self):
            return self.getToken(SpeakQlParser.CONNECTION, 0)

        def CONNECTION_ADMIN(self):
            return self.getToken(SpeakQlParser.CONNECTION_ADMIN, 0)

        def CONSISTENT(self):
            return self.getToken(SpeakQlParser.CONSISTENT, 0)

        def CONSTRAINT_CATALOG(self):
            return self.getToken(SpeakQlParser.CONSTRAINT_CATALOG, 0)

        def CONSTRAINT_NAME(self):
            return self.getToken(SpeakQlParser.CONSTRAINT_NAME, 0)

        def CONSTRAINT_SCHEMA(self):
            return self.getToken(SpeakQlParser.CONSTRAINT_SCHEMA, 0)

        def CONTAINS(self):
            return self.getToken(SpeakQlParser.CONTAINS, 0)

        def CONTEXT(self):
            return self.getToken(SpeakQlParser.CONTEXT, 0)

        def CONTRIBUTORS(self):
            return self.getToken(SpeakQlParser.CONTRIBUTORS, 0)

        def COPY(self):
            return self.getToken(SpeakQlParser.COPY, 0)

        def COUNT(self):
            return self.getToken(SpeakQlParser.COUNT, 0)

        def CPU(self):
            return self.getToken(SpeakQlParser.CPU, 0)

        def CURRENT(self):
            return self.getToken(SpeakQlParser.CURRENT, 0)

        def CURSOR_NAME(self):
            return self.getToken(SpeakQlParser.CURSOR_NAME, 0)

        def DATA(self):
            return self.getToken(SpeakQlParser.DATA, 0)

        def DATAFILE(self):
            return self.getToken(SpeakQlParser.DATAFILE, 0)

        def DEALLOCATE(self):
            return self.getToken(SpeakQlParser.DEALLOCATE, 0)

        def DEFAULT_AUTH(self):
            return self.getToken(SpeakQlParser.DEFAULT_AUTH, 0)

        def DEFINER(self):
            return self.getToken(SpeakQlParser.DEFINER, 0)

        def DELAY_KEY_WRITE(self):
            return self.getToken(SpeakQlParser.DELAY_KEY_WRITE, 0)

        def DES_KEY_FILE(self):
            return self.getToken(SpeakQlParser.DES_KEY_FILE, 0)

        def DIAGNOSTICS(self):
            return self.getToken(SpeakQlParser.DIAGNOSTICS, 0)

        def DIRECTORY(self):
            return self.getToken(SpeakQlParser.DIRECTORY, 0)

        def DISABLE(self):
            return self.getToken(SpeakQlParser.DISABLE, 0)

        def DISCARD(self):
            return self.getToken(SpeakQlParser.DISCARD, 0)

        def DISK(self):
            return self.getToken(SpeakQlParser.DISK, 0)

        def DO(self):
            return self.getToken(SpeakQlParser.DO, 0)

        def DUMPFILE(self):
            return self.getToken(SpeakQlParser.DUMPFILE, 0)

        def DUPLICATE(self):
            return self.getToken(SpeakQlParser.DUPLICATE, 0)

        def DYNAMIC(self):
            return self.getToken(SpeakQlParser.DYNAMIC, 0)

        def ENABLE(self):
            return self.getToken(SpeakQlParser.ENABLE, 0)

        def ENCRYPTION(self):
            return self.getToken(SpeakQlParser.ENCRYPTION, 0)

        def ENCRYPTION_KEY_ADMIN(self):
            return self.getToken(SpeakQlParser.ENCRYPTION_KEY_ADMIN, 0)

        def END(self):
            return self.getToken(SpeakQlParser.END, 0)

        def ENDS(self):
            return self.getToken(SpeakQlParser.ENDS, 0)

        def ENGINE(self):
            return self.getToken(SpeakQlParser.ENGINE, 0)

        def ENGINES(self):
            return self.getToken(SpeakQlParser.ENGINES, 0)

        def ERROR(self):
            return self.getToken(SpeakQlParser.ERROR, 0)

        def ERRORS(self):
            return self.getToken(SpeakQlParser.ERRORS, 0)

        def ESCAPE(self):
            return self.getToken(SpeakQlParser.ESCAPE, 0)

        def EUR(self):
            return self.getToken(SpeakQlParser.EUR, 0)

        def EVEN(self):
            return self.getToken(SpeakQlParser.EVEN, 0)

        def EVENT(self):
            return self.getToken(SpeakQlParser.EVENT, 0)

        def EVENTS(self):
            return self.getToken(SpeakQlParser.EVENTS, 0)

        def EVERY(self):
            return self.getToken(SpeakQlParser.EVERY, 0)

        def EXCEPT(self):
            return self.getToken(SpeakQlParser.EXCEPT, 0)

        def EXCHANGE(self):
            return self.getToken(SpeakQlParser.EXCHANGE, 0)

        def EXCLUSIVE(self):
            return self.getToken(SpeakQlParser.EXCLUSIVE, 0)

        def EXPIRE(self):
            return self.getToken(SpeakQlParser.EXPIRE, 0)

        def EXPORT(self):
            return self.getToken(SpeakQlParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(SpeakQlParser.EXTENDED, 0)

        def EXTENT_SIZE(self):
            return self.getToken(SpeakQlParser.EXTENT_SIZE, 0)

        def FAST(self):
            return self.getToken(SpeakQlParser.FAST, 0)

        def FAULTS(self):
            return self.getToken(SpeakQlParser.FAULTS, 0)

        def FIELDS(self):
            return self.getToken(SpeakQlParser.FIELDS, 0)

        def FILE_BLOCK_SIZE(self):
            return self.getToken(SpeakQlParser.FILE_BLOCK_SIZE, 0)

        def FILTER(self):
            return self.getToken(SpeakQlParser.FILTER, 0)

        def FIREWALL_ADMIN(self):
            return self.getToken(SpeakQlParser.FIREWALL_ADMIN, 0)

        def FIREWALL_USER(self):
            return self.getToken(SpeakQlParser.FIREWALL_USER, 0)

        def FIRST(self):
            return self.getToken(SpeakQlParser.FIRST, 0)

        def FIXED(self):
            return self.getToken(SpeakQlParser.FIXED, 0)

        def FLUSH(self):
            return self.getToken(SpeakQlParser.FLUSH, 0)

        def FOLLOWS(self):
            return self.getToken(SpeakQlParser.FOLLOWS, 0)

        def FOUND(self):
            return self.getToken(SpeakQlParser.FOUND, 0)

        def FULL(self):
            return self.getToken(SpeakQlParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(SpeakQlParser.FUNCTION, 0)

        def GENERAL(self):
            return self.getToken(SpeakQlParser.GENERAL, 0)

        def GLOBAL(self):
            return self.getToken(SpeakQlParser.GLOBAL, 0)

        def GRANTS(self):
            return self.getToken(SpeakQlParser.GRANTS, 0)

        def GROUP(self):
            return self.getToken(SpeakQlParser.GROUP, 0)

        def GROUP_CONCAT(self):
            return self.getToken(SpeakQlParser.GROUP_CONCAT, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(SpeakQlParser.GROUP_REPLICATION, 0)

        def GROUP_REPLICATION_ADMIN(self):
            return self.getToken(SpeakQlParser.GROUP_REPLICATION_ADMIN, 0)

        def HANDLER(self):
            return self.getToken(SpeakQlParser.HANDLER, 0)

        def HASH(self):
            return self.getToken(SpeakQlParser.HASH, 0)

        def HELP(self):
            return self.getToken(SpeakQlParser.HELP, 0)

        def HOST(self):
            return self.getToken(SpeakQlParser.HOST, 0)

        def HOSTS(self):
            return self.getToken(SpeakQlParser.HOSTS, 0)

        def IDENTIFIED(self):
            return self.getToken(SpeakQlParser.IDENTIFIED, 0)

        def IGNORE_SERVER_IDS(self):
            return self.getToken(SpeakQlParser.IGNORE_SERVER_IDS, 0)

        def IMPORT(self):
            return self.getToken(SpeakQlParser.IMPORT, 0)

        def INDEXES(self):
            return self.getToken(SpeakQlParser.INDEXES, 0)

        def INITIAL_SIZE(self):
            return self.getToken(SpeakQlParser.INITIAL_SIZE, 0)

        def INNODB_REDO_LOG_ARCHIVE(self):
            return self.getToken(SpeakQlParser.INNODB_REDO_LOG_ARCHIVE, 0)

        def INPLACE(self):
            return self.getToken(SpeakQlParser.INPLACE, 0)

        def INSERT_METHOD(self):
            return self.getToken(SpeakQlParser.INSERT_METHOD, 0)

        def INSTALL(self):
            return self.getToken(SpeakQlParser.INSTALL, 0)

        def INSTANCE(self):
            return self.getToken(SpeakQlParser.INSTANCE, 0)

        def INTERNAL(self):
            return self.getToken(SpeakQlParser.INTERNAL, 0)

        def INVOKER(self):
            return self.getToken(SpeakQlParser.INVOKER, 0)

        def IO(self):
            return self.getToken(SpeakQlParser.IO, 0)

        def IO_THREAD(self):
            return self.getToken(SpeakQlParser.IO_THREAD, 0)

        def IPC(self):
            return self.getToken(SpeakQlParser.IPC, 0)

        def ISO(self):
            return self.getToken(SpeakQlParser.ISO, 0)

        def ISOLATION(self):
            return self.getToken(SpeakQlParser.ISOLATION, 0)

        def ISSUER(self):
            return self.getToken(SpeakQlParser.ISSUER, 0)

        def JIS(self):
            return self.getToken(SpeakQlParser.JIS, 0)

        def JSON(self):
            return self.getToken(SpeakQlParser.JSON, 0)

        def KEY_BLOCK_SIZE(self):
            return self.getToken(SpeakQlParser.KEY_BLOCK_SIZE, 0)

        def LANGUAGE(self):
            return self.getToken(SpeakQlParser.LANGUAGE, 0)

        def LAST(self):
            return self.getToken(SpeakQlParser.LAST, 0)

        def LEAVES(self):
            return self.getToken(SpeakQlParser.LEAVES, 0)

        def LESS(self):
            return self.getToken(SpeakQlParser.LESS, 0)

        def LEVEL(self):
            return self.getToken(SpeakQlParser.LEVEL, 0)

        def LIST(self):
            return self.getToken(SpeakQlParser.LIST, 0)

        def LOCAL(self):
            return self.getToken(SpeakQlParser.LOCAL, 0)

        def LOGFILE(self):
            return self.getToken(SpeakQlParser.LOGFILE, 0)

        def LOGS(self):
            return self.getToken(SpeakQlParser.LOGS, 0)

        def MASTER(self):
            return self.getToken(SpeakQlParser.MASTER, 0)

        def MASTER_AUTO_POSITION(self):
            return self.getToken(SpeakQlParser.MASTER_AUTO_POSITION, 0)

        def MASTER_CONNECT_RETRY(self):
            return self.getToken(SpeakQlParser.MASTER_CONNECT_RETRY, 0)

        def MASTER_DELAY(self):
            return self.getToken(SpeakQlParser.MASTER_DELAY, 0)

        def MASTER_HEARTBEAT_PERIOD(self):
            return self.getToken(SpeakQlParser.MASTER_HEARTBEAT_PERIOD, 0)

        def MASTER_HOST(self):
            return self.getToken(SpeakQlParser.MASTER_HOST, 0)

        def MASTER_LOG_FILE(self):
            return self.getToken(SpeakQlParser.MASTER_LOG_FILE, 0)

        def MASTER_LOG_POS(self):
            return self.getToken(SpeakQlParser.MASTER_LOG_POS, 0)

        def MASTER_PASSWORD(self):
            return self.getToken(SpeakQlParser.MASTER_PASSWORD, 0)

        def MASTER_PORT(self):
            return self.getToken(SpeakQlParser.MASTER_PORT, 0)

        def MASTER_RETRY_COUNT(self):
            return self.getToken(SpeakQlParser.MASTER_RETRY_COUNT, 0)

        def MASTER_SSL(self):
            return self.getToken(SpeakQlParser.MASTER_SSL, 0)

        def MASTER_SSL_CA(self):
            return self.getToken(SpeakQlParser.MASTER_SSL_CA, 0)

        def MASTER_SSL_CAPATH(self):
            return self.getToken(SpeakQlParser.MASTER_SSL_CAPATH, 0)

        def MASTER_SSL_CERT(self):
            return self.getToken(SpeakQlParser.MASTER_SSL_CERT, 0)

        def MASTER_SSL_CIPHER(self):
            return self.getToken(SpeakQlParser.MASTER_SSL_CIPHER, 0)

        def MASTER_SSL_CRL(self):
            return self.getToken(SpeakQlParser.MASTER_SSL_CRL, 0)

        def MASTER_SSL_CRLPATH(self):
            return self.getToken(SpeakQlParser.MASTER_SSL_CRLPATH, 0)

        def MASTER_SSL_KEY(self):
            return self.getToken(SpeakQlParser.MASTER_SSL_KEY, 0)

        def MASTER_TLS_VERSION(self):
            return self.getToken(SpeakQlParser.MASTER_TLS_VERSION, 0)

        def MASTER_USER(self):
            return self.getToken(SpeakQlParser.MASTER_USER, 0)

        def MAX_CONNECTIONS_PER_HOUR(self):
            return self.getToken(SpeakQlParser.MAX_CONNECTIONS_PER_HOUR, 0)

        def MAX_QUERIES_PER_HOUR(self):
            return self.getToken(SpeakQlParser.MAX_QUERIES_PER_HOUR, 0)

        def MAX(self):
            return self.getToken(SpeakQlParser.MAX, 0)

        def MAX_ROWS(self):
            return self.getToken(SpeakQlParser.MAX_ROWS, 0)

        def MAX_SIZE(self):
            return self.getToken(SpeakQlParser.MAX_SIZE, 0)

        def MAX_UPDATES_PER_HOUR(self):
            return self.getToken(SpeakQlParser.MAX_UPDATES_PER_HOUR, 0)

        def MAX_USER_CONNECTIONS(self):
            return self.getToken(SpeakQlParser.MAX_USER_CONNECTIONS, 0)

        def MEDIUM(self):
            return self.getToken(SpeakQlParser.MEDIUM, 0)

        def MEMBER(self):
            return self.getToken(SpeakQlParser.MEMBER, 0)

        def MEMORY(self):
            return self.getToken(SpeakQlParser.MEMORY, 0)

        def MERGE(self):
            return self.getToken(SpeakQlParser.MERGE, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(SpeakQlParser.MESSAGE_TEXT, 0)

        def MID(self):
            return self.getToken(SpeakQlParser.MID, 0)

        def MIGRATE(self):
            return self.getToken(SpeakQlParser.MIGRATE, 0)

        def MIN(self):
            return self.getToken(SpeakQlParser.MIN, 0)

        def MIN_ROWS(self):
            return self.getToken(SpeakQlParser.MIN_ROWS, 0)

        def MODE(self):
            return self.getToken(SpeakQlParser.MODE, 0)

        def MODIFY(self):
            return self.getToken(SpeakQlParser.MODIFY, 0)

        def MUTEX(self):
            return self.getToken(SpeakQlParser.MUTEX, 0)

        def MYSQL(self):
            return self.getToken(SpeakQlParser.MYSQL, 0)

        def MYSQL_ERRNO(self):
            return self.getToken(SpeakQlParser.MYSQL_ERRNO, 0)

        def NAME(self):
            return self.getToken(SpeakQlParser.NAME, 0)

        def NAMES(self):
            return self.getToken(SpeakQlParser.NAMES, 0)

        def NCHAR(self):
            return self.getToken(SpeakQlParser.NCHAR, 0)

        def NDB_STORED_USER(self):
            return self.getToken(SpeakQlParser.NDB_STORED_USER, 0)

        def NEVER(self):
            return self.getToken(SpeakQlParser.NEVER, 0)

        def NEXT(self):
            return self.getToken(SpeakQlParser.NEXT, 0)

        def NO(self):
            return self.getToken(SpeakQlParser.NO, 0)

        def NODEGROUP(self):
            return self.getToken(SpeakQlParser.NODEGROUP, 0)

        def NONE(self):
            return self.getToken(SpeakQlParser.NONE, 0)

        def NUMBER(self):
            return self.getToken(SpeakQlParser.NUMBER, 0)

        def OFFLINE(self):
            return self.getToken(SpeakQlParser.OFFLINE, 0)

        def ODBC(self):
            return self.getToken(SpeakQlParser.ODBC, 0)

        def OFFSET(self):
            return self.getToken(SpeakQlParser.OFFSET, 0)

        def OF(self):
            return self.getToken(SpeakQlParser.OF, 0)

        def OJ(self):
            return self.getToken(SpeakQlParser.OJ, 0)

        def OLD_PASSWORD(self):
            return self.getToken(SpeakQlParser.OLD_PASSWORD, 0)

        def ONE(self):
            return self.getToken(SpeakQlParser.ONE, 0)

        def ONLINE(self):
            return self.getToken(SpeakQlParser.ONLINE, 0)

        def ONLY(self):
            return self.getToken(SpeakQlParser.ONLY, 0)

        def OPEN(self):
            return self.getToken(SpeakQlParser.OPEN, 0)

        def OPTIMIZER_COSTS(self):
            return self.getToken(SpeakQlParser.OPTIMIZER_COSTS, 0)

        def OPTIONAL(self):
            return self.getToken(SpeakQlParser.OPTIONAL, 0)

        def OPTIONS(self):
            return self.getToken(SpeakQlParser.OPTIONS, 0)

        def ORDER(self):
            return self.getToken(SpeakQlParser.ORDER, 0)

        def OWNER(self):
            return self.getToken(SpeakQlParser.OWNER, 0)

        def PACK_KEYS(self):
            return self.getToken(SpeakQlParser.PACK_KEYS, 0)

        def PAGE(self):
            return self.getToken(SpeakQlParser.PAGE, 0)

        def PARSER(self):
            return self.getToken(SpeakQlParser.PARSER, 0)

        def PARTIAL(self):
            return self.getToken(SpeakQlParser.PARTIAL, 0)

        def PARTITIONING(self):
            return self.getToken(SpeakQlParser.PARTITIONING, 0)

        def PARTITIONS(self):
            return self.getToken(SpeakQlParser.PARTITIONS, 0)

        def PASSWORD(self):
            return self.getToken(SpeakQlParser.PASSWORD, 0)

        def PERSIST_RO_VARIABLES_ADMIN(self):
            return self.getToken(SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN, 0)

        def PHASE(self):
            return self.getToken(SpeakQlParser.PHASE, 0)

        def PLUGINS(self):
            return self.getToken(SpeakQlParser.PLUGINS, 0)

        def PLUGIN_DIR(self):
            return self.getToken(SpeakQlParser.PLUGIN_DIR, 0)

        def PLUGIN(self):
            return self.getToken(SpeakQlParser.PLUGIN, 0)

        def PORT(self):
            return self.getToken(SpeakQlParser.PORT, 0)

        def PRECEDES(self):
            return self.getToken(SpeakQlParser.PRECEDES, 0)

        def PREPARE(self):
            return self.getToken(SpeakQlParser.PREPARE, 0)

        def PRESERVE(self):
            return self.getToken(SpeakQlParser.PRESERVE, 0)

        def PREV(self):
            return self.getToken(SpeakQlParser.PREV, 0)

        def PROCESSLIST(self):
            return self.getToken(SpeakQlParser.PROCESSLIST, 0)

        def PROFILE(self):
            return self.getToken(SpeakQlParser.PROFILE, 0)

        def PROFILES(self):
            return self.getToken(SpeakQlParser.PROFILES, 0)

        def PROXY(self):
            return self.getToken(SpeakQlParser.PROXY, 0)

        def QUERY(self):
            return self.getToken(SpeakQlParser.QUERY, 0)

        def QUICK(self):
            return self.getToken(SpeakQlParser.QUICK, 0)

        def REBUILD(self):
            return self.getToken(SpeakQlParser.REBUILD, 0)

        def RECOVER(self):
            return self.getToken(SpeakQlParser.RECOVER, 0)

        def REDO_BUFFER_SIZE(self):
            return self.getToken(SpeakQlParser.REDO_BUFFER_SIZE, 0)

        def REDUNDANT(self):
            return self.getToken(SpeakQlParser.REDUNDANT, 0)

        def RELAY(self):
            return self.getToken(SpeakQlParser.RELAY, 0)

        def RELAYLOG(self):
            return self.getToken(SpeakQlParser.RELAYLOG, 0)

        def RELAY_LOG_FILE(self):
            return self.getToken(SpeakQlParser.RELAY_LOG_FILE, 0)

        def RELAY_LOG_POS(self):
            return self.getToken(SpeakQlParser.RELAY_LOG_POS, 0)

        def REMOVE(self):
            return self.getToken(SpeakQlParser.REMOVE, 0)

        def REORGANIZE(self):
            return self.getToken(SpeakQlParser.REORGANIZE, 0)

        def REPAIR(self):
            return self.getToken(SpeakQlParser.REPAIR, 0)

        def REPLICATE_DO_DB(self):
            return self.getToken(SpeakQlParser.REPLICATE_DO_DB, 0)

        def REPLICATE_DO_TABLE(self):
            return self.getToken(SpeakQlParser.REPLICATE_DO_TABLE, 0)

        def REPLICATE_IGNORE_DB(self):
            return self.getToken(SpeakQlParser.REPLICATE_IGNORE_DB, 0)

        def REPLICATE_IGNORE_TABLE(self):
            return self.getToken(SpeakQlParser.REPLICATE_IGNORE_TABLE, 0)

        def REPLICATE_REWRITE_DB(self):
            return self.getToken(SpeakQlParser.REPLICATE_REWRITE_DB, 0)

        def REPLICATE_WILD_DO_TABLE(self):
            return self.getToken(SpeakQlParser.REPLICATE_WILD_DO_TABLE, 0)

        def REPLICATE_WILD_IGNORE_TABLE(self):
            return self.getToken(SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE, 0)

        def REPLICATION(self):
            return self.getToken(SpeakQlParser.REPLICATION, 0)

        def REPLICATION_APPLIER(self):
            return self.getToken(SpeakQlParser.REPLICATION_APPLIER, 0)

        def REPLICATION_SLAVE_ADMIN(self):
            return self.getToken(SpeakQlParser.REPLICATION_SLAVE_ADMIN, 0)

        def RESET(self):
            return self.getToken(SpeakQlParser.RESET, 0)

        def RESOURCE_GROUP_ADMIN(self):
            return self.getToken(SpeakQlParser.RESOURCE_GROUP_ADMIN, 0)

        def RESOURCE_GROUP_USER(self):
            return self.getToken(SpeakQlParser.RESOURCE_GROUP_USER, 0)

        def RESUME(self):
            return self.getToken(SpeakQlParser.RESUME, 0)

        def RETURNED_SQLSTATE(self):
            return self.getToken(SpeakQlParser.RETURNED_SQLSTATE, 0)

        def RETURNS(self):
            return self.getToken(SpeakQlParser.RETURNS, 0)

        def ROLE(self):
            return self.getToken(SpeakQlParser.ROLE, 0)

        def ROLE_ADMIN(self):
            return self.getToken(SpeakQlParser.ROLE_ADMIN, 0)

        def ROLLBACK(self):
            return self.getToken(SpeakQlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(SpeakQlParser.ROLLUP, 0)

        def ROTATE(self):
            return self.getToken(SpeakQlParser.ROTATE, 0)

        def ROW(self):
            return self.getToken(SpeakQlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SpeakQlParser.ROWS, 0)

        def ROW_FORMAT(self):
            return self.getToken(SpeakQlParser.ROW_FORMAT, 0)

        def SAVEPOINT(self):
            return self.getToken(SpeakQlParser.SAVEPOINT, 0)

        def SCHEDULE(self):
            return self.getToken(SpeakQlParser.SCHEDULE, 0)

        def SCHEMA_NAME(self):
            return self.getToken(SpeakQlParser.SCHEMA_NAME, 0)

        def SECURITY(self):
            return self.getToken(SpeakQlParser.SECURITY, 0)

        def SERIAL(self):
            return self.getToken(SpeakQlParser.SERIAL, 0)

        def SERVER(self):
            return self.getToken(SpeakQlParser.SERVER, 0)

        def SESSION(self):
            return self.getToken(SpeakQlParser.SESSION, 0)

        def SESSION_VARIABLES_ADMIN(self):
            return self.getToken(SpeakQlParser.SESSION_VARIABLES_ADMIN, 0)

        def SET_USER_ID(self):
            return self.getToken(SpeakQlParser.SET_USER_ID, 0)

        def SHARE(self):
            return self.getToken(SpeakQlParser.SHARE, 0)

        def SHARED(self):
            return self.getToken(SpeakQlParser.SHARED, 0)

        def SHOW_ROUTINE(self):
            return self.getToken(SpeakQlParser.SHOW_ROUTINE, 0)

        def SIGNED(self):
            return self.getToken(SpeakQlParser.SIGNED, 0)

        def SIMPLE(self):
            return self.getToken(SpeakQlParser.SIMPLE, 0)

        def SLAVE(self):
            return self.getToken(SpeakQlParser.SLAVE, 0)

        def SLOW(self):
            return self.getToken(SpeakQlParser.SLOW, 0)

        def SNAPSHOT(self):
            return self.getToken(SpeakQlParser.SNAPSHOT, 0)

        def SOCKET(self):
            return self.getToken(SpeakQlParser.SOCKET, 0)

        def SOME(self):
            return self.getToken(SpeakQlParser.SOME, 0)

        def SONAME(self):
            return self.getToken(SpeakQlParser.SONAME, 0)

        def SOUNDS(self):
            return self.getToken(SpeakQlParser.SOUNDS, 0)

        def SOURCE(self):
            return self.getToken(SpeakQlParser.SOURCE, 0)

        def SQL_AFTER_GTIDS(self):
            return self.getToken(SpeakQlParser.SQL_AFTER_GTIDS, 0)

        def SQL_AFTER_MTS_GAPS(self):
            return self.getToken(SpeakQlParser.SQL_AFTER_MTS_GAPS, 0)

        def SQL_BEFORE_GTIDS(self):
            return self.getToken(SpeakQlParser.SQL_BEFORE_GTIDS, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(SpeakQlParser.SQL_BUFFER_RESULT, 0)

        def SQL_CACHE(self):
            return self.getToken(SpeakQlParser.SQL_CACHE, 0)

        def SQL_NO_CACHE(self):
            return self.getToken(SpeakQlParser.SQL_NO_CACHE, 0)

        def SQL_THREAD(self):
            return self.getToken(SpeakQlParser.SQL_THREAD, 0)

        def STACKED(self):
            return self.getToken(SpeakQlParser.STACKED, 0)

        def START(self):
            return self.getToken(SpeakQlParser.START, 0)

        def STARTS(self):
            return self.getToken(SpeakQlParser.STARTS, 0)

        def STATS_AUTO_RECALC(self):
            return self.getToken(SpeakQlParser.STATS_AUTO_RECALC, 0)

        def STATS_PERSISTENT(self):
            return self.getToken(SpeakQlParser.STATS_PERSISTENT, 0)

        def STATS_SAMPLE_PAGES(self):
            return self.getToken(SpeakQlParser.STATS_SAMPLE_PAGES, 0)

        def STATUS(self):
            return self.getToken(SpeakQlParser.STATUS, 0)

        def STD(self):
            return self.getToken(SpeakQlParser.STD, 0)

        def STDDEV(self):
            return self.getToken(SpeakQlParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(SpeakQlParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(SpeakQlParser.STDDEV_SAMP, 0)

        def STOP(self):
            return self.getToken(SpeakQlParser.STOP, 0)

        def STORAGE(self):
            return self.getToken(SpeakQlParser.STORAGE, 0)

        def STRING(self):
            return self.getToken(SpeakQlParser.STRING, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(SpeakQlParser.SUBCLASS_ORIGIN, 0)

        def SUBJECT(self):
            return self.getToken(SpeakQlParser.SUBJECT, 0)

        def SUBPARTITION(self):
            return self.getToken(SpeakQlParser.SUBPARTITION, 0)

        def SUBPARTITIONS(self):
            return self.getToken(SpeakQlParser.SUBPARTITIONS, 0)

        def SUM(self):
            return self.getToken(SpeakQlParser.SUM, 0)

        def SUSPEND(self):
            return self.getToken(SpeakQlParser.SUSPEND, 0)

        def SWAPS(self):
            return self.getToken(SpeakQlParser.SWAPS, 0)

        def SWITCHES(self):
            return self.getToken(SpeakQlParser.SWITCHES, 0)

        def SYSTEM_VARIABLES_ADMIN(self):
            return self.getToken(SpeakQlParser.SYSTEM_VARIABLES_ADMIN, 0)

        def TABLE_NAME(self):
            return self.getToken(SpeakQlParser.TABLE_NAME, 0)

        def TABLESPACE(self):
            return self.getToken(SpeakQlParser.TABLESPACE, 0)

        def TABLE_ENCRYPTION_ADMIN(self):
            return self.getToken(SpeakQlParser.TABLE_ENCRYPTION_ADMIN, 0)

        def TEMPORARY(self):
            return self.getToken(SpeakQlParser.TEMPORARY, 0)

        def TEMPTABLE(self):
            return self.getToken(SpeakQlParser.TEMPTABLE, 0)

        def THAN(self):
            return self.getToken(SpeakQlParser.THAN, 0)

        def TRADITIONAL(self):
            return self.getToken(SpeakQlParser.TRADITIONAL, 0)

        def TRANSACTION(self):
            return self.getToken(SpeakQlParser.TRANSACTION, 0)

        def TRANSACTIONAL(self):
            return self.getToken(SpeakQlParser.TRANSACTIONAL, 0)

        def TRIGGERS(self):
            return self.getToken(SpeakQlParser.TRIGGERS, 0)

        def TRUNCATE(self):
            return self.getToken(SpeakQlParser.TRUNCATE, 0)

        def UNDEFINED(self):
            return self.getToken(SpeakQlParser.UNDEFINED, 0)

        def UNDOFILE(self):
            return self.getToken(SpeakQlParser.UNDOFILE, 0)

        def UNDO_BUFFER_SIZE(self):
            return self.getToken(SpeakQlParser.UNDO_BUFFER_SIZE, 0)

        def UNINSTALL(self):
            return self.getToken(SpeakQlParser.UNINSTALL, 0)

        def UNKNOWN(self):
            return self.getToken(SpeakQlParser.UNKNOWN, 0)

        def UNTIL(self):
            return self.getToken(SpeakQlParser.UNTIL, 0)

        def UPGRADE(self):
            return self.getToken(SpeakQlParser.UPGRADE, 0)

        def USA(self):
            return self.getToken(SpeakQlParser.USA, 0)

        def USER(self):
            return self.getToken(SpeakQlParser.USER, 0)

        def USE_FRM(self):
            return self.getToken(SpeakQlParser.USE_FRM, 0)

        def USER_RESOURCES(self):
            return self.getToken(SpeakQlParser.USER_RESOURCES, 0)

        def VALIDATION(self):
            return self.getToken(SpeakQlParser.VALIDATION, 0)

        def VALUE(self):
            return self.getToken(SpeakQlParser.VALUE, 0)

        def VAR_POP(self):
            return self.getToken(SpeakQlParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(SpeakQlParser.VAR_SAMP, 0)

        def VARIABLES(self):
            return self.getToken(SpeakQlParser.VARIABLES, 0)

        def VARIANCE(self):
            return self.getToken(SpeakQlParser.VARIANCE, 0)

        def VERSION_TOKEN_ADMIN(self):
            return self.getToken(SpeakQlParser.VERSION_TOKEN_ADMIN, 0)

        def VIEW(self):
            return self.getToken(SpeakQlParser.VIEW, 0)

        def WAIT(self):
            return self.getToken(SpeakQlParser.WAIT, 0)

        def WARNINGS(self):
            return self.getToken(SpeakQlParser.WARNINGS, 0)

        def WITHOUT(self):
            return self.getToken(SpeakQlParser.WITHOUT, 0)

        def WORK(self):
            return self.getToken(SpeakQlParser.WORK, 0)

        def WRAPPER(self):
            return self.getToken(SpeakQlParser.WRAPPER, 0)

        def X509(self):
            return self.getToken(SpeakQlParser.X509, 0)

        def XA(self):
            return self.getToken(SpeakQlParser.XA, 0)

        def XA_RECOVER_ADMIN(self):
            return self.getToken(SpeakQlParser.XA_RECOVER_ADMIN, 0)

        def XML(self):
            return self.getToken(SpeakQlParser.XML, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_keywordsCanBeId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordsCanBeId" ):
                listener.enterKeywordsCanBeId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordsCanBeId" ):
                listener.exitKeywordsCanBeId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordsCanBeId" ):
                return visitor.visitKeywordsCanBeId(self)
            else:
                return visitor.visitChildren(self)




    def keywordsCanBeId(self):

        localctx = SpeakQlParser.KeywordsCanBeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_keywordsCanBeId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6863
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (SpeakQlParser.CURRENT - 48)) | (1 << (SpeakQlParser.DIAGNOSTICS - 48)) | (1 << (SpeakQlParser.EXCEPT - 48)) | (1 << (SpeakQlParser.GROUP - 48)))) != 0) or ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SpeakQlParser.NUMBER - 124)) | (1 << (SpeakQlParser.ORDER - 124)) | (1 << (SpeakQlParser.STACKED - 124)))) != 0) or ((((_la - 242)) & ~0x3f) == 0 and ((1 << (_la - 242)) & ((1 << (SpeakQlParser.SERIAL - 242)) | (1 << (SpeakQlParser.AVG - 242)) | (1 << (SpeakQlParser.BIT_AND - 242)) | (1 << (SpeakQlParser.BIT_OR - 242)) | (1 << (SpeakQlParser.BIT_XOR - 242)) | (1 << (SpeakQlParser.COUNT - 242)) | (1 << (SpeakQlParser.GROUP_CONCAT - 242)) | (1 << (SpeakQlParser.MAX - 242)) | (1 << (SpeakQlParser.MIN - 242)) | (1 << (SpeakQlParser.STD - 242)))) != 0) or ((((_la - 306)) & ~0x3f) == 0 and ((1 << (_la - 306)) & ((1 << (SpeakQlParser.STDDEV - 306)) | (1 << (SpeakQlParser.STDDEV_POP - 306)) | (1 << (SpeakQlParser.STDDEV_SAMP - 306)) | (1 << (SpeakQlParser.SUM - 306)) | (1 << (SpeakQlParser.VAR_POP - 306)) | (1 << (SpeakQlParser.VAR_SAMP - 306)) | (1 << (SpeakQlParser.VARIANCE - 306)) | (1 << (SpeakQlParser.ACCOUNT - 306)) | (1 << (SpeakQlParser.ACTION - 306)) | (1 << (SpeakQlParser.AFTER - 306)) | (1 << (SpeakQlParser.AGGREGATE - 306)) | (1 << (SpeakQlParser.ALGORITHM - 306)) | (1 << (SpeakQlParser.ANY - 306)) | (1 << (SpeakQlParser.AT - 306)) | (1 << (SpeakQlParser.AUTHORS - 306)) | (1 << (SpeakQlParser.AUTOCOMMIT - 306)) | (1 << (SpeakQlParser.AUTOEXTEND_SIZE - 306)) | (1 << (SpeakQlParser.AUTO_INCREMENT - 306)) | (1 << (SpeakQlParser.AVG_ROW_LENGTH - 306)) | (1 << (SpeakQlParser.BEGIN - 306)) | (1 << (SpeakQlParser.BINLOG - 306)) | (1 << (SpeakQlParser.BIT - 306)) | (1 << (SpeakQlParser.BLOCK - 306)) | (1 << (SpeakQlParser.BOOL - 306)) | (1 << (SpeakQlParser.BOOLEAN - 306)) | (1 << (SpeakQlParser.BTREE - 306)) | (1 << (SpeakQlParser.CACHE - 306)) | (1 << (SpeakQlParser.CASCADED - 306)) | (1 << (SpeakQlParser.CHAIN - 306)) | (1 << (SpeakQlParser.CHANGED - 306)) | (1 << (SpeakQlParser.CHANNEL - 306)) | (1 << (SpeakQlParser.CHECKSUM - 306)) | (1 << (SpeakQlParser.PAGE_CHECKSUM - 306)) | (1 << (SpeakQlParser.CIPHER - 306)) | (1 << (SpeakQlParser.CLASS_ORIGIN - 306)) | (1 << (SpeakQlParser.CLIENT - 306)) | (1 << (SpeakQlParser.CLOSE - 306)) | (1 << (SpeakQlParser.COALESCE - 306)) | (1 << (SpeakQlParser.CODE - 306)) | (1 << (SpeakQlParser.COLUMNS - 306)) | (1 << (SpeakQlParser.COLUMN_FORMAT - 306)) | (1 << (SpeakQlParser.COLUMN_NAME - 306)) | (1 << (SpeakQlParser.COMMENT - 306)) | (1 << (SpeakQlParser.COMMIT - 306)) | (1 << (SpeakQlParser.COMPACT - 306)))) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & ((1 << (SpeakQlParser.COMPLETION - 370)) | (1 << (SpeakQlParser.COMPRESSED - 370)) | (1 << (SpeakQlParser.COMPRESSION - 370)) | (1 << (SpeakQlParser.CONCURRENT - 370)) | (1 << (SpeakQlParser.CONNECT - 370)) | (1 << (SpeakQlParser.CONNECTION - 370)) | (1 << (SpeakQlParser.CONSISTENT - 370)) | (1 << (SpeakQlParser.CONSTRAINT_CATALOG - 370)) | (1 << (SpeakQlParser.CONSTRAINT_SCHEMA - 370)) | (1 << (SpeakQlParser.CONSTRAINT_NAME - 370)) | (1 << (SpeakQlParser.CONTAINS - 370)) | (1 << (SpeakQlParser.CONTEXT - 370)) | (1 << (SpeakQlParser.CONTRIBUTORS - 370)) | (1 << (SpeakQlParser.COPY - 370)) | (1 << (SpeakQlParser.CPU - 370)) | (1 << (SpeakQlParser.CURSOR_NAME - 370)) | (1 << (SpeakQlParser.DATA - 370)) | (1 << (SpeakQlParser.DATAFILE - 370)) | (1 << (SpeakQlParser.DEALLOCATE - 370)) | (1 << (SpeakQlParser.DEFAULT_AUTH - 370)) | (1 << (SpeakQlParser.DEFINER - 370)) | (1 << (SpeakQlParser.DELAY_KEY_WRITE - 370)) | (1 << (SpeakQlParser.DES_KEY_FILE - 370)) | (1 << (SpeakQlParser.DIRECTORY - 370)) | (1 << (SpeakQlParser.DISABLE - 370)) | (1 << (SpeakQlParser.DISCARD - 370)) | (1 << (SpeakQlParser.DISK - 370)) | (1 << (SpeakQlParser.DO - 370)) | (1 << (SpeakQlParser.DUMPFILE - 370)) | (1 << (SpeakQlParser.DUPLICATE - 370)) | (1 << (SpeakQlParser.DYNAMIC - 370)) | (1 << (SpeakQlParser.ENABLE - 370)) | (1 << (SpeakQlParser.ENCRYPTION - 370)) | (1 << (SpeakQlParser.END - 370)) | (1 << (SpeakQlParser.ENDS - 370)) | (1 << (SpeakQlParser.ENGINE - 370)) | (1 << (SpeakQlParser.ENGINES - 370)) | (1 << (SpeakQlParser.ERROR - 370)) | (1 << (SpeakQlParser.ERRORS - 370)) | (1 << (SpeakQlParser.ESCAPE - 370)) | (1 << (SpeakQlParser.EVEN - 370)) | (1 << (SpeakQlParser.EVENT - 370)) | (1 << (SpeakQlParser.EVENTS - 370)) | (1 << (SpeakQlParser.EVERY - 370)) | (1 << (SpeakQlParser.EXCHANGE - 370)) | (1 << (SpeakQlParser.EXCLUSIVE - 370)) | (1 << (SpeakQlParser.EXPIRE - 370)) | (1 << (SpeakQlParser.EXPORT - 370)) | (1 << (SpeakQlParser.EXTENDED - 370)) | (1 << (SpeakQlParser.EXTENT_SIZE - 370)) | (1 << (SpeakQlParser.FAST - 370)) | (1 << (SpeakQlParser.FAULTS - 370)) | (1 << (SpeakQlParser.FIELDS - 370)) | (1 << (SpeakQlParser.FILE_BLOCK_SIZE - 370)) | (1 << (SpeakQlParser.FILTER - 370)) | (1 << (SpeakQlParser.FIRST - 370)) | (1 << (SpeakQlParser.FIXED - 370)) | (1 << (SpeakQlParser.FLUSH - 370)) | (1 << (SpeakQlParser.FOLLOWS - 370)) | (1 << (SpeakQlParser.FOUND - 370)) | (1 << (SpeakQlParser.FULL - 370)) | (1 << (SpeakQlParser.FUNCTION - 370)) | (1 << (SpeakQlParser.GENERAL - 370)))) != 0) or ((((_la - 434)) & ~0x3f) == 0 and ((1 << (_la - 434)) & ((1 << (SpeakQlParser.GLOBAL - 434)) | (1 << (SpeakQlParser.GRANTS - 434)) | (1 << (SpeakQlParser.GROUP_REPLICATION - 434)) | (1 << (SpeakQlParser.HANDLER - 434)) | (1 << (SpeakQlParser.HASH - 434)) | (1 << (SpeakQlParser.HELP - 434)) | (1 << (SpeakQlParser.HOST - 434)) | (1 << (SpeakQlParser.HOSTS - 434)) | (1 << (SpeakQlParser.IDENTIFIED - 434)) | (1 << (SpeakQlParser.IGNORE_SERVER_IDS - 434)) | (1 << (SpeakQlParser.IMPORT - 434)) | (1 << (SpeakQlParser.INDEXES - 434)) | (1 << (SpeakQlParser.INITIAL_SIZE - 434)) | (1 << (SpeakQlParser.INPLACE - 434)) | (1 << (SpeakQlParser.INSERT_METHOD - 434)) | (1 << (SpeakQlParser.INSTALL - 434)) | (1 << (SpeakQlParser.INSTANCE - 434)) | (1 << (SpeakQlParser.INVOKER - 434)) | (1 << (SpeakQlParser.IO - 434)) | (1 << (SpeakQlParser.IO_THREAD - 434)) | (1 << (SpeakQlParser.IPC - 434)) | (1 << (SpeakQlParser.ISOLATION - 434)) | (1 << (SpeakQlParser.ISSUER - 434)) | (1 << (SpeakQlParser.JSON - 434)) | (1 << (SpeakQlParser.KEY_BLOCK_SIZE - 434)) | (1 << (SpeakQlParser.LANGUAGE - 434)) | (1 << (SpeakQlParser.LAST - 434)) | (1 << (SpeakQlParser.LEAVES - 434)) | (1 << (SpeakQlParser.LESS - 434)) | (1 << (SpeakQlParser.LEVEL - 434)) | (1 << (SpeakQlParser.LIST - 434)) | (1 << (SpeakQlParser.LOCAL - 434)) | (1 << (SpeakQlParser.LOGFILE - 434)) | (1 << (SpeakQlParser.LOGS - 434)) | (1 << (SpeakQlParser.MASTER - 434)) | (1 << (SpeakQlParser.MASTER_AUTO_POSITION - 434)) | (1 << (SpeakQlParser.MASTER_CONNECT_RETRY - 434)) | (1 << (SpeakQlParser.MASTER_DELAY - 434)) | (1 << (SpeakQlParser.MASTER_HEARTBEAT_PERIOD - 434)) | (1 << (SpeakQlParser.MASTER_HOST - 434)) | (1 << (SpeakQlParser.MASTER_LOG_FILE - 434)) | (1 << (SpeakQlParser.MASTER_LOG_POS - 434)) | (1 << (SpeakQlParser.MASTER_PASSWORD - 434)) | (1 << (SpeakQlParser.MASTER_PORT - 434)) | (1 << (SpeakQlParser.MASTER_RETRY_COUNT - 434)) | (1 << (SpeakQlParser.MASTER_SSL - 434)) | (1 << (SpeakQlParser.MASTER_SSL_CA - 434)) | (1 << (SpeakQlParser.MASTER_SSL_CAPATH - 434)) | (1 << (SpeakQlParser.MASTER_SSL_CERT - 434)) | (1 << (SpeakQlParser.MASTER_SSL_CIPHER - 434)) | (1 << (SpeakQlParser.MASTER_SSL_CRL - 434)) | (1 << (SpeakQlParser.MASTER_SSL_CRLPATH - 434)) | (1 << (SpeakQlParser.MASTER_SSL_KEY - 434)) | (1 << (SpeakQlParser.MASTER_TLS_VERSION - 434)) | (1 << (SpeakQlParser.MASTER_USER - 434)) | (1 << (SpeakQlParser.MAX_CONNECTIONS_PER_HOUR - 434)) | (1 << (SpeakQlParser.MAX_QUERIES_PER_HOUR - 434)) | (1 << (SpeakQlParser.MAX_ROWS - 434)) | (1 << (SpeakQlParser.MAX_SIZE - 434)) | (1 << (SpeakQlParser.MAX_UPDATES_PER_HOUR - 434)) | (1 << (SpeakQlParser.MAX_USER_CONNECTIONS - 434)) | (1 << (SpeakQlParser.MEDIUM - 434)) | (1 << (SpeakQlParser.MEMBER - 434)))) != 0) or ((((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & ((1 << (SpeakQlParser.MERGE - 498)) | (1 << (SpeakQlParser.MESSAGE_TEXT - 498)) | (1 << (SpeakQlParser.MID - 498)) | (1 << (SpeakQlParser.MIGRATE - 498)) | (1 << (SpeakQlParser.MIN_ROWS - 498)) | (1 << (SpeakQlParser.MODE - 498)) | (1 << (SpeakQlParser.MODIFY - 498)) | (1 << (SpeakQlParser.MUTEX - 498)) | (1 << (SpeakQlParser.MYSQL - 498)) | (1 << (SpeakQlParser.MYSQL_ERRNO - 498)) | (1 << (SpeakQlParser.NAME - 498)) | (1 << (SpeakQlParser.NAMES - 498)) | (1 << (SpeakQlParser.NCHAR - 498)) | (1 << (SpeakQlParser.NEVER - 498)) | (1 << (SpeakQlParser.NEXT - 498)) | (1 << (SpeakQlParser.NO - 498)) | (1 << (SpeakQlParser.NODEGROUP - 498)) | (1 << (SpeakQlParser.NONE - 498)) | (1 << (SpeakQlParser.ODBC - 498)) | (1 << (SpeakQlParser.OFFLINE - 498)) | (1 << (SpeakQlParser.OFFSET - 498)) | (1 << (SpeakQlParser.OF - 498)) | (1 << (SpeakQlParser.OJ - 498)) | (1 << (SpeakQlParser.OLD_PASSWORD - 498)) | (1 << (SpeakQlParser.ONE - 498)) | (1 << (SpeakQlParser.ONLINE - 498)) | (1 << (SpeakQlParser.ONLY - 498)) | (1 << (SpeakQlParser.OPEN - 498)) | (1 << (SpeakQlParser.OPTIMIZER_COSTS - 498)) | (1 << (SpeakQlParser.OPTIONS - 498)) | (1 << (SpeakQlParser.OWNER - 498)) | (1 << (SpeakQlParser.PACK_KEYS - 498)) | (1 << (SpeakQlParser.PAGE - 498)) | (1 << (SpeakQlParser.PARSER - 498)) | (1 << (SpeakQlParser.PARTIAL - 498)) | (1 << (SpeakQlParser.PARTITIONING - 498)) | (1 << (SpeakQlParser.PARTITIONS - 498)) | (1 << (SpeakQlParser.PASSWORD - 498)) | (1 << (SpeakQlParser.PHASE - 498)) | (1 << (SpeakQlParser.PLUGIN - 498)) | (1 << (SpeakQlParser.PLUGIN_DIR - 498)) | (1 << (SpeakQlParser.PLUGINS - 498)) | (1 << (SpeakQlParser.PORT - 498)) | (1 << (SpeakQlParser.PRECEDES - 498)) | (1 << (SpeakQlParser.PREPARE - 498)) | (1 << (SpeakQlParser.PRESERVE - 498)) | (1 << (SpeakQlParser.PREV - 498)) | (1 << (SpeakQlParser.PROCESSLIST - 498)) | (1 << (SpeakQlParser.PROFILE - 498)) | (1 << (SpeakQlParser.PROFILES - 498)) | (1 << (SpeakQlParser.PROXY - 498)) | (1 << (SpeakQlParser.QUERY - 498)) | (1 << (SpeakQlParser.QUICK - 498)) | (1 << (SpeakQlParser.REBUILD - 498)) | (1 << (SpeakQlParser.RECOVER - 498)) | (1 << (SpeakQlParser.REDO_BUFFER_SIZE - 498)) | (1 << (SpeakQlParser.REDUNDANT - 498)) | (1 << (SpeakQlParser.RELAY - 498)) | (1 << (SpeakQlParser.RELAY_LOG_FILE - 498)) | (1 << (SpeakQlParser.RELAY_LOG_POS - 498)) | (1 << (SpeakQlParser.RELAYLOG - 498)) | (1 << (SpeakQlParser.REMOVE - 498)) | (1 << (SpeakQlParser.REORGANIZE - 498)))) != 0) or ((((_la - 562)) & ~0x3f) == 0 and ((1 << (_la - 562)) & ((1 << (SpeakQlParser.REPAIR - 562)) | (1 << (SpeakQlParser.REPLICATE_DO_DB - 562)) | (1 << (SpeakQlParser.REPLICATE_DO_TABLE - 562)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_DB - 562)) | (1 << (SpeakQlParser.REPLICATE_IGNORE_TABLE - 562)) | (1 << (SpeakQlParser.REPLICATE_REWRITE_DB - 562)) | (1 << (SpeakQlParser.REPLICATE_WILD_DO_TABLE - 562)) | (1 << (SpeakQlParser.REPLICATE_WILD_IGNORE_TABLE - 562)) | (1 << (SpeakQlParser.REPLICATION - 562)) | (1 << (SpeakQlParser.RESET - 562)) | (1 << (SpeakQlParser.RESUME - 562)) | (1 << (SpeakQlParser.RETURNED_SQLSTATE - 562)) | (1 << (SpeakQlParser.RETURNS - 562)) | (1 << (SpeakQlParser.ROLE - 562)) | (1 << (SpeakQlParser.ROLLBACK - 562)) | (1 << (SpeakQlParser.ROLLUP - 562)) | (1 << (SpeakQlParser.ROTATE - 562)) | (1 << (SpeakQlParser.ROW - 562)) | (1 << (SpeakQlParser.ROWS - 562)) | (1 << (SpeakQlParser.ROW_FORMAT - 562)) | (1 << (SpeakQlParser.SAVEPOINT - 562)) | (1 << (SpeakQlParser.SCHEDULE - 562)) | (1 << (SpeakQlParser.SECURITY - 562)) | (1 << (SpeakQlParser.SERVER - 562)) | (1 << (SpeakQlParser.SESSION - 562)) | (1 << (SpeakQlParser.SHARE - 562)) | (1 << (SpeakQlParser.SHARED - 562)) | (1 << (SpeakQlParser.SIGNED - 562)) | (1 << (SpeakQlParser.SIMPLE - 562)) | (1 << (SpeakQlParser.SLAVE - 562)) | (1 << (SpeakQlParser.SLOW - 562)) | (1 << (SpeakQlParser.SNAPSHOT - 562)) | (1 << (SpeakQlParser.SOCKET - 562)) | (1 << (SpeakQlParser.SOME - 562)) | (1 << (SpeakQlParser.SONAME - 562)) | (1 << (SpeakQlParser.SOUNDS - 562)) | (1 << (SpeakQlParser.SOURCE - 562)) | (1 << (SpeakQlParser.SQL_AFTER_GTIDS - 562)) | (1 << (SpeakQlParser.SQL_AFTER_MTS_GAPS - 562)) | (1 << (SpeakQlParser.SQL_BEFORE_GTIDS - 562)) | (1 << (SpeakQlParser.SQL_BUFFER_RESULT - 562)) | (1 << (SpeakQlParser.SQL_CACHE - 562)) | (1 << (SpeakQlParser.SQL_NO_CACHE - 562)) | (1 << (SpeakQlParser.SQL_THREAD - 562)) | (1 << (SpeakQlParser.START - 562)) | (1 << (SpeakQlParser.STARTS - 562)) | (1 << (SpeakQlParser.STATS_AUTO_RECALC - 562)) | (1 << (SpeakQlParser.STATS_PERSISTENT - 562)) | (1 << (SpeakQlParser.STATS_SAMPLE_PAGES - 562)) | (1 << (SpeakQlParser.STATUS - 562)) | (1 << (SpeakQlParser.STOP - 562)) | (1 << (SpeakQlParser.STORAGE - 562)) | (1 << (SpeakQlParser.STRING - 562)) | (1 << (SpeakQlParser.SUBCLASS_ORIGIN - 562)) | (1 << (SpeakQlParser.SUBJECT - 562)) | (1 << (SpeakQlParser.SUBPARTITION - 562)) | (1 << (SpeakQlParser.SUBPARTITIONS - 562)) | (1 << (SpeakQlParser.SUSPEND - 562)) | (1 << (SpeakQlParser.SWAPS - 562)) | (1 << (SpeakQlParser.SWITCHES - 562)) | (1 << (SpeakQlParser.TABLE_NAME - 562)) | (1 << (SpeakQlParser.TABLESPACE - 562)))) != 0) or ((((_la - 627)) & ~0x3f) == 0 and ((1 << (_la - 627)) & ((1 << (SpeakQlParser.TEMPORARY - 627)) | (1 << (SpeakQlParser.TEMPTABLE - 627)) | (1 << (SpeakQlParser.THAN - 627)) | (1 << (SpeakQlParser.TRADITIONAL - 627)) | (1 << (SpeakQlParser.TRANSACTION - 627)) | (1 << (SpeakQlParser.TRANSACTIONAL - 627)) | (1 << (SpeakQlParser.TRIGGERS - 627)) | (1 << (SpeakQlParser.TRUNCATE - 627)) | (1 << (SpeakQlParser.UNDEFINED - 627)) | (1 << (SpeakQlParser.UNDOFILE - 627)) | (1 << (SpeakQlParser.UNDO_BUFFER_SIZE - 627)) | (1 << (SpeakQlParser.UNINSTALL - 627)) | (1 << (SpeakQlParser.UNKNOWN - 627)) | (1 << (SpeakQlParser.UNTIL - 627)) | (1 << (SpeakQlParser.UPGRADE - 627)) | (1 << (SpeakQlParser.USER - 627)) | (1 << (SpeakQlParser.USE_FRM - 627)) | (1 << (SpeakQlParser.USER_RESOURCES - 627)) | (1 << (SpeakQlParser.VALIDATION - 627)) | (1 << (SpeakQlParser.VALUE - 627)) | (1 << (SpeakQlParser.VARIABLES - 627)) | (1 << (SpeakQlParser.VIEW - 627)) | (1 << (SpeakQlParser.WAIT - 627)) | (1 << (SpeakQlParser.WARNINGS - 627)) | (1 << (SpeakQlParser.WITHOUT - 627)) | (1 << (SpeakQlParser.WORK - 627)) | (1 << (SpeakQlParser.WRAPPER - 627)) | (1 << (SpeakQlParser.X509 - 627)) | (1 << (SpeakQlParser.XA - 627)) | (1 << (SpeakQlParser.XML - 627)) | (1 << (SpeakQlParser.EUR - 627)) | (1 << (SpeakQlParser.USA - 627)) | (1 << (SpeakQlParser.JIS - 627)) | (1 << (SpeakQlParser.ISO - 627)) | (1 << (SpeakQlParser.INTERNAL - 627)) | (1 << (SpeakQlParser.AUDIT_ADMIN - 627)) | (1 << (SpeakQlParser.BACKUP_ADMIN - 627)) | (1 << (SpeakQlParser.BINLOG_ADMIN - 627)) | (1 << (SpeakQlParser.BINLOG_ENCRYPTION_ADMIN - 627)) | (1 << (SpeakQlParser.CLONE_ADMIN - 627)) | (1 << (SpeakQlParser.CONNECTION_ADMIN - 627)) | (1 << (SpeakQlParser.ENCRYPTION_KEY_ADMIN - 627)))) != 0) or ((((_la - 691)) & ~0x3f) == 0 and ((1 << (_la - 691)) & ((1 << (SpeakQlParser.FIREWALL_ADMIN - 691)) | (1 << (SpeakQlParser.FIREWALL_USER - 691)) | (1 << (SpeakQlParser.GROUP_REPLICATION_ADMIN - 691)) | (1 << (SpeakQlParser.INNODB_REDO_LOG_ARCHIVE - 691)) | (1 << (SpeakQlParser.NDB_STORED_USER - 691)) | (1 << (SpeakQlParser.PERSIST_RO_VARIABLES_ADMIN - 691)) | (1 << (SpeakQlParser.REPLICATION_APPLIER - 691)) | (1 << (SpeakQlParser.REPLICATION_SLAVE_ADMIN - 691)) | (1 << (SpeakQlParser.RESOURCE_GROUP_ADMIN - 691)) | (1 << (SpeakQlParser.RESOURCE_GROUP_USER - 691)) | (1 << (SpeakQlParser.ROLE_ADMIN - 691)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 691)) | (1 << (SpeakQlParser.SET_USER_ID - 691)) | (1 << (SpeakQlParser.SHOW_ROUTINE - 691)) | (1 << (SpeakQlParser.SYSTEM_VARIABLES_ADMIN - 691)) | (1 << (SpeakQlParser.TABLE_ENCRYPTION_ADMIN - 691)) | (1 << (SpeakQlParser.VERSION_TOKEN_ADMIN - 691)) | (1 << (SpeakQlParser.XA_RECOVER_ADMIN - 691)))) != 0) or _la==SpeakQlParser.MEMORY or _la==SpeakQlParser.CATALOG_NAME or _la==SpeakQlParser.SCHEMA_NAME or _la==SpeakQlParser.OPTIONAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(SpeakQlParser.ABS, 0)

        def ACOS(self):
            return self.getToken(SpeakQlParser.ACOS, 0)

        def ADDDATE(self):
            return self.getToken(SpeakQlParser.ADDDATE, 0)

        def ADDTIME(self):
            return self.getToken(SpeakQlParser.ADDTIME, 0)

        def AES_DECRYPT(self):
            return self.getToken(SpeakQlParser.AES_DECRYPT, 0)

        def AES_ENCRYPT(self):
            return self.getToken(SpeakQlParser.AES_ENCRYPT, 0)

        def AREA(self):
            return self.getToken(SpeakQlParser.AREA, 0)

        def ASBINARY(self):
            return self.getToken(SpeakQlParser.ASBINARY, 0)

        def ASIN(self):
            return self.getToken(SpeakQlParser.ASIN, 0)

        def ASTEXT(self):
            return self.getToken(SpeakQlParser.ASTEXT, 0)

        def ASWKB(self):
            return self.getToken(SpeakQlParser.ASWKB, 0)

        def ASWKT(self):
            return self.getToken(SpeakQlParser.ASWKT, 0)

        def ASYMMETRIC_DECRYPT(self):
            return self.getToken(SpeakQlParser.ASYMMETRIC_DECRYPT, 0)

        def ASYMMETRIC_DERIVE(self):
            return self.getToken(SpeakQlParser.ASYMMETRIC_DERIVE, 0)

        def ASYMMETRIC_ENCRYPT(self):
            return self.getToken(SpeakQlParser.ASYMMETRIC_ENCRYPT, 0)

        def ASYMMETRIC_SIGN(self):
            return self.getToken(SpeakQlParser.ASYMMETRIC_SIGN, 0)

        def ASYMMETRIC_VERIFY(self):
            return self.getToken(SpeakQlParser.ASYMMETRIC_VERIFY, 0)

        def ATAN(self):
            return self.getToken(SpeakQlParser.ATAN, 0)

        def ATAN2(self):
            return self.getToken(SpeakQlParser.ATAN2, 0)

        def BENCHMARK(self):
            return self.getToken(SpeakQlParser.BENCHMARK, 0)

        def BIN(self):
            return self.getToken(SpeakQlParser.BIN, 0)

        def BIT_COUNT(self):
            return self.getToken(SpeakQlParser.BIT_COUNT, 0)

        def BIT_LENGTH(self):
            return self.getToken(SpeakQlParser.BIT_LENGTH, 0)

        def BUFFER(self):
            return self.getToken(SpeakQlParser.BUFFER, 0)

        def CEIL(self):
            return self.getToken(SpeakQlParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(SpeakQlParser.CEILING, 0)

        def CENTROID(self):
            return self.getToken(SpeakQlParser.CENTROID, 0)

        def CHARACTER_LENGTH(self):
            return self.getToken(SpeakQlParser.CHARACTER_LENGTH, 0)

        def CHARSET(self):
            return self.getToken(SpeakQlParser.CHARSET, 0)

        def CHAR_LENGTH(self):
            return self.getToken(SpeakQlParser.CHAR_LENGTH, 0)

        def COERCIBILITY(self):
            return self.getToken(SpeakQlParser.COERCIBILITY, 0)

        def COLLATION(self):
            return self.getToken(SpeakQlParser.COLLATION, 0)

        def COMPRESS(self):
            return self.getToken(SpeakQlParser.COMPRESS, 0)

        def CONCAT(self):
            return self.getToken(SpeakQlParser.CONCAT, 0)

        def CONCAT_WS(self):
            return self.getToken(SpeakQlParser.CONCAT_WS, 0)

        def CONNECTION_ID(self):
            return self.getToken(SpeakQlParser.CONNECTION_ID, 0)

        def CONV(self):
            return self.getToken(SpeakQlParser.CONV, 0)

        def CONVERT_TZ(self):
            return self.getToken(SpeakQlParser.CONVERT_TZ, 0)

        def COS(self):
            return self.getToken(SpeakQlParser.COS, 0)

        def COT(self):
            return self.getToken(SpeakQlParser.COT, 0)

        def COUNT(self):
            return self.getToken(SpeakQlParser.COUNT, 0)

        def CRC32(self):
            return self.getToken(SpeakQlParser.CRC32, 0)

        def CREATE_ASYMMETRIC_PRIV_KEY(self):
            return self.getToken(SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0)

        def CREATE_ASYMMETRIC_PUB_KEY(self):
            return self.getToken(SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY, 0)

        def CREATE_DH_PARAMETERS(self):
            return self.getToken(SpeakQlParser.CREATE_DH_PARAMETERS, 0)

        def CREATE_DIGEST(self):
            return self.getToken(SpeakQlParser.CREATE_DIGEST, 0)

        def CROSSES(self):
            return self.getToken(SpeakQlParser.CROSSES, 0)

        def DATABASE(self):
            return self.getToken(SpeakQlParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(SpeakQlParser.DATE, 0)

        def DATEDIFF(self):
            return self.getToken(SpeakQlParser.DATEDIFF, 0)

        def DATE_FORMAT(self):
            return self.getToken(SpeakQlParser.DATE_FORMAT, 0)

        def DAY(self):
            return self.getToken(SpeakQlParser.DAY, 0)

        def DAYNAME(self):
            return self.getToken(SpeakQlParser.DAYNAME, 0)

        def DAYOFMONTH(self):
            return self.getToken(SpeakQlParser.DAYOFMONTH, 0)

        def DAYOFWEEK(self):
            return self.getToken(SpeakQlParser.DAYOFWEEK, 0)

        def DAYOFYEAR(self):
            return self.getToken(SpeakQlParser.DAYOFYEAR, 0)

        def DECODE(self):
            return self.getToken(SpeakQlParser.DECODE, 0)

        def DEGREES(self):
            return self.getToken(SpeakQlParser.DEGREES, 0)

        def DES_DECRYPT(self):
            return self.getToken(SpeakQlParser.DES_DECRYPT, 0)

        def DES_ENCRYPT(self):
            return self.getToken(SpeakQlParser.DES_ENCRYPT, 0)

        def DIMENSION(self):
            return self.getToken(SpeakQlParser.DIMENSION, 0)

        def DISJOINT(self):
            return self.getToken(SpeakQlParser.DISJOINT, 0)

        def ELT(self):
            return self.getToken(SpeakQlParser.ELT, 0)

        def ENCODE(self):
            return self.getToken(SpeakQlParser.ENCODE, 0)

        def ENCRYPT(self):
            return self.getToken(SpeakQlParser.ENCRYPT, 0)

        def ENDPOINT(self):
            return self.getToken(SpeakQlParser.ENDPOINT, 0)

        def ENVELOPE(self):
            return self.getToken(SpeakQlParser.ENVELOPE, 0)

        def EQUALS(self):
            return self.getToken(SpeakQlParser.EQUALS, 0)

        def EXP(self):
            return self.getToken(SpeakQlParser.EXP, 0)

        def EXPORT_SET(self):
            return self.getToken(SpeakQlParser.EXPORT_SET, 0)

        def EXTERIORRING(self):
            return self.getToken(SpeakQlParser.EXTERIORRING, 0)

        def EXTRACTVALUE(self):
            return self.getToken(SpeakQlParser.EXTRACTVALUE, 0)

        def FIELD(self):
            return self.getToken(SpeakQlParser.FIELD, 0)

        def FIND_IN_SET(self):
            return self.getToken(SpeakQlParser.FIND_IN_SET, 0)

        def FLOOR(self):
            return self.getToken(SpeakQlParser.FLOOR, 0)

        def FORMAT(self):
            return self.getToken(SpeakQlParser.FORMAT, 0)

        def FOUND_ROWS(self):
            return self.getToken(SpeakQlParser.FOUND_ROWS, 0)

        def FROM_BASE64(self):
            return self.getToken(SpeakQlParser.FROM_BASE64, 0)

        def FROM_DAYS(self):
            return self.getToken(SpeakQlParser.FROM_DAYS, 0)

        def FROM_UNIXTIME(self):
            return self.getToken(SpeakQlParser.FROM_UNIXTIME, 0)

        def GEOMCOLLFROMTEXT(self):
            return self.getToken(SpeakQlParser.GEOMCOLLFROMTEXT, 0)

        def GEOMCOLLFROMWKB(self):
            return self.getToken(SpeakQlParser.GEOMCOLLFROMWKB, 0)

        def GEOMETRYCOLLECTION(self):
            return self.getToken(SpeakQlParser.GEOMETRYCOLLECTION, 0)

        def GEOMETRYCOLLECTIONFROMTEXT(self):
            return self.getToken(SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT, 0)

        def GEOMETRYCOLLECTIONFROMWKB(self):
            return self.getToken(SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB, 0)

        def GEOMETRYFROMTEXT(self):
            return self.getToken(SpeakQlParser.GEOMETRYFROMTEXT, 0)

        def GEOMETRYFROMWKB(self):
            return self.getToken(SpeakQlParser.GEOMETRYFROMWKB, 0)

        def GEOMETRYN(self):
            return self.getToken(SpeakQlParser.GEOMETRYN, 0)

        def GEOMETRYTYPE(self):
            return self.getToken(SpeakQlParser.GEOMETRYTYPE, 0)

        def GEOMFROMTEXT(self):
            return self.getToken(SpeakQlParser.GEOMFROMTEXT, 0)

        def GEOMFROMWKB(self):
            return self.getToken(SpeakQlParser.GEOMFROMWKB, 0)

        def GET_FORMAT(self):
            return self.getToken(SpeakQlParser.GET_FORMAT, 0)

        def GET_LOCK(self):
            return self.getToken(SpeakQlParser.GET_LOCK, 0)

        def GLENGTH(self):
            return self.getToken(SpeakQlParser.GLENGTH, 0)

        def GREATEST(self):
            return self.getToken(SpeakQlParser.GREATEST, 0)

        def GTID_SUBSET(self):
            return self.getToken(SpeakQlParser.GTID_SUBSET, 0)

        def GTID_SUBTRACT(self):
            return self.getToken(SpeakQlParser.GTID_SUBTRACT, 0)

        def HEX(self):
            return self.getToken(SpeakQlParser.HEX, 0)

        def HOUR(self):
            return self.getToken(SpeakQlParser.HOUR, 0)

        def IFNULL(self):
            return self.getToken(SpeakQlParser.IFNULL, 0)

        def INET6_ATON(self):
            return self.getToken(SpeakQlParser.INET6_ATON, 0)

        def INET6_NTOA(self):
            return self.getToken(SpeakQlParser.INET6_NTOA, 0)

        def INET_ATON(self):
            return self.getToken(SpeakQlParser.INET_ATON, 0)

        def INET_NTOA(self):
            return self.getToken(SpeakQlParser.INET_NTOA, 0)

        def INSTR(self):
            return self.getToken(SpeakQlParser.INSTR, 0)

        def INTERIORRINGN(self):
            return self.getToken(SpeakQlParser.INTERIORRINGN, 0)

        def INTERSECTS(self):
            return self.getToken(SpeakQlParser.INTERSECTS, 0)

        def INVISIBLE(self):
            return self.getToken(SpeakQlParser.INVISIBLE, 0)

        def ISCLOSED(self):
            return self.getToken(SpeakQlParser.ISCLOSED, 0)

        def ISEMPTY(self):
            return self.getToken(SpeakQlParser.ISEMPTY, 0)

        def ISNULL(self):
            return self.getToken(SpeakQlParser.ISNULL, 0)

        def ISSIMPLE(self):
            return self.getToken(SpeakQlParser.ISSIMPLE, 0)

        def IS_FREE_LOCK(self):
            return self.getToken(SpeakQlParser.IS_FREE_LOCK, 0)

        def IS_IPV4(self):
            return self.getToken(SpeakQlParser.IS_IPV4, 0)

        def IS_IPV4_COMPAT(self):
            return self.getToken(SpeakQlParser.IS_IPV4_COMPAT, 0)

        def IS_IPV4_MAPPED(self):
            return self.getToken(SpeakQlParser.IS_IPV4_MAPPED, 0)

        def IS_IPV6(self):
            return self.getToken(SpeakQlParser.IS_IPV6, 0)

        def IS_USED_LOCK(self):
            return self.getToken(SpeakQlParser.IS_USED_LOCK, 0)

        def LAST_INSERT_ID(self):
            return self.getToken(SpeakQlParser.LAST_INSERT_ID, 0)

        def LCASE(self):
            return self.getToken(SpeakQlParser.LCASE, 0)

        def LEAST(self):
            return self.getToken(SpeakQlParser.LEAST, 0)

        def LEFT(self):
            return self.getToken(SpeakQlParser.LEFT, 0)

        def LENGTH(self):
            return self.getToken(SpeakQlParser.LENGTH, 0)

        def LINEFROMTEXT(self):
            return self.getToken(SpeakQlParser.LINEFROMTEXT, 0)

        def LINEFROMWKB(self):
            return self.getToken(SpeakQlParser.LINEFROMWKB, 0)

        def LINESTRING(self):
            return self.getToken(SpeakQlParser.LINESTRING, 0)

        def LINESTRINGFROMTEXT(self):
            return self.getToken(SpeakQlParser.LINESTRINGFROMTEXT, 0)

        def LINESTRINGFROMWKB(self):
            return self.getToken(SpeakQlParser.LINESTRINGFROMWKB, 0)

        def LN(self):
            return self.getToken(SpeakQlParser.LN, 0)

        def LOAD_FILE(self):
            return self.getToken(SpeakQlParser.LOAD_FILE, 0)

        def LOCATE(self):
            return self.getToken(SpeakQlParser.LOCATE, 0)

        def LOG(self):
            return self.getToken(SpeakQlParser.LOG, 0)

        def LOG10(self):
            return self.getToken(SpeakQlParser.LOG10, 0)

        def LOG2(self):
            return self.getToken(SpeakQlParser.LOG2, 0)

        def LOWER(self):
            return self.getToken(SpeakQlParser.LOWER, 0)

        def LPAD(self):
            return self.getToken(SpeakQlParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(SpeakQlParser.LTRIM, 0)

        def MAKEDATE(self):
            return self.getToken(SpeakQlParser.MAKEDATE, 0)

        def MAKETIME(self):
            return self.getToken(SpeakQlParser.MAKETIME, 0)

        def MAKE_SET(self):
            return self.getToken(SpeakQlParser.MAKE_SET, 0)

        def MASTER_POS_WAIT(self):
            return self.getToken(SpeakQlParser.MASTER_POS_WAIT, 0)

        def MBRCONTAINS(self):
            return self.getToken(SpeakQlParser.MBRCONTAINS, 0)

        def MBRDISJOINT(self):
            return self.getToken(SpeakQlParser.MBRDISJOINT, 0)

        def MBREQUAL(self):
            return self.getToken(SpeakQlParser.MBREQUAL, 0)

        def MBRINTERSECTS(self):
            return self.getToken(SpeakQlParser.MBRINTERSECTS, 0)

        def MBROVERLAPS(self):
            return self.getToken(SpeakQlParser.MBROVERLAPS, 0)

        def MBRTOUCHES(self):
            return self.getToken(SpeakQlParser.MBRTOUCHES, 0)

        def MBRWITHIN(self):
            return self.getToken(SpeakQlParser.MBRWITHIN, 0)

        def MD5(self):
            return self.getToken(SpeakQlParser.MD5, 0)

        def MICROSECOND(self):
            return self.getToken(SpeakQlParser.MICROSECOND, 0)

        def MINUTE(self):
            return self.getToken(SpeakQlParser.MINUTE, 0)

        def MLINEFROMTEXT(self):
            return self.getToken(SpeakQlParser.MLINEFROMTEXT, 0)

        def MLINEFROMWKB(self):
            return self.getToken(SpeakQlParser.MLINEFROMWKB, 0)

        def MOD(self):
            return self.getToken(SpeakQlParser.MOD, 0)

        def MONTH(self):
            return self.getToken(SpeakQlParser.MONTH, 0)

        def MONTHNAME(self):
            return self.getToken(SpeakQlParser.MONTHNAME, 0)

        def MPOINTFROMTEXT(self):
            return self.getToken(SpeakQlParser.MPOINTFROMTEXT, 0)

        def MPOINTFROMWKB(self):
            return self.getToken(SpeakQlParser.MPOINTFROMWKB, 0)

        def MPOLYFROMTEXT(self):
            return self.getToken(SpeakQlParser.MPOLYFROMTEXT, 0)

        def MPOLYFROMWKB(self):
            return self.getToken(SpeakQlParser.MPOLYFROMWKB, 0)

        def MULTILINESTRING(self):
            return self.getToken(SpeakQlParser.MULTILINESTRING, 0)

        def MULTILINESTRINGFROMTEXT(self):
            return self.getToken(SpeakQlParser.MULTILINESTRINGFROMTEXT, 0)

        def MULTILINESTRINGFROMWKB(self):
            return self.getToken(SpeakQlParser.MULTILINESTRINGFROMWKB, 0)

        def MULTIPOINT(self):
            return self.getToken(SpeakQlParser.MULTIPOINT, 0)

        def MULTIPOINTFROMTEXT(self):
            return self.getToken(SpeakQlParser.MULTIPOINTFROMTEXT, 0)

        def MULTIPOINTFROMWKB(self):
            return self.getToken(SpeakQlParser.MULTIPOINTFROMWKB, 0)

        def MULTIPOLYGON(self):
            return self.getToken(SpeakQlParser.MULTIPOLYGON, 0)

        def MULTIPOLYGONFROMTEXT(self):
            return self.getToken(SpeakQlParser.MULTIPOLYGONFROMTEXT, 0)

        def MULTIPOLYGONFROMWKB(self):
            return self.getToken(SpeakQlParser.MULTIPOLYGONFROMWKB, 0)

        def NAME_CONST(self):
            return self.getToken(SpeakQlParser.NAME_CONST, 0)

        def NULLIF(self):
            return self.getToken(SpeakQlParser.NULLIF, 0)

        def NUMGEOMETRIES(self):
            return self.getToken(SpeakQlParser.NUMGEOMETRIES, 0)

        def NUMINTERIORRINGS(self):
            return self.getToken(SpeakQlParser.NUMINTERIORRINGS, 0)

        def NUMPOINTS(self):
            return self.getToken(SpeakQlParser.NUMPOINTS, 0)

        def OCT(self):
            return self.getToken(SpeakQlParser.OCT, 0)

        def OCTET_LENGTH(self):
            return self.getToken(SpeakQlParser.OCTET_LENGTH, 0)

        def ORD(self):
            return self.getToken(SpeakQlParser.ORD, 0)

        def OVERLAPS(self):
            return self.getToken(SpeakQlParser.OVERLAPS, 0)

        def PERIOD_ADD(self):
            return self.getToken(SpeakQlParser.PERIOD_ADD, 0)

        def PERIOD_DIFF(self):
            return self.getToken(SpeakQlParser.PERIOD_DIFF, 0)

        def PI(self):
            return self.getToken(SpeakQlParser.PI, 0)

        def POINT(self):
            return self.getToken(SpeakQlParser.POINT, 0)

        def POINTFROMTEXT(self):
            return self.getToken(SpeakQlParser.POINTFROMTEXT, 0)

        def POINTFROMWKB(self):
            return self.getToken(SpeakQlParser.POINTFROMWKB, 0)

        def POINTN(self):
            return self.getToken(SpeakQlParser.POINTN, 0)

        def POLYFROMTEXT(self):
            return self.getToken(SpeakQlParser.POLYFROMTEXT, 0)

        def POLYFROMWKB(self):
            return self.getToken(SpeakQlParser.POLYFROMWKB, 0)

        def POLYGON(self):
            return self.getToken(SpeakQlParser.POLYGON, 0)

        def POLYGONFROMTEXT(self):
            return self.getToken(SpeakQlParser.POLYGONFROMTEXT, 0)

        def POLYGONFROMWKB(self):
            return self.getToken(SpeakQlParser.POLYGONFROMWKB, 0)

        def POSITION(self):
            return self.getToken(SpeakQlParser.POSITION, 0)

        def POW(self):
            return self.getToken(SpeakQlParser.POW, 0)

        def POWER(self):
            return self.getToken(SpeakQlParser.POWER, 0)

        def QUARTER(self):
            return self.getToken(SpeakQlParser.QUARTER, 0)

        def QUOTE(self):
            return self.getToken(SpeakQlParser.QUOTE, 0)

        def RADIANS(self):
            return self.getToken(SpeakQlParser.RADIANS, 0)

        def RAND(self):
            return self.getToken(SpeakQlParser.RAND, 0)

        def RANDOM_BYTES(self):
            return self.getToken(SpeakQlParser.RANDOM_BYTES, 0)

        def RELEASE_LOCK(self):
            return self.getToken(SpeakQlParser.RELEASE_LOCK, 0)

        def REVERSE(self):
            return self.getToken(SpeakQlParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(SpeakQlParser.RIGHT, 0)

        def ROUND(self):
            return self.getToken(SpeakQlParser.ROUND, 0)

        def ROW_COUNT(self):
            return self.getToken(SpeakQlParser.ROW_COUNT, 0)

        def RPAD(self):
            return self.getToken(SpeakQlParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(SpeakQlParser.RTRIM, 0)

        def SECOND(self):
            return self.getToken(SpeakQlParser.SECOND, 0)

        def SEC_TO_TIME(self):
            return self.getToken(SpeakQlParser.SEC_TO_TIME, 0)

        def SCHEMA(self):
            return self.getToken(SpeakQlParser.SCHEMA, 0)

        def SESSION_USER(self):
            return self.getToken(SpeakQlParser.SESSION_USER, 0)

        def SESSION_VARIABLES_ADMIN(self):
            return self.getToken(SpeakQlParser.SESSION_VARIABLES_ADMIN, 0)

        def SHA(self):
            return self.getToken(SpeakQlParser.SHA, 0)

        def SHA1(self):
            return self.getToken(SpeakQlParser.SHA1, 0)

        def SHA2(self):
            return self.getToken(SpeakQlParser.SHA2, 0)

        def SIGN(self):
            return self.getToken(SpeakQlParser.SIGN, 0)

        def SIN(self):
            return self.getToken(SpeakQlParser.SIN, 0)

        def SLEEP(self):
            return self.getToken(SpeakQlParser.SLEEP, 0)

        def SOUNDEX(self):
            return self.getToken(SpeakQlParser.SOUNDEX, 0)

        def SQL_THREAD_WAIT_AFTER_GTIDS(self):
            return self.getToken(SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0)

        def SQRT(self):
            return self.getToken(SpeakQlParser.SQRT, 0)

        def SRID(self):
            return self.getToken(SpeakQlParser.SRID, 0)

        def STARTPOINT(self):
            return self.getToken(SpeakQlParser.STARTPOINT, 0)

        def STRCMP(self):
            return self.getToken(SpeakQlParser.STRCMP, 0)

        def STR_TO_DATE(self):
            return self.getToken(SpeakQlParser.STR_TO_DATE, 0)

        def ST_AREA(self):
            return self.getToken(SpeakQlParser.ST_AREA, 0)

        def ST_ASBINARY(self):
            return self.getToken(SpeakQlParser.ST_ASBINARY, 0)

        def ST_ASTEXT(self):
            return self.getToken(SpeakQlParser.ST_ASTEXT, 0)

        def ST_ASWKB(self):
            return self.getToken(SpeakQlParser.ST_ASWKB, 0)

        def ST_ASWKT(self):
            return self.getToken(SpeakQlParser.ST_ASWKT, 0)

        def ST_BUFFER(self):
            return self.getToken(SpeakQlParser.ST_BUFFER, 0)

        def ST_CENTROID(self):
            return self.getToken(SpeakQlParser.ST_CENTROID, 0)

        def ST_CONTAINS(self):
            return self.getToken(SpeakQlParser.ST_CONTAINS, 0)

        def ST_CROSSES(self):
            return self.getToken(SpeakQlParser.ST_CROSSES, 0)

        def ST_DIFFERENCE(self):
            return self.getToken(SpeakQlParser.ST_DIFFERENCE, 0)

        def ST_DIMENSION(self):
            return self.getToken(SpeakQlParser.ST_DIMENSION, 0)

        def ST_DISJOINT(self):
            return self.getToken(SpeakQlParser.ST_DISJOINT, 0)

        def ST_DISTANCE(self):
            return self.getToken(SpeakQlParser.ST_DISTANCE, 0)

        def ST_ENDPOINT(self):
            return self.getToken(SpeakQlParser.ST_ENDPOINT, 0)

        def ST_ENVELOPE(self):
            return self.getToken(SpeakQlParser.ST_ENVELOPE, 0)

        def ST_EQUALS(self):
            return self.getToken(SpeakQlParser.ST_EQUALS, 0)

        def ST_EXTERIORRING(self):
            return self.getToken(SpeakQlParser.ST_EXTERIORRING, 0)

        def ST_GEOMCOLLFROMTEXT(self):
            return self.getToken(SpeakQlParser.ST_GEOMCOLLFROMTEXT, 0)

        def ST_GEOMCOLLFROMTXT(self):
            return self.getToken(SpeakQlParser.ST_GEOMCOLLFROMTXT, 0)

        def ST_GEOMCOLLFROMWKB(self):
            return self.getToken(SpeakQlParser.ST_GEOMCOLLFROMWKB, 0)

        def ST_GEOMETRYCOLLECTIONFROMTEXT(self):
            return self.getToken(SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0)

        def ST_GEOMETRYCOLLECTIONFROMWKB(self):
            return self.getToken(SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0)

        def ST_GEOMETRYFROMTEXT(self):
            return self.getToken(SpeakQlParser.ST_GEOMETRYFROMTEXT, 0)

        def ST_GEOMETRYFROMWKB(self):
            return self.getToken(SpeakQlParser.ST_GEOMETRYFROMWKB, 0)

        def ST_GEOMETRYN(self):
            return self.getToken(SpeakQlParser.ST_GEOMETRYN, 0)

        def ST_GEOMETRYTYPE(self):
            return self.getToken(SpeakQlParser.ST_GEOMETRYTYPE, 0)

        def ST_GEOMFROMTEXT(self):
            return self.getToken(SpeakQlParser.ST_GEOMFROMTEXT, 0)

        def ST_GEOMFROMWKB(self):
            return self.getToken(SpeakQlParser.ST_GEOMFROMWKB, 0)

        def ST_INTERIORRINGN(self):
            return self.getToken(SpeakQlParser.ST_INTERIORRINGN, 0)

        def ST_INTERSECTION(self):
            return self.getToken(SpeakQlParser.ST_INTERSECTION, 0)

        def ST_INTERSECTS(self):
            return self.getToken(SpeakQlParser.ST_INTERSECTS, 0)

        def ST_ISCLOSED(self):
            return self.getToken(SpeakQlParser.ST_ISCLOSED, 0)

        def ST_ISEMPTY(self):
            return self.getToken(SpeakQlParser.ST_ISEMPTY, 0)

        def ST_ISSIMPLE(self):
            return self.getToken(SpeakQlParser.ST_ISSIMPLE, 0)

        def ST_LINEFROMTEXT(self):
            return self.getToken(SpeakQlParser.ST_LINEFROMTEXT, 0)

        def ST_LINEFROMWKB(self):
            return self.getToken(SpeakQlParser.ST_LINEFROMWKB, 0)

        def ST_LINESTRINGFROMTEXT(self):
            return self.getToken(SpeakQlParser.ST_LINESTRINGFROMTEXT, 0)

        def ST_LINESTRINGFROMWKB(self):
            return self.getToken(SpeakQlParser.ST_LINESTRINGFROMWKB, 0)

        def ST_NUMGEOMETRIES(self):
            return self.getToken(SpeakQlParser.ST_NUMGEOMETRIES, 0)

        def ST_NUMINTERIORRING(self):
            return self.getToken(SpeakQlParser.ST_NUMINTERIORRING, 0)

        def ST_NUMINTERIORRINGS(self):
            return self.getToken(SpeakQlParser.ST_NUMINTERIORRINGS, 0)

        def ST_NUMPOINTS(self):
            return self.getToken(SpeakQlParser.ST_NUMPOINTS, 0)

        def ST_OVERLAPS(self):
            return self.getToken(SpeakQlParser.ST_OVERLAPS, 0)

        def ST_POINTFROMTEXT(self):
            return self.getToken(SpeakQlParser.ST_POINTFROMTEXT, 0)

        def ST_POINTFROMWKB(self):
            return self.getToken(SpeakQlParser.ST_POINTFROMWKB, 0)

        def ST_POINTN(self):
            return self.getToken(SpeakQlParser.ST_POINTN, 0)

        def ST_POLYFROMTEXT(self):
            return self.getToken(SpeakQlParser.ST_POLYFROMTEXT, 0)

        def ST_POLYFROMWKB(self):
            return self.getToken(SpeakQlParser.ST_POLYFROMWKB, 0)

        def ST_POLYGONFROMTEXT(self):
            return self.getToken(SpeakQlParser.ST_POLYGONFROMTEXT, 0)

        def ST_POLYGONFROMWKB(self):
            return self.getToken(SpeakQlParser.ST_POLYGONFROMWKB, 0)

        def ST_SRID(self):
            return self.getToken(SpeakQlParser.ST_SRID, 0)

        def ST_STARTPOINT(self):
            return self.getToken(SpeakQlParser.ST_STARTPOINT, 0)

        def ST_SYMDIFFERENCE(self):
            return self.getToken(SpeakQlParser.ST_SYMDIFFERENCE, 0)

        def ST_TOUCHES(self):
            return self.getToken(SpeakQlParser.ST_TOUCHES, 0)

        def ST_UNION(self):
            return self.getToken(SpeakQlParser.ST_UNION, 0)

        def ST_WITHIN(self):
            return self.getToken(SpeakQlParser.ST_WITHIN, 0)

        def ST_X(self):
            return self.getToken(SpeakQlParser.ST_X, 0)

        def ST_Y(self):
            return self.getToken(SpeakQlParser.ST_Y, 0)

        def SUBDATE(self):
            return self.getToken(SpeakQlParser.SUBDATE, 0)

        def SUBSTRING_INDEX(self):
            return self.getToken(SpeakQlParser.SUBSTRING_INDEX, 0)

        def SUBTIME(self):
            return self.getToken(SpeakQlParser.SUBTIME, 0)

        def SYSTEM_USER(self):
            return self.getToken(SpeakQlParser.SYSTEM_USER, 0)

        def TAN(self):
            return self.getToken(SpeakQlParser.TAN, 0)

        def TIME(self):
            return self.getToken(SpeakQlParser.TIME, 0)

        def TIMEDIFF(self):
            return self.getToken(SpeakQlParser.TIMEDIFF, 0)

        def TIMESTAMP(self):
            return self.getToken(SpeakQlParser.TIMESTAMP, 0)

        def TIMESTAMPADD(self):
            return self.getToken(SpeakQlParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(SpeakQlParser.TIMESTAMPDIFF, 0)

        def TIME_FORMAT(self):
            return self.getToken(SpeakQlParser.TIME_FORMAT, 0)

        def TIME_TO_SEC(self):
            return self.getToken(SpeakQlParser.TIME_TO_SEC, 0)

        def TOUCHES(self):
            return self.getToken(SpeakQlParser.TOUCHES, 0)

        def TO_BASE64(self):
            return self.getToken(SpeakQlParser.TO_BASE64, 0)

        def TO_DAYS(self):
            return self.getToken(SpeakQlParser.TO_DAYS, 0)

        def TO_SECONDS(self):
            return self.getToken(SpeakQlParser.TO_SECONDS, 0)

        def UCASE(self):
            return self.getToken(SpeakQlParser.UCASE, 0)

        def UNCOMPRESS(self):
            return self.getToken(SpeakQlParser.UNCOMPRESS, 0)

        def UNCOMPRESSED_LENGTH(self):
            return self.getToken(SpeakQlParser.UNCOMPRESSED_LENGTH, 0)

        def UNHEX(self):
            return self.getToken(SpeakQlParser.UNHEX, 0)

        def UNIX_TIMESTAMP(self):
            return self.getToken(SpeakQlParser.UNIX_TIMESTAMP, 0)

        def UPDATEXML(self):
            return self.getToken(SpeakQlParser.UPDATEXML, 0)

        def UPPER(self):
            return self.getToken(SpeakQlParser.UPPER, 0)

        def UUID(self):
            return self.getToken(SpeakQlParser.UUID, 0)

        def UUID_SHORT(self):
            return self.getToken(SpeakQlParser.UUID_SHORT, 0)

        def VALIDATE_PASSWORD_STRENGTH(self):
            return self.getToken(SpeakQlParser.VALIDATE_PASSWORD_STRENGTH, 0)

        def VERSION(self):
            return self.getToken(SpeakQlParser.VERSION, 0)

        def VISIBLE(self):
            return self.getToken(SpeakQlParser.VISIBLE, 0)

        def WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(self):
            return self.getToken(SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0)

        def WEEK(self):
            return self.getToken(SpeakQlParser.WEEK, 0)

        def WEEKDAY(self):
            return self.getToken(SpeakQlParser.WEEKDAY, 0)

        def WEEKOFYEAR(self):
            return self.getToken(SpeakQlParser.WEEKOFYEAR, 0)

        def WEIGHT_STRING(self):
            return self.getToken(SpeakQlParser.WEIGHT_STRING, 0)

        def WITHIN(self):
            return self.getToken(SpeakQlParser.WITHIN, 0)

        def YEAR(self):
            return self.getToken(SpeakQlParser.YEAR, 0)

        def YEARWEEK(self):
            return self.getToken(SpeakQlParser.YEARWEEK, 0)

        def Y_FUNCTION(self):
            return self.getToken(SpeakQlParser.Y_FUNCTION, 0)

        def X_FUNCTION(self):
            return self.getToken(SpeakQlParser.X_FUNCTION, 0)

        def JSON_ARRAY(self):
            return self.getToken(SpeakQlParser.JSON_ARRAY, 0)

        def JSON_OBJECT(self):
            return self.getToken(SpeakQlParser.JSON_OBJECT, 0)

        def JSON_QUOTE(self):
            return self.getToken(SpeakQlParser.JSON_QUOTE, 0)

        def JSON_CONTAINS(self):
            return self.getToken(SpeakQlParser.JSON_CONTAINS, 0)

        def JSON_CONTAINS_PATH(self):
            return self.getToken(SpeakQlParser.JSON_CONTAINS_PATH, 0)

        def JSON_EXTRACT(self):
            return self.getToken(SpeakQlParser.JSON_EXTRACT, 0)

        def JSON_KEYS(self):
            return self.getToken(SpeakQlParser.JSON_KEYS, 0)

        def JSON_OVERLAPS(self):
            return self.getToken(SpeakQlParser.JSON_OVERLAPS, 0)

        def JSON_SEARCH(self):
            return self.getToken(SpeakQlParser.JSON_SEARCH, 0)

        def JSON_VALUE(self):
            return self.getToken(SpeakQlParser.JSON_VALUE, 0)

        def JSON_ARRAY_APPEND(self):
            return self.getToken(SpeakQlParser.JSON_ARRAY_APPEND, 0)

        def JSON_ARRAY_INSERT(self):
            return self.getToken(SpeakQlParser.JSON_ARRAY_INSERT, 0)

        def JSON_INSERT(self):
            return self.getToken(SpeakQlParser.JSON_INSERT, 0)

        def JSON_MERGE(self):
            return self.getToken(SpeakQlParser.JSON_MERGE, 0)

        def JSON_MERGE_PATCH(self):
            return self.getToken(SpeakQlParser.JSON_MERGE_PATCH, 0)

        def JSON_MERGE_PRESERVE(self):
            return self.getToken(SpeakQlParser.JSON_MERGE_PRESERVE, 0)

        def JSON_REMOVE(self):
            return self.getToken(SpeakQlParser.JSON_REMOVE, 0)

        def JSON_REPLACE(self):
            return self.getToken(SpeakQlParser.JSON_REPLACE, 0)

        def JSON_SET(self):
            return self.getToken(SpeakQlParser.JSON_SET, 0)

        def JSON_UNQUOTE(self):
            return self.getToken(SpeakQlParser.JSON_UNQUOTE, 0)

        def JSON_DEPTH(self):
            return self.getToken(SpeakQlParser.JSON_DEPTH, 0)

        def JSON_LENGTH(self):
            return self.getToken(SpeakQlParser.JSON_LENGTH, 0)

        def JSON_TYPE(self):
            return self.getToken(SpeakQlParser.JSON_TYPE, 0)

        def JSON_VALID(self):
            return self.getToken(SpeakQlParser.JSON_VALID, 0)

        def JSON_TABLE(self):
            return self.getToken(SpeakQlParser.JSON_TABLE, 0)

        def JSON_SCHEMA_VALID(self):
            return self.getToken(SpeakQlParser.JSON_SCHEMA_VALID, 0)

        def JSON_SCHEMA_VALIDATION_REPORT(self):
            return self.getToken(SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT, 0)

        def JSON_PRETTY(self):
            return self.getToken(SpeakQlParser.JSON_PRETTY, 0)

        def JSON_STORAGE_FREE(self):
            return self.getToken(SpeakQlParser.JSON_STORAGE_FREE, 0)

        def JSON_STORAGE_SIZE(self):
            return self.getToken(SpeakQlParser.JSON_STORAGE_SIZE, 0)

        def JSON_ARRAYAGG(self):
            return self.getToken(SpeakQlParser.JSON_ARRAYAGG, 0)

        def JSON_OBJECTAGG(self):
            return self.getToken(SpeakQlParser.JSON_OBJECTAGG, 0)

        def getRuleIndex(self):
            return SpeakQlParser.RULE_functionNameBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionNameBase" ):
                listener.enterFunctionNameBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionNameBase" ):
                listener.exitFunctionNameBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionNameBase" ):
                return visitor.visitFunctionNameBase(self)
            else:
                return visitor.visitChildren(self)




    def functionNameBase(self):

        localctx = SpeakQlParser.FunctionNameBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_functionNameBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6865
            _la = self._input.LA(1)
            if not(_la==SpeakQlParser.DATABASE or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (SpeakQlParser.LEFT - 106)) | (1 << (SpeakQlParser.RIGHT - 106)) | (1 << (SpeakQlParser.SCHEMA - 106)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (SpeakQlParser.DATE - 220)) | (1 << (SpeakQlParser.TIME - 220)) | (1 << (SpeakQlParser.TIMESTAMP - 220)) | (1 << (SpeakQlParser.YEAR - 220)) | (1 << (SpeakQlParser.JSON_ARRAY - 220)) | (1 << (SpeakQlParser.JSON_OBJECT - 220)) | (1 << (SpeakQlParser.JSON_QUOTE - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS - 220)) | (1 << (SpeakQlParser.JSON_CONTAINS_PATH - 220)) | (1 << (SpeakQlParser.JSON_EXTRACT - 220)) | (1 << (SpeakQlParser.JSON_KEYS - 220)) | (1 << (SpeakQlParser.JSON_OVERLAPS - 220)) | (1 << (SpeakQlParser.JSON_SEARCH - 220)) | (1 << (SpeakQlParser.JSON_VALUE - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_APPEND - 220)) | (1 << (SpeakQlParser.JSON_ARRAY_INSERT - 220)) | (1 << (SpeakQlParser.JSON_INSERT - 220)) | (1 << (SpeakQlParser.JSON_MERGE - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PATCH - 220)) | (1 << (SpeakQlParser.JSON_MERGE_PRESERVE - 220)) | (1 << (SpeakQlParser.JSON_REMOVE - 220)) | (1 << (SpeakQlParser.JSON_REPLACE - 220)) | (1 << (SpeakQlParser.JSON_SET - 220)) | (1 << (SpeakQlParser.JSON_UNQUOTE - 220)) | (1 << (SpeakQlParser.JSON_DEPTH - 220)) | (1 << (SpeakQlParser.JSON_LENGTH - 220)) | (1 << (SpeakQlParser.JSON_TYPE - 220)) | (1 << (SpeakQlParser.JSON_VALID - 220)) | (1 << (SpeakQlParser.JSON_TABLE - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALID - 220)) | (1 << (SpeakQlParser.JSON_SCHEMA_VALIDATION_REPORT - 220)) | (1 << (SpeakQlParser.JSON_PRETTY - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_FREE - 220)) | (1 << (SpeakQlParser.JSON_STORAGE_SIZE - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (SpeakQlParser.JSON_ARRAYAGG - 284)) | (1 << (SpeakQlParser.JSON_OBJECTAGG - 284)) | (1 << (SpeakQlParser.COUNT - 284)) | (1 << (SpeakQlParser.POSITION - 284)))) != 0) or _la==SpeakQlParser.INVISIBLE or ((((_la - 651)) & ~0x3f) == 0 and ((1 << (_la - 651)) & ((1 << (SpeakQlParser.VISIBLE - 651)) | (1 << (SpeakQlParser.QUARTER - 651)) | (1 << (SpeakQlParser.MONTH - 651)) | (1 << (SpeakQlParser.DAY - 651)) | (1 << (SpeakQlParser.HOUR - 651)) | (1 << (SpeakQlParser.MINUTE - 651)) | (1 << (SpeakQlParser.WEEK - 651)) | (1 << (SpeakQlParser.SECOND - 651)) | (1 << (SpeakQlParser.MICROSECOND - 651)) | (1 << (SpeakQlParser.SESSION_VARIABLES_ADMIN - 651)))) != 0) or ((((_la - 772)) & ~0x3f) == 0 and ((1 << (_la - 772)) & ((1 << (SpeakQlParser.GEOMETRYCOLLECTION - 772)) | (1 << (SpeakQlParser.LINESTRING - 772)) | (1 << (SpeakQlParser.MULTILINESTRING - 772)) | (1 << (SpeakQlParser.MULTIPOINT - 772)) | (1 << (SpeakQlParser.MULTIPOLYGON - 772)) | (1 << (SpeakQlParser.POINT - 772)) | (1 << (SpeakQlParser.POLYGON - 772)) | (1 << (SpeakQlParser.ABS - 772)) | (1 << (SpeakQlParser.ACOS - 772)) | (1 << (SpeakQlParser.ADDDATE - 772)) | (1 << (SpeakQlParser.ADDTIME - 772)) | (1 << (SpeakQlParser.AES_DECRYPT - 772)) | (1 << (SpeakQlParser.AES_ENCRYPT - 772)) | (1 << (SpeakQlParser.AREA - 772)) | (1 << (SpeakQlParser.ASBINARY - 772)) | (1 << (SpeakQlParser.ASIN - 772)) | (1 << (SpeakQlParser.ASTEXT - 772)) | (1 << (SpeakQlParser.ASWKB - 772)) | (1 << (SpeakQlParser.ASWKT - 772)) | (1 << (SpeakQlParser.ASYMMETRIC_DECRYPT - 772)) | (1 << (SpeakQlParser.ASYMMETRIC_DERIVE - 772)) | (1 << (SpeakQlParser.ASYMMETRIC_ENCRYPT - 772)) | (1 << (SpeakQlParser.ASYMMETRIC_SIGN - 772)) | (1 << (SpeakQlParser.ASYMMETRIC_VERIFY - 772)) | (1 << (SpeakQlParser.ATAN - 772)) | (1 << (SpeakQlParser.ATAN2 - 772)) | (1 << (SpeakQlParser.BENCHMARK - 772)) | (1 << (SpeakQlParser.BIN - 772)) | (1 << (SpeakQlParser.BIT_COUNT - 772)) | (1 << (SpeakQlParser.BIT_LENGTH - 772)) | (1 << (SpeakQlParser.BUFFER - 772)) | (1 << (SpeakQlParser.CEIL - 772)) | (1 << (SpeakQlParser.CEILING - 772)) | (1 << (SpeakQlParser.CENTROID - 772)) | (1 << (SpeakQlParser.CHARACTER_LENGTH - 772)) | (1 << (SpeakQlParser.CHARSET - 772)) | (1 << (SpeakQlParser.CHAR_LENGTH - 772)) | (1 << (SpeakQlParser.COERCIBILITY - 772)) | (1 << (SpeakQlParser.COLLATION - 772)) | (1 << (SpeakQlParser.COMPRESS - 772)) | (1 << (SpeakQlParser.CONCAT - 772)) | (1 << (SpeakQlParser.CONCAT_WS - 772)) | (1 << (SpeakQlParser.CONNECTION_ID - 772)) | (1 << (SpeakQlParser.CONV - 772)) | (1 << (SpeakQlParser.CONVERT_TZ - 772)) | (1 << (SpeakQlParser.COS - 772)) | (1 << (SpeakQlParser.COT - 772)) | (1 << (SpeakQlParser.CRC32 - 772)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PRIV_KEY - 772)) | (1 << (SpeakQlParser.CREATE_ASYMMETRIC_PUB_KEY - 772)) | (1 << (SpeakQlParser.CREATE_DH_PARAMETERS - 772)) | (1 << (SpeakQlParser.CREATE_DIGEST - 772)) | (1 << (SpeakQlParser.CROSSES - 772)) | (1 << (SpeakQlParser.DATEDIFF - 772)) | (1 << (SpeakQlParser.DATE_FORMAT - 772)) | (1 << (SpeakQlParser.DAYNAME - 772)) | (1 << (SpeakQlParser.DAYOFMONTH - 772)) | (1 << (SpeakQlParser.DAYOFWEEK - 772)) | (1 << (SpeakQlParser.DAYOFYEAR - 772)) | (1 << (SpeakQlParser.DECODE - 772)) | (1 << (SpeakQlParser.DEGREES - 772)))) != 0) or ((((_la - 836)) & ~0x3f) == 0 and ((1 << (_la - 836)) & ((1 << (SpeakQlParser.DES_DECRYPT - 836)) | (1 << (SpeakQlParser.DES_ENCRYPT - 836)) | (1 << (SpeakQlParser.DIMENSION - 836)) | (1 << (SpeakQlParser.DISJOINT - 836)) | (1 << (SpeakQlParser.ELT - 836)) | (1 << (SpeakQlParser.ENCODE - 836)) | (1 << (SpeakQlParser.ENCRYPT - 836)) | (1 << (SpeakQlParser.ENDPOINT - 836)) | (1 << (SpeakQlParser.ENVELOPE - 836)) | (1 << (SpeakQlParser.EQUALS - 836)) | (1 << (SpeakQlParser.EXP - 836)) | (1 << (SpeakQlParser.EXPORT_SET - 836)) | (1 << (SpeakQlParser.EXTERIORRING - 836)) | (1 << (SpeakQlParser.EXTRACTVALUE - 836)) | (1 << (SpeakQlParser.FIELD - 836)) | (1 << (SpeakQlParser.FIND_IN_SET - 836)) | (1 << (SpeakQlParser.FLOOR - 836)) | (1 << (SpeakQlParser.FORMAT - 836)) | (1 << (SpeakQlParser.FOUND_ROWS - 836)) | (1 << (SpeakQlParser.FROM_BASE64 - 836)) | (1 << (SpeakQlParser.FROM_DAYS - 836)) | (1 << (SpeakQlParser.FROM_UNIXTIME - 836)) | (1 << (SpeakQlParser.GEOMCOLLFROMTEXT - 836)) | (1 << (SpeakQlParser.GEOMCOLLFROMWKB - 836)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1 << (SpeakQlParser.GEOMETRYCOLLECTIONFROMWKB - 836)) | (1 << (SpeakQlParser.GEOMETRYFROMTEXT - 836)) | (1 << (SpeakQlParser.GEOMETRYFROMWKB - 836)) | (1 << (SpeakQlParser.GEOMETRYN - 836)) | (1 << (SpeakQlParser.GEOMETRYTYPE - 836)) | (1 << (SpeakQlParser.GEOMFROMTEXT - 836)) | (1 << (SpeakQlParser.GEOMFROMWKB - 836)) | (1 << (SpeakQlParser.GET_FORMAT - 836)) | (1 << (SpeakQlParser.GET_LOCK - 836)) | (1 << (SpeakQlParser.GLENGTH - 836)) | (1 << (SpeakQlParser.GREATEST - 836)) | (1 << (SpeakQlParser.GTID_SUBSET - 836)) | (1 << (SpeakQlParser.GTID_SUBTRACT - 836)) | (1 << (SpeakQlParser.HEX - 836)) | (1 << (SpeakQlParser.IFNULL - 836)) | (1 << (SpeakQlParser.INET6_ATON - 836)) | (1 << (SpeakQlParser.INET6_NTOA - 836)) | (1 << (SpeakQlParser.INET_ATON - 836)) | (1 << (SpeakQlParser.INET_NTOA - 836)) | (1 << (SpeakQlParser.INSTR - 836)) | (1 << (SpeakQlParser.INTERIORRINGN - 836)) | (1 << (SpeakQlParser.INTERSECTS - 836)) | (1 << (SpeakQlParser.ISCLOSED - 836)) | (1 << (SpeakQlParser.ISEMPTY - 836)) | (1 << (SpeakQlParser.ISNULL - 836)) | (1 << (SpeakQlParser.ISSIMPLE - 836)) | (1 << (SpeakQlParser.IS_FREE_LOCK - 836)) | (1 << (SpeakQlParser.IS_IPV4 - 836)) | (1 << (SpeakQlParser.IS_IPV4_COMPAT - 836)) | (1 << (SpeakQlParser.IS_IPV4_MAPPED - 836)) | (1 << (SpeakQlParser.IS_IPV6 - 836)) | (1 << (SpeakQlParser.IS_USED_LOCK - 836)) | (1 << (SpeakQlParser.LAST_INSERT_ID - 836)) | (1 << (SpeakQlParser.LCASE - 836)) | (1 << (SpeakQlParser.LEAST - 836)) | (1 << (SpeakQlParser.LENGTH - 836)) | (1 << (SpeakQlParser.LINEFROMTEXT - 836)) | (1 << (SpeakQlParser.LINEFROMWKB - 836)) | (1 << (SpeakQlParser.LINESTRINGFROMTEXT - 836)))) != 0) or ((((_la - 900)) & ~0x3f) == 0 and ((1 << (_la - 900)) & ((1 << (SpeakQlParser.LINESTRINGFROMWKB - 900)) | (1 << (SpeakQlParser.LN - 900)) | (1 << (SpeakQlParser.LOAD_FILE - 900)) | (1 << (SpeakQlParser.LOCATE - 900)) | (1 << (SpeakQlParser.LOG - 900)) | (1 << (SpeakQlParser.LOG10 - 900)) | (1 << (SpeakQlParser.LOG2 - 900)) | (1 << (SpeakQlParser.LOWER - 900)) | (1 << (SpeakQlParser.LPAD - 900)) | (1 << (SpeakQlParser.LTRIM - 900)) | (1 << (SpeakQlParser.MAKEDATE - 900)) | (1 << (SpeakQlParser.MAKETIME - 900)) | (1 << (SpeakQlParser.MAKE_SET - 900)) | (1 << (SpeakQlParser.MASTER_POS_WAIT - 900)) | (1 << (SpeakQlParser.MBRCONTAINS - 900)) | (1 << (SpeakQlParser.MBRDISJOINT - 900)) | (1 << (SpeakQlParser.MBREQUAL - 900)) | (1 << (SpeakQlParser.MBRINTERSECTS - 900)) | (1 << (SpeakQlParser.MBROVERLAPS - 900)) | (1 << (SpeakQlParser.MBRTOUCHES - 900)) | (1 << (SpeakQlParser.MBRWITHIN - 900)) | (1 << (SpeakQlParser.MD5 - 900)) | (1 << (SpeakQlParser.MLINEFROMTEXT - 900)) | (1 << (SpeakQlParser.MLINEFROMWKB - 900)) | (1 << (SpeakQlParser.MONTHNAME - 900)) | (1 << (SpeakQlParser.MPOINTFROMTEXT - 900)) | (1 << (SpeakQlParser.MPOINTFROMWKB - 900)) | (1 << (SpeakQlParser.MPOLYFROMTEXT - 900)) | (1 << (SpeakQlParser.MPOLYFROMWKB - 900)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMTEXT - 900)) | (1 << (SpeakQlParser.MULTILINESTRINGFROMWKB - 900)) | (1 << (SpeakQlParser.MULTIPOINTFROMTEXT - 900)) | (1 << (SpeakQlParser.MULTIPOINTFROMWKB - 900)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMTEXT - 900)) | (1 << (SpeakQlParser.MULTIPOLYGONFROMWKB - 900)) | (1 << (SpeakQlParser.NAME_CONST - 900)) | (1 << (SpeakQlParser.NULLIF - 900)) | (1 << (SpeakQlParser.NUMGEOMETRIES - 900)) | (1 << (SpeakQlParser.NUMINTERIORRINGS - 900)) | (1 << (SpeakQlParser.NUMPOINTS - 900)) | (1 << (SpeakQlParser.OCT - 900)) | (1 << (SpeakQlParser.OCTET_LENGTH - 900)) | (1 << (SpeakQlParser.ORD - 900)) | (1 << (SpeakQlParser.OVERLAPS - 900)) | (1 << (SpeakQlParser.PERIOD_ADD - 900)) | (1 << (SpeakQlParser.PERIOD_DIFF - 900)) | (1 << (SpeakQlParser.PI - 900)) | (1 << (SpeakQlParser.POINTFROMTEXT - 900)) | (1 << (SpeakQlParser.POINTFROMWKB - 900)) | (1 << (SpeakQlParser.POINTN - 900)) | (1 << (SpeakQlParser.POLYFROMTEXT - 900)) | (1 << (SpeakQlParser.POLYFROMWKB - 900)) | (1 << (SpeakQlParser.POLYGONFROMTEXT - 900)) | (1 << (SpeakQlParser.POLYGONFROMWKB - 900)) | (1 << (SpeakQlParser.POW - 900)) | (1 << (SpeakQlParser.POWER - 900)) | (1 << (SpeakQlParser.QUOTE - 900)) | (1 << (SpeakQlParser.RADIANS - 900)) | (1 << (SpeakQlParser.RAND - 900)) | (1 << (SpeakQlParser.RANDOM_BYTES - 900)) | (1 << (SpeakQlParser.RELEASE_LOCK - 900)) | (1 << (SpeakQlParser.REVERSE - 900)) | (1 << (SpeakQlParser.ROUND - 900)) | (1 << (SpeakQlParser.ROW_COUNT - 900)))) != 0) or ((((_la - 964)) & ~0x3f) == 0 and ((1 << (_la - 964)) & ((1 << (SpeakQlParser.RPAD - 964)) | (1 << (SpeakQlParser.RTRIM - 964)) | (1 << (SpeakQlParser.SEC_TO_TIME - 964)) | (1 << (SpeakQlParser.SESSION_USER - 964)) | (1 << (SpeakQlParser.SHA - 964)) | (1 << (SpeakQlParser.SHA1 - 964)) | (1 << (SpeakQlParser.SHA2 - 964)) | (1 << (SpeakQlParser.SIGN - 964)) | (1 << (SpeakQlParser.SIN - 964)) | (1 << (SpeakQlParser.SLEEP - 964)) | (1 << (SpeakQlParser.SOUNDEX - 964)) | (1 << (SpeakQlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 964)) | (1 << (SpeakQlParser.SQRT - 964)) | (1 << (SpeakQlParser.SRID - 964)) | (1 << (SpeakQlParser.STARTPOINT - 964)) | (1 << (SpeakQlParser.STRCMP - 964)) | (1 << (SpeakQlParser.STR_TO_DATE - 964)) | (1 << (SpeakQlParser.ST_AREA - 964)) | (1 << (SpeakQlParser.ST_ASBINARY - 964)) | (1 << (SpeakQlParser.ST_ASTEXT - 964)) | (1 << (SpeakQlParser.ST_ASWKB - 964)) | (1 << (SpeakQlParser.ST_ASWKT - 964)) | (1 << (SpeakQlParser.ST_BUFFER - 964)) | (1 << (SpeakQlParser.ST_CENTROID - 964)) | (1 << (SpeakQlParser.ST_CONTAINS - 964)) | (1 << (SpeakQlParser.ST_CROSSES - 964)) | (1 << (SpeakQlParser.ST_DIFFERENCE - 964)) | (1 << (SpeakQlParser.ST_DIMENSION - 964)) | (1 << (SpeakQlParser.ST_DISJOINT - 964)) | (1 << (SpeakQlParser.ST_DISTANCE - 964)) | (1 << (SpeakQlParser.ST_ENDPOINT - 964)) | (1 << (SpeakQlParser.ST_ENVELOPE - 964)) | (1 << (SpeakQlParser.ST_EQUALS - 964)) | (1 << (SpeakQlParser.ST_EXTERIORRING - 964)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTEXT - 964)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMTXT - 964)) | (1 << (SpeakQlParser.ST_GEOMCOLLFROMWKB - 964)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 964)) | (1 << (SpeakQlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 964)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMTEXT - 964)) | (1 << (SpeakQlParser.ST_GEOMETRYFROMWKB - 964)) | (1 << (SpeakQlParser.ST_GEOMETRYN - 964)) | (1 << (SpeakQlParser.ST_GEOMETRYTYPE - 964)) | (1 << (SpeakQlParser.ST_GEOMFROMTEXT - 964)) | (1 << (SpeakQlParser.ST_GEOMFROMWKB - 964)) | (1 << (SpeakQlParser.ST_INTERIORRINGN - 964)) | (1 << (SpeakQlParser.ST_INTERSECTION - 964)) | (1 << (SpeakQlParser.ST_INTERSECTS - 964)) | (1 << (SpeakQlParser.ST_ISCLOSED - 964)) | (1 << (SpeakQlParser.ST_ISEMPTY - 964)) | (1 << (SpeakQlParser.ST_ISSIMPLE - 964)) | (1 << (SpeakQlParser.ST_LINEFROMTEXT - 964)) | (1 << (SpeakQlParser.ST_LINEFROMWKB - 964)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMTEXT - 964)) | (1 << (SpeakQlParser.ST_LINESTRINGFROMWKB - 964)) | (1 << (SpeakQlParser.ST_NUMGEOMETRIES - 964)) | (1 << (SpeakQlParser.ST_NUMINTERIORRING - 964)) | (1 << (SpeakQlParser.ST_NUMINTERIORRINGS - 964)) | (1 << (SpeakQlParser.ST_NUMPOINTS - 964)) | (1 << (SpeakQlParser.ST_OVERLAPS - 964)) | (1 << (SpeakQlParser.ST_POINTFROMTEXT - 964)) | (1 << (SpeakQlParser.ST_POINTFROMWKB - 964)) | (1 << (SpeakQlParser.ST_POINTN - 964)))) != 0) or ((((_la - 1028)) & ~0x3f) == 0 and ((1 << (_la - 1028)) & ((1 << (SpeakQlParser.ST_POLYFROMTEXT - 1028)) | (1 << (SpeakQlParser.ST_POLYFROMWKB - 1028)) | (1 << (SpeakQlParser.ST_POLYGONFROMTEXT - 1028)) | (1 << (SpeakQlParser.ST_POLYGONFROMWKB - 1028)) | (1 << (SpeakQlParser.ST_SRID - 1028)) | (1 << (SpeakQlParser.ST_STARTPOINT - 1028)) | (1 << (SpeakQlParser.ST_SYMDIFFERENCE - 1028)) | (1 << (SpeakQlParser.ST_TOUCHES - 1028)) | (1 << (SpeakQlParser.ST_UNION - 1028)) | (1 << (SpeakQlParser.ST_WITHIN - 1028)) | (1 << (SpeakQlParser.ST_X - 1028)) | (1 << (SpeakQlParser.ST_Y - 1028)) | (1 << (SpeakQlParser.SUBDATE - 1028)) | (1 << (SpeakQlParser.SUBSTRING_INDEX - 1028)) | (1 << (SpeakQlParser.SUBTIME - 1028)) | (1 << (SpeakQlParser.SYSTEM_USER - 1028)) | (1 << (SpeakQlParser.TAN - 1028)) | (1 << (SpeakQlParser.TIMEDIFF - 1028)) | (1 << (SpeakQlParser.TIMESTAMPADD - 1028)) | (1 << (SpeakQlParser.TIMESTAMPDIFF - 1028)) | (1 << (SpeakQlParser.TIME_FORMAT - 1028)) | (1 << (SpeakQlParser.TIME_TO_SEC - 1028)) | (1 << (SpeakQlParser.TOUCHES - 1028)) | (1 << (SpeakQlParser.TO_BASE64 - 1028)) | (1 << (SpeakQlParser.TO_DAYS - 1028)) | (1 << (SpeakQlParser.TO_SECONDS - 1028)) | (1 << (SpeakQlParser.UCASE - 1028)) | (1 << (SpeakQlParser.UNCOMPRESS - 1028)) | (1 << (SpeakQlParser.UNCOMPRESSED_LENGTH - 1028)) | (1 << (SpeakQlParser.UNHEX - 1028)) | (1 << (SpeakQlParser.UNIX_TIMESTAMP - 1028)) | (1 << (SpeakQlParser.UPDATEXML - 1028)) | (1 << (SpeakQlParser.UPPER - 1028)) | (1 << (SpeakQlParser.UUID - 1028)) | (1 << (SpeakQlParser.UUID_SHORT - 1028)) | (1 << (SpeakQlParser.VALIDATE_PASSWORD_STRENGTH - 1028)) | (1 << (SpeakQlParser.VERSION - 1028)) | (1 << (SpeakQlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1028)) | (1 << (SpeakQlParser.WEEKDAY - 1028)) | (1 << (SpeakQlParser.WEEKOFYEAR - 1028)) | (1 << (SpeakQlParser.WEIGHT_STRING - 1028)) | (1 << (SpeakQlParser.WITHIN - 1028)) | (1 << (SpeakQlParser.YEARWEEK - 1028)) | (1 << (SpeakQlParser.Y_FUNCTION - 1028)) | (1 << (SpeakQlParser.X_FUNCTION - 1028)) | (1 << (SpeakQlParser.MOD - 1028)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[325] = self.expression_sempred
        self._predicates[326] = self.predicate_sempred
        self._predicates[327] = self.expressionAtom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def predicate_sempred(self, localctx:PredicateContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def expressionAtom_sempred(self, localctx:ExpressionAtomContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 12)
         




